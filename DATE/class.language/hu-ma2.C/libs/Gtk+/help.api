
#.# gdk

gchar  *gdk_get_display_arg_name (void );	# Gets the display name specified in the command line arguments passedto gdk_init() or gdk_parse_args(), if any.
	return:		#  the display name, if specified explicitly,otherwise NULL this string is owned by GTK+ and must not bemodified or freed.  
void gdk_notify_startup_complete (void );	# Indicates to the GUI environment that the application has finishedloading. If the applications opens windows, this function isnormally called after opening the application’s initial set ofwindows.
void gdk_notify_startup_complete_with_id (const gchar *startup_id);	# Indicates to the GUI environment that the application hasfinished loading, using a given identifier.
	startup_id		# a startup-notification identifier, for whichnotification process should be completed
void gdk_set_allowed_backends (const gchar *backends);	# Sets a list of backends that GDK should try to use.
	backends		# a comma-separated list of backends
gchar  *gdk_get_program_class (void );	# Gets the program class. Unless the program class has explicitlybeen set with gdk_set_program_class() or with the --classcommandline option, the default value is the program name (determinedwith g_get_prgname() ) with the first character converted to uppercase.
	return:		#  the program class. 
void gdk_set_program_class (const gchar *program_class);	# Sets the program class. The X11 backend uses the program class to setthe class name part of the WM_CLASS property ontoplevel windows; see the ICCCM.
	program_class		# a string.
void gdk_flush (void );	# Flushes the output buffers of all display connections and waitsuntil all requests have been processed.This is rarely needed by applications.
void gdk_set_double_click_time (guint msec);	# Set the double click time for the default display. Seegdk_display_set_double_click_time() . See also gdk_display_set_double_click_distance() .Applications should not set this, it is a global user-configured setting.
	msec		# double click time in milliseconds (thousandths of a second)
void gdk_beep (void );	# Emits a short beep on the default display.
void gdk_error_trap_push (void );	# This function allows X errors to be trapped instead of the normalbehavior of exiting the application. It should only be used if itis not possible to avoid the X error in any other way. Errors areignored on all GdkDisplay currently known to theGdkDisplayManager . If you don’t care which error happens and justwant to ignore everything, pop with gdk_error_trap_pop_ignored() .If you need the error code, use gdk_error_trap_pop() which may haveto block and wait for the error to arrive from the X server.
gint gdk_error_trap_pop (void );	# Removes an error trap pushed with gdk_error_trap_push() .May block until an error has been definitively receivedor not received from the X server. gdk_error_trap_pop_ignored() is preferred if you don’t need to know whether an erroroccurred, because it never has to block. If you don'tneed the return value of gdk_error_trap_pop() , usegdk_error_trap_pop_ignored() .
	return:		#  X error code or 0 on success 
void gdk_error_trap_pop_ignored (void );	# Removes an error trap pushed with gdk_error_trap_push() , butwithout bothering to wait and see whether an error occurred. If anerror arrives later asynchronously that was triggered while thetrap was pushed, that error will be ignored.
GdkDisplayManager  *gdk_display_manager_get (void );	# Gets the singleton GdkDisplayManager object.
	return:		#  The global GdkDisplayManager singleton;gdk_parse_args(), gdk_init(), or gdk_init_check() must havebeen called first.  
GdkDisplay  *gdk_display_manager_get_default_display (GdkDisplayManager *manager);	# Gets the default GdkDisplay .
	manager		# a GdkDisplayManager 
	return:		#  a GdkDisplay , or NULL ifthere is no default display.  
void gdk_display_manager_set_default_display (GdkDisplayManager *manager, GdkDisplay *display);	# Sets display as the default display.
	manager		# a GdkDisplayManager 
	display		# a GdkDisplay 
GSList  *gdk_display_manager_list_displays (GdkDisplayManager *manager);	# List all currently open displays.
	manager		# a GdkDisplayManager 
	return:		#  a newlyallocated GSList of GdkDisplay objects. Free with g_slist_free() when you are done with it.  
GdkDisplay  *gdk_display_manager_open_display (GdkDisplayManager *manager, const gchar *name);	# Opens a display.
	manager		# a GdkDisplayManager 
	name		# the name of the display to open
	return:		#  a GdkDisplay , or NULL if thedisplay could not be opened.  
GdkDisplay  *gdk_display_open (const gchar *display_name);	# Opens a display.
	display_name		# the name of the display to open
	return:		#  a GdkDisplay , or NULL if thedisplay could not be opened.  
GdkDisplay  *gdk_display_get_default (void );	# Gets the default GdkDisplay . This is a conveniencefunction for:gdk_display_manager_get_default_display (gdk_display_manager_get() ).
	return:		#  a GdkDisplay , or NULL ifthere is no default display.  
gchar  *gdk_display_get_name (GdkDisplay *display);	# Gets the name of the display.
	display		# a GdkDisplay 
	return:		#  a string representing the display name. This string is ownedby GDK and should not be modified or freed. 
GdkScreen  *gdk_display_get_default_screen (GdkDisplay *display);	# Get the default GdkScreen for display.
	display		# a GdkDisplay 
	return:		#  the default GdkScreen object for display.  
GdkDeviceManager  *gdk_display_get_device_manager (GdkDisplay *display);	# gdk_display_get_device_manager has been deprecated since version 3.20. and should not be used in newly-written code.
	display		# a GdkDisplay .
	return:		#  A GdkDeviceManager , orNULL . This memory is owned by GDK and must not be freedor unreferenced.  
gboolean gdk_display_device_is_grabbed (GdkDisplay *display, GdkDevice *device);	# Returns TRUE if there is an ongoing grab on device for display.
	display		# a GdkDisplay 
	device		# a GdkDevice 
	return:		#  TRUE if there is a grab in effect for device. 
void gdk_display_beep (GdkDisplay *display);	# Emits a short beep on display
	display		# a GdkDisplay 
void gdk_display_sync (GdkDisplay *display);	# Flushes any requests queued for the windowing system and waits until allrequests have been handled. This is often used for making sure that thedisplay is synchronized with the current state of the program. Callinggdk_display_sync() before gdk_error_trap_pop() makes sure that any errorsgenerated from earlier requests are handled before the error trap isremoved.
	display		# a GdkDisplay 
void gdk_display_flush (GdkDisplay *display);	# Flushes any requests queued for the windowing system; this happens automaticallywhen the main loop blocks waiting for new events, but if your applicationis drawing without returning control to the main loop, you may needto call this function explicitly. A common case where this functionneeds to be called is when an application is executing drawing commandsfrom a thread other than the thread where the main loop is running.
	display		# a GdkDisplay 
void gdk_display_close (GdkDisplay *display);	# Closes the connection to the windowing system for the given display,and cleans up associated resources.
	display		# a GdkDisplay 
gboolean gdk_display_is_closed (GdkDisplay *display);	# Finds out if the display has been closed.
	display		# a GdkDisplay 
	return:		#  TRUE if the display is closed. 
GdkEvent  *gdk_display_get_event (GdkDisplay *display);	# Gets the next GdkEvent to be processed for display, fetching events from thewindowing system if necessary.
	display		# a GdkDisplay 
	return:		#  the next GdkEvent to be processed, or NULL if no events are pending. The returned GdkEvent should be freedwith gdk_event_free() .  
GdkEvent  *gdk_display_peek_event (GdkDisplay *display);	# Gets a copy of the first GdkEvent in the display’s event queue, withoutremoving the event from the queue. (Note that this function willnot get more events from the windowing system. It only checks the eventsthat have already been moved to the GDK event queue.)
	display		# a GdkDisplay 
	return:		#  a copy of the first GdkEvent on the eventqueue, or NULL if no events are in the queue. The returnedGdkEvent should be freed with gdk_event_free() .  
void gdk_display_put_event (GdkDisplay *display, const GdkEvent *event);	# Appends a copy of the given event onto the front of the eventqueue for display.
	display		# a GdkDisplay 
	event		# a GdkEvent .
gboolean gdk_display_has_pending (GdkDisplay *display);	# Returns whether the display has events that are waitingto be processed.
	display		# a GdkDisplay 
	return:		#  TRUE if there are events ready to be processed. 
void gdk_display_set_double_click_time (GdkDisplay *display, guint msec);	# Sets the double click time (two clicks within this time intervalcount as a double click and result in a GDK_2BUTTON_PRESS event).Applications should not set this, it is a global user-configured setting.
	display		# a GdkDisplay 
	msec		# double click time in milliseconds (thousandths of a second) 
void gdk_display_set_double_click_distance (GdkDisplay *display, guint distance);	# Sets the double click distance (two clicks within this distancecount as a double click and result in a GDK_2BUTTON_PRESS event).See also gdk_display_set_double_click_time() .Applications should not set this, it is a global user-configured setting.
	display		# a GdkDisplay 
	distance		# distance in pixels
gboolean gdk_display_is_rgba (GdkDisplay *display);	# Returns wether windows on this display are created with analpha channel.
	display		# a GdkDisplay 
	return:		#  TRUE if windows are created with an alpha channel orFALSE if the display does not support this functionality. 
gboolean gdk_display_is_composited (GdkDisplay *display);	# Returns whether windows can reasonably be expected to havetheir alpha channel drawn correctly on the screen. Checkgdk_display_is_rgba() for wether the display supports analpha channel.
	display		# a GdkDisplay 
	return:		#  Whether windows with RGBA visuals can reasonably beexpected to have their alpha channels drawn correctly on the screen. 
gboolean gdk_display_supports_cursor_color (GdkDisplay *display);	# Returns TRUE if multicolored cursors are supportedon display. Otherwise, cursors have only a forgroundand a background color.
	display		# a GdkDisplay 
	return:		#  whether cursors can have multiple colors. 
gboolean gdk_display_supports_cursor_alpha (GdkDisplay *display);	# Returns TRUE if cursors can use an 8bit alpha channelon display. Otherwise, cursors are restricted to bilevelalpha (i.e. a mask).
	display		# a GdkDisplay 
	return:		#  whether cursors can have alpha channels. 
guint gdk_display_get_default_cursor_size (GdkDisplay *display);	# Returns the default size to use for cursors on display.
	display		# a GdkDisplay 
	return:		#  the default cursor size. 
void gdk_display_get_maximal_cursor_size (GdkDisplay *display, guint *width, guint *height);	# Gets the maximal size to use for cursors on display.
	display		# a GdkDisplay 
	width		#  the return location for the maximal cursor width. 
	height		#  the return location for the maximal cursor height. 
GdkWindow  *gdk_display_get_default_group (GdkDisplay *display);	# Returns the default group leader window for all toplevel windowson display. This window is implicitly created by GDK.See gdk_window_set_group() .
	display		# a GdkDisplay 
	return:		#  The default group leader windowfor display.  
gboolean gdk_display_supports_selection_notification (GdkDisplay *display);	# Returns whether GdkEventOwnerChange events will besent when the owner of a selection changes.
	display		# a GdkDisplay 
	return:		#  whether GdkEventOwnerChange events willbe sent. 
gboolean gdk_display_request_selection_notification (GdkDisplay *display, GdkAtom selection);	# Request GdkEventOwnerChange events for ownership changesof the selection named by the given atom.
	display		# a GdkDisplay 
	selection		# the GdkAtom naming the selection for whichownership change notification is requested
	return:		#  whether GdkEventOwnerChange events willbe sent. 
gboolean gdk_display_supports_clipboard_persistence (GdkDisplay *display);	# Returns whether the speicifed display supports clipboardpersistance; i.e. if it’s possible to store the clipboard data after anapplication has quit. On X11 this checks if a clipboard daemon isrunning.
	display		# a GdkDisplay 
	return:		#  TRUE if the display supports clipboard persistance. 
void gdk_display_store_clipboard (GdkDisplay *display, GdkWindow *clipboard_window, guint32 time_, const GdkAtom *targets, gint n_targets);	# Issues a request to the clipboard manager to store theclipboard data. On X11, this is a special program that worksaccording to theFreeDesktop Clipboard Specification .
	display		# a GdkDisplay 
	clipboard_window		# a GdkWindow belonging to the clipboard owner
	time_		# a timestamp
	targets		#  an array of targetsthat should be saved, or NULL if all available targets should be saved. 
	n_targets		# length of the targetsarray
gboolean gdk_display_supports_shapes (GdkDisplay *display);	# Returns TRUE if gdk_window_shape_combine_mask() canbe used to create shaped windows on display.
	display		# a GdkDisplay 
	return:		#  TRUE if shaped windows are supported 
gboolean gdk_display_supports_input_shapes (GdkDisplay *display);	# Returns TRUE if gdk_window_input_shape_combine_mask() canbe used to modify the input shape of windows on display.
	display		# a GdkDisplay 
	return:		#  TRUE if windows with modified input shape are supported 
GdkAppLaunchContext  *gdk_display_get_app_launch_context (GdkDisplay *display);	# Returns a GdkAppLaunchContext suitable for launchingapplications on the given display.
	display		# a GdkDisplay 
	return:		#  a new GdkAppLaunchContext for display.Free with g_object_unref() when done.  
void gdk_display_notify_startup_complete (GdkDisplay *display, const gchar *startup_id);	# Indicates to the GUI environment that the application hasfinished loading, using a given identifier.
	display		# a GdkDisplay 
	startup_id		# a startup-notification identifier, for whichnotification process should be completed
GdkSeat  *gdk_display_get_default_seat (GdkDisplay *display);	# Returns the default GdkSeat for this display.
	display		# a GdkDisplay 
	return:		#  the default seat.  
GList  *gdk_display_list_seats (GdkDisplay *display);	# Returns the list of seats known to display.
	display		# a GdkDisplay 
	return:		#  thelist of seats known to the GdkDisplay .  
int gdk_display_get_n_monitors (GdkDisplay *display);	# Gets the number of monitors that belong to display.
	display		# a GdkDisplay 
	return:		#  the number of monitors 
GdkMonitor  *gdk_display_get_monitor (GdkDisplay *display, int monitor_num);	# Gets a monitor associated with this display.
	display		# a GdkDisplay 
	monitor_num		# number of the monitor
	return:		#  the GdkMonitor , or NULL ifmonitor_numis not a valid monitor number.  
GdkMonitor  *gdk_display_get_primary_monitor (GdkDisplay *display);	# Gets the primary monitor for the display.
	display		# a GdkDisplay 
	return:		#  the primary monitor, or any monitor if noprimary monitor is configured by the user.  
GdkMonitor  *gdk_display_get_monitor_at_point (GdkDisplay *display, int x, int y);	# Gets the monitor in which the point (x, y) is located,or a nearby monitor if the point is not in any monitor.
	display		# a GdkDisplay 
	x		# the x coordinate of the point
	y		# the y coordinate of the point
	return:		#  the monitor containing the point.  
GdkMonitor  *gdk_display_get_monitor_at_window (GdkDisplay *display, GdkWindow *window);	# Gets the monitor in which the largest area of windowresides, or a monitor close to window if it is outsideof all monitors.
	display		# a GdkDisplay 
	window		# a GdkWindow 
	return:		#  the monitor with the largest overlap with window.  
GdkScreen  *gdk_screen_get_default (void );	# Gets the default screen for the default display. (Seegdk_display_get_default() ).
	return:		#  a GdkScreen , or NULL ifthere is no default display.  
GdkWindow  *gdk_screen_get_root_window (GdkScreen *screen);	# Gets the root window of screen.
	screen		# a GdkScreen 
	return:		#  the root window.  
GdkDisplay  *gdk_screen_get_display (GdkScreen *screen);	# Gets the display to which the screen belongs.
	screen		# a GdkScreen 
	return:		#  the display to which screenbelongs.  
GList  *gdk_screen_get_toplevel_windows (GdkScreen *screen);	# Obtains a list of all toplevel windows known to GDK on the screen screen.A toplevel window is a child of the root window (seegdk_get_default_root_window() ).
	screen		# The GdkScreen where the toplevels are located.
	return:		#  list of toplevel windows, free with g_list_free() .  
gboolean gdk_screen_get_setting (GdkScreen *screen, const gchar *name, GValue *value);	# Retrieves a desktop-wide setting such as double-click timefor the GdkScreen screen.
	screen		# the GdkScreen where the setting is located
	name		# the name of the setting
	value		# location to store the value of the setting
	return:		#  TRUE if the setting existed and a value was storedin value, FALSE otherwise. 
gdouble gdk_screen_get_resolution (GdkScreen *screen);	# Gets the resolution for font handling on the screen; seegdk_screen_set_resolution() for full details.
	screen		# a GdkScreen 
	return:		#  the current resolution, or -1 if no resolutionhas been set. 
void gdk_screen_set_resolution (GdkScreen *screen, gdouble dpi);	# Sets the resolution for font handling on the screen. This is ascale factor between points specified in a PangoFontDescription and cairo units. The default value is 96, meaning that a 10 pointfont will be 13 units high. (10 * 96. / 72. = 13.3).
	screen		# a GdkScreen 
	dpi		# the resolution in “dots per inch”. (Physical inches aren’t actuallyinvolved; the terminology is conventional.)
void <span class="c_punctuation">( *GdkSeatGrabPrepareFunc<span class="c_punctuation">) (GdkSeat *seat, GdkWindow *window, gpointer user_data);	# Type of the callback used to set up window so it can begrabbed. A typical action would be ensuring the window isvisible, although there's room for other initializationactions.
	seat		# the GdkSeat being grabbed
	window		# the GdkWindow being grabbed
	user_data		# user data passed in 
GdkDisplay  *gdk_seat_get_display (GdkSeat *seat);	# Returns the GdkDisplay this seat belongs to.
	seat		# a GdkSeat 
	return:		#  a GdkDisplay . This object is owned by GTK+and must not be freed.  
GdkGrabStatus gdk_seat_grab (GdkSeat *seat, GdkWindow *window, GdkSeatCapabilities capabilities, gboolean owner_events, GdkCursor *cursor, const GdkEvent *event, GdkSeatGrabPrepareFunc prepare_func, gpointer prepare_func_data);	# Grabs the seat so that all events corresponding to the given capabilitiesare passed to this application until the seat is ungrabbed with gdk_seat_ungrab() ,or the window becomes hidden. This overrides any previous grab on theseat by this client.
	seat		# a GdkSeat 
	window		# the GdkWindow which will own the grab
	capabilities		# capabilities that will be grabbed
	owner_events		# if FALSE then all device events are reported with respect towindowand are only reported if selected by event_mask. IfTRUE then pointer events for this application are reportedas normal, but pointer events outside this application arereported with respect to windowand only if selected byevent_mask. In either mode, unreported events are discarded.
	cursor		#  the cursor to display while the grab is active. Ifthis is NULL then the normal cursors are used forwindowand its descendants, and the cursor for windowis usedelsewhere. 
	return:		#  GDK_GRAB_SUCCESS if the grab was successful. 
void gdk_seat_ungrab (GdkSeat *seat);	# Releases a grab added through gdk_seat_grab() .
	seat		# a GdkSeat 
GdkSeatCapabilities gdk_seat_get_capabilities (GdkSeat *seat);	# Returns the capabilities this GdkSeat currently has.
	seat		# a GdkSeat 
	return:		#  the seat capabilities 
GdkDevice  *gdk_seat_get_pointer (GdkSeat *seat);	# Returns the master device that routes pointer events.
	seat		# a GdkSeat 
	return:		#  a master GdkDevice with pointercapabilities. This object is owned by GTK+ and must not be freed.  
GdkDevice  *gdk_seat_get_keyboard (GdkSeat *seat);	# Returns the master device that routes keyboard events.
	seat		# a GdkSeat 
	return:		#  a master GdkDevice with keyboardcapabilities. This object is owned by GTK+ and must not be freed.  
GList  *gdk_seat_get_slaves (GdkSeat *seat, GdkSeatCapabilities capabilities);	# Returns the slave devices that match the given capabilities.
	seat		# a GdkSeat 
	capabilities		# capabilities to get devices for
	return:		#  A list of GdkDevices .The list must be freed with g_list_free() , the elements are ownedby GDK and must not be freed.  
GdkDisplay  *gdk_monitor_get_display (GdkMonitor *monitor);	# Gets the display that this monitor belongs to.
	monitor		# a GdkMonitor 
	return:		#  the display.  
void gdk_monitor_get_geometry (GdkMonitor *monitor, GdkRectangle *geometry);	# Retrieves the size and position of an individual monitor within thedisplay coordinate space. The returned geometry is in ”application pixels”,not in ”device pixels” (see gdk_monitor_get_scale_factor() ).
	monitor		# a GdkMonitor 
	geometry		#  a GdkRectangle to be filled wiht the monitor geometry. 
void gdk_monitor_get_workarea (GdkMonitor *monitor, GdkRectangle *workarea);	# Retrieves the size and position of the “work area” on a monitorwithin the display coordinate space. The returned geometry is in”application pixels”, not in ”device pixels” (seegdk_monitor_get_scale_factor() ).
	monitor		# a GdkMonitor 
	workarea		#  a GdkRectangle to be filled withthe monitor workarea. 
int gdk_monitor_get_width_mm (GdkMonitor *monitor);	# Gets the width in millimeters of the monitor.
	monitor		# a GdkMonitor 
	return:		#  the physical width of the monitor 
int gdk_monitor_get_height_mm (GdkMonitor *monitor);	# Gets the height in millimeters of the monitor.
	monitor		# a GdkMonitor 
	return:		#  the physical height of the monitor 
char  *gdk_monitor_get_manufacturer (GdkMonitor *monitor);	# Gets the name of the monitor's manufacturer, if available.
	monitor		# a GdkMonitor 
	return:		#  the name of the manufacturer, or NULL .  
char  *gdk_monitor_get_model (GdkMonitor *monitor);	# Gets the a string identifying the monitor model, if available.
	monitor		# a GdkMonitor 
	return:		#  the monitor model, or NULL .  
int gdk_monitor_get_scale_factor (GdkMonitor *monitor);	# Gets the internal scale factor that maps from monitor coordinatesto the actual device pixels. On traditional systems this is 1, buton very high density outputs this can be a higher value (often 2).
	monitor		# a GdkMonitor 
	return:		#  the scale factor 
int gdk_monitor_get_refresh_rate (GdkMonitor *monitor);	# Gets the refresh rate of the monitor, if available.
	monitor		# a GdkMonitor 
	return:		#  the refresh rate in milli-Hertz, or 0 
GdkSubpixelLayout gdk_monitor_get_subpixel_layout (GdkMonitor *monitor);	# Gets information about the layout of red, green and blueprimaries for each pixel in this monitor, if available.
	monitor		# a GdkMonitor 
	return:		#  the subpixel layout 
gboolean gdk_monitor_is_primary (GdkMonitor *monitor);	# Gets whether this monitor should be considered primary(see gdk_display_get_primary_monitor() ).
	monitor		# a GdkMonitor 
	return:		#  TRUE if monitoris primary 
gchar  *gdk_device_get_name (GdkDevice *device);	# Determines the name of the device.
	device		# a GdkDevice 
	return:		#  a name 
gchar  *gdk_device_get_vendor_id (GdkDevice *device);	# Returns the vendor ID of this device, or NULL if this information couldn'tbe obtained. This ID is retrieved from the device, and is thus constant forit.
	device		# a slave GdkDevice 
	return:		#  the vendor ID, or NULL .  
gchar  *gdk_device_get_product_id (GdkDevice *device);	# Returns the product ID of this device, or NULL if this information couldn'tbe obtained. This ID is retrieved from the device, and is thus constant forit. See gdk_device_get_vendor_id() for more information.
	device		# a slave GdkDevice 
	return:		#  the product ID, or NULL .  
GdkInputSource gdk_device_get_source (GdkDevice *device);	# Determines the type of the device.
	device		# a GdkDevice 
	return:		#  a GdkInputSource  
gboolean gdk_device_set_mode (GdkDevice *device, GdkInputMode mode);	# Sets a the mode of an input device. The mode controls if thedevice is active and whether the device’s range is mapped to theentire screen or to a single window.
	device		# a GdkDevice .
	mode		# the input mode.
	return:		#  TRUE if the mode was successfully changed. 
GdkInputMode gdk_device_get_mode (GdkDevice *device);	# Determines the mode of the device.
	device		# a GdkDevice 
	return:		#  a GdkInputSource  
void gdk_device_set_key (GdkDevice *device, guint index_, guint keyval, GdkModifierType modifiers);	# Specifies the X key event to generate when a macro button of a deviceis pressed.
	device		# a GdkDevice 
	index_		# the index of the macro button to set
	keyval		# the keyval to generate
	modifiers		# the modifiers to set
gboolean gdk_device_get_key (GdkDevice *device, guint index_, guint *keyval, GdkModifierType *modifiers);	# If index_ has a valid keyval, this function will return TRUE and fill in keyval and modifiers with the keyval settings.
	device		# a GdkDevice .
	index_		# the index of the macro button to get.
	keyval		#  return value for the keyval. 
	return:		#  TRUE if keyval is set for index. 
void gdk_device_set_axis_use (GdkDevice *device, guint index_, GdkAxisUse use);	# Specifies how an axis of a device is used.
	device		# a pointer GdkDevice 
	index_		# the index of the axis
	use		# specifies how the axis is used
GdkAxisUse gdk_device_get_axis_use (GdkDevice *device, guint index_);	# Returns the axis use for index_.
	device		# a pointer GdkDevice .
	index_		# the index of the axis.
	return:		#  a GdkAxisUse specifying how the axis is used. 
GdkDevice  *gdk_device_get_associated_device (GdkDevice *device);	# Returns the associated device to device, if device is of typeGDK_DEVICE_TYPE_MASTER , it will return the paired pointer orkeyboard.
	device		# a GdkDevice 
	return:		#  The associated device, orNULL .  
GList  *gdk_device_list_slave_devices (GdkDevice *device);	# If the device if of type GDK_DEVICE_TYPE_MASTER , it will returnthe list of slave devices attached to it, otherwise it will returnNULL 
	device		# a GdkDevice 
	return:		#  the list of slave devices, or NULL . The list must befreed with g_list_free() , the contents of the list areowned by GTK+ and should not be freed.  
GdkDeviceType gdk_device_get_device_type (GdkDevice *device);	# Returns the device type for device.
	device		# a GdkDevice 
	return:		#  the GdkDeviceType for device. 
GdkDisplay  *gdk_device_get_display (GdkDevice *device);	# Returns the GdkDisplay to which device pertains.
	device		# a GdkDevice 
	return:		#  a GdkDisplay . This memory is ownedby GTK+, and must not be freed or unreffed.  
gboolean gdk_device_get_has_cursor (GdkDevice *device);	# Determines whether the pointer follows device motion.This is not meaningful for keyboard devices, which don't have a pointer.
	device		# a GdkDevice 
	return:		#  TRUE if the pointer follows device motion 
gint gdk_device_get_n_axes (GdkDevice *device);	# Returns the number of axes the device currently has.
	device		# a pointer GdkDevice 
	return:		#  the number of axes. 
gint gdk_device_get_n_keys (GdkDevice *device);	# Returns the number of keys the device currently has.
	device		# a GdkDevice 
	return:		#  the number of keys. 
GdkAxisFlags gdk_device_get_axes (GdkDevice *device);	# Returns the axes currently available on the device.
	device		# a GdkDevice 
void gdk_device_warp (GdkDevice *device, GdkScreen *screen, gint x, gint y);	# Warps device in display to the point x,y onthe screen screen, unless the device is confinedto a window by a grab, in which case it will be movedas far as allowed by the grab. Warping the pointercreates events as if the user had moved the mouseinstantaneously to the destination.
	device		# the device to warp.
	screen		# the screen to warp deviceto.
	x		# the X coordinate of the destination.
	y		# the Y coordinate of the destination.
GdkSeat  *gdk_device_get_seat (GdkDevice *device);	# Returns the GdkSeat the device belongs to.
	device		# A GdkDevice 
	return:		#  A GdkSeat . This memory is owned by GTK+ andmust not be freed.  
GdkGrabStatus gdk_device_grab (GdkDevice *device, GdkWindow *window, GdkGrabOwnership grab_ownership, gboolean owner_events, GdkEventMask event_mask, GdkCursor *cursor, guint32 time_);	# gdk_device_grab has been deprecated since version 3.20. and should not be used in newly-written code.
	device		# a GdkDevice . To get the device you can use 
	window		# the GdkWindow which will own the grab (the grab window)
	grab_ownership		# specifies the grab ownership.
	owner_events		# if FALSE then all device events are reported with respect towindowand are only reported if selected by event_mask. IfTRUE then pointer events for this application are reportedas normal, but pointer events outside this application arereported with respect to windowand only if selected byevent_mask. In either mode, unreported events are discarded.
	event_mask		# specifies the event mask, which is used in accordance withowner_events.
	cursor		#  the cursor to display while the grab is active if the device isa pointer. If this is NULL then the normal cursors are used forwindowand its descendants, and the cursor for windowis usedelsewhere. 
	return:		#  GDK_GRAB_SUCCESS if the grab was successful. 
void gdk_device_ungrab (GdkDevice *device, guint32 time_);	# gdk_device_ungrab has been deprecated since version 3.20. and should not be used in newly-written code.
	device		# a GdkDevice 
	time_		# a timestap (e.g. GDK_CURRENT_TIME ).
void gdk_device_get_state (GdkDevice *device, GdkWindow *window, gdouble *axes, GdkModifierType *mask);	# Gets the current state of a pointer device relative to window. As a slavedevice’s coordinates are those of its master pointer, thisfunction may not be called on devices of type GDK_DEVICE_TYPE_SLAVE ,unless there is an ongoing grab on them. See gdk_device_grab() .
	device		# a GdkDevice .
	window		# a GdkWindow .
	axes		#  an array of doubles to store the values ofthe axes of devicein, or NULL . 
void gdk_device_get_position (GdkDevice *device, GdkScreen **screen, gint *x, gint *y);	# Gets the current location of device. As a slave devicecoordinates are those of its master pointer, This functionmay not be called on devices of type GDK_DEVICE_TYPE_SLAVE ,unless there is an ongoing grab on them, see gdk_device_grab() .
	device		# pointer device to query status about.
	screen		#  location to store the GdkScreen the deviceis on, or NULL . 
void gdk_device_get_position_double (GdkDevice *device, GdkScreen **screen, gdouble *x, gdouble *y);	# Gets the current location of device in double precision. As a slave device'scoordinates are those of its master pointer, this functionmay not be called on devices of type GDK_DEVICE_TYPE_SLAVE ,unless there is an ongoing grab on them. See gdk_device_grab() .
	device		# pointer device to query status about.
	screen		#  location to store the GdkScreen the deviceis on, or NULL . 
GdkWindow  *gdk_device_get_window_at_position (GdkDevice *device, gint *win_x, gint *win_y);	# Obtains the window underneath device, returning the location of the device in win_x and win_y. ReturnsNULL if the window tree under device is not known to GDK (for example, belongs to another application).
	device		# pointer GdkDevice to query info to.
	win_x		#  return location for the X coordinate of the device location,relative to the window origin, or NULL . 
	return:		#  the GdkWindow under thedevice position, or NULL .  
GdkWindow  *gdk_device_get_window_at_position_double (GdkDevice *device, gdouble *win_x, gdouble *win_y);	# Obtains the window underneath device, returning the location of the device in win_x and win_y indouble precision. Returns NULL if the window tree under device is not known to GDK (for example,belongs to another application).
	device		# pointer GdkDevice to query info to.
	win_x		#  return location for the X coordinate of the device location,relative to the window origin, or NULL . 
	return:		#  the GdkWindow under thedevice position, or NULL .  
gboolean gdk_device_get_history (GdkDevice *device, GdkWindow *window, guint32 start, guint32 stop, GdkTimeCoord ***events, gint *n_events);	# Obtains the motion history for a pointer device; given a starting andending timestamp, return all events in the motion history forthe device in the given range of time. Some windowing systemsdo not support motion history, in which case, FALSE willbe returned. (This is not distinguishable from the case wheremotion history is supported and no events were found.)
	device		# a GdkDevice 
	window		# the window with respect to which which the event coordinates will be reported
	start		# starting timestamp for range of events to return
	stop		# ending timestamp for the range of events to return
	events		#  location to store a newly-allocated array of GdkTimeCoord , orNULL . 
	return:		#  TRUE if the windowing system supports motion history andat least one event was found. 
void gdk_device_free_history (GdkTimeCoord **events, gint n_events);	# Frees an array of GdkTimeCoord that was returned by gdk_device_get_history() .
	events		#  an array of GdkTimeCoord . 
	n_events		# the length of the array.
gboolean gdk_device_get_axis (GdkDevice *device, gdouble *axes, GdkAxisUse use, gdouble *value);	# Interprets an array of double as axis values for a given device,and locates the value in the array for a given axis use.
	device		# a GdkDevice 
	axes		#  pointer to an array of axes. 
	return:		#  TRUE if the given axis use was found, otherwise FALSE  
GList  *gdk_device_list_axes (GdkDevice *device);	# Returns a GList of GdkAtoms , containing the labels forthe axes that device currently has.
	device		# a pointer GdkDevice 
	return:		#  A GList of GdkAtoms , free with g_list_free() .  
gboolean gdk_device_get_axis_value (GdkDevice *device, gdouble *axes, GdkAtom axis_label, gdouble *value);	# Interprets an array of double as axis values for a given device,and locates the value in the array for a given axis label, as returnedby gdk_device_list_axes() 
	device		# a pointer GdkDevice .
	axes		#  pointer to an array of axes. 
	value		#  location to store the found value. 
	return:		#  TRUE if the given axis use was found, otherwise FALSE . 
GdkWindow  *gdk_device_get_last_event_window (GdkDevice *device);	# Gets information about which window the given pointer device is in, based on eventsthat have been received so far from the display server. If another applicationhas a pointer grab, or this application has a grab with owner_events = FALSE ,NULL may be returned even if the pointer is physically over one of thisapplication's windows.
	device		# a GdkDevice , with a source other than GDK_SOURCE_KEYBOARD 
	return:		#  the last window the device.  
guint64 gdk_device_tool_get_serial (GdkDeviceTool *tool);	# Gets the serial of this tool, this value can be used to identify aphysical tool (eg. a tablet pen) across program executions.
	tool		# a GdkDeviceTool 
	return:		#  The serial ID for this tool 
GdkDeviceToolType gdk_device_tool_get_tool_type (GdkDeviceTool *tool);	# Gets the GdkDeviceToolType of the tool.
	tool		# a GdkDeviceTool 
	return:		#  The physical type for this tool. This can be used to figure out whatsort of pen is being used, such as an airbrush or a pencil. 
guint64 gdk_device_tool_get_hardware_id (GdkDeviceTool *tool);	# Gets the hardware ID of this tool, or 0 if it's not known. Whennon-zero, the identificator is unique for the given tool model,meaning that two identical tools will share the same hardware_id,but will have different serial numbers (see gdk_device_tool_get_serial() ).
	tool		# a GdkDeviceTool 
	return:		#  The hardware identificator of this tool. 
gint gdk_device_pad_get_n_groups (GdkDevicePad *pad);	# Returns the number of groups this pad device has. Pads haveat least one group. A pad group is a subcollection ofbuttons/strip/rings that is affected collectively by a samecurrent mode.
	pad		# a GdkDevicePad 
	return:		#  The number of button/ring/strip groups in the pad. 
gint gdk_device_pad_get_group_n_modes (GdkDevicePad *pad, gint group_idx);	# Returns the number of modes that group may have.
	pad		# a GdkDevicePad 
	group_idx		# group to get the number of available modes from
	return:		#  The number of modes available in group. 
gint gdk_device_pad_get_n_features (GdkDevicePad *pad, GdkDevicePadFeature feature);	# Returns the number of features a tablet pad has.
	pad		# a GdkDevicePad 
	feature		# a pad feature
	return:		#  The amount of elements of type featurethat this pad has. 
gint gdk_device_pad_get_feature_group (GdkDevicePad *pad, GdkDevicePadFeature feature, gint feature_idx);	# Returns the group the given feature and idx belong to,or -1 if feature/index do not exist in pad.
	pad		# a GdkDevicePad 
	feature		# the feature type to get the group from
	feature_idx		# the index of the feature to get the group from
	return:		#  The group number of the queried pad feature. 
gboolean gdk_rectangle_intersect (const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);	# Calculates the intersection of two rectangles. It is allowed fordest to be the same as either src1 or src2. If the rectangles do not intersect, dest’s width and height is set to 0 and its x and y values are undefined. If you are only interested in whetherthe rectangles intersect, but not in the intersecting area itself,pass NULL for dest.
	src1		# a GdkRectangle 
	src2		# a GdkRectangle 
	dest		#  return location for theintersection of src1and src2, or NULL . 
	return:		#  TRUE if the rectangles intersect. 
void gdk_rectangle_union (const GdkRectangle *src1, const GdkRectangle *src2, GdkRectangle *dest);	# Calculates the union of two rectangles.The union of rectangles src1 and src2 is the smallest rectangle whichincludes both src1 and src2 within it.It is allowed for dest to be the same as either src1 or src2.
	src1		# a GdkRectangle 
	src2		# a GdkRectangle 
	dest		#  return location for the union of src1and src2. 
gboolean gdk_rectangle_equal (const GdkRectangle *rect1, const GdkRectangle *rect2);	# Checks if the two given rectangles are equal.
	rect1		# a GdkRectangle 
	rect2		# a GdkRectangle 
	return:		#  TRUE if the rectangles are equal. 
GdkPixbuf  *gdk_pixbuf_get_from_surface (cairo_surface_t *surface, gint src_x, gint src_y, gint width, gint height);	# Transfers image data from a cairo_surface_t and converts it to an RGB(A)representation inside a GdkPixbuf . This allows you to efficiently readindividual pixels from cairo surfaces.
	surface		# surface to copy from
	src_x		# Source X coordinate within surface
	src_y		# Source Y coordinate within surface
	width		# Width in pixels of region to get
	height		# Height in pixels of region to get
	return:		#  A newly-created pixbuf with areference count of 1, or NULL on error.  
GdkRGBA  *gdk_rgba_copy (const GdkRGBA *rgba);	# Makes a copy of a GdkRGBA .
	rgba		# a GdkRGBA 
	return:		#  A newly allocated GdkRGBA , with the same contents as rgba 
void gdk_rgba_free (GdkRGBA *rgba);	# Frees a GdkRGBA created with gdk_rgba_copy() 
	rgba		# a GdkRGBA 
gboolean gdk_rgba_is_clear (const GdkRGBA *rgba);	# Checks if an rgba value is transparent. That is, drawing with the valuewould not produce any change.
	rgba		# a GdkRGBA 
	return:		#  TRUE if the rgabis clear 
gboolean gdk_rgba_is_opaque (const GdkRGBA *rgba);	# Checks if an rgba value is opaque. That is, drawing with the valuewill not retain any results from previous contents.
	rgba		# a GdkRGBA 
	return:		#  TRUE if the rgabis opaque 
gboolean gdk_rgba_parse (GdkRGBA *rgba, const gchar *spec);	# Parses a textual representation of a color, filling inthe red, green, blue and alpha fields of the rgba GdkRGBA .
	rgba		# the GdkRGBA to fill in
	spec		# the string specifying the color
	return:		#  TRUE if the parsing succeeded 
gboolean gdk_rgba_equal (gconstpointer p1, gconstpointer p2);	# Compares two RGBA colors.
	p1		#  a GdkRGBA pointer. 
	return:		#  TRUE if the two colors compare equal 
guint gdk_rgba_hash (gconstpointer p);	# A hash function suitable for using for a hashtable that stores GdkRGBAs .
	p		#  a GdkRGBA pointer. 
	return:		#  The hash value for p 
gchar  *gdk_rgba_to_string (const GdkRGBA *rgba);	# Returns a textual specification of rgba in the formrgb (r, g, b) orrgba (r, g, b, a),where “r”, “g”, “b” and “a” represent the red, green,blue and alpha values respectively. r, g, and b arerepresented as integers in the range 0 to 255, and ais represented as floating point value in the range 0 to 1.
	rgba		# a GdkRGBA 
	return:		#  A newly allocated text string 
void gdk_visual_get_blue_pixel_details (GdkVisual *visual, guint32 *mask, gint *shift, gint *precision);	# Obtains values that are needed to calculate blue pixel values in TrueColorand DirectColor. The “mask” is the significant bits within the pixel.The “shift” is the number of bits left we must shift a primary for itto be in position (according to the "mask"). Finally, "precision" refersto how much precision the pixel value contains for a particular primary.
	visual		# a GdkVisual 
	mask		#  A pointer to a guint32 to be filled in, or NULL . 
gint gdk_visual_get_depth (GdkVisual *visual);	# Returns the bit depth of this visual.
	visual		# A GdkVisual .
	return:		#  The bit depth of this visual. 
void gdk_visual_get_green_pixel_details (GdkVisual *visual, guint32 *mask, gint *shift, gint *precision);	# Obtains values that are needed to calculate green pixel values in TrueColorand DirectColor. The “mask” is the significant bits within the pixel.The “shift” is the number of bits left we must shift a primary for itto be in position (according to the "mask"). Finally, "precision" refersto how much precision the pixel value contains for a particular primary.
	visual		# a GdkVisual 
	mask		#  A pointer to a guint32 to be filled in, or NULL . 
void gdk_visual_get_red_pixel_details (GdkVisual *visual, guint32 *mask, gint *shift, gint *precision);	# Obtains values that are needed to calculate red pixel values in TrueColorand DirectColor. The “mask” is the significant bits within the pixel.The “shift” is the number of bits left we must shift a primary for itto be in position (according to the "mask"). Finally, "precision" refersto how much precision the pixel value contains for a particular primary.
	visual		# A GdkVisual 
	mask		#  A pointer to a guint32 to be filled in, or NULL . 
GdkVisualType gdk_visual_get_visual_type (GdkVisual *visual);	# Returns the type of visual this is (PseudoColor, TrueColor, etc).
	visual		# A GdkVisual .
	return:		#  A GdkVisualType stating the type of visual. 
GdkScreen  *gdk_visual_get_screen (GdkVisual *visual);	# Gets the screen to which this visual belongs
	visual		# a GdkVisual 
	return:		#  the screen to which this visual belongs.  
GdkCursor  *gdk_cursor_new_from_pixbuf (GdkDisplay *display, GdkPixbuf *pixbuf, gint x, gint y);	#创建对象:cursor from a pixbuf.
	display		# the GdkDisplay for which the cursor will be created
	pixbuf		# the GdkPixbuf containing the cursor image
	x		# the horizontal offset of the “hotspot” of the cursor.
	y		# the vertical offset of the “hotspot” of the cursor.
	return:		#  a new GdkCursor . 
GdkCursor  *gdk_cursor_new_from_surface (GdkDisplay *display, cairo_surface_t *surface, gdouble x, gdouble y);	#创建对象:cursor from a cairo image surface.
	display		# the GdkDisplay for which the cursor will be created
	surface		# the cairo image surface containing the cursor pixel data
	x		# the horizontal offset of the “hotspot” of the cursor
	y		# the vertical offset of the “hotspot” of the cursor
	return:		#  a new GdkCursor . 
GdkCursor  *gdk_cursor_new_from_name (GdkDisplay *display, const gchar *name);	#创建对象:cursor by looking up name in the current cursortheme.
	display		# the GdkDisplay for which the cursor will be created
	name		# the name of the cursor
	return:		#  a new GdkCursor , or NULL if there is nocursor with the given name.  
GdkCursor  *gdk_cursor_new_for_display (GdkDisplay *display, GdkCursorType cursor_type);	#创建对象:cursor from the set of builtin cursors.
	display		# the GdkDisplay for which the cursor will be created
	cursor_type		# cursor to create
	return:		#  a new GdkCursor  
GdkDisplay  *gdk_cursor_get_display (GdkCursor *cursor);	# Returns the display on which the GdkCursor is defined.
	cursor		# a GdkCursor .
	return:		#  the GdkDisplay associated to cursor.  
GdkPixbuf  *gdk_cursor_get_image (GdkCursor *cursor);	# Returns a GdkPixbuf with the image used to display the cursor.
	cursor		# a GdkCursor 
	return:		#  a GdkPixbuf representingcursor, or NULL .  
cairo_surface_t  *gdk_cursor_get_surface (GdkCursor *cursor, gdouble *x_hot, gdouble *y_hot);	# Returns a cairo image surface with the image used to display the cursor.
	cursor		# a GdkCursor 
	x_hot		#  Location to store the hotspot x position,or NULL . 
	return:		#  a cairo_surface_t representing cursor, or NULL .  
GdkCursorType gdk_cursor_get_cursor_type (GdkCursor *cursor);	# Returns the cursor type for this cursor.
	cursor		# a GdkCursor 
	return:		#  a GdkCursorType  
GdkWindow  *gdk_window_new_toplevel (GdkDisplay *display, gint event_mask, int width, int height);	#创建对象:toplevel window. The window will be managed by the windowmanager.
	display		# the display to create the window on
	event_mask		# event mask (see 
	width		# width of new window
	height		# height of new window
	return:		#  the new GdkWindow .  
GdkWindow  *gdk_window_new_popup (GdkDisplay *display, gint event_mask, const GdkRectangle *position);	#创建对象:toplevel popup window. The window will bypass windowmanagement.
	display		# the display to create the window on
	event_mask		# event mask (see 
	position		# position of the window on screen
	return:		#  the new GdkWindow .  
GdkWindow  *gdk_window_new_temp (GdkDisplay *display);	#创建对象:toplevel temporary window. The window will besituated off-screen and not handle output.
	display		# the display to create the window on
	return:		#  the new GdkWindow .  
GdkWindow  *gdk_window_new_child (GdkWindow *parent, gint event_mask, const GdkRectangle *position);	#创建对象:client-side child window.
	parent		# the parent window
	event_mask		# event mask (see 
	position		# placement of the window inside parent
	return:		#  the new GdkWindow .  
GdkWindow  *gdk_window_new_input (GdkWindow *parent, gint event_mask, const GdkRectangle *position);	#创建对象:client-side input-only window.
	parent		# the parent window
	event_mask		# event mask (see 
	position		# placement of the window inside parent
	return:		#  the new GdkWindow .  
void gdk_window_destroy (GdkWindow *window);	# Destroys the window system resources associated with window and decrements window'sreference count. The window system resources for all children of window are alsodestroyed, but the children’s reference counts are not decremented.
	window		# a GdkWindow 
GdkWindowType gdk_window_get_window_type (GdkWindow *window);	# Gets the type of the window. See GdkWindowType .
	window		# a GdkWindow 
	return:		#  type of window 
GdkDisplay  *gdk_window_get_display (GdkWindow *window);	# Gets the GdkDisplay associated with a GdkWindow .
	window		# a GdkWindow 
	return:		#  the GdkDisplay associated with window.  
GdkScreen  *gdk_window_get_screen (GdkWindow *window);	# Gets the GdkScreen associated with a GdkWindow .
	window		# a GdkWindow 
	return:		#  the GdkScreen associated with window.  
void gdk_window_show (GdkWindow *window);	# Like gdk_window_show_unraised() , but also raises the window to thetop of the window stack (moves the window to the front of theZ-order).
	window		# a GdkWindow 
void gdk_window_show_unraised (GdkWindow *window);	# Shows a GdkWindow onscreen, but does not modify its stackingorder. In contrast, gdk_window_show() will raise the windowto the top of the window stack.
	window		# a GdkWindow 
void gdk_window_hide (GdkWindow *window);	# For toplevel windows, withdraws them, so they will no longer beknown to the window manager; for all windows, unmaps them, sothey won’t be displayed. Normally done automatically aspart of gtk_widget_hide() .
	window		# a GdkWindow 
gboolean gdk_window_is_destroyed (GdkWindow *window);	# Check to see if a window is destroyed..
	window		# a GdkWindow 
	return:		#  TRUE if the window is destroyed 
gboolean gdk_window_is_visible (GdkWindow *window);	# Checks whether the window has been mapped (with gdk_window_show() orgdk_window_show_unraised() ).
	window		# a GdkWindow 
	return:		#  TRUE if the window is mapped 
gboolean gdk_window_is_viewable (GdkWindow *window);	# Check if the window and all ancestors of the window aremapped. (This is not necessarily "viewable" in the X sense, sincewe only check as far as we have GDK window parents, not to the rootwindow.)
	window		# a GdkWindow 
	return:		#  TRUE if the window is viewable 
gboolean gdk_window_is_input_only (GdkWindow *window);	# Determines whether or not the window is an input only window.
	window		# a toplevel GdkWindow 
	return:		#  TRUE if windowis input only 
gboolean gdk_window_is_shaped (GdkWindow *window);	# Determines whether or not the window is shaped.
	window		# a toplevel GdkWindow 
	return:		#  TRUE if windowis shaped 
GdkWindowState gdk_window_get_state (GdkWindow *window);	# Gets the bitwise OR of the currently active window state flags,from the GdkWindowState enumeration.
	window		# a GdkWindow 
	return:		#  window state bitfield 
void gdk_window_withdraw (GdkWindow *window);	# Withdraws a window (unmaps it and asks the window manager to forget about it).This function is not really useful as gdk_window_hide() automaticallywithdraws toplevel windows before hiding them.
	window		# a toplevel GdkWindow 
void gdk_window_iconify (GdkWindow *window);	# Asks to iconify (minimize) window. The window manager may chooseto ignore the request, but normally will honor it. Usinggtk_window_iconify() is preferred, if you have a GtkWindow widget.
	window		# a toplevel GdkWindow 
void gdk_window_deiconify (GdkWindow *window);	# Attempt to deiconify (unminimize) window. On X11 the window manager maychoose to ignore the request to deiconify. When using GTK+,use gtk_window_deiconify() instead of the GdkWindow variant. Or better yet,you probably want to use gtk_window_present() , which raises the window, focuses it,unminimizes it, and puts it on the current desktop.
	window		# a toplevel GdkWindow 
void gdk_window_stick (GdkWindow *window);	# “Pins” a window such that it’s on all workspaces and does not scrollwith viewports, for window managers that have scrollable viewports.(When using GtkWindow , gtk_window_stick() may be more useful.)
	window		# a toplevel GdkWindow 
void gdk_window_unstick (GdkWindow *window);	# Reverse operation for gdk_window_stick() ; see gdk_window_stick() ,and gtk_window_unstick() .
	window		# a toplevel GdkWindow 
void gdk_window_maximize (GdkWindow *window);	# Maximizes the window. If the window was already maximized, thenthis function does nothing.
	window		# a toplevel GdkWindow 
void gdk_window_unmaximize (GdkWindow *window);	# Unmaximizes the window. If the window wasn’t maximized, then thisfunction does nothing.
	window		# a toplevel GdkWindow 
void gdk_window_fullscreen (GdkWindow *window);	# Moves the window into fullscreen mode. This means thewindow covers the entire screen and is above any panelsor task bars.
	window		# a toplevel GdkWindow 
void gdk_window_fullscreen_on_monitor (GdkWindow *window, gint monitor);	# Moves the window into fullscreen mode on the given monitor. This meansthe window covers the entire screen and is above any panels or task bars.
	window		# a toplevel GdkWindow 
	monitor		# Which monitor to display fullscreen on.
void gdk_window_unfullscreen (GdkWindow *window);	# Moves the window out of fullscreen mode. If the window was notfullscreen, does nothing.
	window		# a toplevel GdkWindow 
GdkFullscreenMode gdk_window_get_fullscreen_mode (GdkWindow *window);	# Obtains the GdkFullscreenMode of the window.
	window		# a toplevel GdkWindow 
	return:		#  The GdkFullscreenMode applied to the window when fullscreen. 
void gdk_window_set_fullscreen_mode (GdkWindow *window, GdkFullscreenMode mode);	# Specifies whether the window should span over all monitors (in a multi-headsetup) or only the current monitor when in fullscreen mode.
	window		# a toplevel GdkWindow 
	mode		# fullscreen mode
void gdk_window_set_keep_above (GdkWindow *window, gboolean setting);	# Set if window must be kept above other windows. If thewindow was already above, then this function does nothing.
	window		# a toplevel GdkWindow 
	setting		# whether to keep windowabove other windows
void gdk_window_set_keep_below (GdkWindow *window, gboolean setting);	# Set if window must be kept below other windows. If thewindow was already below, then this function does nothing.
	window		# a toplevel GdkWindow 
	setting		# whether to keep windowbelow other windows
void gdk_window_set_opacity (GdkWindow *window, gdouble opacity);	# Set window to render as partially transparent,with opacity 0 being fully transparent and 1 fully opaque. (Valuesof the opacity parameter are clamped to the [0,1] range.) 
	window		# a top-level or non-native GdkWindow 
	opacity		# opacity
void gdk_window_set_pass_through (GdkWindow *window, gboolean pass_through);	# Sets whether input to the window is passed through to the windowbelow.
	window		# a GdkWindow 
	pass_through		# a boolean
gboolean gdk_window_get_pass_through (GdkWindow *window);	# Returns whether input to the window is passed through to the windowbelow.
	window		# a GdkWindow 
void gdk_window_move (GdkWindow *window, gint x, gint y);	# Repositions a window relative to its parent window.For toplevel windows, window managers may ignore or modify the move;you should probably use gtk_window_move() on a GtkWindow widgetanyway, instead of using GDK functions. For child windows,the move will reliably succeed.
	window		# a GdkWindow 
	x		# X coordinate relative to window’s parent
	y		# Y coordinate relative to window’s parent
void gdk_window_resize (GdkWindow *window, gint width, gint height);	# Resizes window; for toplevel windows, asks the window manager to resizethe window. The window manager may not allow the resize. When using GTK+,use gtk_window_resize() instead of this low-level GDK function.
	window		# a GdkWindow 
	width		# new width of the window
	height		# new height of the window
void gdk_window_move_resize (GdkWindow *window, gint x, gint y, gint width, gint height);	# Equivalent to calling gdk_window_move() and gdk_window_resize() ,except that both operations are performed at once, avoiding strangevisual effects. (i.e. the user may be able to see the window firstmove, then resize, if you don’t use gdk_window_move_resize() .)
	window		# a GdkWindow 
	x		# new X position relative to window’s parent
	y		# new Y position relative to window’s parent
	width		# new width
	height		# new height
void gdk_window_scroll (GdkWindow *window, gint dx, gint dy);	# Scroll the contents of window, both pixels and children, by thegiven amount. window itself does not move. Portions of the windowthat the scroll operation brings in from offscreen areas areinvalidated. The invalidated region may be bigger than what wouldstrictly be necessary.
	window		# a GdkWindow 
	dx		# Amount to scroll in the X direction
	dy		# Amount to scroll in the Y direction
void gdk_window_move_region (GdkWindow *window, const cairo_region_t *region, gint dx, gint dy);	# Move the part of window indicated by region by dy pixels in the Ydirection and dx pixels in the X direction. The portions of regionthat not covered by the new position of region are invalidated.
	window		# a GdkWindow 
	region		# The cairo_region_t to move
	dx		# Amount to move in the X direction
	dy		# Amount to move in the Y direction
gboolean gdk_window_has_native (GdkWindow *window);	# Checks whether the window has a native window or not.
	window		# a GdkWindow 
	return:		#  TRUE if the windowhas a native window, FALSE otherwise. 
void gdk_window_raise (GdkWindow *window);	# Raises window to the top of the Z-order (stacking order), so thatother windows with the same parent window appear below window.This is true whether or not the windows are visible.
	window		# a GdkWindow 
void gdk_window_lower (GdkWindow *window);	# Lowers window to the bottom of the Z-order (stacking order), so thatother windows with the same parent window appear above window.This is true whether or not the other windows are visible.
	window		# a GdkWindow 
void gdk_window_restack (GdkWindow *window, GdkWindow *sibling, gboolean above);	# Changes the position of window in the Z-order (stacking order), so thatit is above sibling (if above is TRUE ) or below sibling (if above isFALSE ).
	window		# a GdkWindow 
	sibling		#  a GdkWindow that is a sibling of window, or NULL . 
	above		# a boolean
void gdk_window_focus (GdkWindow *window, guint32 timestamp);	# Sets keyboard focus to window. In most cases, gtk_window_present() should be used on a GtkWindow , rather than calling this function.
	window		# a GdkWindow 
	timestamp		# timestamp of the event triggering the window focus
void gdk_window_register_dnd (GdkWindow *window);	# Registers a window as a potential drop destination.
	window		# a GdkWindow .
void gdk_window_begin_resize_drag (GdkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp);	# Begins a window resize operation (for a toplevel window).
	window		# a toplevel GdkWindow 
	edge		# the edge or corner from which the drag is started
	button		# the button being used to drag, or 0 for a keyboard-initiated drag
	root_x		# root window X coordinate of mouse click that began the drag
	root_y		# root window Y coordinate of mouse click that began the drag
	timestamp		# timestamp of mouse click that began the drag (use 
void gdk_window_begin_resize_drag_for_device (GdkWindow *window, GdkWindowEdge edge, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp);	# Begins a window resize operation (for a toplevel window).You might use this function to implement a “window resize grip,” forexample; in fact GtkStatusbar uses it. The function works bestwith window managers that support theExtended Window Manager Hints but has a fallback implementation for other window managers.
	window		# a toplevel GdkWindow 
	edge		# the edge or corner from which the drag is started
	device		# the device used for the operation
	button		# the button being used to drag, or 0 for a keyboard-initiated drag
	root_x		# root window X coordinate of mouse click that began the drag
	root_y		# root window Y coordinate of mouse click that began the drag
	timestamp		# timestamp of mouse click that began the drag (use 
void gdk_window_begin_move_drag (GdkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp);	# Begins a window move operation (for a toplevel window).
	window		# a toplevel GdkWindow 
	button		# the button being used to drag, or 0 for a keyboard-initiated drag
	root_x		# root window X coordinate of mouse click that began the drag
	root_y		# root window Y coordinate of mouse click that began the drag
	timestamp		# timestamp of mouse click that began the drag
void gdk_window_begin_move_drag_for_device (GdkWindow *window, GdkDevice *device, gint button, gint root_x, gint root_y, guint32 timestamp);	# Begins a window move operation (for a toplevel window).You might use this function to implement a “window move grip,” forexample. The function works best with window managers that support theExtended Window Manager Hints but has a fallback implementation for other window managers.
	window		# a toplevel GdkWindow 
	device		# the device used for the operation
	button		# the button being used to drag, or 0 for a keyboard-initiated drag
	root_x		# root window X coordinate of mouse click that began the drag
	root_y		# root window Y coordinate of mouse click that began the drag
	timestamp		# timestamp of mouse click that began the drag
gboolean gdk_window_show_window_menu (GdkWindow *window, GdkEvent *event);	# Asks the windowing system to show the window menu. The window menuis the menu shown when right-clicking the titlebar on traditionalwindows managed by the window manager. This is useful for windowsusing client-side decorations, activating it with a right-clickon the window decorations.
	window		# a GdkWindow 
	event		# a GdkEvent to show the menu for
	return:		#  TRUE if the window menu was shown and FALSE otherwise. 
void gdk_window_constrain_size (GdkGeometry *geometry, GdkWindowHints flags, gint width, gint height, gint *new_width, gint *new_height);	# Constrains a desired width and height according to aset of geometry hints (such as minimum and maximum size).
	geometry		# a GdkGeometry structure
	flags		# a mask indicating what portions of geometryare set
	width		# desired width of window
	height		# desired height of the window
	new_width		#  location to store resulting width. 
	new_height		#  location to store resulting height. 
void gdk_window_beep (GdkWindow *window);	# Emits a short beep associated to window in the appropriatedisplay, if supported. Otherwise, emits a short beep onthe display just as gdk_display_beep() .
	window		# a toplevel GdkWindow 
gint gdk_window_get_scale_factor (GdkWindow *window);	# Returns the internal scale factor that maps from window coordiantesto the actual device pixels. On traditional systems this is 1, buton very high density outputs this can be a higher value (often 2).
	window		# window to get scale factor for
	return:		#  the scale factor 
void gdk_window_set_opaque_region (GdkWindow *window, cairo_region_t *region);	# For optimisation purposes, compositing window managers maylike to not draw obscured regions of windows, or turn off blendingduring for these regions. With RGB windows with no transparency,this is just the shape of the window, but with ARGB32 windows, thecompositor does not know what regions of the window are transparentor not.
	window		# a top-level or non-native GdkWindow 
	region		#  a region, or NULL . 
GdkGLContext  *gdk_window_create_gl_context (GdkWindow *window, GError **error);	#创建对象:GdkGLContext matching theframebuffer format to the visual of the GdkWindow . The contextis disconnected from any particular window or surface.
	window		# a GdkWindow 
	error		# return location for an error
	return:		#  the newly created GdkGLContext , orNULL on error.  
GdkVulkanContext  *gdk_window_create_vulkan_context (GdkWindow *window, GError **error);	#创建对象:GdkVulkanContext for rendering on window.
	window		# a GdkWindow 
	error		# return location for an error
	return:		#  the newly created GdkVulkanContext , orNULL on error.  
void gdk_window_mark_paint_from_clip (GdkWindow *window, cairo_t *cr);	# void gdk_window_mark_paint_from_clip (GdkWindow *window, cairo_t *cr);</pre></div><hr>
cairo_region_t  *gdk_window_get_clip_region (GdkWindow *window);	# Computes the region of a window that potentially can be writtento by drawing primitives. This region may not take into accountother factors such as if the window is obscured by other windows,but no area outside of this region will be affected by drawingprimitives.
	window		# a GdkWindow 
	return:		#  a cairo_region_t . This must be freed with cairo_region_destroy()when you are done. 
GdkDrawingContext  *gdk_window_begin_draw_frame (GdkWindow *window, GdkDrawContext *context, const cairo_region_t *region);	# Indicates that you are beginning the process of redrawing regionon window, and provides you with a GdkDrawingContext .
	window		# a GdkWindow 
	context		#  the context used to draw the frame. 
	return:		#  a GdkDrawingContext context that should beused to draw the contents of the window; the returned context is ownedby GDK.  
void gdk_window_end_draw_frame (GdkWindow *window, GdkDrawingContext *context);	# Indicates that the drawing of the contents of window started withgdk_window_begin_frame() has been completed.
	window		# a GdkWindow 
	context		# the GdkDrawingContext created by 
cairo_region_t  *gdk_window_get_visible_region (GdkWindow *window);	# Computes the region of the window that is potentially visible.This does not necessarily take into account if the window isobscured by other windows, but no area outside of this regionis visible.
	window		# a GdkWindow 
	return:		#  a cairo_region_t . This must be freed with cairo_region_destroy()when you are done. 
void gdk_window_invalidate_rect (GdkWindow *window, const GdkRectangle *rect, gboolean invalidate_children);	# A convenience wrapper around gdk_window_invalidate_region() whichinvalidates a rectangular region. Seegdk_window_invalidate_region() for details.
	window		# a GdkWindow 
	rect		#  rectangle to invalidate or NULL to invalidate the wholewindow. 
	invalidate_children		# whether to also invalidate child windows
void gdk_window_invalidate_region (GdkWindow *window, const cairo_region_t *region, gboolean invalidate_children);	# Adds region to the update area for window. The update area is theregion that needs to be redrawn, or “dirty region.”
	window		# a GdkWindow 
	region		# a cairo_region_t 
	invalidate_children		# TRUE to also invalidate child windows
gboolean <span class="c_punctuation">( *GdkWindowChildFunc<span class="c_punctuation">) (GdkWindow *window, gpointer user_data);	# A function of this type is passed to gdk_window_invalidate_maybe_recurse() .It gets called for each child of the window to determine whether torecursively invalidate it or now.
	window		# a GdkWindow 
	user_data		# user data
	return:		#  TRUE to invalidate windowrecursively 
void gdk_window_invalidate_maybe_recurse (GdkWindow *window, const cairo_region_t *region, GdkWindowChildFunc child_func, gpointer user_data);	# Adds region to the update area for window. The update area is theregion that needs to be redrawn, or “dirty region.”
	window		# a GdkWindow 
	region		# a cairo_region_t 
	child_func		#  function to use to decide if torecurse to a child, NULL means never recurse. 
	user_data		# data passed to child_func
cairo_region_t  *gdk_window_get_update_area (GdkWindow *window);	# Transfers ownership of the update area from window to the callerof the function. That is, after calling this function, window willno longer have an invalid/dirty region; the update area is removedfrom window and handed to you. If a window has no update area,gdk_window_get_update_area() returns NULL . You are responsible forcalling cairo_region_destroy() on the returned region if it’s non-NULL .
	window		# a GdkWindow 
	return:		#  the update area for window 
void gdk_window_freeze_updates (GdkWindow *window);	# Temporarily freezes a window such that it won’t receive exposeevents. The window will begin receiving expose events again whengdk_window_thaw_updates() is called. If gdk_window_freeze_updates() has been called more than once, gdk_window_thaw_updates() must be calledan equal number of times to begin processing exposes.
	window		# a GdkWindow 
void gdk_window_thaw_updates (GdkWindow *window);	# Thaws a window frozen with gdk_window_freeze_updates() .
	window		# a GdkWindow 
GdkFrameClock  *gdk_window_get_frame_clock (GdkWindow *window);	# Gets the frame clock for the window. The frame clock for a windownever changes unless the window is reparented to a new toplevelwindow.
	window		# window to get frame clock for
	return:		#  the frame clock.  
void gdk_window_set_user_data (GdkWindow *window, gpointer user_data);	# For most purposes this function is deprecated in favor ofg_object_set_data() . However, for historical reasons GTK+ storesthe GtkWidget that owns a GdkWindow as user data on theGdkWindow . So, custom widget implementations should usethis function for that. If GTK+ receives an event for a GdkWindow ,and the user data for the window is non-NULL , GTK+ will assume theuser data is a GtkWidget , and forward the event to that widget.
	window		# a GdkWindow 
	user_data		#  user data. 
void gdk_window_set_accept_focus (GdkWindow *window, gboolean accept_focus);	# Setting accept_focus to FALSE hints the desktop environment that thewindow doesn’t want to receive input focus.
	window		# a toplevel GdkWindow 
	accept_focus		# TRUE if the window should receive input focus
gboolean gdk_window_get_accept_focus (GdkWindow *window);	# Determines whether or not the desktop environment shuld be hinted thatthe window does not want to receive input focus.
	window		# a toplevel GdkWindow .
	return:		#  whether or not the window should receive input focus. 
void gdk_window_set_focus_on_map (GdkWindow *window, gboolean focus_on_map);	# Setting focus_on_map to FALSE hints the desktop environment that thewindow doesn’t want to receive input focus when it is mapped.focus_on_map should be turned off for windows that aren’t triggeredinteractively (such as popups from network activity).
	window		# a toplevel GdkWindow 
	focus_on_map		# TRUE if the window should receive input focus when mapped
gboolean gdk_window_get_focus_on_map (GdkWindow *window);	# Determines whether or not the desktop environment should be hinted that thewindow does not want to receive input focus when it is mapped.
	window		# a toplevel GdkWindow .
	return:		#  whether or not the window wants to receive input focus whenit is mapped. 
void gdk_window_add_filter (GdkWindow *window, GdkFilterFunc function, gpointer data);	# Adds an event filter to window, allowing you to intercept eventsbefore they reach GDK. This is a low-level operation and makes iteasy to break GDK and/or GTK+, so you have to know what you'redoing. Pass NULL for window to get all events for all windows,instead of events for a specific window.
	window		#  a GdkWindow . 
	function		# filter callback
	data		# data to pass to filter callback
void gdk_window_remove_filter (GdkWindow *window, GdkFilterFunc function, gpointer data);	# Remove a filter previously added with gdk_window_add_filter() .
	window		# a GdkWindow 
	function		# previously-added filter function
	data		# user data for previously-added filter function
GdkFilterReturn <span class="c_punctuation">( *GdkFilterFunc<span class="c_punctuation">) (GdkXEvent *xevent, GdkEvent *event, gpointer data);	# Specifies the type of function used to filter native events before they areconverted to GDK events.
	xevent		# the native event to filter.
	event		# the GDK event to which the X event will be translated.
	data		#  user data set when the filter was installed. 
	return:		#  a GdkFilterReturn value. 
void gdk_window_shape_combine_region (GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y);	# Makes pixels in window outside shape_region be transparent,so that the window may be nonrectangular.
	window		# a GdkWindow 
	shape_region		#  region of window to be non-transparent. 
	offset_x		# X position of shape_regionin windowcoordinates
	offset_y		# Y position of shape_regionin windowcoordinates
void gdk_window_set_child_shapes (GdkWindow *window);	# Sets the shape mask of window to the union of shape masksfor all children of window, ignoring the shape mask of windowitself. Contrast with gdk_window_merge_child_shapes() which includesthe shape mask of window in the masks to be merged.
	window		# a GdkWindow 
void gdk_window_merge_child_shapes (GdkWindow *window);	# Merges the shape masks for any child windows into theshape mask for window. i.e. the union of all masksfor window and its children will become the new maskfor window. See gdk_window_shape_combine_region() .
	window		# a GdkWindow 
void gdk_window_input_shape_combine_region (GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y);	# Like gdk_window_shape_combine_region() , but the shape appliesonly to event handling. Mouse events which happen whilethe pointer position corresponds to an unset bit in themask will be passed on the window below window.
	window		# a GdkWindow 
	shape_region		# region of window to be non-transparent
	offset_x		# X position of shape_regionin windowcoordinates
	offset_y		# Y position of shape_regionin windowcoordinates
void gdk_window_set_child_input_shapes (GdkWindow *window);	# Sets the input shape mask of window to the union of input shape masksfor all children of window, ignoring the input shape mask of windowitself. Contrast with gdk_window_merge_child_input_shapes() which includesthe input shape mask of window in the masks to be merged.
	window		# a GdkWindow 
void gdk_window_merge_child_input_shapes (GdkWindow *window);	# Merges the input shape masks for any child windows into theinput shape mask for window. i.e. the union of all input masksfor window and its children will become the new input maskfor window. See gdk_window_input_shape_combine_region() .
	window		# a GdkWindow 
void gdk_window_set_title (GdkWindow *window, const gchar *title);	# Sets the title of a toplevel window, to be displayed in the titlebar.If you haven’t explicitly set the icon name for the window(using gdk_window_set_icon_name() ), the icon name will be set totitle as well. title must be in UTF-8 encoding (as with alluser-readable strings in GDK/GTK+). title may not be NULL .
	window		# a toplevel GdkWindow 
	title		# title of window
void gdk_window_set_cursor (GdkWindow *window, GdkCursor *cursor);	# Sets the default mouse pointer for a GdkWindow .
	window		# a GdkWindow 
	cursor		#  a cursor. 
GdkCursor  *gdk_window_get_cursor (GdkWindow *window);	# Retrieves a GdkCursor pointer for the cursor currently set on thespecified GdkWindow , or NULL . If the return value is NULL thenthere is no custom cursor set on the specified window, and it isusing the cursor for its parent window.
	window		# a GdkWindow 
	return:		#  a GdkCursor , or NULL . Thereturned object is owned by the GdkWindow and should not beunreferenced directly. Use gdk_window_set_cursor() to unset thecursor of the window.  
void gdk_window_get_user_data (GdkWindow *window, gpointer *data);	# Retrieves the user data for window, which is normally the widgetthat window belongs to. See gdk_window_set_user_data() .
	window		# a GdkWindow 
	data		#  return location for user data. 
void gdk_window_get_geometry (GdkWindow *window, gint *x, gint *y, gint *width, gint *height);	# Any of the return location arguments to this function may be NULL ,if you aren’t interested in getting the value of that field.
	window		# a GdkWindow 
	x		#  return location for X coordinate of window (relative to its parent). 
	y		#  return location for Y coordinate of window (relative to its parent). 
	width		#  return location for width of window. 
	height		#  return location for height of window. 
void gdk_window_set_geometry_hints (GdkWindow *window, const GdkGeometry *geometry, GdkWindowHints geom_mask);	# Sets the geometry hints for window. Hints flagged in geom_maskare set, hints not flagged in geom_mask are unset.To unset all hints, use a geom_mask of 0 and a geometry of NULL .
	window		# a toplevel GdkWindow 
	geometry		# geometry hints
	geom_mask		# bitmask indicating fields of geometryto pay attention to
int gdk_window_get_width (GdkWindow *window);	# Returns the width of the given window.
	window		# a GdkWindow 
	return:		#  The width of window 
int gdk_window_get_height (GdkWindow *window);	# Returns the height of the given window.
	window		# a GdkWindow 
	return:		#  The height of window 
void gdk_window_set_icon_list (GdkWindow *window, GList *pixbufs);	# Sets a list of icons for the window. One of these will be usedto represent the window when it has been iconified. The icon isusually shown in an icon box or some sort of task bar. Which iconsize is shown depends on the window manager. The window managercan scale the icon but setting several size icons can give betterimage quality since the window manager may only need to scale theicon by a small amount or not at all.
	window		# The GdkWindow toplevel window to set the icon of.
	pixbufs		#  A list of pixbufs, of different sizes. 
void gdk_window_set_modal_hint (GdkWindow *window, gboolean modal);	# The application can use this hint to tell the window managerthat a certain window has modal behaviour. The window managercan use this information to handle modal windows in a specialway.
	window		# A toplevel GdkWindow 
	modal		# TRUE if the window is modal, FALSE otherwise.
gboolean gdk_window_get_modal_hint (GdkWindow *window);	# Determines whether or not the window manager is hinted that windowhas modal behaviour.
	window		# A toplevel GdkWindow .
	return:		#  whether or not the window has the modal hint set. 
void gdk_window_set_type_hint (GdkWindow *window, GdkWindowTypeHint hint);	# The application can use this call to provide a hint to the windowmanager about the functionality of a window. The window managercan use this information when determining the decoration and behaviourof the window.
	window		# A toplevel GdkWindow 
	hint		# A hint of the function this window will have
GdkWindowTypeHint gdk_window_get_type_hint (GdkWindow *window);	# This function returns the type hint set for a window.
	window		# A toplevel GdkWindow 
	return:		#  The type hint set for window 
void gdk_window_set_shadow_width (GdkWindow *window, gint left, gint right, gint top, gint bottom);	# Newer GTK+ windows using client-side decorations use extra geometryaround their frames for effects like shadows and invisible borders.Window managers that want to maximize windows or snap to edges needto know where the extents of the actual frame lie, so that usersdon’t feel like windows are snapping against random invisible edges.
	window		# a GdkWindow 
	left		# The left extent
	right		# The right extent
	top		# The top extent
	bottom		# The bottom extent
void gdk_window_set_skip_taskbar_hint (GdkWindow *window, gboolean skips_taskbar);	# Toggles whether a window should appear in a task list or windowlist. If a window’s semantic type as specified withgdk_window_set_type_hint() already fully describes the window, thisfunction should not be called in addition,instead you should allow the window to be treated according tostandard policy for its semantic type.
	window		# a toplevel GdkWindow 
	skips_taskbar		# TRUE to skip the taskbar
void gdk_window_set_skip_pager_hint (GdkWindow *window, gboolean skips_pager);	# Toggles whether a window should appear in a pager (workspaceswitcher, or other desktop utility program that displays a smallthumbnail representation of the windows on the desktop). If awindow’s semantic type as specified with gdk_window_set_type_hint() already fully describes the window, this function shouldnot be called in addition, instead you shouldallow the window to be treated according to standard policy forits semantic type.
	window		# a toplevel GdkWindow 
	skips_pager		# TRUE to skip the pager
void gdk_window_set_urgency_hint (GdkWindow *window, gboolean urgent);	# Toggles whether a window needs the user'surgent attention.
	window		# a toplevel GdkWindow 
	urgent		# TRUE if the window is urgent
void gdk_window_get_position (GdkWindow *window, gint *x, gint *y);	# Obtains the position of the window as reported in themost-recently-processed GdkEventConfigure . Contrast withgdk_window_get_geometry() which queries the X server for thecurrent window position, regardless of which events have beenreceived or processed.
	window		# a GdkWindow 
	x		#  X coordinate of window. 
	y		#  Y coordinate of window. 
void gdk_window_get_root_origin (GdkWindow *window, gint *x, gint *y);	# Obtains the top-left corner of the window manager frame in rootwindow coordinates.
	window		# a toplevel GdkWindow 
	x		#  return location for X position of window frame. 
	y		#  return location for Y position of window frame. 
void gdk_window_get_frame_extents (GdkWindow *window, GdkRectangle *rect);	# Obtains the bounding box of the window, including window managertitlebar/borders if any. The frame position is given in root windowcoordinates. To get the position of the window itself (rather thanthe frame) in root window coordinates, use gdk_window_get_origin() .
	window		# a toplevel GdkWindow 
	rect		#  rectangle to fill with bounding box of the window frame. 
gint gdk_window_get_origin (GdkWindow *window, gint *x, gint *y);	# Obtains the position of a window in root window coordinates.(Compare with gdk_window_get_position() andgdk_window_get_geometry() which return the position of a windowrelative to its parent window.)
	window		# a GdkWindow 
	x		#  return location for X coordinate. 
	return:		#  not meaningful, ignore 
void gdk_window_get_root_coords (GdkWindow *window, gint x, gint y, gint *root_x, gint *root_y);	# Obtains the position of a window position in rootwindow coordinates. This is similar togdk_window_get_origin() but allows you to passin any position in the window, not just the origin.
	window		# a GdkWindow 
	x		# X coordinate in window
	y		# Y coordinate in window
	root_x		#  return location for X coordinate. 
	root_y		#  return location for Y coordinate. 
GdkWindow  *gdk_window_get_device_position (GdkWindow *window, GdkDevice *device, gint *x, gint *y, GdkModifierType *mask);	# Obtains the current device position and modifier state.The position is given in coordinates relative to the upper leftcorner of window.
	window		# a GdkWindow .
	device		# pointer GdkDevice to query to.
	x		#  return location for the X coordinate of device, or NULL . 
	return:		#  The window underneath device(as with gdk_device_get_window_at_position() ), or NULL if thewindow is not known to GDK.  
GdkWindow  *gdk_window_get_device_position_double (GdkWindow *window, GdkDevice *device, gdouble *x, gdouble *y, GdkModifierType *mask);	# Obtains the current device position in doubles and modifier state.The position is given in coordinates relative to the upper leftcorner of window.
	window		# a GdkWindow .
	device		# pointer GdkDevice to query to.
	x		#  return location for the X coordinate of device, or NULL . 
	return:		#  The window underneath device(as with gdk_device_get_window_at_position() ), or NULL if thewindow is not known to GDK.  
GdkWindow  *gdk_window_get_parent (GdkWindow *window);	# Obtains the parent of window, as known to GDK. Does not query theX server; thus this returns the parent as passed to gdk_window_new(),not the actual parent. This should never matter unless you’re usingXlib calls mixed with GDK calls on the X11 platform. It may alsomatter for toplevel windows, because the window manager may chooseto reparent them.
	window		# a GdkWindow 
	return:		#  parent of window.  
GdkWindow  *gdk_window_get_toplevel (GdkWindow *window);	# Gets the toplevel window that’s an ancestor of window.
	window		# a GdkWindow 
	return:		#  the toplevel window containing window.  
GList  *gdk_window_get_children (GdkWindow *window);	# Gets the list of children of window known to GDK.This function only returns children created via GDK,so for example it’s useless when used with the root window;it only returns windows an application created itself.
	window		# a GdkWindow 
	return:		#  list of child windows inside window.  
GList  *gdk_window_get_children_with_user_data (GdkWindow *window, gpointer user_data);	# Gets the list of children of window known to GDK with aparticular user_data set on it.
	window		# a GdkWindow 
	user_data		# user data to look for
	return:		#  list of child windows inside window.  
GList  *gdk_window_peek_children (GdkWindow *window);	# Like gdk_window_get_children() , but does not copy the list ofchildren, so the list does not need to be freed.
	window		# a GdkWindow 
	return:		#  a reference to the list of child windows in window.  
GdkEventMask gdk_window_get_events (GdkWindow *window);	# Gets the event mask for window for all master input devices. Seegdk_window_set_events() .
	window		# a GdkWindow 
	return:		#  event mask for window 
void gdk_window_set_events (GdkWindow *window, GdkEventMask event_mask);	# The event mask for a window determines which events will be reportedfor that window from all master input devices. For example, an event maskincluding GDK_BUTTON_PRESS_MASK means the window should report buttonpress events. The event mask is the bitwise OR of values from theGdkEventMask enumeration.
	window		# a GdkWindow 
	event_mask		# event mask for window
void gdk_window_set_icon_name (GdkWindow *window, const gchar *name);	# Windows may have a name used while minimized, distinct from thename they display in their titlebar. Most of the time this is a badidea from a user interface standpoint. But you can set such a namewith this function, if you like.
	window		# a toplevel GdkWindow 
	name		#  name of window while iconified (minimized). 
void gdk_window_set_transient_for (GdkWindow *window, GdkWindow *parent);	# Indicates to the window manager that window is a transient dialogassociated with the application window parent. This allows thewindow manager to do things like center window on parent andkeep window above parent.
	window		# a toplevel GdkWindow 
	parent		# another toplevel GdkWindow 
void gdk_window_set_role (GdkWindow *window, const gchar *role);	# When using GTK+, typically you should use gtk_window_set_role() insteadof this low-level function.
	window		# a toplevel GdkWindow 
	role		# a string indicating its role
void gdk_window_set_startup_id (GdkWindow *window, const gchar *startup_id);	# When using GTK+, typically you should use gtk_window_set_startup_id() instead of this low-level function.
	window		# a toplevel GdkWindow 
	startup_id		# a string with startup-notification identifier
void gdk_window_set_group (GdkWindow *window, GdkWindow *leader);	# Sets the group leader window for window. By default,GDK sets the group leader for all toplevel windowsto a global window implicitly created by GDK. With this functionyou can override this default.
	window		# a toplevel GdkWindow 
	leader		#  group leader window, or NULL to restore the default group leader window. 
GdkWindow  *gdk_window_get_group (GdkWindow *window);	# Returns the group leader window for window. See gdk_window_set_group() .
	window		# a toplevel GdkWindow 
	return:		#  the group leader window for window.  
void gdk_window_set_decorations (GdkWindow *window, GdkWMDecoration decorations);	# “Decorations” are the features the window manager adds to a toplevel GdkWindow .This function sets the traditional Motif window manager hints that tell thewindow manager which decorations you would like your window to have.Usually you should use gtk_window_set_decorated() on a GtkWindow instead ofusing the GDK function directly.
	window		# a toplevel GdkWindow 
	decorations		# decoration hint mask
gboolean gdk_window_get_decorations (GdkWindow *window, GdkWMDecoration *decorations);	# Returns the decorations set on the GdkWindow withgdk_window_set_decorations() .
	window		# The toplevel GdkWindow to get the decorations from
	decorations		#  The window decorations will be written here. 
	return:		#  TRUE if the window has decorations set, FALSE otherwise. 
void gdk_window_set_functions (GdkWindow *window, GdkWMFunction functions);	# Sets hints about the window management functions to make availablevia buttons on the window frame.
	window		# a toplevel GdkWindow 
	functions		# bitmask of operations to allow on window
GdkWindow  *gdk_get_default_root_window (void );	# Obtains the root window (parent all other windows are inside)for the default display and screen.
	return:		#  the default root window.  
gboolean gdk_window_get_support_multidevice (GdkWindow *window);	# Returns TRUE if the window is aware of the existence of multipledevices.
	window		# a GdkWindow .
	return:		#  TRUE if the window handles multidevice features. 
void gdk_window_set_support_multidevice (GdkWindow *window, gboolean support_multidevice);	# This function will enable multidevice features in window.
	window		# a GdkWindow .
	support_multidevice		# TRUE to enable multidevice support in window.
GdkCursor  *gdk_window_get_device_cursor (GdkWindow *window, GdkDevice *device);	# Retrieves a GdkCursor pointer for the device currently set on thespecified GdkWindow , or NULL . If the return value is NULL thenthere is no custom cursor set on the specified window, and it isusing the cursor for its parent window.
	window		# a GdkWindow .
	device		# a master, pointer GdkDevice .
	return:		#  a GdkCursor , or NULL . Thereturned object is owned by the GdkWindow and should not beunreferenced directly. Use gdk_window_set_cursor() to unset thecursor of the window.  
void gdk_window_set_device_cursor (GdkWindow *window, GdkDevice *device, GdkCursor *cursor);	# Sets a specific GdkCursor for a given device when it gets inside window.Use gdk_cursor_new_for_display() or gdk_cursor_new_from_pixbuf() to createthe cursor. To make the cursor invisible, use GDK_BLANK_CURSOR . PassingNULL for the cursor argument to gdk_window_set_cursor() means thatwindow will use the cursor of its parent window. Most windows shoulduse this default.
	window		# a GdkWindow 
	device		# a master, pointer GdkDevice 
	cursor		# a GdkCursor 
GdkEventMask gdk_window_get_device_events (GdkWindow *window, GdkDevice *device);	# Returns the event mask for window corresponding to an specific device.
	window		# a GdkWindow .
	device		# a GdkDevice .
	return:		#  device event mask for window 
void gdk_window_set_device_events (GdkWindow *window, GdkDevice *device, GdkEventMask event_mask);	# Sets the event mask for a given device (Normally a floating device, notattached to any visible pointer) to window. For example, an event maskincluding GDK_BUTTON_PRESS_MASK means the window should report buttonpress events. The event mask is the bitwise OR of values from theGdkEventMask enumeration.
	window		# a GdkWindow 
	device		# GdkDevice to enable events for.
	event_mask		# event mask for window
GdkEventMask gdk_window_get_source_events (GdkWindow *window, GdkInputSource source);	# Returns the event mask for window corresponding to the device class specifiedby source.
	window		# a GdkWindow 
	source		# a GdkInputSource to define the source class.
	return:		#  source event mask for window 
void gdk_window_set_source_events (GdkWindow *window, GdkInputSource source, GdkEventMask event_mask);	# Sets the event mask for any floating device (i.e. not attached to anyvisible pointer) that has the source defined as source. This eventmask will be applied both to currently existing, newly added devicesafter this call, and devices being attached/detached.
	window		# a GdkWindow 
	source		# a GdkInputSource to define the source class.
	event_mask		# event mask for window
gboolean gdk_window_get_event_compression (GdkWindow *window);	# Get the current event compression setting for this window.
	window		# a GdkWindow 
	return:		#  TRUE if motion events will be compressed 
void gdk_window_set_event_compression (GdkWindow *window, gboolean event_compression);	# Determines whether or not extra unprocessed motion events inthe event queue can be discarded. If TRUE only the most recentevent will be delivered.
	window		# a GdkWindow 
	event_compression		# TRUE if motion events should be compressed
void gdk_window_coords_from_parent (GdkWindow *window, gdouble parent_x, gdouble parent_y, gdouble *x, gdouble *y);	# Transforms window coordinates from a parent window to a childwindow.
	window		# a child window
	parent_x		# X coordinate in parent’s coordinate system
	parent_y		# Y coordinate in parent’s coordinate system
	x		#  return location for X coordinate in child’s coordinate system. 
	y		#  return location for Y coordinate in child’s coordinate system. 
void gdk_window_coords_to_parent (GdkWindow *window, gdouble x, gdouble y, gdouble *parent_x, gdouble *parent_y);	# Transforms window coordinates from a child window to its parentwindow. Calling this function is equivalent to adding the returnvalues of gdk_window_get_position() to the child coordinates.
	window		# a child window
	x		# X coordinate in child’s coordinate system
	y		# Y coordinate in child’s coordinate system
	parent_x		#  return location for X coordinatein parent’s coordinate system, or NULL . 
gint64 gdk_frame_clock_get_frame_time (GdkFrameClock *frame_clock);	# Gets the time that should currently be used for animations. Insidethe processing of a frame, it’s the time used to compute theanimation position of everything in a frame. Outside of a frame, it'sthe time of the conceptual “previous frame,” which may be eitherthe actual previous frame time, or if that’s too old, an updatedtime.
	frame_clock		# a GdkFrameClock 
	return:		#  a timestamp in microseconds, in the timescale ofof g_get_monotonic_time() . 
void gdk_frame_clock_request_phase (GdkFrameClock *frame_clock, GdkFrameClockPhase phase);	# Asks the frame clock to run a particular phase. The signalcorresponding the requested phase will be emitted the nexttime the frame clock processes. Multiple calls togdk_frame_clock_request_phase() will be combined togetherand only one frame processed. If you are displaying animatedcontent and want to continually request theGDK_FRAME_CLOCK_PHASE_UPDATE phase for a period of time,you should use gdk_frame_clock_begin_updating() instead, sincethis allows GTK+ to adjust system parameters to get maximallysmooth animations.
	frame_clock		# a GdkFrameClock 
	phase		# the phase that is requested
void gdk_frame_clock_begin_updating (GdkFrameClock *frame_clock);	# Starts updates for an animation. Until a matching call togdk_frame_clock_end_updating() is made, the frame clock will continuallyrequest a new frame with the GDK_FRAME_CLOCK_PHASE_UPDATE phase.This function may be called multiple times and frames will berequested until gdk_frame_clock_end_updating() is called the samenumber of times.
	frame_clock		# a GdkFrameClock 
void gdk_frame_clock_end_updating (GdkFrameClock *frame_clock);	# Stops updates for an animation. See the documentation forgdk_frame_clock_begin_updating() .
	frame_clock		# a GdkFrameClock 
gint64 gdk_frame_clock_get_frame_counter (GdkFrameClock *frame_clock);	# A GdkFrameClock maintains a 64-bit counter that increments foreach frame drawn.
	frame_clock		# a GdkFrameClock 
	return:		#  inside frame processing, the value of the frame counterfor the current frame. Outside of frame processing, the framecounter for the last frame. 
gint64 gdk_frame_clock_get_history_start (GdkFrameClock *frame_clock);	# GdkFrameClock internally keeps a history of GdkFrameTimings objects for recent frames that can be retrieved withgdk_frame_clock_get_timings() . The set of stored framesis the set from the counter values given bygdk_frame_clock_get_history_start() andgdk_frame_clock_get_frame_counter() , inclusive.
	frame_clock		# a GdkFrameClock 
	return:		#  the frame counter value for the oldest framethat is available in the internal frame history of theGdkFrameClock . 
GdkFrameTimings  *gdk_frame_clock_get_timings (GdkFrameClock *frame_clock, gint64 frame_counter);	# Retrieves a GdkFrameTimings object holding timing informationfor the current frame or a recent frame. The GdkFrameTimings object may not yet be complete: see gdk_frame_timings_get_complete() .
	frame_clock		# a GdkFrameClock 
	frame_counter		# the frame counter value identifying the frame tobe received.
	return:		#  the GdkFrameTimings object for the specifiedframe, or NULL if it is not available. Seegdk_frame_clock_get_history_start() .  
GdkFrameTimings  *gdk_frame_clock_get_current_timings (GdkFrameClock *frame_clock);	# Gets the frame timings for the current frame.
	frame_clock		# a GdkFrameClock 
	return:		#  the GdkFrameTimings for the frame currentlybeing processed, or even no frame is being processed, for theprevious frame. Before any frames have been procesed, returnsNULL .  
void gdk_frame_clock_get_refresh_info (GdkFrameClock *frame_clock, gint64 base_time, gint64 *refresh_interval_return, gint64 *presentation_time_return);	# Using the frame history stored in the frame clock, finds the lastknown presentation time and refresh interval, and assuming thatpresentation times are separated by the refresh interval,predicts a presentation time that is a multiple of the refreshinterval after the last presentation time, and later than base_time.
	frame_clock		# a GdkFrameClock 
	base_time		# base time for determining a presentaton time
	refresh_interval_return		# a location to store the determined refreshinterval, or NULL . A default refresh interval of 1/60th ofa second will be stored if no history is present.
	presentation_time_return		# a location to store the nextcandidate presentation time after the given base time.0 will be will be stored if no history is present.
GdkFrameTimings  *gdk_frame_timings_ref (GdkFrameTimings *timings);	# Increases the reference count of timings.
	timings		# a GdkFrameTimings 
	return:		#  timings 
void gdk_frame_timings_unref (GdkFrameTimings *timings);	# Decreases the reference count of timings. If timingsis no longer referenced, it will be freed.
	timings		# a GdkFrameTimings 
gint64 gdk_frame_timings_get_frame_counter (GdkFrameTimings *timings);	# Gets the frame counter value of the GdkFrameClock when thisthis frame was drawn.
	timings		# a GdkFrameTimings 
	return:		#  the frame counter value for this frame 
gboolean gdk_frame_timings_get_complete (GdkFrameTimings *timings);	# The timing information in a GdkFrameTimings is filled inincrementally as the frame as drawn and passed off to thewindow system for processing and display to the user. Theaccessor functions for GdkFrameTimings can return 0 toindicate an unavailable value for two reasons: either becausethe information is not yet available, or because it isn'tavailable at all. Once gdk_frame_timings_get_complete() returnsTRUE for a frame, you can be certain that no further valueswill become available and be stored in the GdkFrameTimings .
	timings		# a GdkFrameTimings 
	return:		#  TRUE if all information that will be availablefor the frame has been filled in. 
gint64 gdk_frame_timings_get_frame_time (GdkFrameTimings *timings);	# Returns the frame time for the frame. This is the time valuethat is typically used to time animations for the frame. Seegdk_frame_clock_get_frame_time() .
	timings		# A GdkFrameTimings 
	return:		#  the frame time for the frame, in the timescaleof g_get_monotonic_time()  
gint64 gdk_frame_timings_get_presentation_time (GdkFrameTimings *timings);	# Reurns the presentation time. This is the time at which the framebecame visible to the user.
	timings		# a GdkFrameTimings 
	return:		#  the time the frame was displayed to the user, in thetimescale of g_get_monotonic_time() , or 0 if no presentationtime is available. See gdk_frame_timings_get_complete()  
gint64 gdk_frame_timings_get_refresh_interval (GdkFrameTimings *timings);	# Gets the natural interval between presentation times forthe display that this frame was displayed on. Frame presentationusually happens during the “vertical blanking interval”.
	timings		# a GdkFrameTimings 
	return:		#  the refresh interval of the display, in microseconds,or 0 if the refresh interval is not available.See gdk_frame_timings_get_complete() . 
gint64 gdk_frame_timings_get_predicted_presentation_time (GdkFrameTimings *timings);	# Gets the predicted time at which this frame will be displayed. Althoughno predicted time may be available, if one is available, it willbe available while the frame is being generated, in contrast togdk_frame_timings_get_presentation_time() , which is only availableafter the frame has been presented. In general, if you are simplyanimating, you should use gdk_frame_clock_get_frame_time() ratherthan this function, but this function is useful for applicationsthat want exact control over latency. For example, a movie playermay want this information for Audio/Video synchronization.
	timings		# a GdkFrameTimings 
	return:		#  The predicted time at which the frame will be presented,in the timescale of g_get_monotonic_time() , or 0 if no predictedpresentation time is available. 
GdkWindow  *gdk_drawing_context_get_window (GdkDrawingContext *context);	# Retrieves the window that created the drawing context.
	context		# a GdkDrawingContext 
	return:		#  a GdkWindow .  
cairo_region_t  *gdk_drawing_context_get_clip (GdkDrawingContext *context);	# Retrieves a copy of the clip region used when creating the context.
	context		# a GdkDrawingContext 
	return:		#  a Cairo region.  
cairo_t  *gdk_drawing_context_get_cairo_context (GdkDrawingContext *context);	# Retrieves a Cairo context to be used to draw on the GdkWindow that created the GdkDrawingContext . The context must have beencreated without a GdkDrawContext for this function to work. Ifgdk_drawing_context_get_paint_context() does not return NULL ,then this function will.
	context		# a GdkDrawingContext created with a NULL paint context
	return:		#  a Cairo context to be used to drawthe contents of the GdkWindow . The context is owned by theGdkDrawingContext and should not be destroyed. NULL isreturned when a paint context is in used.  
gboolean gdk_drawing_context_is_valid (GdkDrawingContext *context);	# Checks whether the given GdkDrawingContext is valid.
	context		# a GdkDrawingContext 
	return:		#  TRUE if the context is valid 
GdkDisplay  *gdk_gl_context_get_display (GdkGLContext *context);	# Retrieves the GdkDisplay the context is created for
	context		# a GdkGLContext 
	return:		#  a GdkDisplay or NULL .  
GdkWindow  *gdk_gl_context_get_window (GdkGLContext *context);	# Retrieves the GdkWindow used by the context.
	context		# a GdkGLContext 
	return:		#  a GdkWindow or NULL .  
GdkGLContext  *gdk_gl_context_get_shared_context (GdkGLContext *context);	# Retrieves the GdkGLContext that this context share data with.
	context		# a GdkGLContext 
	return:		#  a GdkGLContext or NULL .  
void gdk_gl_context_get_version (GdkGLContext *context, int *major, int *minor);	# Retrieves the OpenGL version of the context.
	context		# a GdkGLContext 
	major		#  return location for the major version. 
void gdk_gl_context_set_required_version (GdkGLContext *context, int major, int minor);	# Sets the major and minor version of OpenGL to request.
	context		# a GdkGLContext 
	major		# the major version to request
	minor		# the minor version to request
void gdk_gl_context_get_required_version (GdkGLContext *context, int *major, int *minor);	# Retrieves the major and minor version requested by callinggdk_gl_context_set_required_version() .
	context		# a GdkGLContext 
	major		#  return location for the major version to request. 
void gdk_gl_context_set_debug_enabled (GdkGLContext *context, gboolean enabled);	# Sets whether the GdkGLContext should perform extra validations andrun time checking. This is useful during development, but hasadditional overhead.
	context		# a GdkGLContext 
	enabled		# whether to enable debugging in the context
gboolean gdk_gl_context_get_debug_enabled (GdkGLContext *context);	# Retrieves the value set using gdk_gl_context_set_debug_enabled() .
	context		# a GdkGLContext 
	return:		#  TRUE if debugging is enabled 
void gdk_gl_context_set_forward_compatible (GdkGLContext *context, gboolean compatible);	# Sets whether the GdkGLContext should be forward compatible.
	context		# a GdkGLContext 
	compatible		# whether the context should be forward compatible
gboolean gdk_gl_context_get_forward_compatible (GdkGLContext *context);	# Retrieves the value set using gdk_gl_context_set_forward_compatible() .
	context		# a GdkGLContext 
	return:		#  TRUE if the context should be forward compatible 
void gdk_gl_context_set_use_es (GdkGLContext *context, int use_es);	# Requests that GDK create a OpenGL ES context instead of an OpenGL one,if the platform and windowing system allows it.
	context		# a GdkGLContext :
	use_es		# whether the context should use OpenGL ES instead of OpenGL,or -1 to allow auto-detection
gboolean gdk_gl_context_get_use_es (GdkGLContext *context);	# Checks whether the context is using an OpenGL or OpenGL ES profile.
	context		# a GdkGLContext 
	return:		#  TRUE if the GdkGLContext is using an OpenGL ES profile 
gboolean gdk_gl_context_is_legacy (GdkGLContext *context);	# Whether the GdkGLContext is in legacy mode or not.
	context		# a GdkGLContext 
	return:		#  TRUE if the GL context is in legacy mode 
gboolean gdk_gl_context_realize (GdkGLContext *context, GError **error);	# Realizes the given GdkGLContext .
	context		# a GdkGLContext 
	error		# return location for a GError 
	return:		#  TRUE if the context is realized 
cairo_region_t  *gdk_gl_context_get_damage (GdkGLContext *context);	# Returns the part of the backbuffer that is known to be damaged and wouldneed to be redrawn. This is the area that needs to be respected in additionto areas invalidated by GTK or the windowing system itself.
	context		# a GdkGLContext 
	return:		#  The damage to the backbuffer 
void gdk_gl_context_make_current (GdkGLContext *context);	# Makes the context the current one.
	context		# a GdkGLContext 
GdkGLContext  *gdk_gl_context_get_current (void );	# Retrieves the current GdkGLContext .
	return:		#  the current GdkGLContext , or NULL .  
void gdk_gl_context_clear_current (void );	# Clears the current GdkGLContext .
VkDevice gdk_vulkan_context_get_device (GdkVulkanContext *context);	# VkDevice gdk_vulkan_context_get_device (GdkVulkanContext *context);</pre></div><hr>
uint32_t gdk_vulkan_context_get_draw_index (GdkVulkanContext *context);	# uint32_t gdk_vulkan_context_get_draw_index (GdkVulkanContext *context);</pre></div><hr>
VkSemaphore gdk_vulkan_context_get_draw_semaphore (GdkVulkanContext *context);	# VkSemaphore gdk_vulkan_context_get_draw_semaphore (GdkVulkanContext *context);</pre></div><hr>
VkImage gdk_vulkan_context_get_image (GdkVulkanContext *context, guint id);	# VkImage gdk_vulkan_context_get_image (GdkVulkanContext *context, guint id);</pre></div><hr>
VkFormat gdk_vulkan_context_get_image_format (GdkVulkanContext *context);	# VkFormat gdk_vulkan_context_get_image_format (GdkVulkanContext *context);</pre></div><hr>
VkInstance gdk_vulkan_context_get_instance (GdkVulkanContext *context);	# VkInstance gdk_vulkan_context_get_instance (GdkVulkanContext *context);</pre></div><hr>
uint32_t gdk_vulkan_context_get_n_images (GdkVulkanContext *context);	# uint32_t gdk_vulkan_context_get_n_images (GdkVulkanContext *context);</pre></div><hr>
VkPhysicalDevice gdk_vulkan_context_get_physical_device (GdkVulkanContext *context);	# VkPhysicalDevice gdk_vulkan_context_get_physical_device (GdkVulkanContext *context);</pre></div><hr>
VkQueue gdk_vulkan_context_get_queue (GdkVulkanContext *context);	# VkQueue gdk_vulkan_context_get_queue (GdkVulkanContext *context);</pre></div><hr>
uint32_t gdk_vulkan_context_get_queue_family_index (GdkVulkanContext *context);	# uint32_t gdk_vulkan_context_get_queue_family_index (GdkVulkanContext *context);</pre></div></div><div class="refsect1"> <h2>Types and Values</h2>
gboolean gdk_events_pending (void );	# Checks if any events are ready to be processed for any display.
	return:		#  TRUE if any events are pending. 
GdkEvent  *gdk_event_peek (void );	# If there is an event waiting in the event queue of some opendisplay, returns a copy of it. See gdk_display_peek_event() .
	return:		#  a copy of the first GdkEvent on some eventqueue, or NULL if no events are in any queues. The returnedGdkEvent should be freed with gdk_event_free() .  
GdkEvent  *gdk_event_get (void );	# Checks all open displays for a GdkEvent to process,to be processedon, fetching events from the windowing system if necessary.See gdk_display_get_event() .
	return:		#  the next GdkEvent to be processed, or NULL if no events are pending. The returned GdkEvent should be freedwith gdk_event_free() .  
void gdk_event_put (const GdkEvent *event);	# Appends a copy of the given event onto the front of the eventqueue for event-&gt;any.window’s display, or the default eventqueue if event-&gt;any.window is NULL . See gdk_display_put_event() .
	event		# a GdkEvent .
GdkEvent  *gdk_event_new (GdkEventType type);	#创建对象:event of the given type. All fields are set to 0.
	type		# a GdkEventType 
	return:		#  a newly-allocated GdkEvent . The returned GdkEvent should be freed with gdk_event_free() . 
GdkEvent  *gdk_event_copy (const GdkEvent *event);	# Copies a GdkEvent , copying or incrementing the reference count of theresources associated with it (e.g. GdkWindow ’s and strings).
	event		# a GdkEvent 
	return:		#  a copy of event. The returned GdkEvent should be freed withgdk_event_free() . 
void gdk_event_free (GdkEvent *event);	# Frees a GdkEvent , freeing or decrementing any resources associated with it.Note that this function should only be called with events returned fromfunctions such as gdk_event_peek() , gdk_event_get() , gdk_event_copy() and gdk_event_new() .
	event		# a GdkEvent .
gboolean gdk_event_get_axis (const GdkEvent *event, GdkAxisUse axis_use, gdouble *value);	# Extract the axis value for a particular axis use froman event structure.
	event		# a GdkEvent 
	axis_use		# the axis use to look for
	value		#  location to store the value found. 
	return:		#  TRUE if the specified axis was found, otherwise FALSE  
gboolean gdk_event_get_button (const GdkEvent *event, guint *button);	# Extract the button number from an event.
	event		# a GdkEvent 
	button		#  location to store mouse button number. 
	return:		#  TRUE if the event delivered a button number 
gboolean gdk_event_get_click_count (const GdkEvent *event, guint *click_count);	# Extracts the click count from an event.
	event		# a GdkEvent 
	click_count		#  location to store click count. 
	return:		#  TRUE if the event delivered a click count 
gboolean gdk_event_get_coords (const GdkEvent *event, gdouble *x_win, gdouble *y_win);	# Extract the event window relative x/y coordinates from an event.
	event		# a GdkEvent 
	x_win		#  location to put event window x coordinate. 
	return:		#  TRUE if the event delivered event window coordinates 
gboolean gdk_event_get_keycode (const GdkEvent *event, guint16 *keycode);	# Extracts the hardware keycode from an event.
	event		# a GdkEvent 
	keycode		#  location to store the keycode. 
	return:		#  TRUE if the event delivered a hardware keycode 
gboolean gdk_event_get_keyval (const GdkEvent *event, guint *keyval);	# Extracts the keyval from an event.
	event		# a GdkEvent 
	keyval		#  location to store the keyval. 
	return:		#  TRUE if the event delivered a key symbol 
gboolean gdk_event_get_root_coords (const GdkEvent *event, gdouble *x_root, gdouble *y_root);	# Extract the root window relative x/y coordinates from an event.
	event		# a GdkEvent 
	x_root		#  location to put root window x coordinate. 
	return:		#  TRUE if the event delivered root window coordinates 
gboolean gdk_event_get_scroll_direction (const GdkEvent *event, GdkScrollDirection *direction);	# Extracts the scroll direction from an event.
	event		# a GdkEvent 
	direction		#  location to store the scroll direction. 
	return:		#  TRUE if the event delivered a scroll direction 
gboolean gdk_event_get_scroll_deltas (const GdkEvent *event, gdouble *delta_x, gdouble *delta_y);	# Retrieves the scroll deltas from a GdkEvent 
	event		# a GdkEvent 
	delta_x		#  return location for X delta. 
	return:		#  TRUE if the event contains smooth scroll information 
gboolean gdk_event_is_scroll_stop_event (const GdkEvent *event);	# Check whether a scroll event is a stop scroll event. Scroll sequenceswith smooth scroll information may provide a stop scroll event once theinteraction with the device finishes, e.g. by lifting a finger. Thisstop scroll event is the signal that a widget may trigger kineticscrolling based on the current velocity.
	event		# a GdkEvent 
	return:		#  TRUE if the event is a scroll stop event 
gboolean gdk_event_get_state (const GdkEvent *event, GdkModifierType *state);	# If the event contains a “state” field, puts that field in state. Otherwisestores an empty state (0). Returns TRUE if there was a state fieldin the event. event may be NULL , in which case it’s treatedas if the event had no state field.
	event		#  a GdkEvent or NULL . 
	return:		#  TRUE if there was a state field in the event  
guint32 gdk_event_get_time (const GdkEvent *event);	# Returns the time stamp from event, if there is one; otherwisereturns GDK_CURRENT_TIME . If event is NULL , returns GDK_CURRENT_TIME .
	event		# a GdkEvent 
	return:		#  time stamp field from event 
GdkWindow  *gdk_event_get_window (const GdkEvent *event);	# Extracts the GdkWindow associated with an event.
	event		# a GdkEvent 
	return:		#  The GdkWindow associated with the event.  
GdkEventType gdk_event_get_event_type (const GdkEvent *event);	# Retrieves the type of the event.
	event		# a GdkEvent 
	return:		#  a GdkEventType  
GdkEventSequence  *gdk_event_get_event_sequence (const GdkEvent *event);	# If event if of type GDK_TOUCH_BEGIN , GDK_TOUCH_UPDATE ,GDK_TOUCH_END or GDK_TOUCH_CANCEL , returns the GdkEventSequence to which the event belongs. Otherwise, return NULL .
	event		# a GdkEvent 
	return:		#  the event sequence that the event belongs to.  
void gdk_event_request_motions (const GdkEventMotion *event);	# Request more motion notifies if event is a motion notify hint event.
	event		# a valid GdkEvent 
gboolean gdk_events_get_angle (GdkEvent *event1, GdkEvent *event2, gdouble *angle);	# If both events contain X/Y information, this function will return TRUE and return in angle the relative angle from event1 to event2. The rotationdirection for positive angles is from the positive X axis towards the positiveY axis.
	event1		# first GdkEvent 
	event2		# second GdkEvent 
	angle		#  return location for the relative angle between both events. 
	return:		#  TRUE if the angle could be calculated. 
gboolean gdk_events_get_center (GdkEvent *event1, GdkEvent *event2, gdouble *x, gdouble *y);	# If both events contain X/Y information, the center of both coordinateswill be returned in x and y.
	event1		# first GdkEvent 
	event2		# second GdkEvent 
	x		#  return location for the X coordinate of the center. 
	return:		#  TRUE if the center could be calculated. 
gboolean gdk_events_get_distance (GdkEvent *event1, GdkEvent *event2, gdouble *distance);	# If both events have X/Y information, the distance between both coordinates(as in a straight line going from event1 to event2) will be returned.
	event1		# first GdkEvent 
	event2		# second GdkEvent 
	distance		#  return location for the distance. 
	return:		#  TRUE if the distance could be calculated. 
gboolean gdk_event_triggers_context_menu (const GdkEvent *event);	# This function returns whether a GdkEventButton should trigger acontext menu, according to platform conventions. The right mousebutton always triggers context menus. Additionally, ifgdk_keymap_get_modifier_mask() returns a non-0 mask forGDK_MODIFIER_INTENT_CONTEXT_MENU , then the left mouse button willalso trigger a context menu if this modifier is pressed.
	event		# a GdkEvent , currently only button events are meaningful values
	return:		#  TRUE if the event should trigger a context menu. 
GdkSeat  *gdk_event_get_seat (const GdkEvent *event);	# Returns the GdkSeat this event was generated for.
	event		# a GdkEvent 
	return:		#  The GdkSeat of this event.  
int gdk_event_get_scancode (GdkEvent *event);	# Gets the keyboard low-level scancode of a key event.
	event		# a GdkEvent 
	return:		#  The associated keyboard scancode or 0 
gboolean gdk_event_get_pointer_emulated (GdkEvent *event);	# Returns whether this event is an 'emulated' pointer event (typicallyfrom a touch event), as opposed to a real one.
	return:		#  TRUE if this event is emulated 
void gdk_event_handler_set (GdkEventFunc func, gpointer data, GDestroyNotify notify);	# Sets the function to call to handle all events from GDK.
	func		# the function to call to handle events from GDK.
	data		# user data to pass to the function. 
	notify		# the function to call when the handler function is removed, i.e. when
void <span class="c_punctuation">( *GdkEventFunc<span class="c_punctuation">) (GdkEvent *event, gpointer data);	# Specifies the type of function passed to gdk_event_handler_set() tohandle all GDK events.
	event		# the GdkEvent to process.
	data		#  user data set when the event handler was installed with
gboolean gdk_get_show_events (void );	# Gets whether event debugging output is enabled.
	return:		#  TRUE if event debugging output is enabled. 
void gdk_set_show_events (gboolean show_events);	# Sets whether a trace of received events is output.Note that GTK+ must be compiled with debugging (that is,configured using the --enable-debug option)to use this option.
	show_events		# TRUE to output event debugging information.
void gdk_event_set_screen (GdkEvent *event, GdkScreen *screen);	# Sets the screen for event to screen. The event musthave been allocated by GTK+, for instance, bygdk_event_copy() .
	event		# a GdkEvent 
	screen		# a GdkScreen 
GdkScreen  *gdk_event_get_screen (const GdkEvent *event);	# Returns the screen for the event. The screen istypically the screen for event-&gt;any.window, butfor events such as mouse events, it is the screenwhere the pointer was when the event occurs -that is, the screen which has the root window to which event-&gt;motion.x_root andevent-&gt;motion.y_root are relative.
	event		# a GdkEvent 
	return:		#  the screen for the event.  
GdkDevice  *gdk_event_get_device (const GdkEvent *event);	# If the event contains a “device” field, this function will returnit, else it will return NULL .
	event		# a GdkEvent .
	return:		#  a GdkDevice , or NULL .  
void gdk_event_set_device (GdkEvent *event, GdkDevice *device);	# Sets the device for event to device. The event musthave been allocated by GTK+, for instance, bygdk_event_copy() .
	event		# a GdkEvent 
	device		# a GdkDevice 
GdkDevice  *gdk_event_get_source_device (const GdkEvent *event);	# This function returns the hardware (slave) GdkDevice that hastriggered the event, falling back to the virtual (master) device(as in gdk_event_get_device() ) if the event wasn’t caused byinteraction with a hardware device. This may happen for examplein synthesized crossing events after a GdkWindow updates itsgeometry or a grab is acquired/released.
	event		# a GdkEvent 
	return:		#  a GdkDevice , or NULL .  
void gdk_event_set_source_device (GdkEvent *event, GdkDevice *device);	# Sets the slave device for event to device.
	event		# a GdkEvent 
	device		# a GdkDevice 
GdkDeviceTool  *gdk_event_get_device_tool (const GdkEvent *event);	# If the event was generated by a device that supportsdifferent tools (eg. a tablet), this function willreturn a GdkDeviceTool representing the tool thatcaused the event. Otherwise, NULL will be returned.
	event		# a GdkEvent 
	return:		#  The current device tool, or NULL .  
void gdk_event_set_device_tool (GdkEvent *event, GdkDeviceTool *tool);	# Sets the device tool for this event, should be rarely used.
	event		# a GdkEvent 
	tool		#  tool to set on the event, or NULL . 
gboolean gdk_setting_get (const gchar *name, GValue *value);	# Obtains a desktop-wide setting, such as the double-click time,for the default screen. See gdk_screen_get_setting() .
	name		# the name of the setting.
	value		# location to store the value of the setting.
	return:		#  TRUE if the setting existed and a value was storedin value, FALSE otherwise. 
GdkKeymap  *gdk_keymap_get_default (void );	# Returns the GdkKeymap attached to the default display.
	return:		#  the GdkKeymap attached to the default display.  
GdkKeymap  *gdk_keymap_get_for_display (GdkDisplay *display);	# Returns the GdkKeymap attached to display.
	display		# the GdkDisplay .
	return:		#  the GdkKeymap attached to display.  
guint gdk_keymap_lookup_key (GdkKeymap *keymap, const GdkKeymapKey *key);	# Looks up the keyval mapped to a keycode/group/level triplet.If no keyval is bound to key, returns 0. For normal user input,you want to use gdk_keymap_translate_keyboard_state() instead ofthis function, since the effective group/level may not bethe same as the current keyboard state.
	keymap		# a GdkKeymap 
	key		# a GdkKeymapKey with keycode, group, and level initialized
	return:		#  a keyval, or 0 if none was mapped to the given key 
gboolean gdk_keymap_translate_keyboard_state (GdkKeymap *keymap, guint hardware_keycode, GdkModifierType state, gint group, guint *keyval, gint *effective_group, gint *level, GdkModifierType *consumed_modifiers);	# Translates the contents of a GdkEventKey into a keyval, effectivegroup, and level. Modifiers that affected the translation andare thus unavailable for application use are returned inconsumed_modifiers.See Groups for an explanation ofgroups and levels. The effective_group is the group that wasactually used for the translation; some keys such as Enter are notaffected by the active keyboard group. The level is derived fromstate. For convenience, GdkEventKey already contains the translatedkeyval, so this function isn’t as useful as you might think.
	keymap		# a GdkKeymap 
	hardware_keycode		# a keycode
	state		# a modifier state
	group		# active keyboard group
	keyval		#  return location for keyval, or NULL . 
	return:		#  TRUE if there was a keyval bound to the keycode/state/group 
gboolean gdk_keymap_get_entries_for_keyval (GdkKeymap *keymap, guint keyval, GdkKeymapKey **keys, gint *n_keys);	# Obtains a list of keycode/group/level combinations that willgenerate keyval. Groups and levels are two kinds of keyboard mode;in general, the level determines whether the top or bottom symbolon a key is used, and the group determines whether the left orright symbol is used. On US keyboards, the shift key changes thekeyboard level, and there are no groups. A group switch key mightconvert a keyboard between Hebrew to English modes, for example.GdkEventKey contains a group field that indicates the activekeyboard group. The level is computed from the modifier mask.The returned array should be freedwith g_free() .
	keymap		# a GdkKeymap 
	keyval		# a keyval, such as GDK_KEY_a, GDK_KEY_Up, GDK_KEY_Return, etc.
	keys		#  return locationfor an array of GdkKeymapKey . 
	return:		#  TRUE if keys were found and returned 
gboolean gdk_keymap_get_entries_for_keycode (GdkKeymap *keymap, guint hardware_keycode, GdkKeymapKey **keys, guint **keyvals, gint *n_entries);	# Returns the keyvals bound to hardware_keycode.The Nth GdkKeymapKey in keys is bound to the Nthkeyval in keyvals. Free the returned arrays with g_free() .When a keycode is pressed by the user, the keyval fromthis list of entries is selected by considering the effectivekeyboard group and level. See gdk_keymap_translate_keyboard_state() .
	keymap		# a GdkKeymap 
	hardware_keycode		# a keycode
	keys		#  returnlocation for array of GdkKeymapKey , or NULL . 
	return:		#  TRUE if there were any entries 
PangoDirection gdk_keymap_get_direction (GdkKeymap *keymap);	# Returns the direction of effective layout of the keymap.
	keymap		# a GdkKeymap 
	return:		#  PANGO_DIRECTION_LTR or PANGO_DIRECTION_RTL if it can determine the direction. PANGO_DIRECTION_NEUTRAL otherwise. 
gboolean gdk_keymap_have_bidi_layouts (GdkKeymap *keymap);	# Determines if keyboard layouts for both right-to-left and left-to-rightlanguages are in use.
	keymap		# a GdkKeymap 
	return:		#  TRUE if there are layouts in both directions, FALSE otherwise 
gboolean gdk_keymap_get_caps_lock_state (GdkKeymap *keymap);	# Returns whether the Caps Lock modifer is locked.
	keymap		# a GdkKeymap 
	return:		#  TRUE if Caps Lock is on 
gboolean gdk_keymap_get_num_lock_state (GdkKeymap *keymap);	# Returns whether the Num Lock modifer is locked.
	keymap		# a GdkKeymap 
	return:		#  TRUE if Num Lock is on 
gboolean gdk_keymap_get_scroll_lock_state (GdkKeymap *keymap);	# Returns whether the Scroll Lock modifer is locked.
	keymap		# a GdkKeymap 
	return:		#  TRUE if Scroll Lock is on 
guint gdk_keymap_get_modifier_state (GdkKeymap *keymap);	# Returns the current modifier state.
	keymap		# a GdkKeymap 
	return:		#  the current modifier state. 
void gdk_keymap_add_virtual_modifiers (GdkKeymap *keymap, GdkModifierType *state);	# Maps the non-virtual modifiers (i.e Mod2, Mod3, ...) which are setin state to the virtual modifiers (i.e. Super, Hyper and Meta) andset the corresponding bits in state.
	keymap		# a GdkKeymap 
	state		#  pointer to the modifier mask to change. 
gboolean gdk_keymap_map_virtual_modifiers (GdkKeymap *keymap, GdkModifierType *state);	# Maps the virtual modifiers (i.e. Super, Hyper and Meta) whichare set in state to their non-virtual counterparts (i.e. Mod2,Mod3,...) and set the corresponding bits in state.
	keymap		# a GdkKeymap 
	state		#  pointer to the modifier state to map. 
	return:		#  FALSE if two virtual modifiers were mapped to thesame non-virtual modifier. Note that FALSE is also returnedif a virtual modifier is mapped to a non-virtual modifier thatwas already set in state. 
GdkModifierType gdk_keymap_get_modifier_mask (GdkKeymap *keymap, GdkModifierIntent intent);	# Returns the modifier mask the keymap’s windowing system backenduses for a particular purpose.
	keymap		# a GdkKeymap 
	intent		# the use case for the modifier mask
	return:		#  the modifier mask used for intent. 
gchar  *gdk_keyval_name (guint keyval);	# Converts a key value into a symbolic name.
	keyval		# a key value
	return:		#  a string containing the nameof the key, or NULL if keyvalis not a valid key. The stringshould not be modified.  
guint gdk_keyval_from_name (const gchar *keyval_name);	# Converts a key name to a key value.
	keyval_name		# a key name
	return:		#  the corresponding key value, or GDK_KEY_VoidSymbolif the key name is not a valid key 
void gdk_keyval_convert_case (guint symbol, guint *lower, guint *upper);	# Obtains the upper- and lower-case versions of the keyval symbol.Examples of keyvals are GDK_KEY_a , GDK_KEY_Enter , GDK_KEY_F1 , etc.
	symbol		# a keyval
	lower		#  return location for lowercase version of symbol. 
	upper		#  return location for uppercase version of symbol. 
guint gdk_keyval_to_upper (guint keyval);	# Converts a key value to upper case, if applicable.
	keyval		# a key value.
	return:		#  the upper case form of keyval, or keyvalitself if it is alreadyin upper case or it is not subject to case conversion. 
guint gdk_keyval_to_lower (guint keyval);	# Converts a key value to lower case, if applicable.
	keyval		# a key value.
	return:		#  the lower case form of keyval, or keyvalitself if it is alreadyin lower case or it is not subject to case conversion. 
gboolean gdk_keyval_is_upper (guint keyval);	# Returns TRUE if the given key value is in upper case.
	keyval		# a key value.
	return:		#  TRUE if keyvalis in upper case, or if keyvalis not subject tocase conversion. 
gboolean gdk_keyval_is_lower (guint keyval);	# Returns TRUE if the given key value is in lower case.
	keyval		# a key value.
	return:		#  TRUE if keyvalis in lower case, or if keyvalis notsubject to case conversion. 
guint32 gdk_keyval_to_unicode (guint keyval);	# Convert from a GDK key symbol to the corresponding ISO10646 (Unicode)character.
	keyval		# a GDK key symbol 
	return:		#  the corresponding unicode character, or 0 if thereis no corresponding character. 
guint gdk_unicode_to_keyval (guint32 wc);	# Convert from a ISO10646 character to a key symbol.
	wc		# a ISO10646 encoded character
	return:		#  the corresponding GDK key symbol, if one exists.or, if there is no corresponding symbol,wc | 0x01000000 
gboolean gdk_selection_owner_set (GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event);	# Sets the owner of the given selection.
	owner		#  a GdkWindow or NULL to indicate that thethe owner for the given should be unset. 
	return:		#  TRUE if the selection owner was successfullychanged to owner, otherwise FALSE . 
gboolean gdk_selection_owner_set_for_display (GdkDisplay *display, GdkWindow *owner, GdkAtom selection, guint32 time_, gboolean send_event);	# Sets the GdkWindow owner as the current owner of the selection selection.
	display		# the GdkDisplay 
	owner		#  a GdkWindow or NULL to indicate that the owner forthe given should be unset. 
	return:		#  TRUE if the selection owner was successfully changed to owner,otherwise FALSE . 
GdkWindow  *gdk_selection_owner_get (GdkAtom selection);	# Determines the owner of the given selection.
	selection		# an atom indentifying a selection.
	return:		#  if there is a selection ownerfor this window, and it is a window known to the current process,the GdkWindow that owns the selection, otherwise NULL . Notethat the return value may be owned by a different process if aforeign window was previously created for that window, but a newforeign window will never be created by this call.  
GdkWindow  *gdk_selection_owner_get_for_display (GdkDisplay *display, GdkAtom selection);	# Determine the owner of the given selection.
	display		# a GdkDisplay 
	selection		# an atom indentifying a selection
	return:		#  if there is a selection ownerfor this window, and it is a window known to the currentprocess, the GdkWindow that owns the selection, otherwiseNULL .  
void gdk_selection_convert (GdkWindow *requestor, GdkAtom selection, GdkAtom target, guint32 time_);	# Retrieves the contents of a selection in a givenform.
	requestor		# a GdkWindow .
	selection		# an atom identifying the selection to get thecontents of.
	target		# the form in which to retrieve the selection.
	time_		# the timestamp to use when retrieving theselection. The selection owner may refuse therequest if it did not own the selection atthe time indicated by the timestamp.
gint gdk_selection_property_get (GdkWindow *requestor, guchar **data, GdkAtom *prop_type, gint *prop_format);	# Retrieves selection data that was stored by the selectiondata in response to a call to gdk_selection_convert() . This functionwill not be used by applications, who should use the GtkClipboard API instead.
	requestor		# the window on which the data is stored
	data		# location to store a pointer to the retrieved data.If the retrieval failed, NULL we be stored here, otherwise, itwill be non-NULL and the returned data should be freed with 
	prop_type		# location to store the type of the property
	prop_format		# location to store the format of the property
	return:		#  the length of the retrieved data. 
void gdk_selection_send_notify (GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_);	# Sends a response to SelectionRequest event.
	requestor		# window to which to deliver response.
	selection		# selection that was requested.
	target		# target that was selected.
	property		# property in which the selection owner stored thedata, or GDK_NONE to indicate that the requestwas rejected.
	time_		# timestamp.
void gdk_selection_send_notify_for_display (GdkDisplay *display, GdkWindow *requestor, GdkAtom selection, GdkAtom target, GdkAtom property, guint32 time_);	# Send a response to SelectionRequest event.
	display		# the GdkDisplay where requestoris realized
	requestor		# window to which to deliver response
	selection		# selection that was requested
	target		# target that was selected
	property		# property in which the selection owner stored the data,or GDK_NONE to indicate that the request was rejected
	time_		# timestamp
GdkAtom gdk_drag_get_selection (GdkDragContext *context);	# Returns the selection atom for the current source window.
	context		# a GdkDragContext .
	return:		#  the selection atom, or GDK_NONE .  
void gdk_drag_abort (GdkDragContext *context, guint32 time_);	# Aborts a drag without dropping.
	context		# a GdkDragContext 
	time_		# the timestamp for this operation
void gdk_drop_reply (GdkDragContext *context, gboolean accepted, guint32 time_);	# Accepts or rejects a drop.
	context		# a GdkDragContext 
	accepted		# TRUE if the drop is accepted
	time_		# the timestamp for this operation
void gdk_drag_drop (GdkDragContext *context, guint32 time_);	# Drops on the current destination.
	context		# a GdkDragContext 
	time_		# the timestamp for this operation
void gdk_drag_drop_done (GdkDragContext *context, gboolean success);	# Inform GDK if the drop ended successfully. Passing FALSE for success may trigger a drag cancellation animation.
	context		# a GdkDragContext 
	success		# whether the drag was ultimatively successful
void gdk_drag_find_window_for_screen (GdkDragContext *context, GdkWindow *drag_window, GdkScreen *screen, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol);	# Finds the destination window and DND protocol to use at thegiven pointer position.
	context		# a GdkDragContext 
	drag_window		# a window which may be at the pointer position, butshould be ignored, since it is put up by the drag source as an icon
	screen		# the screen where the destination window is sought
	x_root		# the x position of the pointer in root coordinates
	y_root		# the y position of the pointer in root coordinates
	dest_window		#  location to store the destination window in. 
	protocol		#  location to store the DND protocol in. 
GdkDragContext  *gdk_drag_begin (GdkWindow *window, GList *targets);	# Starts a drag and创建对象:drag context for it.This function assumes that the drag is controlled by theclient pointer device, use gdk_drag_begin_for_device() tobegin a drag with a different device.
	window		# the source window for this drag.
	targets		#  the offered targets,as list of GdkAtoms . 
	return:		#  a newly created GdkDragContext .  
GdkDragContext  *gdk_drag_begin_for_device (GdkWindow *window, GdkDevice *device, GList *targets);	# Starts a drag and创建对象:drag context for it.
	window		# the source window for this drag
	device		# the device that controls this drag
	targets		#  the offered targets,as list of GdkAtoms . 
	return:		#  a newly created GdkDragContext .  
GdkDragContext  *gdk_drag_begin_from_point (GdkWindow *window, GdkDevice *device, GList *targets, gint x_root, gint y_root);	# Starts a drag and创建对象:drag context for it.
	window		# the source window for this drag
	device		# the device that controls this drag
	targets		#  the offered targets,as list of GdkAtoms . 
	return:		#  a newly created GdkDragContext .  
gboolean gdk_drag_motion (GdkDragContext *context, GdkWindow *dest_window, GdkDragProtocol protocol, gint x_root, gint y_root, GdkDragAction suggested_action, GdkDragAction possible_actions, guint32 time_);	# Updates the drag context when the pointer moves or theset of actions changes.
	context		# a GdkDragContext 
	dest_window		# the new destination window, obtained by
	protocol		# the DND protocol in use, obtained by 
	x_root		# the x position of the pointer in root coordinates
	y_root		# the y position of the pointer in root coordinates
	suggested_action		# the suggested action
	possible_actions		# the possible actions
	time_		# the timestamp for this operation
void gdk_drop_finish (GdkDragContext *context, gboolean success, guint32 time_);	# Ends the drag operation after a drop.
	context		# a GdkDragContext 
	success		# TRUE if the data was successfully received
	time_		# the timestamp for this operation
void gdk_drag_status (GdkDragContext *context, GdkDragAction action, guint32 time_);	# Selects one of the actions offered by the drag source.
	context		# a GdkDragContext 
	action		# the selected action which will be taken when a drop happens,or 0 to indicate that a drop will not be accepted
	time_		# the timestamp for this operation
gboolean gdk_drag_drop_succeeded (GdkDragContext *context);	# Returns whether the dropped data has been successfullytransferred. This function is intended to be used whilehandling a GDK_DROP_FINISHED event, its return value ismeaningless at other times.
	context		# a GdkDragContext 
	return:		#  TRUE if the drop was successful. 
GdkDragProtocol gdk_window_get_drag_protocol (GdkWindow *window, GdkWindow **target);	# Finds out the DND protocol supported by a window.
	window		# the destination window
	target		#  location of the windowwhere the drop should happen. This may be windowor a proxy window,or NULL if windowdoes not support Drag and Drop. 
	return:		#  the supported DND protocol. 
GdkDragAction gdk_drag_context_get_actions (GdkDragContext *context);	# Determines the bitmask of actions proposed by the source ifgdk_drag_context_get_suggested_action() returns GDK_ACTION_ASK .
	context		# a GdkDragContext 
	return:		#  the GdkDragAction flags 
GdkDragAction gdk_drag_context_get_suggested_action (GdkDragContext *context);	# Determines the suggested drag action of the context.
	context		# a GdkDragContext 
	return:		#  a GdkDragAction value 
GdkDragAction gdk_drag_context_get_selected_action (GdkDragContext *context);	# Determines the action chosen by the drag destination.
	context		# a GdkDragContext 
	return:		#  a GdkDragAction value 
GList  *gdk_drag_context_list_targets (GdkDragContext *context);	# Retrieves the list of targets of the context.
	context		# a GdkDragContext 
	return:		#  a GList of targets.  
GdkDevice  *gdk_drag_context_get_device (GdkDragContext *context);	# Returns the GdkDevice associated to the drag context.
	context		# a GdkDragContext 
	return:		#  The GdkDevice associated to context.  
void gdk_drag_context_set_device (GdkDragContext *context, GdkDevice *device);	# Associates a GdkDevice to context, so all Drag and Drop eventsfor context are emitted as if they came from this device.
	context		# a GdkDragContext 
	device		# a GdkDevice 
GdkWindow  *gdk_drag_context_get_source_window (GdkDragContext *context);	# Returns the GdkWindow where the DND operation started.
	context		# a GdkDragContext 
	return:		#  a GdkWindow .  
GdkWindow  *gdk_drag_context_get_dest_window (GdkDragContext *context);	# Returns the destination window for the DND operation.
	context		# a GdkDragContext 
	return:		#  a GdkWindow .  
GdkDragProtocol gdk_drag_context_get_protocol (GdkDragContext *context);	# Returns the drag protocol thats used by this context.
	context		# a GdkDragContext 
	return:		#  the drag protocol 
GdkWindow  *gdk_drag_context_get_drag_window (GdkDragContext *context);	# Returns the window on which the drag icon should be renderedduring the drag operation. Note that the window may not beavailable until the drag operation has begun. GDK will movethe window in accordance with the ongoing drag operation.The window is owned by context and will be destroyed whenthe drag operation is over.
	context		# a GdkDragContext 
	return:		#  the drag window, or NULL .  
void gdk_drag_context_set_hotspot (GdkDragContext *context, gint hot_x, gint hot_y);	# Sets the position of the drag window that will be keptunder the cursor hotspot. Initially, the hotspot is at thetop left corner of the drag window.
	context		# a GdkDragContext 
	hot_x		# x coordinate of the drag window hotspot
	hot_y		# y coordinate of the drag window hotspot
gboolean gdk_drag_context_manage_dnd (GdkDragContext *context, GdkWindow *ipc_window, GdkDragAction actions);	# Requests the drag and drop operation to be managed by context.When a drag and drop operation becomes managed, the GdkDragContext will internally handle all input and source-side GdkEventDND eventsas required by the windowing system.
	context		# a GdkDragContext 
	ipc_window		# Window to use for IPC messaging/events
	actions		# the actions supported by the drag source
	return:		#  TRUE if the drag and drop operation is managed. 
gint gdk_text_property_to_utf8_list_for_display (GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);	# Converts a text property in the given encoding toa list of UTF-8 strings.
	display		# a GdkDisplay 
	encoding		# an atom representing the encoding of the text
	format		# the format of the property
	text		#  the text to convert. 
	return:		#  the number of strings in the resulting list 
gchar  *gdk_utf8_to_string_target (const gchar *str);	# Converts an UTF-8 string into the best possible representationas a STRING. The representation of characters not in STRINGis not specified; it may be as pseudo-escape sequences\x{ABCD}, or it may be in some other form of approximation.
	str		# a UTF-8 string
	return:		#  the newly-allocated string, or NULL if theconversion failed. (It should not fail for any properlyformed UTF-8 string unless system limits like memory orfile descriptors are exceeded.).  
GdkAtom gdk_atom_intern (const gchar *atom_name, gboolean only_if_exists);	# Finds or creates an atom corresponding to a given string.
	atom_name		# a string.
	only_if_exists		# if TRUE , GDK is allowed to not create a new atom, butjust return GDK_NONE if the requested atom doesn’t alreadyexists. Currently, the flag is ignored, since checking theexistance of an atom is as expensive as creating it.
	return:		#  the atom corresponding to atom_name.  
GdkAtom gdk_atom_intern_static_string (const gchar *atom_name);	# Finds or creates an atom corresponding to a given string.
	atom_name		# a static string
	return:		#  the atom corresponding to atom_name.  
gchar  *gdk_atom_name (GdkAtom atom);	# Determines the string corresponding to an atom.
	atom		# a GdkAtom .
	return:		#  a newly-allocated string containing the stringcorresponding to atom. When you are done with thereturn value, you should free it using g_free() . 
gboolean gdk_property_get (GdkWindow *window, GdkAtom property, GdkAtom type, gulong offset, gulong length, gint pdelete, GdkAtom *actual_property_type, gint *actual_format, gint *actual_length, guchar **data);	# Retrieves a portion of the contents of a property. If theproperty does not exist, then the function returns FALSE ,and GDK_NONE will be stored in actual_property_type.
	window		# a GdkWindow 
	property		# the property to retrieve
	type		# the desired property type, or GDK_NONE , if any type of datais acceptable. If this does not match the actualtype, then actual_formatand actual_lengthwillbe filled in, a warning will be printed to stderrand no data will be returned.
	offset		# the offset into the property at which to beginretrieving data, in 4 byte units.
	length		# the length of the data to retrieve in bytes. Data isconsidered to be retrieved in 4 byte chunks, so lengthwill be rounded up to the next highest 4 byte boundary(so be careful not to pass a value that might overflowwhen rounded up).
	pdelete		# if TRUE , delete the property after retrieving thedata.
	actual_property_type		#  location to store theactual type of the property. 
	return:		#  TRUE if data was successfully received and storedin data, otherwise FALSE . 
void gdk_property_change (GdkWindow *window, GdkAtom property, GdkAtom type, gint format, GdkPropMode mode, const guchar *data, gint nelements);	# Changes the contents of a property on a window.
	window		# a GdkWindow 
	property		# the property to change
	type		# the new type for the property. If modeisGDK_PROP_MODE_PREPEND or GDK_PROP_MODE_APPEND , then thismust match the existing type or an error will occur.
	format		# the new format for the property. If modeisGDK_PROP_MODE_PREPEND or GDK_PROP_MODE_APPEND , then thismust match the existing format or an error will occur.
	mode		# a value describing how the new data is to be combinedwith the current data.
	data		# the data (a guchar *gushort *, or gulong *,depending on format), cast to a guchar *.
	nelements		# the number of elements of size determined by the format,contained in data.
void gdk_property_delete (GdkWindow *window, GdkAtom property);	# Deletes a property from a window.
	window		# a GdkWindow 
	property		# the property to delete
void gdk_threads_init (void );	# gdk_threads_init has been deprecated since version 3.6 and should not be used in newly-written code.
void gdk_threads_enter (void );	# gdk_threads_enter has been deprecated since version 3.6 and should not be used in newly-written code.
void gdk_threads_leave (void );	# gdk_threads_leave has been deprecated since version 3.6 and should not be used in newly-written code.
guint gdk_threads_add_idle (GSourceFunc function, gpointer data);	# A wrapper for the common usage of gdk_threads_add_idle_full() assigning the default priority, G_PRIORITY_DEFAULT_IDLE .
	function		# function to call
	data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source. 
guint gdk_threads_add_idle_full (gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);	# Adds a function to be called whenever there are no higher priorityevents pending. If the function returns FALSE it is automaticallyremoved from the list of event sources and will not be called again.
	priority		# the priority of the idle source. Typically this will be in therange between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE 
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the idle is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
guint gdk_threads_add_timeout (guint interval, GSourceFunc function, gpointer data);	# A wrapper for the common usage of gdk_threads_add_timeout_full() assigning the default priority, G_PRIORITY_DEFAULT .
	interval		# the time between calls to the function, in milliseconds(1/1000ths of a second)
	function		# function to call
	data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source. 
guint gdk_threads_add_timeout_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);	# Sets a function to be called at regular intervals holding the GDK lock,with the given priority. The function is called repeatedly until it returns FALSE , at which point the timeout is automatically destroyed and the function will not be called again. The notify function iscalled when the timeout is destroyed. The first call to thefunction will be at the end of the first interval.
	priority		# the priority of the timeout source. Typically this will be in therange between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE .
	interval		# the time between calls to the function, in milliseconds(1/1000ths of a second)
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the timeout is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
guint gdk_threads_add_timeout_seconds (guint interval, GSourceFunc function, gpointer data);	# A wrapper for the common usage of gdk_threads_add_timeout_seconds_full() assigning the default priority, G_PRIORITY_DEFAULT .
	interval		# the time between calls to the function, in seconds
	function		# function to call
	data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source. 
guint gdk_threads_add_timeout_seconds_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);	# A variant of gdk_threads_add_timeout_full() with second-granularity.See g_timeout_add_seconds_full() for a discussion of why it isa good idea to use this function if you don’t need finer granularity.
	priority		# the priority of the timeout source. Typically this will be in therange between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE .
	interval		# the time between calls to the function, in seconds
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the timeout is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
cairo_region_t  *gdk_pango_layout_get_clip_region (PangoLayout *layout, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges);	# Obtains a clip region which contains the areas where the given rangesof text would be drawn. x_origin and y_origin are the top left pointto center the layout. index_ranges should containranges of bytes in the layout’s text.
	layout		# a PangoLayout 
	x_origin		# X pixel where you intend to draw the layout with this clip
	y_origin		# Y pixel where you intend to draw the layout with this clip
	index_ranges		# array of byte indexes into the layout, where even members of array are start indexes and odd elements are end indexes
	n_ranges		# number of ranges in index_ranges, i.e. half the size of index_ranges
	return:		#  a clip region containing the given ranges 
cairo_region_t  *gdk_pango_layout_line_get_clip_region (PangoLayoutLine *line, gint x_origin, gint y_origin, const gint *index_ranges, gint n_ranges);	# Obtains a clip region which contains the areas where the givenranges of text would be drawn. x_origin and y_origin are the top leftposition of the layout. index_rangesshould contain ranges of bytes in the layout’s text. The clipregion will include space to the left or right of the line (to thelayout bounding box) if you have indexes above or below the indexescontained inside the line. This is to draw the selection all the wayto the side of the layout. However, the clip region is in line coordinates,not layout coordinates.
	line		# a PangoLayoutLine 
	x_origin		# X pixel where you intend to draw the layout line with this clip
	y_origin		# baseline pixel where you intend to draw the layout line with this clip
	index_ranges		#  array of byte indexes into the layout,where even members of array are start indexes and odd elementsare end indexes. 
	return:		#  a clip region containing the given ranges 
PangoContext  *gdk_pango_context_get (void );	# Creates a PangoContext for the default GDK screen.
	return:		#  a new PangoContext for the default display.  
PangoContext  *gdk_pango_context_get_for_screen (GdkScreen *screen);	# Creates a PangoContext for screen.
	screen		# the GdkScreen for which the context is to be created.
	return:		#  a new PangoContext for screen.  
PangoContext  *gdk_pango_context_get_for_display (GdkDisplay *display);	# Creates a PangoContext for display.
	display		# the GdkDisplay for which the context is to be created
	return:		#  a new PangoContext for display.  
cairo_surface_t  *gdk_window_create_similar_surface (GdkWindow *window, cairo_content_t content, int width, int height);	# Create a new surface that is as compatible as possible with thegiven window. For example the new surface will have the samefallback resolution and font options as window. Generally, the newsurface will also use the same backend as window, unless that isnot possible for some reason. The type of the returned surface maybe examined with cairo_surface_get_type().
	window		# window to make new surface similar to
	content		# the content for the new surface
	width		# width of the new surface
	height		# height of the new surface
	return:		#  a pointer to the newly allocated surface. The callerowns the surface and should call cairo_surface_destroy() when donewith it. 
cairo_surface_t  *gdk_window_create_similar_image_surface (GdkWindow *window, cairo_format_t format, int width, int height, int scale);	# Create a new image surface that is efficient to draw on thegiven window.
	window		#  window to make new surface similar to, orNULL if none. 
	return:		#  a pointer to the newly allocated surface. The callerowns the surface and should call cairo_surface_destroy() when donewith it. 
gboolean gdk_cairo_get_clip_rectangle (cairo_t *cr, GdkRectangle *rect);	# This is a convenience function around cairo_clip_extents().It rounds the clip extents to integer coordinates and returnsa boolean indicating if a clip area exists.
	cr		# a cairo context
	rect		#  return location for the clip, or NULL . 
	return:		#  TRUE if a clip rectangle exists, FALSE if all of crisclipped and all drawing can be skipped 
GdkDrawingContext  *gdk_cairo_get_drawing_context (cairo_t *cr);	# Retrieves the GdkDrawingContext that created the Cairocontext cr.
	cr		# a Cairo context
	return:		#  a GdkDrawingContext , if any is set.  
void gdk_cairo_set_source_rgba (cairo_t *cr, const GdkRGBA *rgba);	# Sets the specified GdkRGBA as the source color of cr.
	cr		# a cairo context
	rgba		# a GdkRGBA 
void gdk_cairo_set_source_pixbuf (cairo_t *cr, const GdkPixbuf *pixbuf, gdouble pixbuf_x, gdouble pixbuf_y);	# Sets the given pixbuf as the source pattern for cr.
	cr		# a cairo context
	pixbuf		# a GdkPixbuf 
	pixbuf_x		# X coordinate of location to place upper left corner of pixbuf
	pixbuf_y		# Y coordinate of location to place upper left corner of pixbuf
void gdk_cairo_rectangle (cairo_t *cr, const GdkRectangle *rectangle);	# Adds the given rectangle to the current path of cr.
	cr		# a cairo context
	rectangle		# a GdkRectangle 
void gdk_cairo_region (cairo_t *cr, const cairo_region_t *region);	# Adds the given region to the current path of cr.
	cr		# a cairo context
	region		# a cairo_region_t 
cairo_region_t  *gdk_cairo_region_create_from_surface (cairo_surface_t *surface);	# Creates region that describes covers the area where the givensurface is more than 50% opaque.
	surface		# a cairo surface
	return:		#  A cairo_region_t ; must be freed with cairo_region_destroy() 
cairo_surface_t  *gdk_cairo_surface_create_from_pixbuf (const GdkPixbuf *pixbuf, int scale, GdkWindow *for_window);	# Creates an image surface with the same contents asthe pixbuf.
	pixbuf		# a GdkPixbuf 
	scale		# the scale of the new surface, or 0 to use same as window
	for_window		#  The window this will be drawn to, or NULL . 
	return:		#  a new cairo surface, must be freed with cairo_surface_destroy() 
void gdk_cairo_draw_from_gl (cairo_t *cr, GdkWindow *window, int source, int source_type, int buffer_scale, int x, int y, int width, int height);	# This is the main way to draw GL content in GTK+. It takes a render buffer ID (source_type == GL_RENDERBUFFER ) or a texture id (source_type == GL_TEXTURE )and draws it onto cr with an OVER operation, respecting the current clip.The top left corner of the rectangle specified by x, y, width and heightwill be drawn at the current (0,0) position of the cairo_t.
	cr		# a cairo context
	window		# The window we're rendering for (not necessarily into)
	source		# The GL ID of the source buffer
	source_type		# The type of the source
	buffer_scale		# The scale-factor that the sourcebuffer is allocated for
	x		# The source x position in sourceto start copying from in GL coordinates
	y		# The source y position in sourceto start copying from in GL coordinates
	width		# The width of the region to draw
	height		# The height of the region to draw
void gdk_cairo_surface_upload_to_gl (cairo_surface_t *surface, int target, int width, int height, GdkGLContext *context);	# Uploads the contents of a Cairo surface to a GL texture target.
	surface		# a Cairo surface
	target		# a GL texture target
	width		# the width of the texture target
	height		# the height of the texture target
	context		#  a GdkGLContext , or NULL to use the currentlybound context. 
GdkDisplay  *gdk_x11_lookup_xdisplay (Display *xdisplay);	# Find the GdkDisplay corresponding to xdisplay, if any exists.
	xdisplay		# a pointer to an X Display
	return:		#  the GdkDisplay , if found, otherwise NULL .  
guint32 gdk_x11_get_server_time (GdkWindow *window);	# Routine to get the current X server time stamp.
	window		#  a GdkWindow , used for communicationwith the server. The window must haveGDK_PROPERTY_CHANGE_MASK in its events mask or a hang willresult. 
	return:		#  the time stamp. 
gint gdk_x11_device_get_id (GdkDevice *device);	# Returns the device ID as seen by XInput2.
	device		#  a GdkDevice . 
	return:		#  the XInput2 device ID. 
GdkDevice  *gdk_x11_device_manager_lookup (GdkDeviceManager *device_manager, gint device_id);	# Returns the GdkDevice that wraps the given device ID.
	device_manager		#  a GdkDeviceManager . 
	return:		#  The GdkDevice wrapping the device ID,or NULL if the given ID doesn’t currently represent a device.  
guint32 gdk_x11_display_get_user_time (GdkDisplay *display);	# Returns the timestamp of the last user interaction on display. The timestamp is taken from events causedby user interaction such as key presses or pointer movements. See gdk_x11_window_set_user_time() .
	display		#  a GdkDisplay . 
	return:		#  the timestamp of the last user interaction  
void gdk_x11_display_broadcast_startup_message (GdkDisplay *display, const char *message_type, ...);	# Sends a startup notification message of type message_type todisplay. 
	display		#  a GdkDisplay . 
gchar  *gdk_x11_display_get_startup_notification_id (GdkDisplay *display);	# Gets the startup notification ID for a display.
	display		#  a GdkDisplay . 
	return:		#  the startup notification ID for display 
void gdk_x11_display_set_startup_notification_id (GdkDisplay *display, const gchar *startup_id);	# Sets the startup notification ID for a display.
	display		#  a GdkDisplay . 
Display  *gdk_x11_display_get_xdisplay (GdkDisplay *display);	# Returns the X display of a GdkDisplay .
	display		#  a GdkDisplay . 
	return:		#  an X display.  
void gdk_x11_display_grab (GdkDisplay *display);	# Call XGrabServer() on display. To ungrab the display again, use gdk_x11_display_ungrab() . 
	display		#  a GdkDisplay . 
void gdk_x11_display_ungrab (GdkDisplay *display);	# Ungrab display after it has been grabbed with gdk_x11_display_grab() .
	display		#  a GdkDisplay . 
void gdk_x11_display_error_trap_push (GdkDisplay *display);	# Begins a range of X requests on display for which X error eventswill be ignored. Unignored errors (when no trap is pushed) will abortthe application. Use gdk_x11_display_error_trap_pop() orgdk_x11_display_error_trap_pop_ignored() to lift a trap pushedwith this function.
	display		#  a GdkDisplay . 
gint gdk_x11_display_error_trap_pop (GdkDisplay *display);	# Pops the error trap pushed by gdk_x11_display_error_trap_push() .Will XSync() if necessary and will always block untilthe error is known to have occurred or not occurred,so the error code can be returned.
	display		#  the display. 
	return:		#  X error code or 0 on success 
void gdk_x11_display_error_trap_pop_ignored (GdkDisplay *display);	# Pops the error trap pushed by gdk_x11_display_error_trap_push() .Does not block to see if an error occurred; merely records therange of requests to ignore errors for, and ignores those errorsif they arrive asynchronously.
	display		#  the display. 
void gdk_x11_display_set_cursor_theme (GdkDisplay *display, const gchar *theme, const gint size);	# Sets the cursor theme from which the images for cursorshould be taken.
	display		#  a GdkDisplay . 
	size		# the cursor size to use, or 0 to keep the previous size
void gdk_x11_display_set_window_scale (GdkDisplay *display, gint scale);	# Forces a specific window scale for all windows on this display,instead of using the default or user configured scale. Thisis can be used to disable scaling support by setting scale to1, or to programmatically set the window scale.
	display		#  the display. 
gboolean gdk_x11_display_get_glx_version (GdkDisplay *display, gint *major, gint *minor);	# Retrieves the version of the GLX implementation.
	display		# a GdkDisplay 
	major		#  return location for the GLX major version. 
	return:		#  TRUE if GLX is available 
void gdk_x11_register_standard_event_type (GdkDisplay *display, gint event_base, gint n_events);	# Registers interest in receiving extension events with type codesbetween event_base and event_base + n_events - 1.The registered events must have the window field in the same placeas core X events (this is not the case for e.g. XKB extension events).
	display		#  a GdkDisplay . 
	event_base		# first event type code to register
	n_events		# number of event type codes to register
int gdk_x11_screen_get_screen_number (GdkScreen *screen);	# Returns the index of a GdkScreen .
	screen		#  a GdkScreen . 
	return:		#  the position of screenamong the screensof its display 
Screen  *gdk_x11_screen_get_xscreen (GdkScreen *screen);	# Returns the screen of a GdkScreen .
	screen		#  a GdkScreen . 
	return:		#  an Xlib Screen*.  
char  *gdk_x11_screen_get_window_manager_name (GdkScreen *screen);	# Returns the name of the window manager for screen.
	screen		#  a GdkScreen . 
	return:		#  the name of the window manager screen screen, or"unknown" if the window manager is unknown. The string is owned by GDKand should not be freed. 
XID gdk_x11_screen_get_monitor_output (GdkScreen *screen, gint monitor_num);	# Gets the XID of the specified output/monitor.If the X server does not support version 1.2 of the RANDRextension, 0 is returned.
	screen		#  a GdkScreen . 
	return:		#  the XID of the monitor 
GdkVisual  *gdk_x11_screen_lookup_visual (GdkScreen *screen, VisualID xvisualid);	# Looks up the GdkVisual for a particular screen and X Visual ID.
	screen		#  a GdkScreen . 
	return:		#  the GdkVisual (owned by the screenobject), or NULL if the visual ID wasn’t found.  
gboolean gdk_x11_screen_supports_net_wm_hint (GdkScreen *screen, GdkAtom property);	# This function is specific to the X11 backend of GDK, and indicateswhether the window manager supports a certain hint from theExtended Window Manager Hints specification.
	screen		#  the relevant GdkScreen . 
	return:		#  TRUE if the window manager supports property 
guint32 gdk_x11_screen_get_number_of_desktops (GdkScreen *screen);	# Returns the number of workspaces for screen when running under awindow manager that supports multiple workspaces, as describedin theExtended Window Manager Hints specification.
	screen		#  a GdkScreen . 
	return:		#  the number of workspaces, or 0 if workspaces are not supported 
guint32 gdk_x11_screen_get_current_desktop (GdkScreen *screen);	# Returns the current workspace for screen when running under awindow manager that supports multiple workspaces, as describedin theExtended Window Manager Hints specification.
	screen		#  a GdkScreen . 
	return:		#  the current workspace, or 0 if workspaces are not supported 
GdkWindow  *gdk_x11_window_foreign_new_for_display (GdkDisplay *display, Window window);	# Wraps a native window in a GdkWindow . The function will try tolook up the window using gdk_x11_window_lookup_for_display() first.If it does not find it there, it will create a new window.
	display		#  the GdkDisplay where the window handle comes from. 
	return:		#  a GdkWindow wrapper for the nativewindow, or NULL if the window has been destroyed. The wrapperwill be newly created, if one doesn’t exist already.  
GdkWindow  *gdk_x11_window_lookup_for_display (GdkDisplay *display, Window window);	# Looks up the GdkWindow that wraps the given native window handle.
	display		#  the GdkDisplay corresponding to thewindow handle. 
	return:		#  the GdkWindow wrapper for the nativewindow, or NULL if there is none.  
Window gdk_x11_window_get_xid (GdkWindow *window);	# Returns the X resource (window) belonging to a GdkWindow .
	window		#  a native GdkWindow . 
	return:		#  the ID of drawable’s X resource. 
void gdk_x11_window_set_theme_variant (GdkWindow *window, const char *variant);	# GTK+ applications can request a dark theme variant. In order tomake other applications - namely window managers using GTK+ forthemeing - aware of this choice, GTK+ uses this function toexport the requested theme variant as _GTK_THEME_VARIANT propertyon toplevel windows.
	window		#  a GdkWindow . 
void gdk_x11_window_set_user_time (GdkWindow *window, guint32 timestamp);	# The application can use this call to update the _NET_WM_USER_TIMEproperty on a toplevel window. This property stores an Xservertime which represents the time of the last user input eventreceived for this window. This property may be used by the windowmanager to alter the focus, stacking, and/or placement behavior ofwindows when they are mapped depending on whether the new windowwas created by a user action or is a "pop-up" window activated by atimer or some other event.
	window		#  A toplevel GdkWindow . 
	timestamp		# An XServer timestamp to which the property should be set
void gdk_x11_window_move_to_current_desktop (GdkWindow *window);	# Moves the window to the correct workspace when running under a window manager that supports multiple workspaces, as describedin the Extended Window Manager Hints specification.Will not do anything if the window is already on all workspaces.
	window		#  a GdkWindow . 
void gdk_x11_window_move_to_desktop (GdkWindow *window, guint32 desktop);	# Moves the window to the given workspace when running unde awindow manager that supports multiple workspaces, as describedin the Extended Window Manager Hints specification.
	window		#  a GdkWindow . 
guint32 gdk_x11_window_get_desktop (GdkWindow *window);	# Gets the number of the workspace window is on.
	window		#  a GdkWindow . 
	return:		#  the current workspace of window 
void gdk_x11_window_set_utf8_property (GdkWindow *window, const gchar *name, const gchar *value);	# This function modifies or removes an arbitrary X11 windowproperty of type UTF8_STRING. If the given window isnot a toplevel window, it is ignored.
	window		#  a GdkWindow . 
void gdk_x11_window_set_frame_extents (GdkWindow *window, int left, int right, int top, int bottom);	# gdk_x11_window_set_frame_extents has been deprecated since version 3.12 and should not be used in newly-written code.
	window		#  a GdkWindow . 
void gdk_x11_window_set_frame_sync_enabled (GdkWindow *window, gboolean frame_sync_enabled);	# This function can be used to disable frame synchronization for a window.Normally frame synchronziation will be enabled or disabled based on whetherthe system has a compositor that supports frame synchronization, but ifthe window is not directly managed by the window manager, then framesynchronziation may need to be disabled. This is the case for a windowembedded via the XEMBED protocol.
	window		#  a native GdkWindow . 
Window gdk_x11_get_default_root_xwindow (void );	# Gets the root window of the default screen (see gdk_x11_get_default_screen() ).
	return:		#  an Xlib Window. 
gint gdk_x11_get_default_screen (void );	# Gets the default GTK+ screen number.
	return:		#  returns the screen number specified bythe --display command line option or the DISPLAY environmentvariable when gdk_init() calls XOpenDisplay(). 
Display  *gdk_x11_get_default_xdisplay (void );	# Gets the default GTK+ display.
	return:		#  the Xlib Display* forthe display specified in the --display commandline option or the DISPLAY environment variable.  
void gdk_x11_grab_server (void );	# Call gdk_x11_display_grab() on the default display. To ungrab the server again, use gdk_x11_ungrab_server() . 
void gdk_x11_ungrab_server (void );	# Ungrab the default display after it has been grabbed with gdk_x11_grab_server() .
Cursor gdk_x11_cursor_get_xcursor (GdkCursor *cursor);	# Returns the X cursor belonging to a GdkCursor .
	cursor		#  a GdkCursor . 
	return:		#  an Xlib Cursor. 
Display  *gdk_x11_cursor_get_xdisplay (GdkCursor *cursor);	# Returns the display of a GdkCursor .
	cursor		#  a GdkCursor . 
	return:		#  an Xlib Display*.  
gint gdk_x11_keymap_get_group_for_state (GdkKeymap *keymap, guint state);	# Extracts the group from the state field sent in an X Key event.This is only needed for code processing raw X events, since GdkEventKey directly includes an is_modifier field.
	keymap		#  a GdkX11Keymap . 
	return:		#  the index of the active keyboard group for the event 
gboolean gdk_x11_keymap_key_is_modifier (GdkKeymap *keymap, guint keycode);	# Determines whether a particular key code represents a key thatis a modifier. That is, it’s a key that normally just affectsthe keyboard state and the behavior of other keys rather thanproducing a direct effect itself. This is only needed for codeprocessing raw X events, since GdkEventKey directly includesan is_modifier field.
	keymap		#  a GdkX11Keymap . 
	return:		#  TRUE if the hardware keycode is a modifier key 
Visual  *gdk_x11_visual_get_xvisual (GdkVisual *visual);	# Returns the X visual belonging to a GdkVisual .
	visual		#  a GdkVisual . 
	return:		#  an Xlib Visual*.  
Atom gdk_x11_atom_to_xatom (GdkAtom atom);	# Converts from a GdkAtom to the X atom for the default GDK displaywith the same string value.
	atom		# A GdkAtom 
	return:		#  the X atom corresponding to atom. 
Atom gdk_x11_atom_to_xatom_for_display (GdkDisplay *display, GdkAtom atom);	# Converts from a GdkAtom to the X atom for a GdkDisplay with the same string value. The special value GDK_NONE is converted to None.
	display		#  A GdkDisplay . 
	return:		#  the X atom corresponding to atom, or None 
GdkAtom gdk_x11_xatom_to_atom (Atom xatom);	# Convert from an X atom for the default display to the correspondingGdkAtom .
	xatom		# an X atom for the default GDK display
	return:		#  the corresponding GdkAtom .  
GdkAtom gdk_x11_xatom_to_atom_for_display (GdkDisplay *display, Atom xatom);	# Convert from an X atom for a GdkDisplay to the correspondingGdkAtom .
	display		#  A GdkDisplay . 
	return:		#  the corresponding GdkAtom .  
Atom gdk_x11_get_xatom_by_name (const gchar *atom_name);	# Returns the X atom for GDK’s default display corresponding to atom_name.This function caches the result, so if called repeatedly it is muchfaster than XInternAtom(), which is a round trip to the server each time.
	atom_name		# a string
	return:		#  a X atom for GDK’s default display. 
Atom gdk_x11_get_xatom_by_name_for_display (GdkDisplay *display, const gchar *atom_name);	# Returns the X atom for a GdkDisplay corresponding to atom_name.This function caches the result, so if called repeatedly it is muchfaster than XInternAtom(), which is a round trip to the server each time.
	display		#  a GdkDisplay . 
	return:		#  a X atom for a GdkDisplay  
gchar  *gdk_x11_get_xatom_name (Atom xatom);	# Returns the name of an X atom for GDK’s default display. Thisfunction is meant mainly for debugging, so for convenience, unlikeXAtomName() and gdk_atom_name() , the result doesn’t need to be freed. Also, this function will never return NULL , even if xatom is invalid.
	xatom		# an X atom for GDK’s default display
	return:		#  name of the X atom; this string is owned by GTK+,so it shouldn’t be modifed or freed.  
gchar  *gdk_x11_get_xatom_name_for_display (GdkDisplay *display, Atom xatom);	# Returns the name of an X atom for its display. Thisfunction is meant mainly for debugging, so for convenience, unlikeXAtomName() and gdk_atom_name() , the result doesn’t need tobe freed.
	display		#  the GdkDisplay where xatomis defined. 
	return:		#  name of the X atom; this string is owned by GDK,so it shouldn’t be modifed or freed.  
void gdk_x11_set_sm_client_id (const gchar *sm_client_id);	# Sets the SM_CLIENT_ID property on the application’s leader window so thatthe window manager can save the application’s state using the X11R6 ICCCMsession management protocol.
	sm_client_id		# the client id assigned by the session manager when theconnection was opened, or NULL to remove the property.
gint gdk_x11_display_text_property_to_text_list (GdkDisplay *display, GdkAtom encoding, gint format, const guchar *text, gint length, gchar ***list);	# Convert a text string from the encoding as it is storedin a property into an array of strings in the encoding ofthe current locale. (The elements of the array represent thenul-separated elements of the original text string.)
	display		#  The GdkDisplay where the encoding is defined. 
	return:		#  the number of strings stored in list, or 0,if the conversion failed 
void gdk_x11_free_text_list (gchar **list);	# Frees the array of strings created bygdk_x11_display_text_property_to_text_list() .
	list		# the value stored in the listparameter bya call to 
gint gdk_x11_display_string_to_compound_text (GdkDisplay *display, const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);	# Convert a string from the encoding of the currentlocale into a form suitable for storing in a window property.
	display		#  the GdkDisplay where the encoding is defined. 
	return:		#  0 upon success, non-zero upon failure 
gboolean gdk_x11_display_utf8_to_compound_text (GdkDisplay *display, const gchar *str, GdkAtom *encoding, gint *format, guchar **ctext, gint *length);	# Converts from UTF-8 to compound text.
	display		#  a GdkDisplay . 
	return:		#  TRUE if the conversion succeeded,otherwise FALSE  
void gdk_x11_free_compound_text (guchar *ctext);	# Frees the data returned from gdk_x11_display_string_to_compound_text() .
	ctext		# The pointer stored in ctextfrom a call to
void gdk_app_launch_context_set_screen (GdkAppLaunchContext *context, GdkScreen *screen);	# Sets the screen on which applications will be launched whenusing this context. See also gdk_app_launch_context_set_display().
	context		# a GdkAppLaunchContext 
	screen		# a GdkScreen 
void gdk_app_launch_context_set_desktop (GdkAppLaunchContext *context, gint desktop);	# Sets the workspace on which applications will be launched whenusing this context when running under a window manager thatsupports multiple workspaces, as described in theExtended Window Manager Hints .
	context		# a GdkAppLaunchContext 
	desktop		# the number of a workspace, or -1
void gdk_app_launch_context_set_timestamp (GdkAppLaunchContext *context, guint32 timestamp);	# Sets the timestamp of context. The timestamp should ideallybe taken from the event that triggered the launch.
	context		# a GdkAppLaunchContext 
	timestamp		# a timestamp
void gdk_app_launch_context_set_icon (GdkAppLaunchContext *context, GIcon *icon);	# Sets the icon for applications that are launched with thiscontext.
	context		# a GdkAppLaunchContext 
	icon		#  a GIcon , or NULL . 
void gdk_app_launch_context_set_icon_name (GdkAppLaunchContext *context, const char *icon_name);	# Sets the icon for applications that are launched with this context.The icon_name will be interpreted in the same way as the Icon fieldin desktop files. See also gdk_app_launch_context_set_icon() .
	context		# a GdkAppLaunchContext 
	icon_name		#  an icon name, or NULL . 
void gdk_disable_multidevice (void );	# Disables multidevice support in GDK. This call must happen priorto gdk_display_open() , gtk_init() orgtk_init_check() in order to take effect.
GdkDisplay  *gdk_device_manager_get_display (GdkDeviceManager *device_manager);	# Gets the GdkDisplay associated to device_manager.
	device_manager		# a GdkDeviceManager 
	return:		#  the GdkDisplay to whichdevice_manageris associated to, or NULL . This memory isowned by GDK and must not be freed or unreferenced.  
GList  *gdk_device_manager_list_devices (GdkDeviceManager *device_manager, GdkDeviceType type);	# gdk_device_manager_list_devices has been deprecated since version 3.20 and should not be used in newly-written code.
	device_manager		# a GdkDeviceManager 
	type		# device type to get.
	return:		#  a list ofGdkDevices . The returned list must befreed with g_list_free() . The list elements are owned byGTK+ and must not be freed or unreffed.  

#.# gsk
GskRenderer  *gsk_renderer_new_for_window (GdkWindow *window);	# Creates an appropriate GskRenderer instance for the given window.
	window		# a GdkWindow 
	return:		#  a GskRenderer .  
void gsk_renderer_set_viewport (GskRenderer *renderer, const graphene_rect_t *viewport);	# Sets the visible rectangle to be used as the viewport forthe rendering.
	renderer		# a GskRenderer 
	viewport		#  the viewport rectangle used by the renderer. 
void gsk_renderer_get_viewport (GskRenderer *renderer, graphene_rect_t *viewport);	# Retrieves the viewport of the GskRenderer .
	renderer		# a GskRenderer 
	viewport		#  return location for the viewport rectangle. 
void gsk_renderer_set_scale_factor (GskRenderer *renderer, int scale_factor);	# Sets the scale factor for the renderer.
	renderer		# a GskRenderer 
	scale_factor		# the new scale factor
int gsk_renderer_get_scale_factor (GskRenderer *renderer);	# Gets the scale factor for the renderer.
	renderer		# a GskRenderer 
	return:		#  the scale factor 
GdkWindow  *gsk_renderer_get_window (GskRenderer *renderer);	# Retrieves the GdkWindow set using gsk_renderer_realize() . If the rendererhas not been realized yet, NULL will be returned.
	renderer		# a GskRenderer 
	return:		#  a GdkWindow .  
GdkDisplay  *gsk_renderer_get_display (GskRenderer *renderer);	# Retrieves the GdkDisplay used when creating the GskRenderer .
	renderer		# a GskRenderer 
	return:		#  a GdkDisplay .  
gboolean gsk_renderer_realize (GskRenderer *renderer, GdkWindow *window, GError **error);	# Creates the resources needed by the renderer to render the scenegraph.
	renderer		# a GskRenderer 
	window		# the GdkWindow renderer will be used on
	error		# return location for an error
void gsk_renderer_unrealize (GskRenderer *renderer);	# Releases all the resources created by gsk_renderer_realize() .
	renderer		# a GskRenderer 
GdkDrawingContext  *gsk_renderer_begin_draw_frame (GskRenderer *renderer, const cairo_region_t *region);	# Indicates that you are beginning the process of redrawing region usingrenderer, and provides you with a GdkDrawingContext to use for this.
	renderer		# a GskRenderer 
	region		# the cairo_region_t that you wish to draw
	return:		#  a GdkDrawingContext context that should be used todraw the contents of the renderer. This context is owned by GDK.  
void gsk_renderer_end_draw_frame (GskRenderer *renderer, GdkDrawingContext *context);	# void gsk_renderer_end_draw_frame (GskRenderer *renderer, GdkDrawingContext *context);</pre></div><hr>
void gsk_renderer_render (GskRenderer *renderer, GskRenderNode *root, GdkDrawingContext *context);	# Renders the scene graph, described by a tree of GskRenderNode instances,using the given GdkDrawingContext .
	renderer		# a GskRenderer 
	root		# a GskRenderNode 
	context		# The drawing context created via 
GskTexture  *gsk_renderer_render_texture (GskRenderer *renderer, GskRenderNode *root, const graphene_rect_t *viewport);	# Renders the scene graph, described by a tree of GskRenderNode instances,to a GskTexture .
	renderer		# a realized GdkRenderer 
	root		# a GskRenderNode 
	viewport		#  the section to draw or NULL to use root's bounds. 
	return:		#  a GskTexture with the rendered contents of root.  
GskRenderNode  *gsk_render_node_ref (GskRenderNode *node);	# Acquires a reference on the given GskRenderNode .
	node		# a GskRenderNode 
	return:		#  the GskRenderNode with an additional reference.  
void gsk_render_node_unref (GskRenderNode *node);	# Releases a reference on the given GskRenderNode .
	node		# a GskRenderNode 
GskRenderNodeType gsk_render_node_get_node_type (GskRenderNode *node);	# Returns the type of the node.
	node		# a GskRenderNode 
	return:		#  the type of the GskRenderNode  
void gsk_render_node_draw (GskRenderNode *node, cairo_t *cr);	# Draw the contents of node to the given cairo context.
	node		# a GskRenderNode 
	cr		# cairo context to draw to
GBytes  *gsk_render_node_serialize (GskRenderNode *node);	# Serializes the node for later deserialization viagsk_render_node_deserialize() . No guarantees are made about the formatused other than that the same version of GTK+ will be able to deserializethe result of a call to gsk_render_node_serialize() andgsk_render_node_deserialize() will correctly reject files it cannot openthat were created with previous versions of GTK+.
	node		# a GskRenderNode 
	return:		#  a GBytes representing the node. 
GskRenderNode  *gsk_render_node_deserialize (GBytes *bytes, GError **error);	# Loads data previously created via gsk_render_node_serialize() . For adiscussion of the supported format, see that function.
	bytes		# the bytes containing the data
	error		#  location to store error or NULL . 
	return:		#  a new GskRenderNode or NULL onerror.  
gboolean gsk_render_node_write_to_file (GskRenderNode *node, const char *filename, GError **error);	# This function is equivalent to calling gsk_render_node_serialize() followed by g_file_set_contents() . See those two functions for detailson the arguments.
	node		# a GskRenderNode 
	filename		# the file to save it to.
	error		# Return location for a potential error
	return:		#  TRUE if saving was successful 
void gsk_render_node_set_scaling_filters (GskRenderNode *node, GskScalingFilter min_filter, GskScalingFilter mag_filter);	# void gsk_render_node_set_scaling_filters (GskRenderNode *node, GskScalingFilter min_filter, GskScalingFilter mag_filter);</pre></div><hr>
void gsk_render_node_set_name (GskRenderNode *node, const char *name);	# Sets the name of the node.
	node		# a GskRenderNode 
	name		#  a name for the node. 
char  *gsk_render_node_get_name (GskRenderNode *node);	# Retrieves the name previously set via gsk_render_node_set_name() .If no name has been set, NULL is returned.
	node		# a GskRenderNode 
	return:		#  The name previously set viagsk_render_node_set_name() or NULL .  
void gsk_render_node_get_bounds (GskRenderNode *node, graphene_rect_t *bounds);	# Retrieves the boundaries of the node. The node will not draw outsideof its boundaries.
	node		# a GskRenderNode 
	bounds		#  return location for the boundaries. 
GskRenderNode  *gsk_color_node_new (const GdkRGBA *rgba, const graphene_rect_t *bounds);	# Creates a GskRenderNode that will render the color specified by rgba intothe area given by bounds.
	rgba		# a GdkRGBA specifying a color
	bounds		# the rectangle to render the color into
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_linear_gradient_node_new (const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);	# Creates a GskRenderNode that will create a linear gradient from the givenpoints and color stops, and render that into the area given by bounds.
	bounds		# the rectangle to render the linear gradient into
	start		# the point at which the linear gradient will begin
	end		# the point at which the linear gradient will finish
	color_stops		# a pointer to an array of GskColorStop defining the gradient
	n_color_stops		# the number of elements in color_stops
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_repeating_linear_gradient_node_new (const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);	# GskRenderNode  *gsk_repeating_linear_gradient_node_new (const graphene_rect_t *bounds, const graphene_point_t *start, const graphene_point_t *end, const GskColorStop *color_stops, gsize n_color_stops);</pre></div><hr>
GskRenderNode  *gsk_border_node_new (const GskRoundedRect *outline, const float border_width[4], const GdkRGBA border_color[4]);	# Creates a GskRenderNode that will stroke a border rectangle inside thegiven outline. The 4 sides of the border can have different widths andcolors.
	outline		# a GskRoundedRect describing the outline of the border
	border_width		# the stroke width of the border on the top, right, bottom andleft side respectively.
	border_color		# the color used on the top, right, bottom and left side.
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_texture_node_new (GskTexture *texture, const graphene_rect_t *bounds);	# Creates a GskRenderNode that will render the giventexture into the area given by bounds.
	texture		# the GskTexture 
	bounds		# the rectangle to render the texture into
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_inset_shadow_node_new (const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);	# Creates a GskRenderNode that will render an inset shadowinto the box given by outline.
	outline		# outline of the region containing the shadow
	color		# color of the shadow
	dx		# horizontal offset of shadow
	dy		# vertical offset of shadow
	spread		# how far the shadow spreads towards the inside
	blur_radius		# how much blur to apply to the shadow
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_outset_shadow_node_new (const GskRoundedRect *outline, const GdkRGBA *color, float dx, float dy, float spread, float blur_radius);	# Creates a GskRenderNode that will render an outset shadowaround the box given by outline.
	outline		# outline of the region surrounded by shadow
	color		# color of the shadow
	dx		# horizontal offset of shadow
	dy		# vertical offset of shadow
	spread		# how far the shadow spreads towards the inside
	blur_radius		# how much blur to apply to the shadow
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_cairo_node_new (const graphene_rect_t *bounds);	# Creates a GskRenderNode that will render a cairo surfaceinto the area given by bounds. You can draw to the cairosurface using gsk_cairo_node_get_draw_context() 
	bounds		# the rectangle to render to
	return:		#  A new GskRenderNode  
cairo_t  *gsk_cairo_node_get_draw_context (GskRenderNode *node, GskRenderer *renderer);	# Creates a Cairo context for drawing using the surface associatedto the render node.If no surface exists yet, a surface will be created optimized forrendering to renderer.
	node		# a cairo GskRenderNode 
	renderer		#  Renderer to optimize for or NULL for any. 
	return:		#  a Cairo context used for drawing; usecairo_destroy() when done drawing.  
GskRenderNode  *gsk_container_node_new (GskRenderNode **children, guint n_children);	#创建对象:GskRenderNode instance for holding the given children.The new node will acquire a reference to each of the children.
	children		#  The children of the node. 
	n_children		# Number of children in the childrenarray
	return:		#  the new GskRenderNode .  
guint gsk_container_node_get_n_children (GskRenderNode *node);	# Retrieves the number of direct children of node.
	node		# a container GskRenderNode 
	return:		#  the number of children of the GskRenderNode  
GskRenderNode  *gsk_container_node_get_child (GskRenderNode *node, guint idx);	# GskRenderNode  *gsk_container_node_get_child (GskRenderNode *node, guint idx);</pre></div><hr>
GskRenderNode  *gsk_transform_node_new (GskRenderNode *child, const graphene_matrix_t *transform);	# Creates a GskRenderNode that will transform the given childwith the given transform.
	child		# The node to transform
	transform		# The transform to apply
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_transform_node_get_child (GskRenderNode *node);	# Gets the child node that is getting transformed by the given node.
	node		# a transform GskRenderNode
	return:		#  The child that is getting transformed.  
GskRenderNode  *gsk_opacity_node_new (GskRenderNode *child, double opacity);	# Creates a GskRenderNode that will drawn the child with reducedopacity.
	child		# The node to draw
	opacity		# The opacity to apply
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_opacity_node_get_child (GskRenderNode *node);	# Gets the child node that is getting opacityed by the given node.
	node		# a opacity GskRenderNode
	return:		#  The child that is getting opacityed.  
GskRenderNode  *gsk_color_matrix_node_new (GskRenderNode *child, const graphene_matrix_t *color_matrix, const graphene_vec4_t *color_offset);	# Creates a GskRenderNode that will drawn the child with reducedcolor_matrix.
	child		# The node to draw
	color_matrix		# The matrix to apply
	color_offset		# Values to add to the color
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_repeat_node_new (const graphene_rect_t *bounds, GskRenderNode *child, const graphene_rect_t *child_bounds);	# Creates a GskRenderNode that will repeat the drawing of child acrossthe given bounds.
	bounds		# The bounds of the area to be painted
	child		# The child to repeat
	child_bounds		#  The area of the child to repeat or NULL touse the child's bounds. 
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_clip_node_new (GskRenderNode *child, const graphene_rect_t *clip);	# Creates a GskRenderNode that will clip the child to the areagiven by clip.
	child		# The node to draw
	clip		# The clip to apply
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_clip_node_get_child (GskRenderNode *node);	# Gets the child node that is getting clipped by the given node.
	node		# a clip GskRenderNode
	return:		#  The child that is getting clipped.  
GskRenderNode  *gsk_rounded_clip_node_new (GskRenderNode *child, const GskRoundedRect *clip);	# Creates a GskRenderNode that will clip the child to the areagiven by clip.
	child		# The node to draw
	clip		# The clip to apply
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_rounded_clip_node_get_child (GskRenderNode *node);	# Gets the child node that is getting clipped by the given node.
	node		# a clip GskRenderNode
	return:		#  The child that is getting clipped.  
GskRenderNode  *gsk_shadow_node_new (GskRenderNode *child, const GskShadow *shadows, gsize n_shadows);	# Creates a GskRenderNode that will draw a child with the givenshadows below it.
	child		# The node to draw
	shadows		#  The shadows to apply. 
	n_shadows		# number of entries in the shadowsarray
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_blend_node_new (GskRenderNode *bottom, GskRenderNode *top, GskBlendMode blend_mode);	# Creates a GskRenderNode that will use blend_mode to blend the topnode onto the bottom node.
	bottom		# The bottom node to be drawn
	top		# The node to be blended onto the bottomnode
	blend_mode		# The blend mode to use
	return:		#  A new GskRenderNode  
GskRenderNode  *gsk_cross_fade_node_new (GskRenderNode *start, GskRenderNode *end, double progress);	# Creates a GskRenderNode that will do a cross-fade between start and end.
	start		# The start node to be drawn
	end		# The node to be cross_fadeed onto the startnode
	progress		# How far the fade has progressed from start to end. The value willbe clamped to the range [0 ... 1]
	return:		#  A new GskRenderNode  

#.# gtk

GtkApplication  *gtk_application_new (const gchar *application_id, GApplicationFlags flags);
	application_id		#  The application ID. 
	return:			#  a new GtkApplication instance 
void gtk_application_add_window (GtkApplication *application, GtkWindow *window);	# Adds a window to application.
	application		# a GtkApplication 
	window			# a GtkWindow 
void gtk_application_remove_window (GtkApplication *application, GtkWindow *window);	# Remove a window from application.
	application		# a GtkApplication 
	window			# a GtkWindow 
GList  *gtk_application_get_windows (GtkApplication *application);
	application		# a GtkApplication 
	return:			#  a GList of GtkWindow
GtkWindow  *gtk_application_get_window_by_id (GtkApplication *application, guint id);	# Returns the GtkApplicationWindow with the given ID.
	application		# a GtkApplication 
	id		# an identifier number
	return:		#  the window with ID id, 
		NULL	# if there is no window with this ID.  
GtkWindow  *gtk_application_get_active_window (GtkApplication *application);	# Gets the “active” window for the application.
	application		# a GtkApplication 
	return:		#  the active window.  
guint gtk_application_inhibit (GtkApplication *application, GtkWindow *window, GtkApplicationInhibitFlags flags, const gchar *reason);	# Inform the session manager that certain types of actions should beinhibited. This is not guaranteed to work on all platforms and forall types of actions.
	application		# the GtkApplication 
	window		#  a GtkWindow , or NULL . 
	return:		#  A non-zero cookie that is used to uniquely identify thisrequest. It should be used as an argument to gtk_application_uninhibit() in order to remove the request. If the platform does not supportinhibiting or the request failed for some reason, 0 is returned. 
void gtk_application_uninhibit (GtkApplication *application, guint cookie);	# Removes an inhibitor that has been established with gtk_application_inhibit() .Inhibitors are also cleared when the application exits.
	application		# the GtkApplication 
	cookie		# a cookie that was returned by 
gboolean gtk_application_is_inhibited (GtkApplication *application, GtkApplicationInhibitFlags flags);	# Determines if any of the actions specified in flags arecurrently inhibited (possibly by another application).
	application		# the GtkApplication 
	flags		# what types of actions should be queried
	return:		#  TRUE if any of the actions specified in flagsare inhibited 
gboolean gtk_application_prefers_app_menu (GtkApplication *application);	# Determines if the desktop environment in which the application isrunning would prefer an application menu be shown.
	application		# a GtkApplication 
	return:		#  TRUE if you should set an app menu 
GMenuModel  *gtk_application_get_app_menu (GtkApplication *application);	# Returns the menu model that has been set withgtk_application_set_app_menu() .
	application		# a GtkApplication 
	return:		#  the application menu of applicationor NULL if no application menu has been set.  
void gtk_application_set_app_menu (GtkApplication *application, GMenuModel *app_menu);	# Sets or unsets the application menu for application.
	application		# a GtkApplication 
	app_menu		#  a GMenuModel , or NULL . 
GMenuModel  *gtk_application_get_menubar (GtkApplication *application);	# Returns the menu model that has been set withgtk_application_set_menubar() .
	application		# a GtkApplication 
	return:		#  the menubar for windows of application.  
void gtk_application_set_menubar (GtkApplication *application, GMenuModel *menubar);	# Sets or unsets the menubar for windows of application.
	application		# a GtkApplication 
	menubar		#  a GMenuModel , or NULL . 
GMenu  *gtk_application_get_menu_by_id (GtkApplication *application, const gchar *id);	# Gets a menu from automatically loaded resources.See Automatic resources for more information.
	application		# a GtkApplication 
	id		# the id of the menu to look up
	return:		#  Gets the menu with thegiven id from the automatically loaded resources.  
gchar  **gtk_application_list_action_descriptions (GtkApplication *application);	# Lists the detailed action names which have associated accelerators.See gtk_application_set_accels_for_action() .
	application		# a GtkApplication 
	return:		#  a NULL -terminated array of strings,free with g_strfreev() when done.  
gchar  **gtk_application_get_accels_for_action (GtkApplication *application, const gchar *detailed_action_name);	# Gets the accelerators that are currently associated withthe given action.
	application		# a GtkApplication 
	detailed_action_name		# a detailed action name, specifying an actionand target to obtain accelerators for
	return:		#  accelerators for detailed_action_name, asa NULL -terminated array. Free with g_strfreev() when no longer needed.  
void gtk_application_set_accels_for_action (GtkApplication *application, const gchar *detailed_action_name, const gchar * const *accels);	# Sets zero or more keyboard accelerators that will trigger thegiven action. The first item in accels will be the primaryaccelerator, which may be displayed in the UI.
	application		# a GtkApplication 
	detailed_action_name		# a detailed action name, specifying an actionand target to associate accelerators with
	accels		#  a list of accelerators in the formatunderstood by 
gchar  **gtk_application_get_actions_for_accel (GtkApplication *application, const gchar *accel);	# Returns the list of actions (possibly empty) that accel maps to.Each item in the list is a detailed action name in the usual form.
	application		# a GtkApplication 
	accel		# an accelerator that can be parsed by 
	return:		#  a NULL -terminated array of actions for accel.  
GtkWidget  *gtk_application_window_new (GtkApplication *application);	#创建对象:GtkApplicationWindow .
	application		# a GtkApplication 
	return:		#  a newly created GtkApplicationWindow  
void gtk_application_window_set_show_menubar (GtkApplicationWindow *window, gboolean show_menubar);	# Sets whether the window will display a menubar for the app menuand menubar as needed.
	window		# a GtkApplicationWindow 
	show_menubar		# whether to show a menubar when needed
gboolean gtk_application_window_get_show_menubar (GtkApplicationWindow *window);	# Returns whether the window will display a menubar for the app menuand menubar as needed.
	window		# a GtkApplicationWindow 
	return:		#  TRUE if windowwill display a menubar when needed 
guint gtk_application_window_get_id (GtkApplicationWindow *window);	# Returns the unique ID of the window. If the window has not yet been added toa GtkApplication , returns 0.
	window		# a GtkApplicationWindow 
	return:		#  the unique ID for window, or 0 if the windowhas not yet been added to a GtkApplication  
void gtk_application_window_set_help_overlay (GtkApplicationWindow *window, GtkShortcutsWindow *help_overlay);	# Associates a shortcuts window with the application window, andsets up an action with the name win.show-help-overlay to presentit.
	window		# a GtkApplicationWindow 
	help_overlay		#  a GtkShortcutsWindow . 
GtkShortcutsWindow  *gtk_application_window_get_help_overlay (GtkApplicationWindow *window);	# Gets the GtkShortcutsWindow that has been set up witha prior call to gtk_application_window_set_help_overlay() .
	window		# a GtkApplicationWindow 
	return:		#  the help overlay associated with window, or NULL .  
gchar  *gtk_actionable_get_action_name (GtkActionable *actionable);	# Gets the action name for actionable.
	actionable		# a GtkActionable widget
	return:		#  the action name, or NULL if none is set.  
void gtk_actionable_set_action_name (GtkActionable *actionable, const gchar *action_name);	# Specifies the name of the action with which this widget should beassociated. If action_name is NULL then the widget will beunassociated from any previous action.
	actionable		# a GtkActionable widget
	action_name		#  an action name, or NULL . 
GVariant  *gtk_actionable_get_action_target_value (GtkActionable *actionable);	# Gets the current target value of actionable.
	actionable		# a GtkActionable widget
	return:		#  the current target value.  
void gtk_actionable_set_action_target_value (GtkActionable *actionable, GVariant *target_value);	# Sets the target value of an actionable widget.
	actionable		# a GtkActionable widget
	target_value		# a GVariant to set as the target value, or NULL 
void gtk_actionable_set_action_target (GtkActionable *actionable, const gchar *format_string, ...);	# Sets the target of an actionable widget.
	actionable		# a GtkActionable widget
	format_string		# a GVariant format string
	...		# arguments appropriate for format_string
void gtk_actionable_set_detailed_action_name (GtkActionable *actionable, const gchar *detailed_action_name);	# Sets the action-name and associated string target value of anactionable widget.
	actionable		# a GtkActionable widget
	detailed_action_name		# the detailed action name
void <span class="c_punctuation">( *GtkBuilderConnectFunc<span class="c_punctuation">) (GtkBuilder *builder, GObject *object, const gchar *signal_name, const gchar *handler_name, GObject *connect_object, GConnectFlags flags, gpointer user_data);	# This is the signature of a function used to connect signals. It is usedby the gtk_builder_connect_signals() and gtk_builder_connect_signals_full() methods. It is mainly intended for interpreted language bindings, butcould be useful where the programmer wants more control over the signalconnection process. Note that this function can only be called once,subsequent calls will do nothing.
	builder		# a GtkBuilder 
	object		# object to connect a signal to
	signal_name		# name of the signal
	handler_name		# name of the handler
	connect_object		#  a GObject , if non-NULL , use 
	user_data		# user data
GtkBuilder  *gtk_builder_new (void );	#创建对象:empty builder object.
	return:		#  a new (empty) GtkBuilder object 
GtkBuilder  *gtk_builder_new_from_file (const gchar *filename);	# Builds the GtkBuilder UI definition in the file filename.
	filename		# filename of user interface description file
	return:		#  a GtkBuilder containing the described interface 
GtkBuilder  *gtk_builder_new_from_resource (const gchar *resource_path);	# Builds the GtkBuilder UI definition at resource_path.
	resource_path		# a GResource resource path
	return:		#  a GtkBuilder containing the described interface 
GtkBuilder  *gtk_builder_new_from_string (const gchar *string, gssize length);	# Builds the user interface described by string (in theGtkBuilder UI definition format).
	string		# a user interface (XML) description
	length		# the length of string, or -1
	return:		#  a GtkBuilder containing the interface described by string 
void gtk_builder_add_callback_symbol (GtkBuilder *builder, const gchar *callback_name, GCallback callback_symbol);	# Adds the callback_symbol to the scope of builder under the given callback_name.
	builder		# a GtkBuilder 
	callback_name		# The name of the callback, as expected in the XML
	callback_symbol		#  The callback pointer. 
void gtk_builder_add_callback_symbols (GtkBuilder *builder, const gchar *first_callback_name, GCallback first_callback_symbol, ...);	# A convenience function to add many callbacks instead of callinggtk_builder_add_callback_symbol() for each symbol.
	builder		# a GtkBuilder 
	first_callback_name		# The name of the callback, as expected in the XML
	first_callback_symbol		#  The callback pointer. 
GCallback gtk_builder_lookup_callback_symbol (GtkBuilder *builder, const gchar *callback_name);	# Fetches a symbol previously added to builderwith gtk_builder_add_callback_symbols() 
	builder		# a GtkBuilder 
	callback_name		# The name of the callback
	return:		#  The callback symbol in builderfor callback_name, or NULL .  
guint gtk_builder_add_from_file (GtkBuilder *builder, const gchar *filename, GError **error);	# Parses a file containing a GtkBuilder UI definition and merges it with the current contents of builder.
	builder		# a GtkBuilder 
	filename		# the name of the file to parse
	error		#  return location for an error, or NULL . 
	return:		#  A positive value on success, 0 if an error occurred 
guint gtk_builder_add_from_resource (GtkBuilder *builder, const gchar *resource_path, GError **error);	# Parses a resource file containing a GtkBuilder UI definition and merges it with the current contents of builder.
	builder		# a GtkBuilder 
	resource_path		# the path of the resource file to parse
	error		#  return location for an error, or NULL . 
	return:		#  A positive value on success, 0 if an error occurred 
guint gtk_builder_add_from_string (GtkBuilder *builder, const gchar *buffer, gsize length, GError **error);	# Parses a string containing a GtkBuilder UI definition and merges it with the current contents of builder.
	builder		# a GtkBuilder 
	buffer		# the string to parse
	length		# the length of buffer(may be -1 if bufferis nul-terminated)
	error		#  return location for an error, or NULL . 
	return:		#  A positive value on success, 0 if an error occurred 
guint gtk_builder_add_objects_from_file (GtkBuilder *builder, const gchar *filename, gchar **object_ids, GError **error);	# Parses a file containing a GtkBuilder UI definition building only the requested objects and mergesthem with the current contents of builder.
	builder		# a GtkBuilder 
	filename		# the name of the file to parse
	object_ids		#  nul-terminated array of objects to build. 
	return:		#  A positive value on success, 0 if an error occurred 
guint gtk_builder_add_objects_from_string (GtkBuilder *builder, const gchar *buffer, gsize length, gchar **object_ids, GError **error);	# Parses a string containing a GtkBuilder UI definition building only the requested objects and mergesthem with the current contents of builder.
	builder		# a GtkBuilder 
	buffer		# the string to parse
	length		# the length of buffer(may be -1 if bufferis nul-terminated)
	object_ids		#  nul-terminated array of objects to build. 
	return:		#  A positive value on success, 0 if an error occurred 
guint gtk_builder_add_objects_from_resource (GtkBuilder *builder, const gchar *resource_path, gchar **object_ids, GError **error);	# Parses a resource file containing a GtkBuilder UI definition building only the requested objects and mergesthem with the current contents of builder.
	builder		# a GtkBuilder 
	resource_path		# the path of the resource file to parse
	object_ids		#  nul-terminated array of objects to build. 
	return:		#  A positive value on success, 0 if an error occurred 
guint gtk_builder_extend_with_template (GtkBuilder *builder, GtkWidget *widget, GType template_type, const gchar *buffer, gsize length, GError **error);	# Main private entry point for building composite containercomponents from template XML.
	builder		# a GtkBuilder 
	widget		# the widget that is being extended
	template_type		# the type that the template is for
	buffer		# the string to parse
	length		# the length of buffer(may be -1 if bufferis nul-terminated)
	error		#  return location for an error, or NULL . 
	return:		#  A positive value on success, 0 if an error occurred 
GObject  *gtk_builder_get_object (GtkBuilder *builder, const gchar *name);	# Gets the object named name. Note that this function does notincrement the reference count of the returned object.
	builder		# a GtkBuilder 
	name		# name of object to get
	return:		#  the object named nameor NULL ifit could not be found in the object tree.  
GSList  *gtk_builder_get_objects (GtkBuilder *builder);	# Gets all objects that have been constructed by builder. Note thatthis function does not increment the reference counts of the returnedobjects.
	builder		# a GtkBuilder 
	return:		#  a newly-allocated GSList containing all the objectsconstructed by the GtkBuilder instance. It should be freed byg_slist_free() .  
void gtk_builder_expose_object (GtkBuilder *builder, const gchar *name, GObject *object);	# Add object to the builder object pool so it can be referenced just like anyother object built by builder.
	builder		# a GtkBuilder 
	name		# the name of the object exposed to the builder
	object		# the object to expose
void gtk_builder_connect_signals (GtkBuilder *builder, gpointer user_data);	# This method is a simpler variation of gtk_builder_connect_signals_full() .It uses symbols explicitly added to builder with prior calls togtk_builder_add_callback_symbol() . In the case that symbols are notexplicitly added; it uses GModule ’s introspective features (by opening the module NULL )to look at the application’s symbol table. From here it tries to matchthe signal handler names given in the interface description withsymbols in the application and connects the signals. Note that thisfunction can only be called once, subsequent calls will do nothing.
	builder		# a GtkBuilder 
	user_data		# user data to pass back with all signals
void gtk_builder_connect_signals_full (GtkBuilder *builder, GtkBuilderConnectFunc func, gpointer user_data);	# This function can be thought of the interpreted language bindingversion of gtk_builder_connect_signals() , except that it does notrequire GModule to function correctly.
	builder		# a GtkBuilder 
	func		#  the function used to connect the signals. 
	user_data		# arbitrary data that will be passed to the connection function
void gtk_builder_set_translation_domain (GtkBuilder *builder, const gchar *domain);	# Sets the translation domain of builder.See “translation-domain” .
	builder		# a GtkBuilder 
	domain		#  the translation domain or NULL . 
gchar  *gtk_builder_get_translation_domain (GtkBuilder *builder);	# Gets the translation domain of builder.
	builder		# a GtkBuilder 
	return:		#  the translation domain. This string is ownedby the builder object and must not be modified or freed. 
void gtk_builder_set_application (GtkBuilder *builder, GtkApplication *application);	# Sets the application associated with builder.
	builder		# a GtkBuilder 
	application		# a GtkApplication 
GtkApplication  *gtk_builder_get_application (GtkBuilder *builder);	# Gets the GtkApplication associated with the builder.
	builder		# a GtkBuilder 
	return:		#  the application being used by the builder,or NULL .  
GType gtk_builder_get_type_from_name (GtkBuilder *builder, const char *type_name);	# Looks up a type by name, using the virtual function thatGtkBuilder has for that purpose. This is mainly used whenimplementing the GtkBuildable interface on a type.
	builder		# a GtkBuilder 
	type_name		# type name to lookup
	return:		#  the GType found for type_nameor G_TYPE_INVALID if no type was found 
gboolean gtk_builder_value_from_string (GtkBuilder *builder, GParamSpec *pspec, const gchar *string, GValue *value, GError **error);	# This function demarshals a value from a string. This functioncalls g_value_init() on the value argument, so it need not beinitialised beforehand.
	builder		# a GtkBuilder 
	pspec		# the GParamSpec for the property
	string		# the string representation of the value
	value		#  the GValue to store the result in. 
	return:		#  TRUE on success 
gboolean gtk_builder_value_from_string_type (GtkBuilder *builder, GType type, const gchar *string, GValue *value, GError **error);	# Like gtk_builder_value_from_string() , this function demarshalsa value from a string, but takes a GType instead of GParamSpec .This function calls g_value_init() on the value argument, so itneed not be initialised beforehand.
	builder		# a GtkBuilder 
	type		# the GType of the value
	string		# the string representation of the value
	value		#  the GValue to store the result in. 
	return:		#  TRUE on success 
void gtk_buildable_set_name (GtkBuildable *buildable, const gchar *name);	# Sets the name of the buildable object.
	buildable		# a GtkBuildable 
	name		# name to set
gchar  *gtk_buildable_get_name (GtkBuildable *buildable);	# Gets the name of the buildable object. 
	buildable		# a GtkBuildable 
	return:		#  the name set with gtk_buildable_set_name()  
void gtk_buildable_add_child (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type);	# Adds a child to buildable. type is an optional stringdescribing how the child should be added.
	buildable		# a GtkBuildable 
	builder		# a GtkBuilder 
	child		# child to add
	type		#  kind of child or NULL . 
void gtk_buildable_set_buildable_property (GtkBuildable *buildable, GtkBuilder *builder, const gchar *name, const GValue *value);	# Sets the property name name to value on the buildable object.
	buildable		# a GtkBuildable 
	builder		# a GtkBuilder 
	name		# name of property
	value		# value of property
GObject  *gtk_buildable_construct_child (GtkBuildable *buildable, GtkBuilder *builder, const gchar *name);	# Constructs a child of buildable with the name name.
	buildable		# A GtkBuildable 
	builder		# GtkBuilder used to construct this object
	name		# name of child to construct
	return:		#  the constructed child.  
gboolean gtk_buildable_custom_tag_start (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data);	# This is called for each unknown element under &lt;child&gt;.
	buildable		# a GtkBuildable 
	builder		# a GtkBuilder used to construct this object
	child		#  child object or NULL for non-child tags. 
	return:		#  TRUE if a object has a custom implementation, FALSE if it doesn't. 
void gtk_buildable_custom_tag_end (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data);	# This is called at the end of each custom element handled by the buildable.
	buildable		# A GtkBuildable 
	builder		# GtkBuilder used to construct this object
	child		#  child object or NULL for non-child tags. 
	tagname		# name of tag
	data		#  user data that will be passed in to parser functions. 
void gtk_buildable_custom_finished (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer data);	# This is similar to gtk_buildable_parser_finished() but iscalled once for each custom tag handled by the buildable.
	buildable		# a GtkBuildable 
	builder		# a GtkBuilder 
	child		#  child object or NULL for non-child tags. 
	tagname		# the name of the tag
	data		# user data created in custom_tag_start
void gtk_buildable_parser_finished (GtkBuildable *buildable, GtkBuilder *builder);	# Called when the builder finishes the parsing of a GtkBuilder UI definition . Note that this will be called once for each time gtk_builder_add_from_file() or gtk_builder_add_from_string() is called on a builder.
	buildable		# a GtkBuildable 
	builder		# a GtkBuilder 
GObject  *gtk_buildable_get_internal_child (GtkBuildable *buildable, GtkBuilder *builder, const gchar *childname);	# Get the internal child called childname of the buildable object.
	buildable		# a GtkBuildable 
	builder		# a GtkBuilder 
	childname		# name of child
	return:		#  the internal child of the buildable object.  
GtkWidget  *gtk_window_new (GtkWindowType type);	#创建对象:GtkWindow , which is a toplevel window that cancontain other widgets. Nearly always, the type of the window shouldbe GTK_WINDOW_TOPLEVEL . If you’re implementing something like apopup menu from scratch (which is a bad idea, just use GtkMenu ),you might use GTK_WINDOW_POPUP . GTK_WINDOW_POPUP is not fordialogs, though in some other toolkits dialogs are called “popups”.In GTK+, GTK_WINDOW_POPUP means a pop-up menu or pop-up tooltip.On X11, popup windows are not controlled by thewindow manager .
	type		# type of window
	return:		#  a new GtkWindow . 
void gtk_window_set_title (GtkWindow *window, const gchar *title);	# Sets the title of the GtkWindow . The title of a window will bedisplayed in its title bar; on the X Window System, the title baris rendered by the window manager ,so exactly how the title appears to users may varyaccording to a user’s exact configuration. The title should help auser distinguish this window from other windows they may haveopen. A good title might include the application name and currentdocument filename, for example.
	window		# a GtkWindow 
	title		# title of the window
void gtk_window_set_resizable (GtkWindow *window, gboolean resizable);	# Sets whether the user can resize a window. Windows are user resizableby default.
	window		# a GtkWindow 
	resizable		# TRUE if the user can resize this window
gboolean gtk_window_get_resizable (GtkWindow *window);	# Gets the value set by gtk_window_set_resizable() .
	window		# a GtkWindow 
	return:		#  TRUE if the user can resize the window 
void gtk_window_add_accel_group (GtkWindow *window, GtkAccelGroup *accel_group);	# Associate accel_group with window, such that callinggtk_accel_groups_activate() on window will activate acceleratorsin accel_group.
	window		# window to attach accelerator group to
	accel_group		# a GtkAccelGroup 
void gtk_window_remove_accel_group (GtkWindow *window, GtkAccelGroup *accel_group);	# Reverses the effects of gtk_window_add_accel_group() .
	window		# a GtkWindow 
	accel_group		# a GtkAccelGroup 
gboolean gtk_window_activate_focus (GtkWindow *window);	# Activates the current focused widget within the window.
	window		# a GtkWindow 
	return:		#  TRUE if a widget got activated. 
gboolean gtk_window_activate_default (GtkWindow *window);	# Activates the default widget for the window, unless the current focused widget has been configured to receive the default action (see gtk_widget_set_receives_default() ), in which case thefocused widget is activated.
	window		# a GtkWindow 
	return:		#  TRUE if a widget got activated. 
void gtk_window_set_modal (GtkWindow *window, gboolean modal);	# Sets a window modal or non-modal. Modal windows prevent interactionwith other windows in the same application. To keep modal dialogson top of main application windows, usegtk_window_set_transient_for() to make the dialog transient for theparent; most window managers will then disallow lowering the dialog below the parent.
	window		# a GtkWindow 
	modal		# whether the window is modal
void gtk_window_set_default_size (GtkWindow *window, gint width, gint height);	# Sets the default size of a window. If the window’s “natural” size(its size request) is larger than the default, the default will beignored.
	window		# a GtkWindow 
	width		# width in pixels, or -1 to unset the default width
	height		# height in pixels, or -1 to unset the default height
void gtk_window_set_gravity (GtkWindow *window, GdkGravity gravity);	# Window gravity defines the meaning of coordinates passed togtk_window_move() . See gtk_window_move() and GdkGravity formore details.
	window		# a GtkWindow 
	gravity		# window gravity
GdkGravity gtk_window_get_gravity (GtkWindow *window);	# Gets the value set by gtk_window_set_gravity() .
	window		# a GtkWindow 
	return:		#  window gravity.  
void gtk_window_set_position (GtkWindow *window, GtkWindowPosition position);	# Sets a position constraint for this window. If the old or newconstraint is GTK_WIN_POS_CENTER_ALWAYS , this will also causethe window to be repositioned to satisfy the new constraint.
	window		# a GtkWindow .
	position		# a position constraint.
void gtk_window_set_transient_for (GtkWindow *window, GtkWindow *parent);	# Dialog windows should be set transient for the main applicationwindow they were spawned from. This allowswindow managers to e.g. keep thedialog on top of the main window, or center the dialog over themain window. gtk_dialog_new_with_buttons() and other conveniencefunctions in GTK+ will sometimes callgtk_window_set_transient_for() on your behalf.
	window		# a GtkWindow 
	parent		#  parent window, or NULL . 
void gtk_window_set_attached_to (GtkWindow *window, GtkWidget *attach_widget);	# Marks window as attached to attach_widget. This creates a logical bindingbetween the window and the widget it belongs to, which is used by GTK+ topropagate information such as styling or accessibility to window as if itwas a children of attach_widget.
	window		# a GtkWindow 
	attach_widget		#  a GtkWidget , or NULL . 
void gtk_window_set_destroy_with_parent (GtkWindow *window, gboolean setting);	# If setting is TRUE , then destroying the transient parent of windowwill also destroy window itself. This is useful for dialogs thatshouldn’t persist beyond the lifetime of the main window they'reassociated with, for example.
	window		# a GtkWindow 
	setting		# whether to destroy windowwith its transient parent
void gtk_window_set_screen (GtkWindow *window, GdkScreen *screen);	# Sets the GdkScreen where the window is displayed; ifthe window is already mapped, it will be unmapped, andthen remapped on the new screen.
	window		# a GtkWindow .
	screen		# a GdkScreen .
GdkScreen  *gtk_window_get_screen (GtkWindow *window);	# Returns the GdkScreen associated with window.
	window		# a GtkWindow .
	return:		#  a GdkScreen .  
gboolean gtk_window_is_active (GtkWindow *window);	# Returns whether the window is part of the current active toplevel.(That is, the toplevel window receiving keystrokes.)The return value is TRUE if the window is active toplevel itself.You might use this function if you wanted to draw a widgetdifferently in an active window from a widget in an inactive window.
	window		# a GtkWindow 
	return:		#  TRUE if the window part of the current active window. 
gboolean gtk_window_is_maximized (GtkWindow *window);	# Retrieves the current maximized state of window.
	window		# a GtkWindow 
	return:		#  whether the window has a maximized state. 
GList  *gtk_window_list_toplevels (void );	# Returns a list of all existing toplevel windows. The widgetsin the list are not individually referenced. If you wantto iterate through the list and perform actions involvingcallbacks that might destroy the widgets, you must callg_list_foreach (result, (GFunc)g_object_ref, NULL) first, andthen unref all the widgets afterwards.
	return:		#  list of toplevel widgets.  
void gtk_window_add_mnemonic (GtkWindow *window, guint keyval, GtkWidget *target);	# Adds a mnemonic to this window.
	window		# a GtkWindow 
	keyval		# the mnemonic
	target		# the widget that gets activated by the mnemonic
void gtk_window_remove_mnemonic (GtkWindow *window, guint keyval, GtkWidget *target);	# Removes a mnemonic from this window.
	window		# a GtkWindow 
	keyval		# the mnemonic
	target		# the widget that gets activated by the mnemonic
gboolean gtk_window_mnemonic_activate (GtkWindow *window, guint keyval, GdkModifierType modifier);	# Activates the targets associated with the mnemonic.
	window		# a GtkWindow 
	keyval		# the mnemonic
	modifier		# the modifiers
	return:		#  TRUE if the activation is done. 
gboolean gtk_window_activate_key (GtkWindow *window, GdkEventKey *event);	# Activates mnemonics and accelerators for this GtkWindow . This is normallycalled by the default ::key_press_event handler for toplevel windows,however in some cases it may be useful to call this directly whenoverriding the standard key handling for a toplevel window.
	window		# a GtkWindow 
	event		# a GdkEventKey 
	return:		#  TRUE if a mnemonic or accelerator was found and activated. 
gboolean gtk_window_propagate_key_event (GtkWindow *window, GdkEventKey *event);	# Propagate a key press or release event to the focus widget andup the focus container chain until a widget handles event.This is normally called by the default ::key_press_event and::key_release_event handlers for toplevel windows,however in some cases it may be useful to call this directly whenoverriding the standard key handling for a toplevel window.
	window		# a GtkWindow 
	event		# a GdkEventKey 
	return:		#  TRUE if a widget in the focus chain handled the event. 
GtkWidget  *gtk_window_get_focus (GtkWindow *window);	# Retrieves the current focused widget within the window.Note that this is the widget that would have the focusif the toplevel window focused; if the toplevel windowis not focused then gtk_widget_has_focus (widget) willnot be TRUE for the widget.
	window		# a GtkWindow 
	return:		#  the currently focused widget,or NULL if there is none.  
void gtk_window_set_focus (GtkWindow *window, GtkWidget *focus);	# If focus is not the current focus widget, and is focusable, setsit as the focus widget for the window. If focus is NULL , unsetsthe focus widget for this window. To set the focus to a particularwidget in the toplevel, it is usually more convenient to usegtk_widget_grab_focus() instead of this function.
	window		# a GtkWindow 
	focus		#  widget to be the new focus widget, or NULL to unsetany focus widget for the toplevel window. 
GtkWidget  *gtk_window_get_default_widget (GtkWindow *window);	# Returns the default widget for window. Seegtk_window_set_default() for more details.
	window		# a GtkWindow 
	return:		#  the default widget, or NULL if there is none.  
void gtk_window_set_default (GtkWindow *window, GtkWidget *default_widget);	# The default widget is the widget that’s activated when the userpresses Enter in a dialog (for example). This function sets orunsets the default widget for a GtkWindow . When setting (ratherthan unsetting) the default widget it’s generally easier to callgtk_widget_grab_default() on the widget. Before making a widgetthe default widget, you must call gtk_widget_set_can_default() onthe widget you’d like to make the default.
	window		# a GtkWindow 
	default_widget		#  widget to be the default, or NULL to unset the default widget for the toplevel. 
void gtk_window_present (GtkWindow *window);	# Presents a window to the user. This may mean raising the windowin the stacking order, deiconifying it, moving it to the currentdesktop, and/or giving it the keyboard focus, possibly dependenton the user’s platform, window manager, and preferences.
	window		# a GtkWindow 
void gtk_window_present_with_time (GtkWindow *window, guint32 timestamp);	# Presents a window to the user in response to a user interaction.If you need to present a window without a timestamp, use gtk_window_present() . See gtk_window_present() for details.
	window		# a GtkWindow 
	timestamp		# the timestamp of the user interaction (typically abutton or key press event) which triggered this call
void gtk_window_close (GtkWindow *window);	# Requests that the window is closed, similar to what happenswhen a window manager close button is clicked.
	window		# a GtkWindow 
void gtk_window_iconify (GtkWindow *window);	# Asks to iconify (i.e. minimize) the specified window. Note thatyou shouldn’t assume the window is definitely iconified afterward,because other entities (e.g. the user orwindow manager ) could deiconify itagain, or there may not be a window manager in which caseiconification isn’t possible, etc. But normally the window will endup iconified. Just don’t write code that crashes if not.
	window		# a GtkWindow 
void gtk_window_deiconify (GtkWindow *window);	# Asks to deiconify (i.e. unminimize) the specified window. Notethat you shouldn’t assume the window is definitely deiconifiedafterward, because other entities (e.g. the user orwindow manager )) could iconify itagain before your code which assumes deiconification gets to run.
	window		# a GtkWindow 
void gtk_window_stick (GtkWindow *window);	# Asks to stick window, which means that it will appear on all userdesktops. Note that you shouldn’t assume the window is definitelystuck afterward, because other entities (e.g. the user orwindow manager could unstick itagain, and some window managers do not support stickingwindows. But normally the window will end up stuck. Just don'twrite code that crashes if not.
	window		# a GtkWindow 
void gtk_window_unstick (GtkWindow *window);	# Asks to unstick window, which means that it will appear on onlyone of the user’s desktops. Note that you shouldn’t assume thewindow is definitely unstuck afterward, because other entities(e.g. the user or window manager ) couldstick it again. But normally the window willend up stuck. Just don’t write code that crashes if not.
	window		# a GtkWindow 
void gtk_window_maximize (GtkWindow *window);	# Asks to maximize window, so that it becomes full-screen. Note thatyou shouldn’t assume the window is definitely maximized afterward,because other entities (e.g. the user orwindow manager ) could unmaximize itagain, and not all window managers support maximization. Butnormally the window will end up maximized. Just don’t write codethat crashes if not.
	window		# a GtkWindow 
void gtk_window_unmaximize (GtkWindow *window);	# Asks to unmaximize window. Note that you shouldn’t assume thewindow is definitely unmaximized afterward, because other entities(e.g. the user or window manager )could maximize it again, and not all windowmanagers honor requests to unmaximize. But normally the window willend up unmaximized. Just don’t write code that crashes if not.
	window		# a GtkWindow 
void gtk_window_fullscreen (GtkWindow *window);	# Asks to place window in the fullscreen state. Note that youshouldn’t assume the window is definitely full screen afterward,because other entities (e.g. the user orwindow manager ) could unfullscreen itagain, and not all window managers honor requests to fullscreenwindows. But normally the window will end up fullscreen. Justdon’t write code that crashes if not.
	window		# a GtkWindow 
void gtk_window_fullscreen_on_monitor (GtkWindow *window, GdkScreen *screen, gint monitor);	# Asks to place window in the fullscreen state. Note that you shouldn't assumethe window is definitely full screen afterward.
	window		# a GtkWindow 
	screen		# a GdkScreen to draw to
	monitor		# which monitor to go fullscreen on
void gtk_window_unfullscreen (GtkWindow *window);	# Asks to toggle off the fullscreen state for window. Note that youshouldn’t assume the window is definitely not full screenafterward, because other entities (e.g. the user orwindow manager ) could fullscreen itagain, and not all window managers honor requests to unfullscreenwindows. But normally the window will end up restored to its normalstate. Just don’t write code that crashes if not.
	window		# a GtkWindow 
void gtk_window_set_keep_above (GtkWindow *window, gboolean setting);	# Asks to keep window above, so that it stays on top. Note thatyou shouldn’t assume the window is definitely above afterward,because other entities (e.g. the user orwindow manager ) could not keep it above,and not all window managers support keeping windows above. Butnormally the window will end kept above. Just don’t write codethat crashes if not.
	window		# a GtkWindow 
	setting		# whether to keep windowabove other windows
void gtk_window_set_keep_below (GtkWindow *window, gboolean setting);	# Asks to keep window below, so that it stays in bottom. Note thatyou shouldn’t assume the window is definitely below afterward,because other entities (e.g. the user orwindow manager ) could not keep it below,and not all window managers support putting windows below. Butnormally the window will be kept below. Just don’t write codethat crashes if not.
	window		# a GtkWindow 
	setting		# whether to keep windowbelow other windows
void gtk_window_begin_resize_drag (GtkWindow *window, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp);	# Starts resizing a window. This function is used if an applicationhas window resizing controls. When GDK can support it, the resizewill be done using the standard mechanism for thewindow manager or windowingsystem. Otherwise, GDK will try to emulate window resizing,potentially not all that well, depending on the windowing system.
	window		# a GtkWindow 
	button		# mouse button that initiated the drag
	edge		# position of the resize control
	root_x		# X position where the user clicked to initiate the drag, in root window coordinates
	root_y		# Y position where the user clicked to initiate the drag
	timestamp		# timestamp from the click event that initiated the drag
void gtk_window_begin_move_drag (GtkWindow *window, gint button, gint root_x, gint root_y, guint32 timestamp);	# Starts moving a window. This function is used if an application haswindow movement grips. When GDK can support it, the window movementwill be done using the standard mechanism for thewindow manager or windowingsystem. Otherwise, GDK will try to emulate window movement,potentially not all that well, depending on the windowing system.
	window		# a GtkWindow 
	button		# mouse button that initiated the drag
	root_x		# X position where the user clicked to initiate the drag, in root window coordinates
	root_y		# Y position where the user clicked to initiate the drag
	timestamp		# timestamp from the click event that initiated the drag
void gtk_window_set_decorated (GtkWindow *window, gboolean setting);	# By default, windows are decorated with a title bar, resizecontrols, etc. Some window managers allow GTK+ to disable these decorations, creating aborderless window. If you set the decorated property to FALSE using this function, GTK+ will do its best to convince the windowmanager not to decorate the window. Depending on the system, thisfunction may not have any effect when called on a window that isalready visible, so you should call it before calling gtk_widget_show() .
	window		# a GtkWindow 
	setting		# TRUE to decorate the window
void gtk_window_set_deletable (GtkWindow *window, gboolean setting);	# By default, windows have a close button in the window frame. Some window managers allow GTK+ to disable this button. If you set the deletable property to FALSE using this function, GTK+ will do its best to convince the windowmanager not to show a close button. Depending on the system, thisfunction may not have any effect when called on a window that isalready visible, so you should call it before calling gtk_widget_show() .
	window		# a GtkWindow 
	setting		# TRUE to decorate the window as deletable
void gtk_window_set_mnemonic_modifier (GtkWindow *window, GdkModifierType modifier);	# Sets the mnemonic modifier for this window.
	window		# a GtkWindow 
	modifier		# the modifier mask used to activatemnemonics on this window.
void gtk_window_set_type_hint (GtkWindow *window, GdkWindowTypeHint hint);	# By setting the type hint for the window, you allow the windowmanager to decorate and handle the window in a way which issuitable to the function of the window in your application.
	window		# a GtkWindow 
	hint		# the window type
void gtk_window_set_skip_taskbar_hint (GtkWindow *window, gboolean setting);	# Windows may set a hint asking the desktop environment not to displaythe window in the task bar. This function sets this hint.
	window		# a GtkWindow 
	setting		# TRUE to keep this window from appearing in the task bar
void gtk_window_set_skip_pager_hint (GtkWindow *window, gboolean setting);	# Windows may set a hint asking the desktop environment not to displaythe window in the pager. This function sets this hint.(A "pager" is any desktop navigation tool such as a workspaceswitcher that displays a thumbnail representation of the windowson the screen.)
	window		# a GtkWindow 
	setting		# TRUE to keep this window from appearing in the pager
void gtk_window_set_urgency_hint (GtkWindow *window, gboolean setting);	# Windows may set a hint asking the desktop environment to drawthe users attention to the window. This function sets this hint.
	window		# a GtkWindow 
	setting		# TRUE to mark this window as urgent
void gtk_window_set_accept_focus (GtkWindow *window, gboolean setting);	# Windows may set a hint asking the desktop environment not to receivethe input focus. This function sets this hint.
	window		# a GtkWindow 
	setting		# TRUE to let this window receive input focus
void gtk_window_set_focus_on_map (GtkWindow *window, gboolean setting);	# Windows may set a hint asking the desktop environment not to receivethe input focus when the window is mapped. This function sets thishint.
	window		# a GtkWindow 
	setting		# TRUE to let this window receive input focus on map
void gtk_window_set_startup_id (GtkWindow *window, const gchar *startup_id);	# Startup notification identifiers are used by desktop environment to track application startup, to provide user feedback and other features. This function changes the corresponding property on theunderlying GdkWindow. Normally, startup identifier is managed automatically and you should only use this function in special caseslike transferring focus from other processes. You should use thisfunction before calling gtk_window_present() or any equivalentfunction generating a window map event.
	window		# a GtkWindow 
	startup_id		# a string with startup-notification identifier
void gtk_window_set_role (GtkWindow *window, const gchar *role);	# This function is only useful on X11, not with other GTK+ targets.
	window		# a GtkWindow 
	role		# unique identifier for the window to be used when restoring a session
gboolean gtk_window_get_decorated (GtkWindow *window);	# Returns whether the window has been set to have decorationssuch as a title bar via gtk_window_set_decorated() .
	window		# a GtkWindow 
	return:		#  TRUE if the window has been set to have decorations 
gboolean gtk_window_get_deletable (GtkWindow *window);	# Returns whether the window has been set to have a close buttonvia gtk_window_set_deletable() .
	window		# a GtkWindow 
	return:		#  TRUE if the window has been set to have a close button 
GList  *gtk_window_get_default_icon_list (void );	# Gets the value set by gtk_window_set_default_icon_list() .The list is a copy and should be freed with g_list_free() ,but the pixbufs in the list have not had their reference countincremented.
	return:		#  copy of default icon list.  
gchar  *gtk_window_get_default_icon_name (void );	# Returns the fallback icon name for windows that has been setwith gtk_window_set_default_icon_name() . The returnedstring is owned by GTK+ and should not be modified. Itis only valid until the next call togtk_window_set_default_icon_name() .
	return:		#  the fallback icon name for windows 
void gtk_window_get_default_size (GtkWindow *window, gint *width, gint *height);	# Gets the default size of the window. A value of -1 for the width orheight indicates that a default size has not been explicitly setfor that dimension, so the “natural” size of the window will beused.
	window		# a GtkWindow 
	width		#  location to store the default width, or NULL . 
gboolean gtk_window_get_destroy_with_parent (GtkWindow *window);	# Returns whether the window will be destroyed with its transient parent. Seegtk_window_set_destroy_with_parent() .
	window		# a GtkWindow 
	return:		#  TRUE if the window will be destroyed with its transient parent. 
GdkPixbuf  *gtk_window_get_icon (GtkWindow *window);	# Gets the value set by gtk_window_set_icon() (or if you'vecalled gtk_window_set_icon_list() , gets the first icon inthe icon list).
	window		# a GtkWindow 
	return:		#  icon for window.  
GList  *gtk_window_get_icon_list (GtkWindow *window);	# Retrieves the list of icons set by gtk_window_set_icon_list() .The list is copied, but the reference count on eachmember won’t be incremented.
	window		# a GtkWindow 
	return:		#  copy of window’s icon list.  
gchar  *gtk_window_get_icon_name (GtkWindow *window);	# Returns the name of the themed icon for the window,see gtk_window_set_icon_name() .
	window		# a GtkWindow 
	return:		#  the icon name or NULL if the window hasno themed icon.  
GdkModifierType gtk_window_get_mnemonic_modifier (GtkWindow *window);	# Returns the mnemonic modifier for this window. Seegtk_window_set_mnemonic_modifier() .
	window		# a GtkWindow 
	return:		#  the modifier mask used to activatemnemonics on this window. 
gboolean gtk_window_get_modal (GtkWindow *window);	# Returns whether the window is modal. See gtk_window_set_modal() .
	window		# a GtkWindow 
	return:		#  TRUE if the window is set to be modal andestablishes a grab when shown 
void gtk_window_get_position (GtkWindow *window, gint *root_x, gint *root_y);	# This function returns the position you need to pass togtk_window_move() to keep window in its current position.This means that the meaning of the returned value varies withwindow gravity. See gtk_window_move() for more details.
	window		# a GtkWindow 
	root_x		#  return location for X coordinate ofgravity-determined reference point, or NULL . 
gchar  *gtk_window_get_role (GtkWindow *window);	# Returns the role of the window. See gtk_window_set_role() forfurther explanation.
	window		# a GtkWindow 
	return:		#  the role of the window if set, or NULL . Thereturned is owned by the widget and must not be modified or freed.  
void gtk_window_get_size (GtkWindow *window, gint *width, gint *height);	# Obtains the current size of window.
	window		# a GtkWindow 
	width		#  return location for width, or NULL . 
gchar  *gtk_window_get_title (GtkWindow *window);	# Retrieves the title of the window. See gtk_window_set_title() .
	window		# a GtkWindow 
	return:		#  the title of the window, or NULL if none hasbeen set explicitly. The returned string is owned by the widgetand must not be modified or freed.  
GtkWindow  *gtk_window_get_transient_for (GtkWindow *window);	# Fetches the transient parent for this window. Seegtk_window_set_transient_for() .
	window		# a GtkWindow 
	return:		#  the transient parent for thiswindow, or NULL if no transient parent has been set.  
GtkWidget  *gtk_window_get_attached_to (GtkWindow *window);	# Fetches the attach widget for this window. Seegtk_window_set_attached_to() .
	window		# a GtkWindow 
	return:		#  the widget where the windowis attached, or NULL if the window is not attached to any widget.  
GdkWindowTypeHint gtk_window_get_type_hint (GtkWindow *window);	# Gets the type hint for this window. See gtk_window_set_type_hint() .
	window		# a GtkWindow 
	return:		#  the type hint for window. 
gboolean gtk_window_get_skip_taskbar_hint (GtkWindow *window);	# Gets the value set by gtk_window_set_skip_taskbar_hint() 
	window		# a GtkWindow 
	return:		#  TRUE if window shouldn’t be in taskbar 
gboolean gtk_window_get_skip_pager_hint (GtkWindow *window);	# Gets the value set by gtk_window_set_skip_pager_hint() .
	window		# a GtkWindow 
	return:		#  TRUE if window shouldn’t be in pager 
gboolean gtk_window_get_urgency_hint (GtkWindow *window);	# Gets the value set by gtk_window_set_urgency_hint() 
	window		# a GtkWindow 
	return:		#  TRUE if window is urgent 
gboolean gtk_window_get_accept_focus (GtkWindow *window);	# Gets the value set by gtk_window_set_accept_focus() .
	window		# a GtkWindow 
	return:		#  TRUE if window should receive the input focus 
gboolean gtk_window_get_focus_on_map (GtkWindow *window);	# Gets the value set by gtk_window_set_focus_on_map() .
	window		# a GtkWindow 
	return:		#  TRUE if window should receive the input focus whenmapped. 
GtkWindowGroup  *gtk_window_get_group (GtkWindow *window);	# Returns the group for window or the default group, ifwindow is NULL or if window does not have an explicitwindow group.
	window		#  a GtkWindow , or NULL . 
	return:		#  the GtkWindowGroup for a window or the default group.  
gboolean gtk_window_has_group (GtkWindow *window);	# Returns whether window has an explicit window group.
	window		# a GtkWindow 
	return:		#  TRUE if windowhas an explicit window group. 
GtkWindowType gtk_window_get_window_type (GtkWindow *window);	# Gets the type of the window. See GtkWindowType .
	window		# a GtkWindow 
	return:		#  the type of the window 
void gtk_window_move (GtkWindow *window, gint x, gint y);	# Asks the window manager to movewindow to the given position. Window managers are free to ignorethis; most window managers ignore requests for initial windowpositions (instead using a user-defined placement algorithm) andhonor requests after the window has already been shown.
	window		# a GtkWindow 
	x		# X coordinate to move window to
	y		# Y coordinate to move window to
void gtk_window_resize (GtkWindow *window, gint width, gint height);	# Resizes the window as if the user had done so, obeying geometryconstraints. The default geometry constraint is that windows maynot be smaller than their size request; to override thisconstraint, call gtk_widget_set_size_request() to set the window'srequest to a smaller value.
	window		# a GtkWindow 
	width		# width in pixels to resize the window to
	height		# height in pixels to resize the window to
void gtk_window_set_default_icon_list (GList *list);	# Sets an icon list to be used as fallback for windows that haven'thad gtk_window_set_icon_list() called on them to set up awindow-specific icon list. This function allows you to set up theicon for all windows in your app at once.
	list		#  a list of GdkPixbuf . 
void gtk_window_set_default_icon (GdkPixbuf *icon);	# Sets an icon to be used as fallback for windows that haven'thad gtk_window_set_icon() called on them from a pixbuf.
	icon		# the icon
gboolean gtk_window_set_default_icon_from_file (const gchar *filename, GError **err);	# Sets an icon to be used as fallback for windows that haven'thad gtk_window_set_icon_list() called on them from a fileon disk. Warns on failure if err is NULL .
	filename		#  location of icon file. 
	return:		#  TRUE if setting the icon succeeded. 
void gtk_window_set_default_icon_name (const gchar *name);	# Sets an icon to be used as fallback for windows that haven'thad gtk_window_set_icon_list() called on them from a namedthemed icon, see gtk_window_set_icon_name() .
	name		# the name of the themed icon
void gtk_window_set_icon (GtkWindow *window, GdkPixbuf *icon);	# Sets up the icon representing a GtkWindow . This icon is used whenthe window is minimized (also known as iconified). Some windowmanagers or desktop environments may also place it in the windowframe, or display it in other contexts. On others, the icon is notused at all, so your mileage may vary.
	window		# a GtkWindow 
	icon		#  icon image, or NULL . 
void gtk_window_set_icon_list (GtkWindow *window, GList *list);	# Sets up the icon representing a GtkWindow . The icon is used whenthe window is minimized (also known as iconified). Some windowmanagers or desktop environments may also place it in the windowframe, or display it in other contexts. On others, the icon is notused at all, so your mileage may vary.
	window		# a GtkWindow 
	list		#  list of GdkPixbuf . 
gboolean gtk_window_set_icon_from_file (GtkWindow *window, const gchar *filename, GError **err);	# Sets the icon for window.Warns on failure if err is NULL .
	window		# a GtkWindow 
	filename		#  location of icon file. 
	return:		#  TRUE if setting the icon succeeded. 
void gtk_window_set_icon_name (GtkWindow *window, const gchar *name);	# Sets the icon for the window from a named themed icon.See the docs for GtkIconTheme for more details.On some platforms, the window icon is not used at all.
	window		# a GtkWindow 
	name		#  the name of the themed icon. 
void gtk_window_set_auto_startup_notification (gboolean setting);	# By default, after showing the first GtkWindow , GTK+ calls gdk_notify_startup_complete() . Call this function to disable the automatic startup notification. You might do this if your first window is a splash screen, and you want to delay notification until after your real main window has been shown, for example.
	setting		# TRUE to automatically do startup notification
gboolean gtk_window_get_mnemonics_visible (GtkWindow *window);	# Gets the value of the “mnemonics-visible” property.
	window		# a GtkWindow 
	return:		#  TRUE if mnemonics are supposed to be visiblein this window. 
void gtk_window_set_mnemonics_visible (GtkWindow *window, gboolean setting);	# Sets the “mnemonics-visible” property.
	window		# a GtkWindow 
	setting		# the new value
gboolean gtk_window_get_focus_visible (GtkWindow *window);	# Gets the value of the “focus-visible” property.
	window		# a GtkWindow 
	return:		#  TRUE if “focus rectangles” are supposed to be visiblein this window. 
void gtk_window_set_focus_visible (GtkWindow *window, gboolean setting);	# Sets the “focus-visible” property.
	window		# a GtkWindow 
	setting		# the new value
GtkApplication  *gtk_window_get_application (GtkWindow *window);	# Gets the GtkApplication associated with the window (if any).
	window		# a GtkWindow 
	return:		#  a GtkApplication , or NULL .  
void gtk_window_set_application (GtkWindow *window, GtkApplication *application);	# Sets or unsets the GtkApplication associated with the window.
	window		# a GtkWindow 
	application		#  a GtkApplication , or NULL . 
void gtk_window_set_has_user_ref_count (GtkWindow *window, gboolean setting);	# Tells GTK+ whether to drop its extra reference to the windowwhen gtk_widget_destroy() is called.
	window		# a GtkWindow 
	setting		# the new value
void gtk_window_set_titlebar (GtkWindow *window, GtkWidget *titlebar);	# Sets a custom titlebar for window.
	window		# a GtkWindow 
	titlebar		#  the widget to use as titlebar. 
GtkWidget  *gtk_window_get_titlebar (GtkWindow *window);	# Returns the custom titlebar that has been set withgtk_window_set_titlebar() .
	window		# a GtkWindow 
	return:		#  the custom titlebar, or NULL .  
void gtk_window_set_interactive_debugging (gboolean enable);	# Opens or closes the interactive debugger ,which offers access to the widget hierarchy of the applicationand to useful debugging tools.
	enable		# TRUE to enable interactive debugging
GtkWidget  *gtk_dialog_new (void );	#创建对象:dialog box.
	return:		#  the new dialog as a GtkWidget  
GtkWidget  *gtk_dialog_new_with_buttons (const gchar *title, GtkWindow *parent, GtkDialogFlags flags, const gchar *first_button_text, ...);	#创建对象:GtkDialog with title title (or NULL for the defaulttitle; see gtk_window_set_title() ) and transient parent parent (orNULL for none; see gtk_window_set_transient_for() ). The flagsargument can be used to make the dialog modal (GTK_DIALOG_MODAL )and/or to have it destroyed along with its transient parent(GTK_DIALOG_DESTROY_WITH_PARENT ). After flags, buttontext/response ID pairs should be listed, with a NULL pointer endingthe list. Button text can be arbitrary text. A response ID can beany positive number, or one of the values in the GtkResponseType enumeration. If the user clicks one of these dialog buttons,GtkDialog will emit the “response” signal with the correspondingresponse ID. If a GtkDialog receives the “delete-event” signal,it will emit ::response with a response ID of GTK_RESPONSE_DELETE_EVENT .However, destroying a dialog does not emit the ::response signal;so be careful relying on ::response when using theGTK_DIALOG_DESTROY_WITH_PARENT flag. Buttons are from left to right,so the first button in the list will be the leftmost button in the dialog.
	title		#  Title of the dialog, or NULL . 
	first_button_text		#  text to go in first button, or NULL . 
	return:		#  a new GtkDialog  
gint gtk_dialog_run (GtkDialog *dialog);	# Blocks in a recursive main loop until the dialog either emits the“response” signal, or is destroyed. If the dialog isdestroyed during the call to gtk_dialog_run() , gtk_dialog_run() returnsGTK_RESPONSE_NONE . Otherwise, it returns the response ID from the::response signal emission.
	dialog		# a GtkDialog 
	return:		#  response ID 
void gtk_dialog_response (GtkDialog *dialog, gint response_id);	# Emits the “response” signal with the given response ID.Used to indicate that the user has responded to the dialog in some way;typically either you or gtk_dialog_run() will be monitoring the::response signal and take appropriate action.
	dialog		# a GtkDialog 
	response_id		# response ID
GtkWidget  *gtk_dialog_add_button (GtkDialog *dialog, const gchar *button_text, gint response_id);	# Adds a button with the given text and sets things up so thatclicking the button will emit the “response” signal withthe given response_id. The button is appended to the end of thedialog’s action area. The button widget is returned, but usuallyyou don’t need it.
	dialog		# a GtkDialog 
	button_text		# text of button
	response_id		# response ID for the button
	return:		#  the GtkButton widget that was added.  
void gtk_dialog_add_buttons (GtkDialog *dialog, const gchar *first_button_text, ...);	# Adds more buttons, same as calling gtk_dialog_add_button() repeatedly. The variable argument list should be NULL -terminatedas with gtk_dialog_new_with_buttons() . Each button must have bothtext and response ID.
	dialog		# a GtkDialog 
	first_button_text		# button text
	...		# response ID for first button, then more text-response_id pairs
void gtk_dialog_add_action_widget (GtkDialog *dialog, GtkWidget *child, gint response_id);	# Adds an activatable widget to the action area of a GtkDialog ,connecting a signal handler that will emit the “response” signal on the dialog when the widget is activated. The widget isappended to the end of the dialog’s action area. If you want to add anon-activatable widget, simply pack it into the action_area fieldof the GtkDialog struct.
	dialog		# a GtkDialog 
	child		# an activatable widget
	response_id		# response ID for child
void gtk_dialog_set_default_response (GtkDialog *dialog, gint response_id);	# Sets the last widget in the dialog’s action area with the given response_idas the default widget for the dialog. Pressing “Enter” normally activatesthe default widget.
	dialog		# a GtkDialog 
	response_id		# a response ID
void gtk_dialog_set_response_sensitive (GtkDialog *dialog, gint response_id, gboolean setting);	# Calls gtk_widget_set_sensitive (widget, @setting)for each widget in the dialog’s action area with the given response_id.A convenient way to sensitize/desensitize dialog buttons.
	dialog		# a GtkDialog 
	response_id		# a response ID
	setting		# TRUE for sensitive
gint gtk_dialog_get_response_for_widget (GtkDialog *dialog, GtkWidget *widget);	# Gets the response id of a widget in the action areaof a dialog.
	dialog		# a GtkDialog 
	widget		# a widget in the action area of dialog
	return:		#  the response id of widget, or GTK_RESPONSE_NONE if widgetdoesn’t have a response id set. 
GtkWidget  *gtk_dialog_get_widget_for_response (GtkDialog *dialog, gint response_id);	# Gets the widget button that uses the given response ID in the action areaof a dialog.
	dialog		# a GtkDialog 
	response_id		# the response ID used by the dialogwidget
	return:		#  the widgetbutton that uses the givenresponse_id, or NULL .  
GtkWidget  *gtk_dialog_get_content_area (GtkDialog *dialog);	# Returns the content area of dialog.
	dialog		# a GtkDialog 
	return:		#  the content area GtkBox .  
GtkWidget  *gtk_dialog_get_header_bar (GtkDialog *dialog);	# Returns the header bar of dialog. Note that theheaderbar is only used by the dialog if the“use-header-bar” property is TRUE .
	dialog		# a GtkDialog 
	return:		#  the header bar.  
GtkWidget  *gtk_message_dialog_new (GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...);	#创建对象:message dialog, which is a simple dialog with some textthe user may want to see. When the user clicks a button a “response”signal is emitted with response IDs from GtkResponseType . SeeGtkDialog for more details.
	parent		#  transient parent, or NULL for none. 
	return:		#  a new GtkMessageDialog .  
GtkWidget  *gtk_message_dialog_new_with_markup (GtkWindow *parent, GtkDialogFlags flags, GtkMessageType type, GtkButtonsType buttons, const gchar *message_format, ...);	#创建对象:message dialog, which is a simple dialog with some text thatis marked up with the Pango text markup language.When the user clicks a button a “response” signal is emitted withresponse IDs from GtkResponseType . See GtkDialog for more details.
	parent		#  transient parent, or NULL for none. 
	return:		#  a new GtkMessageDialog  
void gtk_message_dialog_set_markup (GtkMessageDialog *message_dialog, const gchar *str);	# Sets the text of the message dialog to be str, which is markedup with the Pango text markup language.
	message_dialog		# a GtkMessageDialog 
	str		# markup string (see Pango markup format)
void gtk_message_dialog_format_secondary_text (GtkMessageDialog *message_dialog, const gchar *message_format, ...);	# Sets the secondary text of the message dialog to be message_format(with printf()-style).
	message_dialog		# a GtkMessageDialog 
	message_format		#  
	...		# arguments for message_format
void gtk_message_dialog_format_secondary_markup (GtkMessageDialog *message_dialog, const gchar *message_format, ...);	# Sets the secondary text of the message dialog to be message_format (withprintf()-style), which is marked up with thePango text markup language.
	message_dialog		# a GtkMessageDialog 
	message_format		# printf()-style markup string (seePango markup format), or NULL 
	...		# arguments for message_format
GtkWidget  *gtk_message_dialog_get_message_area (GtkMessageDialog *message_dialog);	# Returns the message area of the dialog. This is the box where thedialog’s primary and secondary labels are packed. You can add yourown extra content to that box and it will appear below those labels.See gtk_dialog_get_content_area() for the correspondingfunction in the parent GtkDialog .
	message_dialog		# a GtkMessageDialog 
	return:		#  A GtkBox corresponding to the“message area” in the message_dialog.  
GtkWidget  *gtk_about_dialog_new (void );	#创建对象:GtkAboutDialog .
	return:		#  a newly created GtkAboutDialog  
gchar  *gtk_about_dialog_get_program_name (GtkAboutDialog *about);	# Returns the program name displayed in the about dialog.
	about		# a GtkAboutDialog 
	return:		#  The program name. The string is owned by the aboutdialog and must not be modified. 
void gtk_about_dialog_set_program_name (GtkAboutDialog *about, const gchar *name);	# Sets the name to display in the about dialog.If this is not set, it defaults to g_get_application_name() .
	about		# a GtkAboutDialog 
	name		# the program name
gchar  *gtk_about_dialog_get_version (GtkAboutDialog *about);	# Returns the version string.
	about		# a GtkAboutDialog 
	return:		#  The version string. The string is owned by the aboutdialog and must not be modified. 
void gtk_about_dialog_set_version (GtkAboutDialog *about, const gchar *version);	# Sets the version string to display in the about dialog.
	about		# a GtkAboutDialog 
	version		#  the version string. 
gchar  *gtk_about_dialog_get_copyright (GtkAboutDialog *about);	# Returns the copyright string.
	about		# a GtkAboutDialog 
	return:		#  The copyright string. The string is owned by the aboutdialog and must not be modified. 
void gtk_about_dialog_set_copyright (GtkAboutDialog *about, const gchar *copyright);	# Sets the copyright string to display in the about dialog.This should be a short string of one or two lines.
	about		# a GtkAboutDialog 
	copyright		#  the copyright string. 
gchar  *gtk_about_dialog_get_comments (GtkAboutDialog *about);	# Returns the comments string.
	about		# a GtkAboutDialog 
	return:		#  The comments. The string is owned by the aboutdialog and must not be modified. 
void gtk_about_dialog_set_comments (GtkAboutDialog *about, const gchar *comments);	# Sets the comments string to display in the about dialog.This should be a short string of one or two lines.
	about		# a GtkAboutDialog 
	comments		#  a comments string. 
gchar  *gtk_about_dialog_get_license (GtkAboutDialog *about);	# Returns the license information.
	about		# a GtkAboutDialog 
	return:		#  The license information. The string is owned by the aboutdialog and must not be modified. 
void gtk_about_dialog_set_license (GtkAboutDialog *about, const gchar *license);	# Sets the license information to be displayed in the secondarylicense dialog. If license is NULL , the license button ishidden.
	about		# a GtkAboutDialog 
	license		#  the license information or NULL . 
gboolean gtk_about_dialog_get_wrap_license (GtkAboutDialog *about);	# Returns whether the license text in about isautomatically wrapped.
	about		# a GtkAboutDialog 
	return:		#  TRUE if the license text is wrapped 
void gtk_about_dialog_set_wrap_license (GtkAboutDialog *about, gboolean wrap_license);	# Sets whether the license text in about isautomatically wrapped.
	about		# a GtkAboutDialog 
	wrap_license		# whether to wrap the license
GtkLicense gtk_about_dialog_get_license_type (GtkAboutDialog *about);	# Retrieves the license set using gtk_about_dialog_set_license_type() 
	about		# a GtkAboutDialog 
	return:		#  a GtkLicense value 
void gtk_about_dialog_set_license_type (GtkAboutDialog *about, GtkLicense license_type);	# Sets the license of the application showing the about dialog from alist of known licenses.
	about		# a GtkAboutDialog 
	license_type		# the type of license
gchar  *gtk_about_dialog_get_website (GtkAboutDialog *about);	# Returns the website URL.
	about		# a GtkAboutDialog 
	return:		#  The website URL. The string is owned by the aboutdialog and must not be modified. 
void gtk_about_dialog_set_website (GtkAboutDialog *about, const gchar *website);	# Sets the URL to use for the website link.
	about		# a GtkAboutDialog 
	website		#  a URL string starting with "http://". 
gchar  *gtk_about_dialog_get_website_label (GtkAboutDialog *about);	# Returns the label used for the website link.
	about		# a GtkAboutDialog 
	return:		#  The label used for the website link. The string isowned by the about dialog and must not be modified. 
void gtk_about_dialog_set_website_label (GtkAboutDialog *about, const gchar *website_label);	# Sets the label to be used for the website link.
	about		# a GtkAboutDialog 
	website_label		# the label used for the website link
gchar  * const *gtk_about_dialog_get_authors (GtkAboutDialog *about);	# Returns the string which are displayed in the authors tabof the secondary credits dialog.
	about		# a GtkAboutDialog 
	return:		#  ANULL -terminated string array containing the authors. The array isowned by the about dialog and must not be modified.  
void gtk_about_dialog_set_authors (GtkAboutDialog *about, const gchar **authors);	# Sets the strings which are displayed in the authors tabof the secondary credits dialog.
	about		# a GtkAboutDialog 
	authors		#  a NULL -terminated array of strings. 
gchar  * const *gtk_about_dialog_get_artists (GtkAboutDialog *about);	# Returns the string which are displayed in the artists tabof the secondary credits dialog.
	about		# a GtkAboutDialog 
	return:		#  ANULL -terminated string array containing the artists. The array isowned by the about dialog and must not be modified.  
void gtk_about_dialog_set_artists (GtkAboutDialog *about, const gchar **artists);	# Sets the strings which are displayed in the artists tabof the secondary credits dialog.
	about		# a GtkAboutDialog 
	artists		#  a NULL -terminated array of strings. 
gchar  * const *gtk_about_dialog_get_documenters (GtkAboutDialog *about);	# Returns the string which are displayed in the documenterstab of the secondary credits dialog.
	about		# a GtkAboutDialog 
	return:		#  ANULL -terminated string array containing the documenters. Thearray is owned by the about dialog and must not be modified.  
void gtk_about_dialog_set_documenters (GtkAboutDialog *about, const gchar **documenters);	# Sets the strings which are displayed in the documenters tabof the secondary credits dialog.
	about		# a GtkAboutDialog 
	documenters		#  a NULL -terminated array of strings. 
gchar  *gtk_about_dialog_get_translator_credits (GtkAboutDialog *about);	# Returns the translator credits string which is displayedin the translators tab of the secondary credits dialog.
	about		# a GtkAboutDialog 
	return:		#  The translator credits string. The string isowned by the about dialog and must not be modified. 
void gtk_about_dialog_set_translator_credits (GtkAboutDialog *about, const gchar *translator_credits);	# Sets the translator credits string which is displayed inthe translators tab of the secondary credits dialog.
	about		# a GtkAboutDialog 
	translator_credits		#  the translator credits. 
GdkPixbuf  *gtk_about_dialog_get_logo (GtkAboutDialog *about);	# Returns the pixbuf displayed as logo in the about dialog.
	about		# a GtkAboutDialog 
	return:		#  the pixbuf displayed as logo. Thepixbuf is owned by the about dialog. If you want to keep areference to it, you have to call g_object_ref() on it.  
void gtk_about_dialog_set_logo (GtkAboutDialog *about, GdkPixbuf *logo);	# Sets the pixbuf to be displayed as logo in the about dialog.If it is NULL , the default window icon set withgtk_window_set_default_icon() will be used.
	about		# a GtkAboutDialog 
	logo		#  a GdkPixbuf , or NULL . 
gchar  *gtk_about_dialog_get_logo_icon_name (GtkAboutDialog *about);	# Returns the icon name displayed as logo in the about dialog.
	about		# a GtkAboutDialog 
	return:		#  the icon name displayed as logo. The string isowned by the dialog. If you want to keep a referenceto it, you have to call g_strdup() on it. 
void gtk_about_dialog_set_logo_icon_name (GtkAboutDialog *about, const gchar *icon_name);	# Sets the pixbuf to be displayed as logo in the about dialog.If it is NULL , the default window icon set withgtk_window_set_default_icon() will be used.
	about		# a GtkAboutDialog 
	icon_name		#  an icon name, or NULL . 
void gtk_about_dialog_add_credit_section (GtkAboutDialog *about, const gchar *section_name, const gchar **people);	#创建对象:section in the Credits page.
	about		# A GtkAboutDialog 
	section_name		# The name of the section
	people		#  The people who belong to that section. 
void gtk_show_about_dialog (GtkWindow *parent, const gchar *first_property_name, ...);	# This is a convenience function for showing an application’s about box.The constructed dialog is associated with the parent window andreused for future invocations of this function.
	parent		#  transient parent, or NULL for none. 
GtkWidget  *gtk_assistant_new (void );	#创建对象:GtkAssistant .
	return:		#  a newly created GtkAssistant  
gint gtk_assistant_get_current_page (GtkAssistant *assistant);	# Returns the page number of the current page.
	assistant		# a GtkAssistant 
	return:		#  The index (starting from 0) of the currentpage in the assistant, or -1 if the assistanthas no pages,or no current page. 
void gtk_assistant_set_current_page (GtkAssistant *assistant, gint page_num);	# Switches the page to page_num.
	assistant		# a GtkAssistant 
	page_num		# index of the page to switch to, starting from 0.If negative, the last page will be used. If greaterthan the number of pages in the assistant, nothingwill be done.
gint gtk_assistant_get_n_pages (GtkAssistant *assistant);	# Returns the number of pages in the assistant
	assistant		# a GtkAssistant 
	return:		#  the number of pages in the assistant 
GtkWidget  *gtk_assistant_get_nth_page (GtkAssistant *assistant, gint page_num);	# Returns the child widget contained in page number page_num.
	assistant		# a GtkAssistant 
	page_num		# the index of a page in the assistant,or -1 to get the last page
	return:		#  the child widget, or NULL if page_numis out of bounds.  
gint gtk_assistant_prepend_page (GtkAssistant *assistant, GtkWidget *page);	# Prepends a page to the assistant.
	assistant		# a GtkAssistant 
	page		# a GtkWidget 
	return:		#  the index (starting at 0) of the inserted page 
gint gtk_assistant_append_page (GtkAssistant *assistant, GtkWidget *page);	# Appends a page to the assistant.
	assistant		# a GtkAssistant 
	page		# a GtkWidget 
	return:		#  the index (starting at 0) of the inserted page 
gint gtk_assistant_insert_page (GtkAssistant *assistant, GtkWidget *page, gint position);	# Inserts a page in the assistant at a given position.
	assistant		# a GtkAssistant 
	page		# a GtkWidget 
	position		# the index (starting at 0) at which to insert the page,or -1 to append the page to the assistant
	return:		#  the index (starting from 0) of the inserted page 
void gtk_assistant_remove_page (GtkAssistant *assistant, gint page_num);	# Removes the page_num’s page from assistant.
	assistant		# a GtkAssistant 
	page_num		# the index of a page in the assistant,or -1 to remove the last page
gint <span class="c_punctuation">( *GtkAssistantPageFunc<span class="c_punctuation">) (gint current_page, gpointer data);	# A function used by gtk_assistant_set_forward_page_func() to know whichis the next page given a current one. It’s called both for computing thenext page when the user presses the “forward” button and for handlingthe behavior of the “last” button.
	current_page		# The page number used to calculate the next page.
	data		#  user data. 
	return:		#  The next page number. 
void gtk_assistant_set_forward_page_func (GtkAssistant *assistant, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy);	# Sets the page forwarding function to be page_func.
	assistant		# a GtkAssistant 
	page_func		#  the GtkAssistantPageFunc , or NULL to use the default one. 
	data		# user data for page_func
	destroy		# destroy notifier for data
void gtk_assistant_set_page_type (GtkAssistant *assistant, GtkWidget *page, GtkAssistantPageType type);	# Sets the page type for page.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	type		# the new type for page
GtkAssistantPageType gtk_assistant_get_page_type (GtkAssistant *assistant, GtkWidget *page);	# Gets the page type of page.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	return:		#  the page type of page 
void gtk_assistant_set_page_title (GtkAssistant *assistant, GtkWidget *page, const gchar *title);	# Sets a title for page.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	title		# the new title for page
gchar  *gtk_assistant_get_page_title (GtkAssistant *assistant, GtkWidget *page);	# Gets the title for page.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	return:		#  the title for page 
void gtk_assistant_set_page_complete (GtkAssistant *assistant, GtkWidget *page, gboolean complete);	# Sets whether page contents are complete.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	complete		# the completeness status of the page
gboolean gtk_assistant_get_page_complete (GtkAssistant *assistant, GtkWidget *page);	# Gets whether page is complete.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	return:		#  TRUE if pageis complete. 
void gtk_assistant_set_page_has_padding (GtkAssistant *assistant, GtkWidget *page, gboolean has_padding);	# Sets whether the assistant is adding padding aroundthe page.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	has_padding		# whether this page has padding
gboolean gtk_assistant_get_page_has_padding (GtkAssistant *assistant, GtkWidget *page);	# Gets whether page has padding.
	assistant		# a GtkAssistant 
	page		# a page of assistant
	return:		#  TRUE if pagehas padding 
void gtk_assistant_add_action_widget (GtkAssistant *assistant, GtkWidget *child);	# Adds a widget to the action area of a GtkAssistant .
	assistant		# a GtkAssistant 
	child		# a GtkWidget 
void gtk_assistant_remove_action_widget (GtkAssistant *assistant, GtkWidget *child);	# Removes a widget from the action area of a GtkAssistant .
	assistant		# a GtkAssistant 
	child		# a GtkWidget 
void gtk_assistant_update_buttons_state (GtkAssistant *assistant);	# Forces assistant to recompute the buttons state.
	assistant		# a GtkAssistant 
void gtk_assistant_commit (GtkAssistant *assistant);	# Erases the visited page history so the back button is notshown on the current page, and removes the cancel buttonfrom subsequent pages.
	assistant		# a GtkAssistant 
void gtk_assistant_next_page (GtkAssistant *assistant);	# Navigate to the next page.
	assistant		# a GtkAssistant 
void gtk_assistant_previous_page (GtkAssistant *assistant);	# Navigate to the previous visited page.
	assistant		# a GtkAssistant 
GtkWidget  *gtk_invisible_new (void );	#创建对象:GtkInvisible .
	return:		#  a new GtkInvisible . 
GtkWidget  *gtk_invisible_new_for_screen (GdkScreen *screen);	#创建对象:GtkInvisible object for a specified screen
	screen		# a GdkScreen which identifies on whichthe new GtkInvisible will be created.
	return:		#  a newly created GtkInvisible object 
void gtk_invisible_set_screen (GtkInvisible *invisible, GdkScreen *screen);	# Sets the GdkScreen where the GtkInvisible object will be displayed.
	invisible		# a GtkInvisible .
	screen		# a GdkScreen .
GdkScreen  *gtk_invisible_get_screen (GtkInvisible *invisible);	# Returns the GdkScreen object associated with invisible
	invisible		# a GtkInvisible .
	return:		#  the associated GdkScreen .  
GtkWindowGroup  *gtk_window_group_new (void );	#创建对象:GtkWindowGroup object. Grabs added withgtk_grab_add() only affect windows within the same GtkWindowGroup .
	return:		#  a new GtkWindowGroup .  
void gtk_window_group_add_window (GtkWindowGroup *window_group, GtkWindow *window);	# Adds a window to a GtkWindowGroup .
	window_group		# a GtkWindowGroup 
	window		# the GtkWindow to add
void gtk_window_group_remove_window (GtkWindowGroup *window_group, GtkWindow *window);	# Removes a window from a GtkWindowGroup .
	window_group		# a GtkWindowGroup 
	window		# the GtkWindow to remove
GList  *gtk_window_group_list_windows (GtkWindowGroup *window_group);	# Returns a list of the GtkWindows that belong to window_group.
	window_group		# a GtkWindowGroup 
	return:		#  Anewly-allocated list of windows inside the group.  
GtkWidget  *gtk_window_group_get_current_grab (GtkWindowGroup *window_group);	# Gets the current grab widget of the given group,see gtk_grab_add() .
	window_group		# a GtkWindowGroup 
	return:		#  the current grab widget of the group.  
GtkWidget  *gtk_window_group_get_current_device_grab (GtkWindowGroup *window_group, GdkDevice *device);	# Returns the current grab widget for device, or NULL if none.
	window_group		# a GtkWindowGroup 
	device		# a GdkDevice 
	return:		#  The grab widget, or NULL .  
GtkWidget  *gtk_box_new (GtkOrientation orientation, gint spacing);	#创建对象:GtkBox .
	orientation		# the box’s orientation.
	spacing		# the number of pixels to place by default between children.
	return:		#  a new GtkBox . 
void gtk_box_pack_start (GtkBox *box, GtkWidget *child);	# Adds child to box, packed with reference to the start of box.The child is packed after any other child packed with referenceto the start of box.
	box		# a GtkBox 
	child		# the GtkWidget to be added to box
void gtk_box_pack_end (GtkBox *box, GtkWidget *child);	# Adds child to box, packed with reference to the end of box.The child is packed after (away from end of) any other childpacked with reference to the end of box.
	box		# a GtkBox 
	child		# the GtkWidget to be added to box
gboolean gtk_box_get_homogeneous (GtkBox *box);	# Returns whether the box is homogeneous (all children are thesame size). See gtk_box_set_homogeneous() .
	box		# a GtkBox 
	return:		#  TRUE if the box is homogeneous. 
void gtk_box_set_homogeneous (GtkBox *box, gboolean homogeneous);	# Sets the “homogeneous” property of box, controllingwhether or not all children of box are given equal spacein the box.
	box		# a GtkBox 
	homogeneous		# a boolean value, TRUE to create equal allotments,FALSE for variable allotments
gint gtk_box_get_spacing (GtkBox *box);	# Gets the value set by gtk_box_set_spacing() .
	box		# a GtkBox 
	return:		#  spacing between children 
void gtk_box_set_spacing (GtkBox *box, gint spacing);	# Sets the “spacing” property of box, which is thenumber of pixels to place between children of box.
	box		# a GtkBox 
	spacing		# the number of pixels to put between children
void gtk_box_reorder_child (GtkBox *box, GtkWidget *child, gint position);	# Moves child to a new position in the list of box children.The list contains widgets packed GTK_PACK_START as well as widgets packed GTK_PACK_END , in the order that thesewidgets were added to box.
	box		# a GtkBox 
	child		# the GtkWidget to move
	position		# the new position for childin the list of childrenof box, starting from 0. If negative, indicates the end ofthe list
void gtk_box_query_child_packing (GtkBox *box, GtkWidget *child, GtkPackType *pack_type);	# Obtains information about how child is packed into box.
	box		# a GtkBox 
	child		# the GtkWidget of the child to query
	pack_type		#  pointer to return location for pack-typechild property. 
void gtk_box_set_child_packing (GtkBox *box, GtkWidget *child, GtkPackType pack_type);	# Sets the way child is packed into box.
	box		# a GtkBox 
	child		# the GtkWidget of the child to set
	pack_type		# the new value of the pack-type child property
GtkBaselinePosition gtk_box_get_baseline_position (GtkBox *box);	# Gets the value set by gtk_box_set_baseline_position() .
	box		# a GtkBox 
	return:		#  the baseline position 
void gtk_box_set_baseline_position (GtkBox *box, GtkBaselinePosition position);	# Sets the baseline position of a box. This affectsonly horizontal boxes with at least one baseline alignedchild. If there is more vertical space available than requested,and the baseline is not allocated by the parent thenposition is used to allocate the baseline wrt theextra space available.
	box		# a GtkBox 
	position		# a GtkBaselinePosition 
GtkWidget  *gtk_grid_new (void );	#创建对象:grid widget.
	return:		#  the new GtkGrid  
void gtk_grid_attach (GtkGrid *grid, GtkWidget *child, gint left, gint top, gint width, gint height);	# Adds a widget to the grid.
	grid		# a GtkGrid 
	child		# the widget to add
	left		# the column number to attach the left side of childto
	top		# the row number to attach the top side of childto
	width		# the number of columns that childwill span
	height		# the number of rows that childwill span
void gtk_grid_attach_next_to (GtkGrid *grid, GtkWidget *child, GtkWidget *sibling, GtkPositionType side, gint width, gint height);	# Adds a widget to the grid.
	grid		# a GtkGrid 
	child		# the widget to add
	sibling		#  the child of gridthat childwill be placednext to, or NULL to place childat the beginning or end. 
	side		# the side of siblingthat childis positioned next to
	width		# the number of columns that childwill span
	height		# the number of rows that childwill span
GtkWidget  *gtk_grid_get_child_at (GtkGrid *grid, gint left, gint top);	# Gets the child of grid whose area covers the gridcell whose upper left corner is at left, top.
	grid		# a GtkGrid 
	left		# the left edge of the cell
	top		# the top edge of the cell
	return:		#  the child at the given position, or NULL .  
void gtk_grid_insert_row (GtkGrid *grid, gint position);	# Inserts a row at the specified position.
	grid		# a GtkGrid 
	position		# the position to insert the row at
void gtk_grid_insert_column (GtkGrid *grid, gint position);	# Inserts a column at the specified position.
	grid		# a GtkGrid 
	position		# the position to insert the column at
void gtk_grid_remove_row (GtkGrid *grid, gint position);	# Removes a row from the grid.
	grid		# a GtkGrid 
	position		# the position of the row to remove
void gtk_grid_remove_column (GtkGrid *grid, gint position);	# Removes a column from the grid.
	grid		# a GtkGrid 
	position		# the position of the column to remove
void gtk_grid_insert_next_to (GtkGrid *grid, GtkWidget *sibling, GtkPositionType side);	# Inserts a row or column at the specified position.
	grid		# a GtkGrid 
	sibling		# the child of gridthat the new row or column will beplaced next to
	side		# the side of siblingthat childis positioned next to
void gtk_grid_set_row_homogeneous (GtkGrid *grid, gboolean homogeneous);	# Sets whether all rows of grid will have the same height.
	grid		# a GtkGrid 
	homogeneous		# TRUE to make rows homogeneous
gboolean gtk_grid_get_row_homogeneous (GtkGrid *grid);	# Returns whether all rows of grid have the same height.
	grid		# a GtkGrid 
	return:		#  whether all rows of gridhave the same height. 
void gtk_grid_set_row_spacing (GtkGrid *grid, guint spacing);	# Sets the amount of space between rows of grid.
	grid		# a GtkGrid 
	spacing		# the amount of space to insert between rows
guint gtk_grid_get_row_spacing (GtkGrid *grid);	# Returns the amount of space between the rows of grid.
	grid		# a GtkGrid 
	return:		#  the row spacing of grid 
void gtk_grid_set_column_homogeneous (GtkGrid *grid, gboolean homogeneous);	# Sets whether all columns of grid will have the same width.
	grid		# a GtkGrid 
	homogeneous		# TRUE to make columns homogeneous
gboolean gtk_grid_get_column_homogeneous (GtkGrid *grid);	# Returns whether all columns of grid have the same width.
	grid		# a GtkGrid 
	return:		#  whether all columns of gridhave the same width. 
void gtk_grid_set_column_spacing (GtkGrid *grid, guint spacing);	# Sets the amount of space between columns of grid.
	grid		# a GtkGrid 
	spacing		# the amount of space to insert between columns
guint gtk_grid_get_column_spacing (GtkGrid *grid);	# Returns the amount of space between the columns of grid.
	grid		# a GtkGrid 
	return:		#  the column spacing of grid 
gint gtk_grid_get_baseline_row (GtkGrid *grid);	# Returns which row defines the global baseline of grid.
	grid		# a GtkGrid 
	return:		#  the row index defining the global baseline 
void gtk_grid_set_baseline_row (GtkGrid *grid, gint row);	# Sets which row defines the global baseline for the entire grid.Each row in the grid can have its own local baseline, but onlyone of those is global, meaning it will be the baseline in theparent of the grid.
	grid		# a GtkGrid 
	row		# the row index
GtkBaselinePosition gtk_grid_get_row_baseline_position (GtkGrid *grid, gint row);	# Returns the baseline position of row as setby gtk_grid_set_row_baseline_position() or the default valueGTK_BASELINE_POSITION_CENTER .
	grid		# a GtkGrid 
	row		# a row index
	return:		#  the baseline position of row 
void gtk_grid_set_row_baseline_position (GtkGrid *grid, gint row, GtkBaselinePosition pos);	# Sets how the baseline should be positioned on row of thegrid, in case that row is assigned more space than is requested.
	grid		# a GtkGrid 
	row		# a row index
	pos		# a GtkBaselinePosition 
GtkWidget  *gtk_revealer_new (void );	#创建对象:GtkRevealer .
	return:		#  a newly created GtkRevealer  
gboolean gtk_revealer_get_reveal_child (GtkRevealer *revealer);	# Returns whether the child is currentlyrevealed. See gtk_revealer_set_reveal_child() .
	revealer		# a GtkRevealer 
	return:		#  TRUE if the child is revealed. 
void gtk_revealer_set_reveal_child (GtkRevealer *revealer, gboolean reveal_child);	# Tells the GtkRevealer to reveal or conceal its child.
	revealer		# a GtkRevealer 
	reveal_child		# TRUE to reveal the child
gboolean gtk_revealer_get_child_revealed (GtkRevealer *revealer);	# Returns whether the child is fully revealed, in other words whetherthe transition to the revealed state is completed.
	revealer		# a GtkRevealer 
	return:		#  TRUE if the child is fully revealed 
guint gtk_revealer_get_transition_duration (GtkRevealer *revealer);	# Returns the amount of time (in milliseconds) thattransitions will take.
	revealer		# a GtkRevealer 
	return:		#  the transition duration 
void gtk_revealer_set_transition_duration (GtkRevealer *revealer, guint duration);	# Sets the duration that transitions will take.
	revealer		# a GtkRevealer 
	duration		# the new duration, in milliseconds
GtkRevealerTransitionType gtk_revealer_get_transition_type (GtkRevealer *revealer);	# Gets the type of animation that will be usedfor transitions in revealer.
	revealer		# a GtkRevealer 
	return:		#  the current transition type of revealer 
void gtk_revealer_set_transition_type (GtkRevealer *revealer, GtkRevealerTransitionType transition);	# Sets the type of animation that will be used fortransitions in revealer. Available types includevarious kinds of fades and slides.
	revealer		# a GtkRevealer 
	transition		# the new transition type
gboolean <span class="c_punctuation">( *GtkListBoxFilterFunc<span class="c_punctuation">) (GtkListBoxRow *row, gpointer user_data);	# Will be called whenever the row changes or is added and lets you controlif the row should be visible or not.
	row		# the row that may be filtered
	user_data		#  user data. 
	return:		#  TRUE if the row should be visible, FALSE otherwise 
gint <span class="c_punctuation">( *GtkListBoxSortFunc<span class="c_punctuation">) (GtkListBoxRow *row1, GtkListBoxRow *row2, gpointer user_data);	# Compare two rows to determine which should be first.
	row1		# the first row
	row2		# the second row
	user_data		#  user data. 
	return:		#  &lt; 0 if row1should be before row2, 0 if they areequal and &gt; 0 otherwise 
void <span class="c_punctuation">( *GtkListBoxUpdateHeaderFunc<span class="c_punctuation">) (GtkListBoxRow *row, GtkListBoxRow *before, gpointer user_data);	# Whenever row changes or which row is before row changes thisis called, which lets you update the header on row. You mayremove or set a new one via gtk_list_box_row_set_header() orjust change the state of the current header widget.
	row		# the row to update
	before		#  the row before row, or NULL if it is first. 
GtkWidget  *gtk_list_box_new (void );	#创建对象:GtkListBox container.
	return:		#  a new GtkListBox  
void gtk_list_box_prepend (GtkListBox *box, GtkWidget *child);	# Prepend a widget to the list. If a sort function is set, the widget willactually be inserted at the calculated position and this function has thesame effect of gtk_container_add() .
	box		# a GtkListBox 
	child		# the GtkWidget to add
void gtk_list_box_insert (GtkListBox *box, GtkWidget *child, gint position);	# Insert the child into the box at position. If a sort function isset, the widget will actually be inserted at the calculated position andthis function has the same effect of gtk_container_add() .
	box		# a GtkListBox 
	child		# the GtkWidget to add
	position		# the position to insert childin
void gtk_list_box_select_row (GtkListBox *box, GtkListBoxRow *row);	# Make row the currently selected row.
	box		# a GtkListBox 
	row		#  The row to select or NULL . 
void gtk_list_box_unselect_row (GtkListBox *box, GtkListBoxRow *row);	# Unselects a single row of box, if the selection mode allows it.
	box		# a GtkListBox 
	row		# the row to unselected
void gtk_list_box_select_all (GtkListBox *box);	# Select all children of box, if the selection mode allows it.
	box		# a GtkListBox 
void gtk_list_box_unselect_all (GtkListBox *box);	# Unselect all children of box, if the selection mode allows it.
	box		# a GtkListBox 
GtkListBoxRow  *gtk_list_box_get_selected_row (GtkListBox *box);	# Gets the selected row.
	box		# a GtkListBox 
	return:		#  the selected row.  
void <span class="c_punctuation">( *GtkListBoxForeachFunc<span class="c_punctuation">) (GtkListBox *box, GtkListBoxRow *row, gpointer user_data);	# A function used by gtk_list_box_selected_foreach() .It will be called on every selected child of the box.
	box		# a GtkListBox 
	row		# a GtkListBoxRow 
	user_data		#  user data. 
void gtk_list_box_selected_foreach (GtkListBox *box, GtkListBoxForeachFunc func, gpointer data);	# Calls a function for each selected child.
	box		# a GtkListBox 
	func		#  the function to call for each selected child. 
GList  *gtk_list_box_get_selected_rows (GtkListBox *box);	# Creates a list of all selected children.
	box		# a GtkListBox 
	return:		#  A GList containing the GtkWidget for each selected child.Free with g_list_free() when done.  
void gtk_list_box_set_selection_mode (GtkListBox *box, GtkSelectionMode mode);	# Sets how selection works in the listbox.See GtkSelectionMode for details.
	box		# a GtkListBox 
	mode		# The GtkSelectionMode 
GtkSelectionMode gtk_list_box_get_selection_mode (GtkListBox *box);	# Gets the selection mode of the listbox.
	box		# a GtkListBox 
	return:		#  a GtkSelectionMode  
void gtk_list_box_set_activate_on_single_click (GtkListBox *box, gboolean single);	# If single is TRUE , rows will be activated when you click on them,otherwise you need to double-click.
	box		# a GtkListBox 
	single		# a boolean
gboolean gtk_list_box_get_activate_on_single_click (GtkListBox *box);	# Returns whether rows activate on single clicks.
	box		# a GtkListBox 
	return:		#  TRUE if rows are activated on single click, FALSE otherwise 
GtkAdjustment  *gtk_list_box_get_adjustment (GtkListBox *box);	# Gets the adjustment (if any) that the widget uses tofor vertical scrolling.
	box		# a GtkListBox 
	return:		#  the adjustment.  
void gtk_list_box_set_adjustment (GtkListBox *box, GtkAdjustment *adjustment);	# Sets the adjustment (if any) that the widget uses tofor vertical scrolling. For instance, this is usedto get the page size for PageUp/Down key handling.
	box		# a GtkListBox 
	adjustment		#  the adjustment, or NULL . 
void gtk_list_box_set_placeholder (GtkListBox *box, GtkWidget *placeholder);	# Sets the placeholder widget that is shown in the list whenit doesn't display any visible children.
	box		# a GtkListBox 
	placeholder		#  a GtkWidget or NULL . 
GtkListBoxRow  *gtk_list_box_get_row_at_index (GtkListBox *box, gint index_);	# Gets the n-th child in the list (not counting headers).If _index is negative or larger than the number of items in thelist, NULL is returned.
	box		# a GtkListBox 
	index_		# the index of the row
	return:		#  the child GtkWidget or NULL .  
GtkListBoxRow  *gtk_list_box_get_row_at_y (GtkListBox *box, gint y);	# Gets the row at the y position.
	box		# a GtkListBox 
	y		# position
	return:		#  the row or NULL in case no row exists for the given y coordinate.  
void gtk_list_box_invalidate_filter (GtkListBox *box);	# Update the filtering for all rows. Call this when resultof the filter function on the box is changed dueto an external factor. For instance, this would be usedif the filter function just looked for a specific searchstring and the entry with the search string has changed.
	box		# a GtkListBox 
void gtk_list_box_invalidate_headers (GtkListBox *box);	# Update the separators for all rows. Call this when resultof the header function on the box is changed dueto an external factor.
	box		# a GtkListBox 
void gtk_list_box_invalidate_sort (GtkListBox *box);	# Update the sorting for all rows. Call this when resultof the sort function on the box is changed dueto an external factor.
	box		# a GtkListBox 
void gtk_list_box_set_filter_func (GtkListBox *box, GtkListBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy);	# By setting a filter function on the box one can decide dynamically whichof the rows to show. For instance, to implement a search function on a list thatfilters the original list to only show the matching rows.
	box		# a GtkListBox 
	filter_func		#  callback that lets you filter which rows to show. 
void gtk_list_box_set_header_func (GtkListBox *box, GtkListBoxUpdateHeaderFunc update_header, gpointer user_data, GDestroyNotify destroy);	# By setting a header function on the box one can dynamically add headersin front of rows, depending on the contents of the row and its position in the list.For instance, one could use it to add headers in front of the first item of anew kind, in a list sorted by the kind.
	box		# a GtkListBox 
	update_header		#  callback that lets you add row headers. 
void gtk_list_box_set_sort_func (GtkListBox *box, GtkListBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy);	# By setting a sort function on the box one can dynamically reorder the rowsof the list, based on the contents of the rows.
	box		# a GtkListBox 
	sort_func		#  the sort function. 
void gtk_list_box_drag_highlight_row (GtkListBox *box, GtkListBoxRow *row);	# This is a helper function for implementing DnD onto a GtkListBox .The passed in row will be highlighted via gtk_drag_highlight() ,and any previously highlighted row will be unhighlighted.
	box		# a GtkListBox 
	row		# a GtkListBoxRow 
void gtk_list_box_drag_unhighlight_row (GtkListBox *box);	# If a row has previously been highlighted via gtk_list_box_drag_highlight_row() it will have the highlight removed.
	box		# a GtkListBox 
GtkWidget  *<span class="c_punctuation">( *GtkListBoxCreateWidgetFunc<span class="c_punctuation">) (gpointer item, gpointer user_data);	# Called for list boxes that are bound to a GListModel withgtk_list_box_bind_model() for each item that gets added to the model.
	item		#  the item from the model for which to create a widget for. 
	return:		#  a GtkWidget that represents item.  
void gtk_list_box_bind_model (GtkListBox *box, GListModel *model, GtkListBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func);	# Binds model to box.
	box		# a GtkListBox 
	model		#  the GListModel to be bound to box. 
GtkWidget  *gtk_list_box_row_new (void );	#创建对象:GtkListBoxRow , to be used as a child of a GtkListBox .
	return:		#  a new GtkListBoxRow  
void gtk_list_box_row_changed (GtkListBoxRow *row);	# Marks row as changed, causing any state that depends on thisto be updated. This affects sorting, filtering and headers.
	row		# a GtkListBoxRow 
gboolean gtk_list_box_row_is_selected (GtkListBoxRow *row);	# Returns whether the child is currently selected in itsGtkListBox container.
	row		# a GtkListBoxRow 
	return:		#  TRUE if rowis selected 
GtkWidget  *gtk_list_box_row_get_header (GtkListBoxRow *row);	# Returns the current header of the row. This can be usedin a GtkListBoxUpdateHeaderFunc to see if there is a headerset already, and if so to update the state of it.
	row		# a GtkListBoxRow 
	return:		#  the current header, or NULL if none.  
void gtk_list_box_row_set_header (GtkListBoxRow *row, GtkWidget *header);	# Sets the current header of the row. This is only allowed to be calledfrom a GtkListBoxUpdateHeaderFunc . It will replace any existingheader in the row, and be shown in front of the row in the listbox.
	row		# a GtkListBoxRow 
	header		#  the header, or NULL . 
gint gtk_list_box_row_get_index (GtkListBoxRow *row);	# Gets the current index of the row in its GtkListBox container.
	row		# a GtkListBoxRow 
	return:		#  the index of the row, or -1 if the rowis not in a listbox 
void gtk_list_box_row_set_activatable (GtkListBoxRow *row, gboolean activatable);	# Set the “activatable” property for this row.
	row		# a GtkListBoxRow 
	activatable		# TRUE to mark the row as activatable
gboolean gtk_list_box_row_get_activatable (GtkListBoxRow *row);	# Gets the value of the “activatable” propertyfor this row.
	row		# a GtkListBoxRow 
	return:		#  TRUE if the row is activatable 
void gtk_list_box_row_set_selectable (GtkListBoxRow *row, gboolean selectable);	# Set the “selectable” property for this row.
	row		# a GtkListBoxRow 
	selectable		# TRUE to mark the row as selectable
gboolean gtk_list_box_row_get_selectable (GtkListBoxRow *row);	# Gets the value of the “selectable” propertyfor this row.
	row		# a GtkListBoxRow 
	return:		#  TRUE if the row is selectable 
GtkWidget  *gtk_flow_box_new (void );	# Creates a GtkFlowBox.
	return:		#  a new GtkFlowBox container 
void gtk_flow_box_insert (GtkFlowBox *box, GtkWidget *widget, gint position);	# Inserts the widget into box at position.
	box		# a GtkFlowBox 
	widget		# the GtkWidget to add
	position		# the position to insert childin
GtkFlowBoxChild  *gtk_flow_box_get_child_at_index (GtkFlowBox *box, gint idx);	# Gets the nth child in the box.
	box		# a GtkFlowBox 
	idx		# the position of the child
	return:		#  the child widget, which willalways be a GtkFlowBoxChild or NULL in case no child widgetwith the given index exists.  
GtkFlowBoxChild  *gtk_flow_box_get_child_at_pos (GtkFlowBox *box, gint x, gint y);	# Gets the child in the (x, y) position.
	box		# a GtkFlowBox 
	x		# the x coordinate of the child
	y		# the y coordinate of the child
	return:		#  the child widget, which willalways be a GtkFlowBoxChild or NULL in case no child widgetexists for the given x and y coordinates.  
void gtk_flow_box_set_hadjustment (GtkFlowBox *box, GtkAdjustment *adjustment);	# Hooks up an adjustment to focus handling in box.The adjustment is also used for autoscrolling duringrubberband selection. See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining the adjustment, andgtk_flow_box_set_vadjustment() for setting the verticaladjustment.
	box		# a GtkFlowBox 
	adjustment		# an adjustment which should be adjustedwhen the focus is moved among the descendents of container
void gtk_flow_box_set_vadjustment (GtkFlowBox *box, GtkAdjustment *adjustment);	# Hooks up an adjustment to focus handling in box.The adjustment is also used for autoscrolling duringrubberband selection. See gtk_scrolled_window_get_vadjustment() for a typical way of obtaining the adjustment, andgtk_flow_box_set_hadjustment() for setting the horizontaladjustment.
	box		# a GtkFlowBox 
	adjustment		# an adjustment which should be adjustedwhen the focus is moved among the descendents of container
void gtk_flow_box_set_homogeneous (GtkFlowBox *box, gboolean homogeneous);	# Sets the “homogeneous” property of box, controllingwhether or not all children of box are given equal spacein the box.
	box		# a GtkFlowBox 
	homogeneous		# TRUE to create equal allotments,FALSE for variable allotments
gboolean gtk_flow_box_get_homogeneous (GtkFlowBox *box);	# Returns whether the box is homogeneous (all children are thesame size). See gtk_box_set_homogeneous() .
	box		# a GtkFlowBox 
	return:		#  TRUE if the box is homogeneous. 
void gtk_flow_box_set_row_spacing (GtkFlowBox *box, guint spacing);	# Sets the vertical space to add between children.See the “row-spacing” property.
	box		# a GtkFlowBox 
	spacing		# the spacing to use
guint gtk_flow_box_get_row_spacing (GtkFlowBox *box);	# Gets the vertical spacing.
	box		# a GtkFlowBox 
	return:		#  the vertical spacing 
void gtk_flow_box_set_column_spacing (GtkFlowBox *box, guint spacing);	# Sets the horizontal space to add between children.See the “column-spacing” property.
	box		# a GtkFlowBox 
	spacing		# the spacing to use
guint gtk_flow_box_get_column_spacing (GtkFlowBox *box);	# Gets the horizontal spacing.
	box		# a GtkFlowBox 
	return:		#  the horizontal spacing 
void gtk_flow_box_set_min_children_per_line (GtkFlowBox *box, guint n_children);	# Sets the minimum number of children to line upin box’s orientation before flowing.
	box		# a GtkFlowBox 
	n_children		# the minimum number of children per line
guint gtk_flow_box_get_min_children_per_line (GtkFlowBox *box);	# Gets the minimum number of children per line.
	box		# a GtkFlowBox 
	return:		#  the minimum number of children per line 
void gtk_flow_box_set_max_children_per_line (GtkFlowBox *box, guint n_children);	# Sets the maximum number of children to request andallocate space for in box’s orientation.
	box		# a GtkFlowBox 
	n_children		# the maximum number of children per line
guint gtk_flow_box_get_max_children_per_line (GtkFlowBox *box);	# Gets the maximum number of children per line.
	box		# a GtkFlowBox 
	return:		#  the maximum number of children per line 
void gtk_flow_box_set_activate_on_single_click (GtkFlowBox *box, gboolean single);	# If single is TRUE , children will be activated when you clickon them, otherwise you need to double-click.
	box		# a GtkFlowBox 
	single		# TRUE to emit child-activated on a single click
gboolean gtk_flow_box_get_activate_on_single_click (GtkFlowBox *box);	# Returns whether children activate on single clicks.
	box		# a GtkFlowBox 
	return:		#  TRUE if children are activated on single click,FALSE otherwise 
void <span class="c_punctuation">( *GtkFlowBoxForeachFunc<span class="c_punctuation">) (GtkFlowBox *box, GtkFlowBoxChild *child, gpointer user_data);	# A function used by gtk_flow_box_selected_foreach() .It will be called on every selected child of the box.
	box		# a GtkFlowBox 
	child		# a GtkFlowBoxChild 
	user_data		#  user data. 
void gtk_flow_box_selected_foreach (GtkFlowBox *box, GtkFlowBoxForeachFunc func, gpointer data);	# Calls a function for each selected child.
	box		# a GtkFlowBox 
	func		#  the function to call for each selected child. 
GList  *gtk_flow_box_get_selected_children (GtkFlowBox *box);	# Creates a list of all selected children.
	box		# a GtkFlowBox 
	return:		#  A GList containing the GtkWidget for each selected child.Free with g_list_free() when done.  
void gtk_flow_box_select_child (GtkFlowBox *box, GtkFlowBoxChild *child);	# Selects a single child of box, if the selectionmode allows it.
	box		# a GtkFlowBox 
	child		# a child of box
void gtk_flow_box_unselect_child (GtkFlowBox *box, GtkFlowBoxChild *child);	# Unselects a single child of box, if the selectionmode allows it.
	box		# a GtkFlowBox 
	child		# a child of box
void gtk_flow_box_select_all (GtkFlowBox *box);	# Select all children of box, if the selectionmode allows it.
	box		# a GtkFlowBox 
void gtk_flow_box_unselect_all (GtkFlowBox *box);	# Unselect all children of box, if the selectionmode allows it.
	box		# a GtkFlowBox 
void gtk_flow_box_set_selection_mode (GtkFlowBox *box, GtkSelectionMode mode);	# Sets how selection works in box.See GtkSelectionMode for details.
	box		# a GtkFlowBox 
	mode		# the new selection mode
GtkSelectionMode gtk_flow_box_get_selection_mode (GtkFlowBox *box);	# Gets the selection mode of box.
	box		# a GtkFlowBox 
	return:		#  the GtkSelectionMode  
gboolean <span class="c_punctuation">( *GtkFlowBoxFilterFunc<span class="c_punctuation">) (GtkFlowBoxChild *child, gpointer user_data);	# A function that will be called whenrever a child changesor is added. It lets you control if the child should bevisible or not.
	child		# a GtkFlowBoxChild that may be filtered
	user_data		#  user data. 
	return:		#  TRUE if the row should be visible, FALSE otherwise 
void gtk_flow_box_set_filter_func (GtkFlowBox *box, GtkFlowBoxFilterFunc filter_func, gpointer user_data, GDestroyNotify destroy);	# By setting a filter function on the box one can decide dynamicallywhich of the children to show. For instance, to implement a searchfunction that only shows the children matching the search terms.
	box		# a GtkFlowBox 
	filter_func		#  callback thatlets you filter which children to show. 
void gtk_flow_box_invalidate_filter (GtkFlowBox *box);	# Updates the filtering for all children.
	box		# a GtkFlowBox 
gint <span class="c_punctuation">( *GtkFlowBoxSortFunc<span class="c_punctuation">) (GtkFlowBoxChild *child1, GtkFlowBoxChild *child2, gpointer user_data);	# A function to compare two children to determine whichshould come first.
	child1		# the first child
	child2		# the second child
	user_data		#  user data. 
	return:		#  &lt; 0 if child1should be before child2, 0 ifthe are equal, and &gt; 0 otherwise 
void gtk_flow_box_set_sort_func (GtkFlowBox *box, GtkFlowBoxSortFunc sort_func, gpointer user_data, GDestroyNotify destroy);	# By setting a sort function on the box, one can dynamicallyreorder the children of the box, based on the contents ofthe children.
	box		# a GtkFlowBox 
	sort_func		#  the sort function. 
void gtk_flow_box_invalidate_sort (GtkFlowBox *box);	# Updates the sorting for all children.
	box		# a GtkFlowBox 
GtkWidget  *<span class="c_punctuation">( *GtkFlowBoxCreateWidgetFunc<span class="c_punctuation">) (gpointer item, gpointer user_data);	# Called for flow boxes that are bound to a GListModel withgtk_flow_box_bind_model() for each item that gets added to the model.
	item		# the item from the model for which to create a widget for
	user_data		# user data from 
	return:		#  a GtkWidget that represents item.  
void gtk_flow_box_bind_model (GtkFlowBox *box, GListModel *model, GtkFlowBoxCreateWidgetFunc create_widget_func, gpointer user_data, GDestroyNotify user_data_free_func);	# Binds model to box.
	box		# a GtkFlowBox 
	model		#  the GListModel to be bound to box. 
GtkWidget  *gtk_flow_box_child_new (void );	#创建对象:GtkFlowBoxChild , to be used as a childof a GtkFlowBox .
	return:		#  a new GtkFlowBoxChild  
gint gtk_flow_box_child_get_index (GtkFlowBoxChild *child);	# Gets the current index of the child in its GtkFlowBox container.
	child		# a GtkFlowBoxChild 
	return:		#  the index of the child, or -1 if the childis notin a flow box. 
gboolean gtk_flow_box_child_is_selected (GtkFlowBoxChild *child);	# Returns whether the child is currently selected in itsGtkFlowBox container.
	child		# a GtkFlowBoxChild 
	return:		#  TRUE if childis selected 
void gtk_flow_box_child_changed (GtkFlowBoxChild *child);	# Marks child as changed, causing any state that depends on thisto be updated. This affects sorting and filtering.
	child		# a GtkFlowBoxChild 
GtkWidget  *gtk_stack_new (void );	#创建对象:GtkStack container.
	return:		#  a new GtkStack  
void gtk_stack_add_named (GtkStack *stack, GtkWidget *child, const gchar *name);	# Adds a child to stack.The child is identified by the name.
	stack		# a GtkStack 
	child		# the widget to add
	name		# the name for child
void gtk_stack_add_titled (GtkStack *stack, GtkWidget *child, const gchar *name, const gchar *title);	# Adds a child to stack.The child is identified by the name. The titlewill be used by GtkStackSwitcher to representchild in a tab bar, so it should be short.
	stack		# a GtkStack 
	child		# the widget to add
	name		# the name for child
	title		# a human-readable title for child
GtkWidget  *gtk_stack_get_child_by_name (GtkStack *stack, const gchar *name);	# Finds the child of the GtkStack with the name given asthe argument. Returns NULL if there is no child with thisname.
	stack		# a GtkStack 
	name		# the name of the child to find
	return:		#  the requested child of the GtkStack .  
void gtk_stack_set_visible_child (GtkStack *stack, GtkWidget *child);	# Makes child the visible child of stack.
	stack		# a GtkStack 
	child		# a child of stack
GtkWidget  *gtk_stack_get_visible_child (GtkStack *stack);	# Gets the currently visible child of stack, or NULL ifthere are no visible children.
	stack		# a GtkStack 
	return:		#  the visible child of the GtkStack .  
void gtk_stack_set_visible_child_name (GtkStack *stack, const gchar *name);	# Makes the child with the given name visible.
	stack		# a GtkStack 
	name		# the name of the child to make visible
gchar  *gtk_stack_get_visible_child_name (GtkStack *stack);	# Returns the name of the currently visible child of stack, orNULL if there is no visible child.
	stack		# a GtkStack 
	return:		#  the name of the visible child of the GtkStack .  
void gtk_stack_set_visible_child_full (GtkStack *stack, const gchar *name, GtkStackTransitionType transition);	# Makes the child with the given name visible.
	stack		# a GtkStack 
	name		# the name of the child to make visible
	transition		# the transition type to use
void gtk_stack_set_homogeneous (GtkStack *stack, gboolean homogeneous);	# Sets the GtkStack to be homogeneous or not. If itis homogeneous, the GtkStack will request the samesize for all its children. If it isn't, the stackmay change size when a different child becomes visible.
	stack		# a GtkStack 
	homogeneous		# TRUE to make stackhomogeneous
gboolean gtk_stack_get_homogeneous (GtkStack *stack);	# Gets whether stack is homogeneous.See gtk_stack_set_homogeneous() .
	stack		# a GtkStack 
	return:		#  whether stackis homogeneous. 
void gtk_stack_set_hhomogeneous (GtkStack *stack, gboolean hhomogeneous);	# Sets the GtkStack to be horizontally homogeneous or not.If it is homogeneous, the GtkStack will request the samewidth for all its children. If it isn't, the stackmay change width when a different child becomes visible.
	stack		# a GtkStack 
	hhomogeneous		# TRUE to make stackhorizontally homogeneous
gboolean gtk_stack_get_hhomogeneous (GtkStack *stack);	# Gets whether stack is horizontally homogeneous.See gtk_stack_set_hhomogeneous() .
	stack		# a GtkStack 
	return:		#  whether stackis horizontally homogeneous. 
void gtk_stack_set_vhomogeneous (GtkStack *stack, gboolean vhomogeneous);	# Sets the GtkStack to be vertically homogeneous or not.If it is homogeneous, the GtkStack will request the sameheight for all its children. If it isn't, the stackmay change height when a different child becomes visible.
	stack		# a GtkStack 
	vhomogeneous		# TRUE to make stackvertically homogeneous
gboolean gtk_stack_get_vhomogeneous (GtkStack *stack);	# Gets whether stack is vertically homogeneous.See gtk_stack_set_vhomogeneous() .
	stack		# a GtkStack 
	return:		#  whether stackis vertically homogeneous. 
void gtk_stack_set_transition_duration (GtkStack *stack, guint duration);	# Sets the duration that transitions between pages in stackwill take.
	stack		# a GtkStack 
	duration		# the new duration, in milliseconds
guint gtk_stack_get_transition_duration (GtkStack *stack);	# Returns the amount of time (in milliseconds) thattransitions between pages in stack will take.
	stack		# a GtkStack 
	return:		#  the transition duration 
void gtk_stack_set_transition_type (GtkStack *stack, GtkStackTransitionType transition);	# Sets the type of animation that will be used fortransitions between pages in stack. Availabletypes include various kinds of fades and slides.
	stack		# a GtkStack 
	transition		# the new transition type
GtkStackTransitionType gtk_stack_get_transition_type (GtkStack *stack);	# Gets the type of animation that will be usedfor transitions between pages in stack.
	stack		# a GtkStack 
	return:		#  the current transition type of stack 
gboolean gtk_stack_get_transition_running (GtkStack *stack);	# Returns whether the stack is currently in a transition from one page toanother.
	stack		# a GtkStack 
	return:		#  TRUE if the transition is currently running, FALSE otherwise. 
gboolean gtk_stack_get_interpolate_size (GtkStack *stack);	# Returns wether the GtkStack is set up to interpolate betweenthe sizes of children on page switch.
	stack		# A GtkStack 
	return:		#  TRUE if child sizes are interpolated 
void gtk_stack_set_interpolate_size (GtkStack *stack, gboolean interpolate_size);	# Sets whether or not stack will interpolate its size whenchanging the visible child. If the “interpolate-size” property is set to TRUE , stack will interpolate its size betweenthe current one and the one it'll take after changing thevisible child, according to the set transition duration.
	stack		# A GtkStack 
	interpolate_size		# the new value
GtkWidget  *gtk_stack_switcher_new (void );	# Create a new GtkStackSwitcher .
	return:		#  a new GtkStackSwitcher . 
void gtk_stack_switcher_set_stack (GtkStackSwitcher *switcher, GtkStack *stack);	# Sets the stack to control.
	switcher		# a GtkStackSwitcher 
	stack		#  a GtkStack . 
GtkStack  *gtk_stack_switcher_get_stack (GtkStackSwitcher *switcher);	# Retrieves the stack.See gtk_stack_switcher_set_stack() .
	switcher		# a GtkStackSwitcher 
	return:		#  the stack, or NULL ifnone has been set explicitly.  
GtkWidget  *gtk_stack_sidebar_new (void );	#创建对象:sidebar.
	return:		#  the new GtkStackSidebar  
void gtk_stack_sidebar_set_stack (GtkStackSidebar *sidebar, GtkStack *stack);	# Set the GtkStack associated with this GtkStackSidebar .
	sidebar		# a GtkStackSidebar 
	stack		# a GtkStack 
GtkStack  *gtk_stack_sidebar_get_stack (GtkStackSidebar *sidebar);	# Retrieves the stack.See gtk_stack_sidebar_set_stack() .
	sidebar		# a GtkStackSidebar 
	return:		#  the associated GtkStack orNULL if none has been set explicitly.  
GtkWidget  *gtk_action_bar_new (void );	#创建对象:GtkActionBar widget.
	return:		#  a new GtkActionBar  
void gtk_action_bar_pack_start (GtkActionBar *action_bar, GtkWidget *child);	# Adds child to action_bar, packed with reference to thestart of the action_bar.
	action_bar		# A GtkActionBar 
	child		# the GtkWidget to be added to action_bar
void gtk_action_bar_pack_end (GtkActionBar *action_bar, GtkWidget *child);	# Adds child to action_bar, packed with reference to theend of the action_bar.
	action_bar		# A GtkActionBar 
	child		# the GtkWidget to be added to action_bar
GtkWidget  *gtk_action_bar_get_center_widget (GtkActionBar *action_bar);	# Retrieves the center bar widget of the bar.
	action_bar		# a GtkActionBar 
	return:		#  the center GtkWidget or NULL .  
void gtk_action_bar_set_center_widget (GtkActionBar *action_bar, GtkWidget *center_widget);	# Sets the center widget for the GtkActionBar .
	action_bar		# a GtkActionBar 
	center_widget		#  a widget to use for the center. 
gboolean gtk_action_bar_get_revealed (GtkActionBar *action_bar);	# action_bar
	return:		#  the current value of the GtkActionBar:revealed property. 
void gtk_action_bar_set_revealed (GtkActionBar *action_bar, gboolean revealed);	# Sets the GtkActionBar:revealed property to revealed. This will causeaction_bar to show up with a slide-in transition.
	action_bar		# a GtkActionBar 
	revealed		# The new value of the property
GtkWidget  *gtk_header_bar_new (void );	#创建对象:GtkHeaderBar widget.
	return:		#  a new GtkHeaderBar  
void gtk_header_bar_set_title (GtkHeaderBar *bar, const gchar *title);	# Sets the title of the GtkHeaderBar . The title should help a useridentify the current view. A good title should not include theapplication name.
	bar		# a GtkHeaderBar 
	title		#  a title, or NULL . 
gchar  *gtk_header_bar_get_title (GtkHeaderBar *bar);	# Retrieves the title of the header. See gtk_header_bar_set_title() .
	bar		# a GtkHeaderBar 
	return:		#  the title of the header, or NULL if none hasbeen set explicitly. The returned string is owned by the widgetand must not be modified or freed.  
void gtk_header_bar_set_subtitle (GtkHeaderBar *bar, const gchar *subtitle);	# Sets the subtitle of the GtkHeaderBar . The title should give a useran additional detail to help him identify the current view.
	bar		# a GtkHeaderBar 
	subtitle		#  a subtitle, or NULL . 
gchar  *gtk_header_bar_get_subtitle (GtkHeaderBar *bar);	# Retrieves the subtitle of the header. See gtk_header_bar_set_subtitle() .
	bar		# a GtkHeaderBar 
	return:		#  the subtitle of the header, or NULL if none hasbeen set explicitly. The returned string is owned by the widgetand must not be modified or freed.  
void gtk_header_bar_set_has_subtitle (GtkHeaderBar *bar, gboolean setting);	# Sets whether the header bar should reserve spacefor a subtitle, even if none is currently set.
	bar		# a GtkHeaderBar 
	setting		# TRUE to reserve space for a subtitle
gboolean gtk_header_bar_get_has_subtitle (GtkHeaderBar *bar);	# Retrieves whether the header bar reserves space fora subtitle, regardless if one is currently set or not.
	bar		# a GtkHeaderBar 
	return:		#  TRUE if the header bar reserves spacefor a subtitle 
void gtk_header_bar_set_custom_title (GtkHeaderBar *bar, GtkWidget *title_widget);	# Sets a custom title for the GtkHeaderBar .
	bar		# a GtkHeaderBar 
	title_widget		#  a custom widget to use for a title. 
GtkWidget  *gtk_header_bar_get_custom_title (GtkHeaderBar *bar);	# Retrieves the custom title widget of the header. Seegtk_header_bar_set_custom_title() .
	bar		# a GtkHeaderBar 
	return:		#  the custom title widgetof the header, or NULL if none has been set explicitly.  
void gtk_header_bar_pack_start (GtkHeaderBar *bar, GtkWidget *child);	# Adds child to bar, packed with reference to thestart of the bar.
	bar		# A GtkHeaderBar 
	child		# the GtkWidget to be added to bar
void gtk_header_bar_pack_end (GtkHeaderBar *bar, GtkWidget *child);	# Adds child to bar, packed with reference to theend of the bar.
	bar		# A GtkHeaderBar 
	child		# the GtkWidget to be added to bar
void gtk_header_bar_set_show_close_button (GtkHeaderBar *bar, gboolean setting);	# Sets whether this header bar shows the standard window decorations,including close, maximize, and minimize.
	bar		# a GtkHeaderBar 
	setting		# TRUE to show standard widow decorations
gboolean gtk_header_bar_get_show_close_button (GtkHeaderBar *bar);	# Returns whether this header bar shows the standard windowdecorations.
	bar		# a GtkHeaderBar 
	return:		#  TRUE if the decorations are shown 
void gtk_header_bar_set_decoration_layout (GtkHeaderBar *bar, const gchar *layout);	# Sets the decoration layout for this header bar, overridingthe “gtk-decoration-layout” setting. 
	bar		# a GtkHeaderBar 
	layout		#  a decoration layout, or NULL tounset the layout. 
gchar  *gtk_header_bar_get_decoration_layout (GtkHeaderBar *bar);	# Gets the decoration layout set withgtk_header_bar_set_decoration_layout() .
	bar		# a GtkHeaderBar 
	return:		#  the decoration layout 
GtkWidget  *gtk_overlay_new (void );	#创建对象:GtkOverlay .
	return:		#  a new GtkOverlay object. 
void gtk_overlay_add_overlay (GtkOverlay *overlay, GtkWidget *widget);	# Adds widget to overlay.
	overlay		# a GtkOverlay 
	widget		# a GtkWidget to be added to the container
void gtk_overlay_reorder_overlay (GtkOverlay *overlay, GtkWidget *child, gint position);	# Moves child to a new index in the list of overlay children.The list contains overlays in the order that these wereadded to overlay.
	overlay		# a GtkOverlay 
	child		# the overlaid GtkWidget to move
	position		# the new index for childin the list of overlay childrenof overlay, starting from 0. If negative, indicates the end ofthe list
gboolean gtk_overlay_get_overlay_pass_through (GtkOverlay *overlay, GtkWidget *widget);	# Convenience function to get the value of the “pass-through” child property for widget.
	overlay		# a GtkOverlay 
	widget		# an overlay child of GtkOverlay 
	return:		#  whether the widget is a pass through child. 
void gtk_overlay_set_overlay_pass_through (GtkOverlay *overlay, GtkWidget *widget, gboolean pass_through);	# Convenience function to set the value of the “pass-through” child property for widget.
	overlay		# a GtkOverlay 
	widget		# an overlay child of GtkOverlay 
	pass_through		# whether the child should pass the input through
GtkWidget  *gtk_button_box_new (GtkOrientation orientation);	#创建对象:GtkButtonBox .
	orientation		# the box's orientation.
	return:		#  a new GtkButtonBox . 
GtkButtonBoxStyle gtk_button_box_get_layout (GtkButtonBox *widget);	# Retrieves the method being used to arrange the buttons in a button box.
	widget		# a GtkButtonBox 
	return:		#  the method used to lay out buttons in widget. 
gboolean gtk_button_box_get_child_secondary (GtkButtonBox *widget, GtkWidget *child);	# Returns whether child should appear in a secondary group of children.
	widget		# a GtkButtonBox 
	child		# a child of widget
	return:		#  whether childshould appear in a secondary group of children. 
gboolean gtk_button_box_get_child_non_homogeneous (GtkButtonBox *widget, GtkWidget *child);	# Returns whether the child is exempted from homogenoussizing.
	widget		# a GtkButtonBox 
	child		# a child of widget
	return:		#  TRUE if the child is not subject to homogenous sizing 
void gtk_button_box_set_layout (GtkButtonBox *widget, GtkButtonBoxStyle layout_style);	# Changes the way buttons are arranged in their container.
	widget		# a GtkButtonBox 
	layout_style		# the new layout style
void gtk_button_box_set_child_secondary (GtkButtonBox *widget, GtkWidget *child, gboolean is_secondary);	# Sets whether child should appear in a secondary group of children.A typical use of a secondary child is the help button in a dialog.
	widget		# a GtkButtonBox 
	child		# a child of widget
	is_secondary		# if TRUE , the childappears in a secondary group of thebutton box.
void gtk_button_box_set_child_non_homogeneous (GtkButtonBox *widget, GtkWidget *child, gboolean non_homogeneous);	# Sets whether the child is exempted from homogeous sizing.
	widget		# a GtkButtonBox 
	child		# a child of widget
	non_homogeneous		# the new value
GtkWidget  *gtk_paned_new (GtkOrientation orientation);	#创建对象:GtkPaned widget.
	orientation		# the paned’s orientation.
	return:		#  a new GtkPaned . 
void gtk_paned_add1 (GtkPaned *paned, GtkWidget *child);	# Adds a child to the top or left pane with default parameters. This isequivalent togtk_paned_pack1 (paned, child, FALSE, TRUE).
	paned		# a paned widget
	child		# the child to add
void gtk_paned_add2 (GtkPaned *paned, GtkWidget *child);	# Adds a child to the bottom or right pane with default parameters. Thisis equivalent togtk_paned_pack2 (paned, child, TRUE, TRUE).
	paned		# a paned widget
	child		# the child to add
void gtk_paned_pack1 (GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink);	# Adds a child to the top or left pane.
	paned		# a paned widget
	child		# the child to add
	resize		# should this child expand when the paned widget is resized.
	shrink		# can this child be made smaller than its requisition.
void gtk_paned_pack2 (GtkPaned *paned, GtkWidget *child, gboolean resize, gboolean shrink);	# Adds a child to the bottom or right pane.
	paned		# a paned widget
	child		# the child to add
	resize		# should this child expand when the paned widget is resized.
	shrink		# can this child be made smaller than its requisition.
GtkWidget  *gtk_paned_get_child1 (GtkPaned *paned);	# Obtains the first child of the paned widget.
	paned		# a GtkPaned widget
	return:		#  first child, or NULL if it is not set.  
GtkWidget  *gtk_paned_get_child2 (GtkPaned *paned);	# Obtains the second child of the paned widget.
	paned		# a GtkPaned widget
	return:		#  second child, or NULL if it is not set.  
void gtk_paned_set_position (GtkPaned *paned, gint position);	# Sets the position of the divider between the two panes.
	paned		# a GtkPaned widget
	position		# pixel position of divider, a negative value means that the positionis unset.
gint gtk_paned_get_position (GtkPaned *paned);	# Obtains the position of the divider between the two panes.
	paned		# a GtkPaned widget
	return:		#  position of the divider 
GdkWindow  *gtk_paned_get_handle_window (GtkPaned *paned);	# Returns the GdkWindow of the handle. This function isuseful when handling button or motion events because itenables the callback to distinguish between the windowof the paned, a child and the handle.
	paned		# a GtkPaned 
	return:		#  the paned’s handle window.  
void gtk_paned_set_wide_handle (GtkPaned *paned, gboolean wide);	# Sets the “wide-handle” property.
	paned		# a GtkPaned 
	wide		# the new value for the “wide-handle” property
gboolean gtk_paned_get_wide_handle (GtkPaned *paned);	# Gets the “wide-handle” property.
	paned		# a GtkPaned 
	return:		#  TRUE if the paned should have a wide handle 
GtkWidget  *gtk_layout_new (GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);	#创建对象:GtkLayout . Unless you have a specific adjustmentyou’d like the layout to use for scrolling, pass NULL forhadjustment and vadjustment.
	hadjustment		#  horizontal scroll adjustment, or NULL . 
	return:		#  a new GtkLayout  
void gtk_layout_put (GtkLayout *layout, GtkWidget *child_widget, gint x, gint y);	# Adds child_widget to layout, at position (x,y).layout becomes the new parent container of child_widget.
	layout		# a GtkLayout 
	child_widget		# child widget
	x		# X position of child widget
	y		# Y position of child widget
void gtk_layout_move (GtkLayout *layout, GtkWidget *child_widget, gint x, gint y);	# Moves a current child of layout to a new position.
	layout		# a GtkLayout 
	child_widget		# a current child of layout
	x		# X position to move to
	y		# Y position to move to
void gtk_layout_set_size (GtkLayout *layout, guint width, guint height);	# Sets the size of the scrollable area of the layout.
	layout		# a GtkLayout 
	width		# width of entire scrollable area
	height		# height of entire scrollable area
void gtk_layout_get_size (GtkLayout *layout, guint *width, guint *height);	# Gets the size that has been set on the layout, and that determinesthe total extents of the layout’s scrollbar area. Seegtk_layout_set_size() .
	layout		# a GtkLayout 
	width		#  location to store the width set onlayout, or NULL . 
GdkWindow  *gtk_layout_get_bin_window (GtkLayout *layout);	# Retrieve the bin window of the layout used for drawing operations.
	layout		# a GtkLayout 
	return:		#  a GdkWindow .  
GtkWidget  *gtk_notebook_new (void );	#创建对象:GtkNotebook widget with no pages.
	return:		#  the newly created GtkNotebook  
gint gtk_notebook_append_page (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);	# Appends a page to notebook.
	notebook		# a GtkNotebook 
	child		# the GtkWidget to use as the contents of the page
	tab_label		#  the GtkWidget to be used as the labelfor the page, or NULL to use the default label, “page N”. 
	return:		#  the index (starting from 0) of the appendedpage in the notebook, or -1 if function fails 
gint gtk_notebook_append_page_menu (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);	# Appends a page to notebook, specifying the widget to use as thelabel in the popup menu.
	notebook		# a GtkNotebook 
	child		# the GtkWidget to use as the contents of the page
	tab_label		#  the GtkWidget to be used as the labelfor the page, or NULL to use the default label, “page N”. 
	return:		#  the index (starting from 0) of the appendedpage in the notebook, or -1 if function fails 
gint gtk_notebook_prepend_page (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);	# Prepends a page to notebook.
	notebook		# a GtkNotebook 
	child		# the GtkWidget to use as the contents of the page
	tab_label		#  the GtkWidget to be used as the labelfor the page, or NULL to use the default label, “page N”. 
	return:		#  the index (starting from 0) of the prependedpage in the notebook, or -1 if function fails 
gint gtk_notebook_prepend_page_menu (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label);	# Prepends a page to notebook, specifying the widget to use as thelabel in the popup menu.
	notebook		# a GtkNotebook 
	child		# the GtkWidget to use as the contents of the page
	tab_label		#  the GtkWidget to be used as the labelfor the page, or NULL to use the default label, “page N”. 
	return:		#  the index (starting from 0) of the prependedpage in the notebook, or -1 if function fails 
gint gtk_notebook_insert_page (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, gint position);	# Insert a page into notebook at the given position.
	notebook		# a GtkNotebook 
	child		# the GtkWidget to use as the contents of the page
	tab_label		#  the GtkWidget to be used as the labelfor the page, or NULL to use the default label, “page N”. 
	return:		#  the index (starting from 0) of the insertedpage in the notebook, or -1 if function fails 
gint gtk_notebook_insert_page_menu (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label, GtkWidget *menu_label, gint position);	# Insert a page into notebook at the given position, specifyingthe widget to use as the label in the popup menu.
	notebook		# a GtkNotebook 
	child		# the GtkWidget to use as the contents of the page
	tab_label		#  the GtkWidget to be used as the labelfor the page, or NULL to use the default label, “page N”. 
	return:		#  the index (starting from 0) of the insertedpage in the notebook 
void gtk_notebook_remove_page (GtkNotebook *notebook, gint page_num);	# Removes a page from the notebook given its indexin the notebook.
	notebook		# a GtkNotebook 
	page_num		# the index of a notebook page, startingfrom 0. If -1, the last page will be removed.
void gtk_notebook_detach_tab (GtkNotebook *notebook, GtkWidget *child);	# Removes the child from the notebook.
	notebook		# a GtkNotebook 
	child		# a child
gint gtk_notebook_page_num (GtkNotebook *notebook, GtkWidget *child);	# Finds the index of the page which contains the given childwidget.
	notebook		# a GtkNotebook 
	child		# a GtkWidget 
	return:		#  the index of the page containing child, or-1 if childis not in the notebook 
void gtk_notebook_next_page (GtkNotebook *notebook);	# Switches to the next page. Nothing happens if the current page isthe last page.
	notebook		# a GtkNotebook 
void gtk_notebook_prev_page (GtkNotebook *notebook);	# Switches to the previous page. Nothing happens if the current pageis the first page.
	notebook		# a GtkNotebook 
void gtk_notebook_reorder_child (GtkNotebook *notebook, GtkWidget *child, gint position);	# Reorders the page containing child, so that it appears in positionposition. If position is greater than or equal to the number ofchildren in the list or negative, child will be moved to the endof the list.
	notebook		# a GtkNotebook 
	child		# the child to move
	position		# the new position, or -1 to move to the end
void gtk_notebook_set_tab_pos (GtkNotebook *notebook, GtkPositionType pos);	# Sets the edge at which the tabs for switching pages in thenotebook are drawn.
	notebook		# a GtkNotebook .
	pos		# the edge to draw the tabs at
void gtk_notebook_set_show_tabs (GtkNotebook *notebook, gboolean show_tabs);	# Sets whether to show the tabs for the notebook or not.
	notebook		# a GtkNotebook 
	show_tabs		# TRUE if the tabs should be shown
void gtk_notebook_set_show_border (GtkNotebook *notebook, gboolean show_border);	# Sets whether a bevel will be drawn around the notebook pages.This only has a visual effect when the tabs are not shown.See gtk_notebook_set_show_tabs() .
	notebook		# a GtkNotebook 
	show_border		# TRUE if a bevel should be drawn around the notebook
void gtk_notebook_set_scrollable (GtkNotebook *notebook, gboolean scrollable);	# Sets whether the tab label area will have arrows forscrolling if there are too many tabs to fit in the area.
	notebook		# a GtkNotebook 
	scrollable		# TRUE if scroll arrows should be added
void gtk_notebook_popup_enable (GtkNotebook *notebook);	# Enables the popup menu: if the user clicks with the rightmouse button on the tab labels, a menu with all the pageswill be popped up.
	notebook		# a GtkNotebook 
void gtk_notebook_popup_disable (GtkNotebook *notebook);	# Disables the popup menu.
	notebook		# a GtkNotebook 
gint gtk_notebook_get_current_page (GtkNotebook *notebook);	# Returns the page number of the current page.
	notebook		# a GtkNotebook 
	return:		#  the index (starting from 0) of the currentpage in the notebook. If the notebook has no pages,then -1 will be returned. 
GtkWidget  *gtk_notebook_get_menu_label (GtkNotebook *notebook, GtkWidget *child);	# Retrieves the menu label widget of the page containing child.
	notebook		# a GtkNotebook 
	child		# a widget contained in a page of notebook
	return:		#  the menu label, or NULL if thenotebook page does not have a menu label other than the default (the tablabel).  
GtkWidget  *gtk_notebook_get_nth_page (GtkNotebook *notebook, gint page_num);	# Returns the child widget contained in page number page_num.
	notebook		# a GtkNotebook 
	page_num		# the index of a page in the notebook, or -1to get the last page
	return:		#  the child widget, or NULL if page_numis out of bounds.  
gint gtk_notebook_get_n_pages (GtkNotebook *notebook);	# Gets the number of pages in a notebook.
	notebook		# a GtkNotebook 
	return:		#  the number of pages in the notebook 
GtkWidget  *gtk_notebook_get_tab_label (GtkNotebook *notebook, GtkWidget *child);	# Returns the tab label widget for the page child.NULL is returned if child is not in notebook orif no tab label has specifically been set for child.
	notebook		# a GtkNotebook 
	child		# the page
	return:		#  the tab label.  
void gtk_notebook_set_menu_label (GtkNotebook *notebook, GtkWidget *child, GtkWidget *menu_label);	# Changes the menu label for the page containing child.
	notebook		# a GtkNotebook 
	child		# the child widget
	menu_label		#  the menu label, or NULL for default. 
void gtk_notebook_set_menu_label_text (GtkNotebook *notebook, GtkWidget *child, const gchar *menu_text);	#创建对象:label and sets it as the menu label of child.
	notebook		# a GtkNotebook 
	child		# the child widget
	menu_text		# the label text
void gtk_notebook_set_tab_label (GtkNotebook *notebook, GtkWidget *child, GtkWidget *tab_label);	# Changes the tab label for child.If NULL is specified for tab_label, then the page willhave the label “page N”.
	notebook		# a GtkNotebook 
	child		# the page
	tab_label		#  the tab label widget to use, or NULL for default tab label. 
void gtk_notebook_set_tab_label_text (GtkNotebook *notebook, GtkWidget *child, const gchar *tab_text);	#创建对象:label and sets it as the tab label for the pagecontaining child.
	notebook		# a GtkNotebook 
	child		# the page
	tab_text		# the label text
void gtk_notebook_set_tab_reorderable (GtkNotebook *notebook, GtkWidget *child, gboolean reorderable);	# Sets whether the notebook tab can be reorderedvia drag and drop or not.
	notebook		# a GtkNotebook 
	child		# a child GtkWidget 
	reorderable		# whether the tab is reorderable or not
void gtk_notebook_set_tab_detachable (GtkNotebook *notebook, GtkWidget *child, gboolean detachable);	# Sets whether the tab can be detached from notebook to anothernotebook or widget.
	notebook		# a GtkNotebook 
	child		# a child GtkWidget 
	detachable		# whether the tab is detachable or not
gchar  *gtk_notebook_get_menu_label_text (GtkNotebook *notebook, GtkWidget *child);	# Retrieves the text of the menu label for the page containingchild.
	notebook		# a GtkNotebook 
	child		# the child widget of a page of the notebook.
	return:		#  the text of the tab label, or NULL if the widget doesnot have a menu label other than the default menu label, or the menu labelwidget is not a GtkLabel . The string is owned by the widget and must not befreed.  
gboolean gtk_notebook_get_scrollable (GtkNotebook *notebook);	# Returns whether the tab label area has arrows for scrolling.See gtk_notebook_set_scrollable() .
	notebook		# a GtkNotebook 
	return:		#  TRUE if arrows for scrolling are present 
gboolean gtk_notebook_get_show_border (GtkNotebook *notebook);	# Returns whether a bevel will be drawn around the notebook pages.See gtk_notebook_set_show_border() .
	notebook		# a GtkNotebook 
	return:		#  TRUE if the bevel is drawn 
gboolean gtk_notebook_get_show_tabs (GtkNotebook *notebook);	# Returns whether the tabs of the notebook are shown.See gtk_notebook_set_show_tabs() .
	notebook		# a GtkNotebook 
	return:		#  TRUE if the tabs are shown 
gchar  *gtk_notebook_get_tab_label_text (GtkNotebook *notebook, GtkWidget *child);	# Retrieves the text of the tab label for the page containingchild.
	notebook		# a GtkNotebook 
	child		# a widget contained in a page of notebook
	return:		#  the text of the tab label, or NULL if the tab labelwidget is not a GtkLabel . The string is owned by the widget and must not befreed.  
GtkPositionType gtk_notebook_get_tab_pos (GtkNotebook *notebook);	# Gets the edge at which the tabs for switching pages in thenotebook are drawn.
	notebook		# a GtkNotebook 
	return:		#  the edge at which the tabs are drawn 
gboolean gtk_notebook_get_tab_reorderable (GtkNotebook *notebook, GtkWidget *child);	# Gets whether the tab can be reordered via drag and drop or not.
	notebook		# a GtkNotebook 
	child		# a child GtkWidget 
	return:		#  TRUE if the tab is reorderable. 
gboolean gtk_notebook_get_tab_detachable (GtkNotebook *notebook, GtkWidget *child);	# Returns whether the tab contents can be detached from notebook.
	notebook		# a GtkNotebook 
	child		# a child GtkWidget 
	return:		#  TRUE if the tab is detachable. 
void gtk_notebook_set_current_page (GtkNotebook *notebook, gint page_num);	# Switches to the page number page_num.
	notebook		# a GtkNotebook 
	page_num		# index of the page to switch to, starting from 0.If negative, the last page will be used. If greaterthan the number of pages in the notebook, nothingwill be done.
void gtk_notebook_set_group_name (GtkNotebook *notebook, const gchar *group_name);	# Sets a group name for notebook.
	notebook		# a GtkNotebook 
	group_name		#  the name of the notebook group,or NULL to unset it. 
gchar  *gtk_notebook_get_group_name (GtkNotebook *notebook);	# Gets the current group name for notebook.
	notebook		# a GtkNotebook 
	return:		#  the group name, or NULL if none is set.  
void gtk_notebook_set_action_widget (GtkNotebook *notebook, GtkWidget *widget, GtkPackType pack_type);	# Sets widget as one of the action widgets. Depending on the pack typethe widget will be placed before or after the tabs. You can usea GtkBox if you need to pack more than one widget on the same side.
	notebook		# a GtkNotebook 
	widget		# a GtkWidget 
	pack_type		# pack type of the action widget
GtkWidget  *gtk_notebook_get_action_widget (GtkNotebook *notebook, GtkPackType pack_type);	# Gets one of the action widgets. See gtk_notebook_set_action_widget() .
	notebook		# a GtkNotebook 
	pack_type		# pack type of the action widget to receive
	return:		#  The action widget with the givenpack_typeor NULL when this action widget has not been set.  
GtkWidget  *gtk_expander_new (const gchar *label);	#创建对象:expander using label as the text of the label.
	label		# the text of the label
	return:		#  a new GtkExpander widget. 
GtkWidget  *gtk_expander_new_with_mnemonic (const gchar *label);	#创建对象:expander using label as the text of the label.If characters in label are preceded by an underscore, they are underlined.If you need a literal underscore character in a label, use “__” (twounderscores). The first underlined character represents a keyboardaccelerator called a mnemonic.Pressing Alt and that key activates the button.
	label		#  the text of the label with an underscorein front of the mnemonic character. 
	return:		#  a new GtkExpander widget. 
void gtk_expander_set_expanded (GtkExpander *expander, gboolean expanded);	# Sets the state of the expander. Set to TRUE , if you wantthe child widget to be revealed, and FALSE if you want thechild widget to be hidden.
	expander		# a GtkExpander 
	expanded		# whether the child widget is revealed
gboolean gtk_expander_get_expanded (GtkExpander *expander);	# Queries a GtkExpander and returns its current state. Returns TRUE if the child widget is revealed.
	expander		# a GtkExpander 
	return:		#  the current state of the expander 
void gtk_expander_set_label (GtkExpander *expander, const gchar *label);	# Sets the text of the label of the expander to label.
	expander		# a GtkExpander 
	label		#  a string. 
gchar  *gtk_expander_get_label (GtkExpander *expander);	# Fetches the text from a label widget including any embeddedunderlines indicating mnemonics and Pango markup, as set bygtk_expander_set_label() . If the label text has not been set thereturn value will be NULL . This will be the case if you create anempty button with gtk_button_new() to use as a container.
	expander		# a GtkExpander 
	return:		#  The text of the label widget. This string is ownedby the widget and must not be modified or freed. 
void gtk_expander_set_use_underline (GtkExpander *expander, gboolean use_underline);	# If true, an underline in the text of the expander label indicatesthe next character should be used for the mnemonic accelerator key.
	expander		# a GtkExpander 
	use_underline		# TRUE if underlines in the text indicate mnemonics
gboolean gtk_expander_get_use_underline (GtkExpander *expander);	# Returns whether an embedded underline in the expander labelindicates a mnemonic. See gtk_expander_set_use_underline() .
	expander		# a GtkExpander 
	return:		#  TRUE if an embedded underline in the expanderlabel indicates the mnemonic accelerator keys 
void gtk_expander_set_use_markup (GtkExpander *expander, gboolean use_markup);	# Sets whether the text of the label contains markup inPango’s text markup language.See gtk_label_set_markup() .
	expander		# a GtkExpander 
	use_markup		# TRUE if the label’s text should be parsed for markup
gboolean gtk_expander_get_use_markup (GtkExpander *expander);	# Returns whether the label’s text is interpreted as marked up withthe Pango text markup language.See gtk_expander_set_use_markup() .
	expander		# a GtkExpander 
	return:		#  TRUE if the label’s text will be parsed for markup 
void gtk_expander_set_label_widget (GtkExpander *expander, GtkWidget *label_widget);	# Set the label widget for the expander. This is the widgetthat will appear embedded alongside the expander arrow.
	expander		# a GtkExpander 
	label_widget		#  the new label widget. 
GtkWidget  *gtk_expander_get_label_widget (GtkExpander *expander);	# Retrieves the label widget for the frame. Seegtk_expander_set_label_widget() .
	expander		# a GtkExpander 
	return:		#  the label widget,or NULL if there is none.  
void gtk_expander_set_label_fill (GtkExpander *expander, gboolean label_fill);	# Sets whether the label widget should fill all availablehorizontal space allocated to expander.
	expander		# a GtkExpander 
	label_fill		# TRUE if the label should should fillall available horizontal space
gboolean gtk_expander_get_label_fill (GtkExpander *expander);	# Returns whether the label widget will fill all availablehorizontal space allocated to expander.
	expander		# a GtkExpander 
	return:		#  TRUE if the label widget will fill allavailable horizontal space 
void gtk_expander_set_resize_toplevel (GtkExpander *expander, gboolean resize_toplevel);	# Sets whether the expander will resize the toplevel widgetcontaining the expander upon resizing and collpasing.
	expander		# a GtkExpander 
	resize_toplevel		# whether to resize the toplevel
gboolean gtk_expander_get_resize_toplevel (GtkExpander *expander);	# Returns whether the expander will resize the toplevel widgetcontaining the expander upon resizing and collpasing.
	expander		# a GtkExpander 
	return:		#  the “resize toplevel” setting. 
GtkOrientation gtk_orientable_get_orientation (GtkOrientable *orientable);	# Retrieves the orientation of the orientable.
	orientable		# a GtkOrientable 
	return:		#  the orientation of the orientable. 
void gtk_orientable_set_orientation (GtkOrientable *orientable, GtkOrientation orientation);	# Sets the orientation of the orientable.
	orientable		# a GtkOrientable 
	orientation		# the orientable’s new orientation.
GtkWidget  *gtk_aspect_frame_new (const gchar *label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child);	# Create a new GtkAspectFrame .
	label		#  Label text. 
	yalign		# Vertical alignment of the child within the allocation ofthe GtkAspectFrame . This ranges from 0.0 (top aligned)to 1.0 (bottom aligned)
	ratio		# The desired aspect ratio.
	obey_child		# If TRUE , ratiois ignored, and the aspectratio is taken from the requistion of the child.
	return:		#  the new GtkAspectFrame . 
void gtk_aspect_frame_set (GtkAspectFrame *aspect_frame, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child);	# Set parameters for an existing GtkAspectFrame .
	aspect_frame		# a GtkAspectFrame 
	xalign		# Horizontal alignment of the child within the allocation ofthe GtkAspectFrame . This ranges from 0.0 (left aligned)to 1.0 (right aligned)
	yalign		# Vertical alignment of the child within the allocation ofthe GtkAspectFrame . This ranges from 0.0 (top aligned)to 1.0 (bottom aligned)
	ratio		# The desired aspect ratio.
	obey_child		# If TRUE , ratiois ignored, and the aspectratio is taken from the requistion of the child.
GtkWidget  *gtk_fixed_new (void );	#创建对象:GtkFixed .
	return:		#  a new GtkFixed . 
void gtk_fixed_put (GtkFixed *fixed, GtkWidget *widget, gint x, gint y);	# Adds a widget to a GtkFixed container at the given position.
	fixed		# a GtkFixed .
	widget		# the widget to add.
	x		# the horizontal position to place the widget at.
	y		# the vertical position to place the widget at.
void gtk_fixed_move (GtkFixed *fixed, GtkWidget *widget, gint x, gint y);	# Moves a child of a GtkFixed container to the given position.
	fixed		# a GtkFixed .
	widget		# the child widget.
	x		# the horizontal position to move the widget to.
	y		# the vertical position to move the widget to.
GtkWidget  *gtk_label_new (const gchar *str);	#创建对象:label with the given text inside it. You canpass NULL to get an empty label widget.
	str		#  The text of the label. 
	return:		#  the new GtkLabel  
void gtk_label_set_text (GtkLabel *label, const gchar *str);	# Sets the text within the GtkLabel widget. It overwrites any text thatwas there before. 
	label		# a GtkLabel 
	str		# The text you want to set
void gtk_label_set_attributes (GtkLabel *label, PangoAttrList *attrs);	# Sets a PangoAttrList ; the attributes in the list are applied to thelabel text.
	label		# a GtkLabel 
	attrs		#  a PangoAttrList , or NULL . 
void gtk_label_set_markup (GtkLabel *label, const gchar *str);	# Parses str which is marked up with thePango text markup language, setting thelabel’s text and attribute list based on the parse results.
	label		# a GtkLabel 
	str		# a markup string (see Pango markup format)
void gtk_label_set_markup_with_mnemonic (GtkLabel *label, const gchar *str);	# Parses str which is marked up with thePango text markup language,setting the label’s text and attribute list based on the parse results.If characters in str are preceded by an underscore, they are underlinedindicating that they represent a keyboard accelerator called a mnemonic.
	label		# a GtkLabel 
	str		# a markup string (seePango markup format)
void gtk_label_set_pattern (GtkLabel *label, const gchar *pattern);	# The pattern of underlines you want under the existing text within theGtkLabel widget. For example if the current text of the label says“FooBarBaz” passing a pattern of “___ ___” will underline“Foo” and “Baz” but not “Bar”.
	label		# The GtkLabel you want to set the pattern to.
	pattern		# The pattern as described above.
void gtk_label_set_justify (GtkLabel *label, GtkJustification jtype);	# Sets the alignment of the lines in the text of the label relative toeach other. GTK_JUSTIFY_LEFT is the default value when the widget isfirst created with gtk_label_new() . If you instead want to set thealignment of the label as a whole, use gtk_widget_set_halign() instead.gtk_label_set_justify() has no effect on labels containing only asingle line.
	label		# a GtkLabel 
	jtype		# a GtkJustification 
void gtk_label_set_xalign (GtkLabel *label, gfloat xalign);	# Sets the “xalign” property for label.
	label		# a GtkLabel 
	xalign		# the new xalign value, between 0 and 1
void gtk_label_set_yalign (GtkLabel *label, gfloat yalign);	# Sets the “yalign” property for label.
	label		# a GtkLabel 
	yalign		# the new yalign value, between 0 and 1
void gtk_label_set_ellipsize (GtkLabel *label, PangoEllipsizeMode mode);	# Sets the mode used to ellipsize (add an ellipsis: "...") to the text if there is not enough space to render the entire string.
	label		# a GtkLabel 
	mode		# a PangoEllipsizeMode 
void gtk_label_set_width_chars (GtkLabel *label, gint n_chars);	# Sets the desired width in characters of label to n_chars.
	label		# a GtkLabel 
	n_chars		# the new desired width, in characters.
void gtk_label_set_max_width_chars (GtkLabel *label, gint n_chars);	# Sets the desired maximum width in characters of label to n_chars.
	label		# a GtkLabel 
	n_chars		# the new desired maximum width, in characters.
void gtk_label_set_line_wrap (GtkLabel *label, gboolean wrap);	# Toggles line wrapping within the GtkLabel widget. TRUE makes it breaklines if text exceeds the widget’s size. FALSE lets the text get cut offby the edge of the widget if it exceeds the widget size.
	label		# a GtkLabel 
	wrap		# the setting
void gtk_label_set_line_wrap_mode (GtkLabel *label, PangoWrapMode wrap_mode);	# If line wrapping is on (see gtk_label_set_line_wrap() ) this controls howthe line wrapping is done. The default is PANGO_WRAP_WORD which meanswrap on word boundaries.
	label		# a GtkLabel 
	wrap_mode		# the line wrapping mode
void gtk_label_set_lines (GtkLabel *label, gint lines);	# Sets the number of lines to which an ellipsized, wrapping labelshould be limited. This has no effect if the label is not wrappingor ellipsized. Set this to -1 if you don’t want to limit thenumber of lines.
	label		# a GtkLabel 
	lines		# the desired number of lines, or -1
void gtk_label_get_layout_offsets (GtkLabel *label, gint *x, gint *y);	# Obtains the coordinates where the label will draw the PangoLayout representing the text in the label; useful to convert mouse eventsinto coordinates inside the PangoLayout , e.g. to take some actionif some part of the label is clicked. Of course you will need tocreate a GtkEventBox to receive the events, and pack the labelinside it, since labels are windowless (they return FALSE fromgtk_widget_get_has_window() ). Rememberwhen using the PangoLayout functions you need to convert toand from pixels using PANGO_PIXELS() or PANGO_SCALE .
	label		# a GtkLabel 
	x		#  location to store X offset of layout, or NULL . 
guint gtk_label_get_mnemonic_keyval (GtkLabel *label);	# If the label has been set so that it has an mnemonic key this functionreturns the keyval used for the mnemonic accelerator. If there is nomnemonic set up it returns GDK_KEY_VoidSymbol .
	label		# a GtkLabel 
	return:		#  GDK keyval usable for accelerators, or GDK_KEY_VoidSymbol  
gboolean gtk_label_get_selectable (GtkLabel *label);	# Gets the value set by gtk_label_set_selectable() .
	label		# a GtkLabel 
	return:		#  TRUE if the user can copy text from the label 
gchar  *gtk_label_get_text (GtkLabel *label);	# Fetches the text from a label widget, as displayed on thescreen. This does not include any embedded underlinesindicating mnemonics or Pango markup. (See gtk_label_get_label() )
	label		# a GtkLabel 
	return:		#  the text in the label widget. This is the internalstring used by the label, and must not be modified. 
GtkWidget  *gtk_label_new_with_mnemonic (const gchar *str);	#创建对象:GtkLabel , containing the text in str.
	str		#  The text of the label, with an underscore in front of themnemonic character. 
	return:		#  the new GtkLabel  
void gtk_label_select_region (GtkLabel *label, gint start_offset, gint end_offset);	# Selects a range of characters in the label, if the label is selectable.See gtk_label_set_selectable() . If the label is not selectable,this function has no effect. If start_offset orend_offset are -1, then the end of the label will be substituted.
	label		# a GtkLabel 
	start_offset		# start offset (in characters not bytes)
	end_offset		# end offset (in characters not bytes)
void gtk_label_set_mnemonic_widget (GtkLabel *label, GtkWidget *widget);	# If the label has been set so that it has an mnemonic key (usingi.e. gtk_label_set_markup_with_mnemonic() ,gtk_label_set_text_with_mnemonic() , gtk_label_new_with_mnemonic() or the “use_underline” property) the label can be associated with awidget that is the target of the mnemonic. When the label is insidea widget (like a GtkButton or a GtkNotebook tab) it isautomatically associated with the correct widget, but sometimes(i.e. when the target is a GtkEntry next to the label) you need toset it explicitly using this function.
	label		# a GtkLabel 
	widget		#  the target GtkWidget . 
void gtk_label_set_selectable (GtkLabel *label, gboolean setting);	# Selectable labels allow the user to select text from the label, forcopy-and-paste.
	label		# a GtkLabel 
	setting		# TRUE to allow selecting text in the label
void gtk_label_set_text_with_mnemonic (GtkLabel *label, const gchar *str);	# Sets the label’s text from the string str.If characters in str are preceded by an underscore, they are underlinedindicating that they represent a keyboard accelerator called a mnemonic.The mnemonic key can be used to activate another widget, chosen automatically, or explicitly using gtk_label_set_mnemonic_widget() .
	label		# a GtkLabel 
	str		# a string
PangoAttrList  *gtk_label_get_attributes (GtkLabel *label);	# Gets the attribute list that was set on the label usinggtk_label_set_attributes() , if any. This function doesnot reflect attributes that come from the labels markup(see gtk_label_set_markup() ). If you want to get theeffective attributes for the label, usepango_layout_get_attribute (gtk_label_get_layout (label)).
	label		# a GtkLabel 
	return:		#  the attribute list, or NULL if none was set.  
GtkJustification gtk_label_get_justify (GtkLabel *label);	# Returns the justification of the label. See gtk_label_set_justify() .
	label		# a GtkLabel 
	return:		#  GtkJustification  
gfloat gtk_label_get_xalign (GtkLabel *label);	# Gets the “xalign” property for label.
	label		# a GtkLabel 
	return:		#  the xalign property 
gfloat gtk_label_get_yalign (GtkLabel *label);	# Gets the “yalign” property for label.
	label		# a GtkLabel 
	return:		#  the yalign property 
PangoEllipsizeMode gtk_label_get_ellipsize (GtkLabel *label);	# Returns the ellipsizing position of the label. See gtk_label_set_ellipsize() .
	label		# a GtkLabel 
	return:		#  PangoEllipsizeMode  
gint gtk_label_get_width_chars (GtkLabel *label);	# Retrieves the desired width of label, in characters. Seegtk_label_set_width_chars() .
	label		# a GtkLabel 
	return:		#  the width of the label in characters. 
gint gtk_label_get_max_width_chars (GtkLabel *label);	# Retrieves the desired maximum width of label, in characters. Seegtk_label_set_width_chars() .
	label		# a GtkLabel 
	return:		#  the maximum width of the label in characters. 
gchar  *gtk_label_get_label (GtkLabel *label);	# Fetches the text from a label widget including any embeddedunderlines indicating mnemonics and Pango markup. (Seegtk_label_get_text() ).
	label		# a GtkLabel 
	return:		#  the text of the label widget. This string isowned by the widget and must not be modified or freed. 
PangoLayout  *gtk_label_get_layout (GtkLabel *label);	# Gets the PangoLayout used to display the label.The layout is useful to e.g. convert text positions topixel positions, in combination with gtk_label_get_layout_offsets() .The returned layout is owned by the label so need not befreed by the caller. The label is free to recreate its layout atany time, so it should be considered read-only.
	label		# a GtkLabel 
	return:		#  the PangoLayout for this label.  
gboolean gtk_label_get_line_wrap (GtkLabel *label);	# Returns whether lines in the label are automatically wrapped. See gtk_label_set_line_wrap() .
	label		# a GtkLabel 
	return:		#  TRUE if the lines of the label are automatically wrapped. 
PangoWrapMode gtk_label_get_line_wrap_mode (GtkLabel *label);	# Returns line wrap mode used by the label. See gtk_label_set_line_wrap_mode() .
	label		# a GtkLabel 
	return:		#  TRUE if the lines of the label are automatically wrapped. 
gint gtk_label_get_lines (GtkLabel *label);	# Gets the number of lines to which an ellipsized, wrappinglabel should be limited. See gtk_label_set_lines() .
	label		# a GtkLabel 
	return:		#  The number of lines 
GtkWidget  *gtk_label_get_mnemonic_widget (GtkLabel *label);	# Retrieves the target of the mnemonic (keyboard shortcut) of thislabel. See gtk_label_set_mnemonic_widget() .
	label		# a GtkLabel 
	return:		#  the target of the label’s mnemonic,or NULL if none has been set and the default algorithm will be used.  
gboolean gtk_label_get_selection_bounds (GtkLabel *label, gint *start, gint *end);	# Gets the selected range of characters in the label, returning TRUE if there’s a selection.
	label		# a GtkLabel 
	start		#  return location for start of selection, as a character offset. 
	return:		#  TRUE if selection is non-empty 
gboolean gtk_label_get_use_markup (GtkLabel *label);	# Returns whether the label’s text is interpreted as marked up withthe Pango text markup language.See gtk_label_set_use_markup() .
	label		# a GtkLabel 
	return:		#  TRUE if the label’s text will be parsed for markup. 
gboolean gtk_label_get_use_underline (GtkLabel *label);	# Returns whether an embedded underline in the label indicates amnemonic. See gtk_label_set_use_underline() .
	label		# a GtkLabel 
	return:		#  TRUE whether an embedded underline in the label indicatesthe mnemonic accelerator keys. 
gboolean gtk_label_get_single_line_mode (GtkLabel *label);	# Returns whether the label is in single line mode.
	label		# a GtkLabel 
	return:		#  TRUE when the label is in single line mode. 
void gtk_label_set_label (GtkLabel *label, const gchar *str);	# Sets the text of the label. The label is interpreted asincluding embedded underlines and/or Pango markup dependingon the values of the “use-underline” and“use-markup” properties.
	label		# a GtkLabel 
	str		# the new text to set for the label
void gtk_label_set_use_markup (GtkLabel *label, gboolean setting);	# Sets whether the text of the label contains markup inPango’s text markup language.See gtk_label_set_markup() .
	label		# a GtkLabel 
	setting		# TRUE if the label’s text should be parsed for markup.
void gtk_label_set_use_underline (GtkLabel *label, gboolean setting);	# If true, an underline in the text indicates the next character should beused for the mnemonic accelerator key.
	label		# a GtkLabel 
	setting		# TRUE if underlines in the text indicate mnemonics
void gtk_label_set_single_line_mode (GtkLabel *label, gboolean single_line_mode);	# Sets whether the label is in single line mode.
	label		# a GtkLabel 
	single_line_mode		# TRUE if the label should be in single line mode
gchar  *gtk_label_get_current_uri (GtkLabel *label);	# Returns the URI for the currently active link in the label.The active link is the one under the mouse pointer or, in aselectable label, the link in which the text cursor is currentlypositioned.
	label		# a GtkLabel 
	return:		#  the currently active URI. The string is owned by GTK+ and mustnot be freed or modified. 
void gtk_label_set_track_visited_links (GtkLabel *label, gboolean track_links);	# Sets whether the label should keep track of clickedlinks (and use a different color for them).
	label		# a GtkLabel 
	track_links		# TRUE to track visited links
gboolean gtk_label_get_track_visited_links (GtkLabel *label);	# Returns whether the label is currently keeping trackof clicked links.
	label		# a GtkLabel 
	return:		#  TRUE if clicked links are remembered 
GdkPixbuf  *gtk_image_get_pixbuf (GtkImage *image);	# Gets the GdkPixbuf being displayed by the GtkImage .The storage type of the image must be GTK_IMAGE_EMPTY orGTK_IMAGE_PIXBUF (see gtk_image_get_storage_type() ).The caller of this function does not own a reference to thereturned pixbuf.
	image		# a GtkImage 
	return:		#  the displayed pixbuf, or NULL ifthe image is empty.  
GdkPixbufAnimation  *gtk_image_get_animation (GtkImage *image);	# Gets the GdkPixbufAnimation being displayed by the GtkImage .The storage type of the image must be GTK_IMAGE_EMPTY orGTK_IMAGE_ANIMATION (see gtk_image_get_storage_type() ).The caller of this function does not own a reference to thereturned animation.
	image		# a GtkImage 
	return:		#  the displayed animation, or NULL ifthe image is empty.  
void gtk_image_get_icon_name (GtkImage *image, const gchar **icon_name, GtkIconSize *size);	# Gets the icon name and size being displayed by the GtkImage .The storage type of the image must be GTK_IMAGE_EMPTY orGTK_IMAGE_ICON_NAME (see gtk_image_get_storage_type() ).The returned string is owned by the GtkImage and should notbe freed.
	image		# a GtkImage 
	icon_name		#  place to store anicon name, or NULL . 
void gtk_image_get_gicon (GtkImage *image, GIcon **gicon, GtkIconSize *size);	# Gets the GIcon and size being displayed by the GtkImage .The storage type of the image must be GTK_IMAGE_EMPTY orGTK_IMAGE_GICON (see gtk_image_get_storage_type() ).The caller of this function does not own a reference to thereturned GIcon .
	image		# a GtkImage 
	gicon		#  place to store aGIcon , or NULL . 
GtkImageType gtk_image_get_storage_type (GtkImage *image);	# Gets the type of representation being used by the GtkImage to store image data. If the GtkImage has no image data,the return value will be GTK_IMAGE_EMPTY .
	image		# a GtkImage 
	return:		#  image representation being used 
GtkWidget  *gtk_image_new_from_file (const gchar *filename);	#创建对象:GtkImage displaying the file filename. If the fileisn’t found or can’t be loaded, the resulting GtkImage willdisplay a “broken image” icon. This function never returns NULL ,it always returns a valid GtkImage widget.
	filename		#  a filename. 
	return:		#  a new GtkImage  
GtkWidget  *gtk_image_new_from_pixbuf (GdkPixbuf *pixbuf);	#创建对象:GtkImage displaying pixbuf.The GtkImage does not assume a reference to thepixbuf; you still need to unref it if you own references.GtkImage will add its own reference rather than adopting yours.
	pixbuf		#  a GdkPixbuf , or NULL . 
	return:		#  a new GtkImage  
GtkWidget  *gtk_image_new_from_animation (GdkPixbufAnimation *animation);	# Creates a GtkImage displaying the given animation.The GtkImage does not assume a reference to theanimation; you still need to unref it if you own references.GtkImage will add its own reference rather than adopting yours.
	animation		# an animation
	return:		#  a new GtkImage widget 
GtkWidget  *gtk_image_new_from_icon_name (const gchar *icon_name, GtkIconSize size);	# Creates a GtkImage displaying an icon from the current icon theme.If the icon name isn’t known, a “broken image” icon will bedisplayed instead. If the current icon theme is changed, the iconwill be updated appropriately.
	icon_name		#  an icon name or NULL . 
	return:		#  a new GtkImage displaying the themed icon 
GtkWidget  *gtk_image_new_from_gicon (GIcon *icon, GtkIconSize size);	# Creates a GtkImage displaying an icon from the current icon theme.If the icon name isn’t known, a “broken image” icon will bedisplayed instead. If the current icon theme is changed, the iconwill be updated appropriately.
	icon		# an icon
	size		#  a stock icon size (GtkIconSize ). 
	return:		#  a new GtkImage displaying the themed icon 
GtkWidget  *gtk_image_new_from_resource (const gchar *resource_path);	#创建对象:GtkImage displaying the resource file resource_path. If the fileisn’t found or can’t be loaded, the resulting GtkImage willdisplay a “broken image” icon. This function never returns NULL ,it always returns a valid GtkImage widget.
	resource_path		# a resource path
	return:		#  a new GtkImage  
GtkWidget  *gtk_image_new_from_surface (cairo_surface_t *surface);	#创建对象:GtkImage displaying surface.The GtkImage does not assume a reference to thesurface; you still need to unref it if you own references.GtkImage will add its own reference rather than adopting yours.
	surface		#  a cairo_surface_t , or NULL . 
	return:		#  a new GtkImage  
void gtk_image_set_from_file (GtkImage *image, const gchar *filename);	# See gtk_image_new_from_file() for details.
	image		# a GtkImage 
	filename		#  a filename or NULL . 
void gtk_image_set_from_pixbuf (GtkImage *image, GdkPixbuf *pixbuf);	# See gtk_image_new_from_pixbuf() for details.
	image		# a GtkImage 
	pixbuf		#  a GdkPixbuf or NULL . 
void gtk_image_set_from_animation (GtkImage *image, GdkPixbufAnimation *animation);	# Causes the GtkImage to display the given animation (or displaynothing, if you set the animation to NULL ).
	image		# a GtkImage 
	animation		# the GdkPixbufAnimation 
void gtk_image_set_from_icon_name (GtkImage *image, const gchar *icon_name, GtkIconSize size);	# See gtk_image_new_from_icon_name() for details.
	image		# a GtkImage 
	icon_name		#  an icon name or NULL . 
	size		#  an icon size (GtkIconSize ). 
void gtk_image_set_from_gicon (GtkImage *image, GIcon *icon, GtkIconSize size);	# See gtk_image_new_from_gicon() for details.
	image		# a GtkImage 
	icon		# an icon
	size		#  an icon size (GtkIconSize ). 
void gtk_image_set_from_resource (GtkImage *image, const gchar *resource_path);	# See gtk_image_new_from_resource() for details.
	image		# a GtkImage 
	resource_path		#  a resource path or NULL . 
void gtk_image_set_from_surface (GtkImage *image, cairo_surface_t *surface);	# See gtk_image_new_from_surface() for details.
	image		# a GtkImage 
	surface		#  a cairo_surface_t or NULL . 
void gtk_image_clear (GtkImage *image);	# Resets the image to be empty.
	image		# a GtkImage 
GtkWidget  *gtk_image_new (void );	#创建对象:empty GtkImage widget.
	return:		#  a newly created GtkImage widget.  
void gtk_image_set_pixel_size (GtkImage *image, gint pixel_size);	# Sets the pixel size to use for named icons. If the pixel size is setto a value != -1, it is used instead of the icon size set bygtk_image_set_from_icon_name() .
	image		# a GtkImage 
	pixel_size		# the new pixel size
gint gtk_image_get_pixel_size (GtkImage *image);	# Gets the pixel size used for named icons.
	image		# a GtkImage 
	return:		#  the pixel size used for named icons. 
GtkWidget  *gtk_spinner_new (void );	# Returns a new spinner widget. Not yet started.
	return:		#  a new GtkSpinner  
void gtk_spinner_start (GtkSpinner *spinner);	# Starts the animation of the spinner.
	spinner		# a GtkSpinner 
void gtk_spinner_stop (GtkSpinner *spinner);	# Stops the animation of the spinner.
	spinner		# a GtkSpinner 
GtkWidget  *gtk_info_bar_new (void );	#创建对象:GtkInfoBar object.
	return:		#  a new GtkInfoBar object 
GtkWidget  *gtk_info_bar_new_with_buttons (const gchar *first_button_text, ...);	#创建对象:GtkInfoBar with buttons. Button text/response IDpairs should be listed, with a NULL pointer ending the list.A response ID can be any positive number,or one of the values in the GtkResponseType enumeration. If theuser clicks one of these dialog buttons, GtkInfoBar will emitthe “response” signal with the corresponding response ID.
	first_button_text		#  ext to go in first button, or NULL . 
	return:		#  a new GtkInfoBar  
void gtk_info_bar_add_action_widget (GtkInfoBar *info_bar, GtkWidget *child, gint response_id);	# Add an activatable widget to the action area of a GtkInfoBar ,connecting a signal handler that will emit the “response” signal on the message area when the widget is activated. The widgetis appended to the end of the message areas action area.
	info_bar		# a GtkInfoBar 
	child		# an activatable widget
	response_id		# response ID for child
GtkWidget  *gtk_info_bar_add_button (GtkInfoBar *info_bar, const gchar *button_text, gint response_id);	# Adds a button with the given text and sets things up so thatclicking the button will emit the “response” signal with the givenresponse_id. The button is appended to the end of the info bars'saction area. The button widget is returned, but usually you don'tneed it.
	info_bar		# a GtkInfoBar 
	button_text		# text of button
	response_id		# response ID for the button
	return:		#  the GtkButton widgetthat was added.  
void gtk_info_bar_add_buttons (GtkInfoBar *info_bar, const gchar *first_button_text, ...);	# Adds more buttons, same as calling gtk_info_bar_add_button() repeatedly. The variable argument list should be NULL -terminatedas with gtk_info_bar_new_with_buttons() . Each button must have bothtext and response ID.
	info_bar		# a GtkInfoBar 
	first_button_text		# button text
	...		# response ID for first button, then more text-response_id pairs,ending with NULL 
void gtk_info_bar_set_response_sensitive (GtkInfoBar *info_bar, gint response_id, gboolean setting);	# Calls gtk_widget_set_sensitive (widget, setting) for eachwidget in the info bars’s action area with the given response_id.A convenient way to sensitize/desensitize dialog buttons.
	info_bar		# a GtkInfoBar 
	response_id		# a response ID
	setting		# TRUE for sensitive
void gtk_info_bar_set_default_response (GtkInfoBar *info_bar, gint response_id);	# Sets the last widget in the info bar’s action area withthe given response_id as the default widget for the dialog.Pressing “Enter” normally activates the default widget.
	info_bar		# a GtkInfoBar 
	response_id		# a response ID
void gtk_info_bar_response (GtkInfoBar *info_bar, gint response_id);	# Emits the “response” signal with the given response_id.
	info_bar		# a GtkInfoBar 
	response_id		# a response ID
void gtk_info_bar_set_message_type (GtkInfoBar *info_bar, GtkMessageType message_type);	# Sets the message type of the message area.
	info_bar		# a GtkInfoBar 
	message_type		# a GtkMessageType 
GtkMessageType gtk_info_bar_get_message_type (GtkInfoBar *info_bar);	# Returns the message type of the message area.
	info_bar		# a GtkInfoBar 
	return:		#  the message type of the message area. 
GtkWidget  *gtk_info_bar_get_action_area (GtkInfoBar *info_bar);	# Returns the action area of info_bar.
	info_bar		# a GtkInfoBar 
	return:		#  the action area.  
GtkWidget  *gtk_info_bar_get_content_area (GtkInfoBar *info_bar);	# Returns the content area of info_bar.
	info_bar		# a GtkInfoBar 
	return:		#  the content area.  
gboolean gtk_info_bar_get_show_close_button (GtkInfoBar *info_bar);	# Returns whether the widget will display a standard close button.
	info_bar		# a GtkInfoBar 
	return:		#  TRUE if the widget displays standard close button 
void gtk_info_bar_set_show_close_button (GtkInfoBar *info_bar, gboolean setting);	# If true, a standard close button is shown. When clicked it emitsthe response GTK_RESPONSE_CLOSE .
	info_bar		# a GtkInfoBar 
	setting		# TRUE to include a close button
gboolean gtk_info_bar_get_revealed (GtkInfoBar *info_bar);	# info_bar
	return:		#  the current value of the GtkInfoBar:revealed property. 
void gtk_info_bar_set_revealed (GtkInfoBar *info_bar, gboolean revealed);	# Sets the GtkInfoBar:revealed property to revealed. This will causeinfo_bar to show up with a slide-in transition.
	info_bar		# a GtkActionBar 
	revealed		# The new value of the property
GtkWidget  *gtk_progress_bar_new (void );	#创建对象:GtkProgressBar .
	return:		#  a GtkProgressBar . 
void gtk_progress_bar_pulse (GtkProgressBar *pbar);	# Indicates that some progress has been made, but you don’t know how much.Causes the progress bar to enter “activity mode,” where a blockbounces back and forth. Each call to gtk_progress_bar_pulse() causes the block to move by a little bit (the amount of movementper pulse is determined by gtk_progress_bar_set_pulse_step() ).
	pbar		# a GtkProgressBar 
void gtk_progress_bar_set_fraction (GtkProgressBar *pbar, gdouble fraction);	# Causes the progress bar to “fill in” the given fractionof the bar. The fraction should be between 0.0 and 1.0,inclusive.
	pbar		# a GtkProgressBar 
	fraction		# fraction of the task that’s been completed
gdouble gtk_progress_bar_get_fraction (GtkProgressBar *pbar);	# Returns the current fraction of the task that’s been completed.
	pbar		# a GtkProgressBar 
	return:		#  a fraction from 0.0 to 1.0 
void gtk_progress_bar_set_inverted (GtkProgressBar *pbar, gboolean inverted);	# Progress bars normally grow from top to bottom or left to right.Inverted progress bars grow in the opposite direction.
	pbar		# a GtkProgressBar 
	inverted		# TRUE to invert the progress bar
gboolean gtk_progress_bar_get_inverted (GtkProgressBar *pbar);	# Gets the value set by gtk_progress_bar_set_inverted() .
	pbar		# a GtkProgressBar 
	return:		#  TRUE if the progress bar is inverted 
void gtk_progress_bar_set_show_text (GtkProgressBar *pbar, gboolean show_text);	# Sets whether the progress bar will show text next to the bar.The shown text is either the value of the “text” property or, if that is NULL , the “fraction” value,as a percentage.
	pbar		# a GtkProgressBar 
	show_text		# whether to show superimposed text
gboolean gtk_progress_bar_get_show_text (GtkProgressBar *pbar);	# Gets the value of the “show-text” property.See gtk_progress_bar_set_show_text() .
	pbar		# a GtkProgressBar 
	return:		#  TRUE if text is shown in the progress bar 
void gtk_progress_bar_set_text (GtkProgressBar *pbar, const gchar *text);	# Causes the given text to appear next to the progress bar.
	pbar		# a GtkProgressBar 
	text		#  a UTF-8 string, or NULL . 
gchar  *gtk_progress_bar_get_text (GtkProgressBar *pbar);	# Retrieves the text that is displayed with the progress bar,if any, otherwise NULL . The return value is a referenceto the text, not a copy of it, so will become invalidif you change the text in the progress bar.
	pbar		# a GtkProgressBar 
	return:		#  text, or NULL ; this string is owned by the widgetand should not be modified or freed.  
void gtk_progress_bar_set_ellipsize (GtkProgressBar *pbar, PangoEllipsizeMode mode);	# Sets the mode used to ellipsize (add an ellipsis: "...") thetext if there is not enough space to render the entire string.
	pbar		# a GtkProgressBar 
	mode		# a PangoEllipsizeMode 
PangoEllipsizeMode gtk_progress_bar_get_ellipsize (GtkProgressBar *pbar);	# Returns the ellipsizing position of the progress bar.See gtk_progress_bar_set_ellipsize() .
	pbar		# a GtkProgressBar 
	return:		#  PangoEllipsizeMode  
void gtk_progress_bar_set_pulse_step (GtkProgressBar *pbar, gdouble fraction);	# Sets the fraction of total progress bar length to move thebouncing block for each call to gtk_progress_bar_pulse() .
	pbar		# a GtkProgressBar 
	fraction		# fraction between 0.0 and 1.0
gdouble gtk_progress_bar_get_pulse_step (GtkProgressBar *pbar);	# Retrieves the pulse step set with gtk_progress_bar_set_pulse_step() .
	pbar		# a GtkProgressBar 
	return:		#  a fraction from 0.0 to 1.0 
GtkWidget  *gtk_level_bar_new (void );	#创建对象:GtkLevelBar .
	return:		#  a GtkLevelBar . 
GtkWidget  *gtk_level_bar_new_for_interval (gdouble min_value, gdouble max_value);	# Utility constructor that创建对象:GtkLevelBar for the specifiedinterval.
	min_value		# a positive value
	max_value		# a positive value
	return:		#  a GtkLevelBar  
void gtk_level_bar_set_mode (GtkLevelBar *self, GtkLevelBarMode mode);	# Sets the value of the “mode” property.
	self		# a GtkLevelBar 
	mode		# a GtkLevelBarMode 
GtkLevelBarMode gtk_level_bar_get_mode (GtkLevelBar *self);	# Returns the value of the “mode” property.
	self		# a GtkLevelBar 
	return:		#  a GtkLevelBarMode  
void gtk_level_bar_set_value (GtkLevelBar *self, gdouble value);	# Sets the value of the “value” property.
	self		# a GtkLevelBar 
	value		# a value in the interval between“min-value” and “max-value” 
gdouble gtk_level_bar_get_value (GtkLevelBar *self);	# Returns the value of the “value” property.
	self		# a GtkLevelBar 
	return:		#  a value in the interval between“min-value” and “max-value”  
void gtk_level_bar_set_min_value (GtkLevelBar *self, gdouble value);	# Sets the value of the “min-value” property.
	self		# a GtkLevelBar 
	value		# a positive value
gdouble gtk_level_bar_get_min_value (GtkLevelBar *self);	# Returns the value of the “min-value” property.
	self		# a GtkLevelBar 
	return:		#  a positive value 
void gtk_level_bar_set_max_value (GtkLevelBar *self, gdouble value);	# Sets the value of the “max-value” property.
	self		# a GtkLevelBar 
	value		# a positive value
gdouble gtk_level_bar_get_max_value (GtkLevelBar *self);	# Returns the value of the “max-value” property.
	self		# a GtkLevelBar 
	return:		#  a positive value 
void gtk_level_bar_set_inverted (GtkLevelBar *self, gboolean inverted);	# Sets the value of the “inverted” property.
	self		# a GtkLevelBar 
	inverted		# TRUE to invert the level bar
gboolean gtk_level_bar_get_inverted (GtkLevelBar *self);	# Return the value of the “inverted” property.
	self		# a GtkLevelBar 
	return:		#  TRUE if the level bar is inverted 
void gtk_level_bar_add_offset_value (GtkLevelBar *self, const gchar *name, gdouble value);	# Adds a new offset marker on self at the position specified by value.When the bar value is in the interval topped by value (or between valueand “max-value” in case the offset is the last one on the bar)a style class named level-name will be appliedwhen rendering the level bar fill.If another offset marker named name exists, its value will bereplaced by value.
	self		# a GtkLevelBar 
	name		# the name of the new offset
	value		# the value for the new offset
void gtk_level_bar_remove_offset_value (GtkLevelBar *self, const gchar *name);	# Removes an offset marker previously added withgtk_level_bar_add_offset_value() .
	self		# a GtkLevelBar 
	name		#  the name of an offset in the bar. 
gboolean gtk_level_bar_get_offset_value (GtkLevelBar *self, const gchar *name, gdouble *value);	# Fetches the value specified for the offset marker name in self,returning TRUE in case an offset named name was found.
	self		# a GtkLevelBar 
	name		#  the name of an offset in the bar. 
	return:		#  TRUE if the specified offset is found 
GtkWidget  *gtk_statusbar_new (void );	#创建对象:GtkStatusbar ready for messages.
	return:		#  the new GtkStatusbar  
guint gtk_statusbar_get_context_id (GtkStatusbar *statusbar, const gchar *context_description);	# Returns a new context identifier, given a description of the actual context. Note that the description is not shown in the UI.
	statusbar		# a GtkStatusbar 
	context_description		# textual description of what contextthe new message is being used in
	return:		#  an integer id 
guint gtk_statusbar_push (GtkStatusbar *statusbar, guint context_id, const gchar *text);	# Pushes a new message onto a statusbar’s stack.
	statusbar		# a GtkStatusbar 
	context_id		# the message’s context id, as returned by
	text		# the message to add to the statusbar
	return:		#  a message id that can be used withgtk_statusbar_remove() . 
void gtk_statusbar_pop (GtkStatusbar *statusbar, guint context_id);	# Removes the first message in the GtkStatusbar ’s stackwith the given context id. 
	statusbar		# a GtkStatusbar 
	context_id		# a context identifier
void gtk_statusbar_remove (GtkStatusbar *statusbar, guint context_id, guint message_id);	# Forces the removal of a message from a statusbar’s stack. The exact context_id and message_id must be specified.
	statusbar		# a GtkStatusbar 
	context_id		# a context identifier
	message_id		# a message identifier, as returned by 
void gtk_statusbar_remove_all (GtkStatusbar *statusbar, guint context_id);	# Forces the removal of all messages from a statusbar'sstack with the exact context_id.
	statusbar		# a GtkStatusbar 
	context_id		# a context identifier
GtkWidget  *gtk_statusbar_get_message_area (GtkStatusbar *statusbar);	# Retrieves the box containing the label widget.
	statusbar		# a GtkStatusbar 
	return:		#  a GtkBox .  
GtkWidget  *gtk_accel_label_new (const gchar *string);	#创建对象:GtkAccelLabel .
	string		# the label string. Must be non-NULL .
	return:		#  a new GtkAccelLabel . 
void gtk_accel_label_set_accel_closure (GtkAccelLabel *accel_label, GClosure *accel_closure);	# Sets the closure to be monitored by this accelerator label. The closuremust be connected to an accelerator group; see gtk_accel_group_connect() .
	accel_label		# a GtkAccelLabel 
	accel_closure		# the closure to monitor for accelerator changes.
GtkWidget  *gtk_accel_label_get_accel_widget (GtkAccelLabel *accel_label);	# Fetches the widget monitored by this accelerator label. Seegtk_accel_label_set_accel_widget() .
	accel_label		# a GtkAccelLabel 
	return:		#  the object monitored by the accelerator label, or NULL .  
void gtk_accel_label_set_accel_widget (GtkAccelLabel *accel_label, GtkWidget *accel_widget);	# Sets the widget to be monitored by this accelerator label.
	accel_label		# a GtkAccelLabel 
	accel_widget		# the widget to be monitored.
guint gtk_accel_label_get_accel_width (GtkAccelLabel *accel_label);	# Returns the width needed to display the accelerator key(s).This is used by menus to align all of the GtkMenuItem widgets, and shouldn'tbe needed by applications.
	accel_label		# a GtkAccelLabel .
	return:		#  the width needed to display the accelerator key(s). 
void gtk_accel_label_set_accel (GtkAccelLabel *accel_label, guint accelerator_key, GdkModifierType accelerator_mods);	# Manually sets a keyval and modifier mask as the accelerator renderedby accel_label.
	accel_label		# a GtkAccelLabel 
	accelerator_key		# a keyval, or 0
	accelerator_mods		# the modifier mask for the accel
void gtk_accel_label_get_accel (GtkAccelLabel *accel_label, guint *accelerator_key, GdkModifierType *accelerator_mods);	# Gets the keyval and modifier mask set withgtk_accel_label_set_accel() .
	accel_label		# a GtkAccelLabel 
	accelerator_key		#  return location for the keyval. 
gboolean gtk_accel_label_refetch (GtkAccelLabel *accel_label);	# Recreates the string representing the accelerator keys.This should not be needed since the string is automatically updated wheneveraccelerators are added or removed from the associated widget.
	accel_label		# a GtkAccelLabel .
	return:		#  always returns FALSE . 
GtkWidget  *gtk_button_new (void );	#创建对象:GtkButton widget. To add a child widget to the button,use gtk_container_add() .
	return:		#  The newly created GtkButton widget. 
GtkWidget  *gtk_button_new_with_label (const gchar *label);	# Creates a GtkButton widget with a GtkLabel child containing the giventext.
	label		# The text you want the GtkLabel to hold.
	return:		#  The newly created GtkButton widget. 
GtkWidget  *gtk_button_new_with_mnemonic (const gchar *label);	#创建对象:GtkButton containing a label.If characters in label are preceded by an underscore, they are underlined.If you need a literal underscore character in a label, use “__” (twounderscores). The first underlined character represents a keyboardaccelerator called a mnemonic.Pressing Alt and that key activates the button.
	label		# The text of the button, with an underscore in front of themnemonic character
	return:		#  a new GtkButton  
GtkWidget  *gtk_button_new_from_icon_name (const gchar *icon_name, GtkIconSize size);	#创建对象:button containing an icon from the current icon theme.
	icon_name		#  an icon name or NULL . 
	return:		#  a new GtkButton displaying the themed icon 
void gtk_button_clicked (GtkButton *button);	# Emits a “clicked” signal to the given GtkButton .
	button		# The GtkButton you want to send the signal to.
void gtk_button_set_relief (GtkButton *button, GtkReliefStyle relief);	# Sets the relief style of the edges of the given GtkButton widget.Two styles exist, GTK_RELIEF_NORMAL and GTK_RELIEF_NONE .The default style is, as one can guess, GTK_RELIEF_NORMAL .
	button		# The GtkButton you want to set relief styles of
	relief		# The GtkReliefStyle as described above
GtkReliefStyle gtk_button_get_relief (GtkButton *button);	# Returns the current relief style of the given GtkButton .
	button		# The GtkButton you want the GtkReliefStyle from.
	return:		#  The current GtkReliefStyle  
gchar  *gtk_button_get_label (GtkButton *button);	# Fetches the text from the label of the button, as set bygtk_button_set_label() . If the label text has notbeen set the return value will be NULL . This will be thecase if you create an empty button with gtk_button_new() touse as a container.
	button		# a GtkButton 
	return:		#  The text of the label widget. This string is ownedby the widget and must not be modified or freed.  
void gtk_button_set_label (GtkButton *button, const gchar *label);	# Sets the text of the label of the button to label.
	button		# a GtkButton 
	label		# a string
gboolean gtk_button_get_use_underline (GtkButton *button);	# Returns whether an embedded underline in the button label indicates amnemonic. See gtk_button_set_use_underline() .
	button		# a GtkButton 
	return:		#  TRUE if an embedded underline in the button labelindicates the mnemonic accelerator keys. 
void gtk_button_set_use_underline (GtkButton *button, gboolean use_underline);	# If true, an underline in the text of the button label indicatesthe next character should be used for the mnemonic accelerator key.
	button		# a GtkButton 
	use_underline		# TRUE if underlines in the text indicate mnemonics
void gtk_button_set_icon_name (GtkButton *button, const char *icon_name);	# Adds a GtkImage with the given icon name as a child. The icon will beof size GTK_ICON_SIZE_BUTTON. If button already contains a child widget,that child widget will be removed and replaced with the image.
	button		# A GtkButton 
	icon_name		# A icon name
char  *gtk_button_get_icon_name (GtkButton *button);	# Returns the icon name set via gtk_button_set_icon_name() .
	button		# A GtkButton 
	return:		#  The icon name set via gtk_button_set_icon_name() .  
GtkWidget  *gtk_check_button_new (void );	#创建对象:GtkCheckButton .
	return:		#  a GtkWidget . 
GtkWidget  *gtk_check_button_new_with_label (const gchar *label);	#创建对象:GtkCheckButton with a GtkLabel to the right of it.
	label		# the text for the check button.
	return:		#  a GtkWidget . 
GtkWidget  *gtk_check_button_new_with_mnemonic (const gchar *label);	#创建对象:GtkCheckButton containing a label. The labelwill be created using gtk_label_new_with_mnemonic() , so underscoresin label indicate the mnemonic for the check button.
	label		# The text of the button, with an underscore in front of themnemonic character
	return:		#  a new GtkCheckButton  
gboolean gtk_check_button_get_draw_indicator (GtkCheckButton *check_button);	# Returns Whether or not the indicator part of the button gets drawn.
	check_button		# a GtkCheckButton 
	return:		#  The value of the GtkCheckButton:draw-indicator property. 
void gtk_check_button_set_draw_indicator (GtkCheckButton *check_button, gboolean draw_indicator);	# Sets whether the indicator part of the button is drawn. This is important forcases where the check button should have the functinality of a check button,but the visuals of a regular button, like in a GtkStackSwitcher .
	check_button		# a GtkCheckButton 
	draw_indicator		# Whether or not to draw the indicator part of the button
gboolean gtk_check_button_get_inconsistent (GtkCheckButton *check_button);	# check_button
	return:		#  TRUE if check_buttonis currently in an 'in between' state,FALSE otherwise. 
void gtk_check_button_set_inconsistent (GtkCheckButton *check_button, gboolean inconsistent);	# If the user has selected a range of elements (such as some text orspreadsheet cells) that are affected by a check button, and thecurrent values in that range are inconsistent, you may want todisplay the toggle in an "in between" state. Normally you wouldturn off the inconsistent state again if the user checks thecheck button. This has to be done manually,gtk_check_button_set_inconsistent only affects visual appearance,not the semantics of the button.
	check_button		# a GtkCheckButton 
	inconsistent		# TRUE if state is inconsistent
GtkWidget  *gtk_radio_button_new (GSList *group);	#创建对象:GtkRadioButton . To be of any practical value, a widget shouldthen be packed into the radio button.
	group		#  an existingradio button group, or NULL if you are creating a new group. 
	return:		#  a new radio button 
GtkWidget  *gtk_radio_button_new_from_widget (GtkRadioButton *radio_group_member);	#创建对象:GtkRadioButton , adding it to the same group asradio_group_member. As with gtk_radio_button_new() , a widgetshould be packed into the radio button.
	radio_group_member		#  an existing GtkRadioButton . 
	return:		#  a new radio button.  
GtkWidget  *gtk_radio_button_new_with_label (GSList *group, const gchar *label);	#创建对象:GtkRadioButton with a text label.
	group		#  an existingradio button group, or NULL if you are creating a new group. 
	return:		#  a new radio button. 
GtkWidget  *gtk_radio_button_new_with_label_from_widget (GtkRadioButton *radio_group_member, const gchar *label);	#创建对象:GtkRadioButton with a text label, adding it tothe same group as radio_group_member.
	radio_group_member		#  widget to get radio group from or NULL . 
	return:		#  a new radio button.  
GtkWidget  *gtk_radio_button_new_with_mnemonic (GSList *group, const gchar *label);	#创建对象:GtkRadioButton containing a label, adding it to the samegroup as group. The label will be created usinggtk_label_new_with_mnemonic() , so underscores in label indicate themnemonic for the button.
	group		#  the radio buttongroup, or NULL . 
	return:		#  a new GtkRadioButton  
GtkWidget  *gtk_radio_button_new_with_mnemonic_from_widget (GtkRadioButton *radio_group_member, const gchar *label);	#创建对象:GtkRadioButton containing a label. The labelwill be created using gtk_label_new_with_mnemonic() , so underscoresin label indicate the mnemonic for the button.
	radio_group_member		#  widget to get radio group from or NULL . 
	return:		#  a new GtkRadioButton .  
void gtk_radio_button_set_group (GtkRadioButton *radio_button, GSList *group);	# Sets a GtkRadioButton ’s group. It should be noted that this does not changethe layout of your interface in any way, so if you are changing the group,it is likely you will need to re-arrange the user interface to reflect thesechanges.
	radio_button		# a GtkRadioButton .
	group		#  an existing radiobutton group, such as one returned from 
GSList  *gtk_radio_button_get_group (GtkRadioButton *radio_button);	# Retrieves the group assigned to a radio button.
	radio_button		# a GtkRadioButton .
	return:		#  a linked listcontaining all the radio buttons in the same groupas radio_button. The returned list is owned by the radio buttonand must not be modified or freed.  
void gtk_radio_button_join_group (GtkRadioButton *radio_button, GtkRadioButton *group_source);	# Joins a GtkRadioButton object to the group of another GtkRadioButton object
	radio_button		# the GtkRadioButton object
	group_source		#  a radio button object whos group we arejoining, or NULL to remove the radio button from its group. 
GtkWidget  *gtk_toggle_button_new (void );	#创建对象:toggle button. A widget should be packed into the button, as in gtk_button_new() .
	return:		#  a new toggle button. 
GtkWidget  *gtk_toggle_button_new_with_label (const gchar *label);	#创建对象:toggle button with a text label.
	label		# a string containing the message to be placed in the toggle button.
	return:		#  a new toggle button. 
GtkWidget  *gtk_toggle_button_new_with_mnemonic (const gchar *label);	#创建对象:GtkToggleButton containing a label. The labelwill be created using gtk_label_new_with_mnemonic() , so underscoresin label indicate the mnemonic for the button.
	label		# the text of the button, with an underscore in front of themnemonic character
	return:		#  a new GtkToggleButton  
void gtk_toggle_button_toggled (GtkToggleButton *toggle_button);	# Emits the “toggled” signal on theGtkToggleButton . There is no good reason for anapplication ever to call this function.
	toggle_button		# a GtkToggleButton .
gboolean gtk_toggle_button_get_active (GtkToggleButton *toggle_button);	# Queries a GtkToggleButton and returns its current state. Returns TRUE ifthe toggle button is pressed in and FALSE if it is raised.
	toggle_button		# a GtkToggleButton .
	return:		#  a gboolean value. 
void gtk_toggle_button_set_active (GtkToggleButton *toggle_button, gboolean is_active);	# Sets the status of the toggle button. Set to TRUE if you want theGtkToggleButton to be “pressed in”, and FALSE to raise it.This action causes the “toggled” signal and the“clicked” signal to be emitted.
	toggle_button		# a GtkToggleButton .
	is_active		# TRUE or FALSE .
GtkWidget  *gtk_link_button_new (const gchar *uri);	#创建对象:GtkLinkButton with the URI as its text.
	uri		# a valid URI
	return:		#  a new link button widget. 
GtkWidget  *gtk_link_button_new_with_label (const gchar *uri, const gchar *label);	#创建对象:GtkLinkButton containing a label.
	uri		# a valid URI
	label		#  the text of the button. 
	return:		#  a new link button widget.  
gchar  *gtk_link_button_get_uri (GtkLinkButton *link_button);	# Retrieves the URI set using gtk_link_button_set_uri() .
	link_button		# a GtkLinkButton 
	return:		#  a valid URI. The returned string is owned by the link buttonand should not be modified or freed. 
void gtk_link_button_set_uri (GtkLinkButton *link_button, const gchar *uri);	# Sets uri as the URI where the GtkLinkButton points. As a side-effectthis unsets the “visited” state of the button.
	link_button		# a GtkLinkButton 
	uri		# a valid URI
gboolean gtk_link_button_get_visited (GtkLinkButton *link_button);	# Retrieves the “visited” state of the URI where the GtkLinkButton points. The button becomes visited when it is clicked. If the URIis changed on the button, the “visited” state is unset again.
	link_button		# a GtkLinkButton 
	return:		#  TRUE if the link has been visited, FALSE otherwise 
void gtk_link_button_set_visited (GtkLinkButton *link_button, gboolean visited);	# Sets the “visited” state of the URI where the GtkLinkButton points. See gtk_link_button_get_visited() for more details.
	link_button		# a GtkLinkButton 
	visited		# the new “visited” state
GtkWidget  *gtk_menu_button_new (void );	#创建对象:GtkMenuButton widget with downwards-pointingarrow as the only child. You can replace the child widgetwith another GtkWidget should you wish to.
	return:		#  The newly created GtkMenuButton widget 
void gtk_menu_button_set_popup (GtkMenuButton *menu_button, GtkWidget *menu);	# Sets the GtkMenu that will be popped up when the button is clicked,or NULL to disable the button. If “menu-model” or“popover” are set, they will be set to NULL .
	menu_button		# a GtkMenuButton 
	menu		#  a GtkMenu . 
GtkMenu  *gtk_menu_button_get_popup (GtkMenuButton *menu_button);	# Returns the GtkMenu that pops out of the button.If the button does not use a GtkMenu , this functionreturns NULL .
	menu_button		# a GtkMenuButton 
	return:		#  a GtkMenu or NULL .  
void gtk_menu_button_set_popover (GtkMenuButton *menu_button, GtkWidget *popover);	# Sets the GtkPopover that will be popped up when the button isclicked, or NULL to disable the button. If “menu-model” or “popup” are set, they will be set to NULL .
	menu_button		# a GtkMenuButton 
	popover		#  a GtkPopover . 
GtkPopover  *gtk_menu_button_get_popover (GtkMenuButton *menu_button);	# Returns the GtkPopover that pops out of the button.If the button is not using a GtkPopover , this functionreturns NULL .
	menu_button		# a GtkMenuButton 
	return:		#  a GtkPopover or NULL .  
void gtk_menu_button_set_menu_model (GtkMenuButton *menu_button, GMenuModel *menu_model);	# Sets the GMenuModel from which the popup will be constructed,or NULL to disable the button.
	menu_button		# a GtkMenuButton 
	menu_model		#  a GMenuModel . 
GMenuModel  *gtk_menu_button_get_menu_model (GtkMenuButton *menu_button);	# Returns the GMenuModel used to generate the popup.
	menu_button		# a GtkMenuButton 
	return:		#  a GMenuModel or NULL .  
void gtk_menu_button_set_use_popover (GtkMenuButton *menu_button, gboolean use_popover);	# Sets whether to construct a GtkPopover instead of GtkMenu when gtk_menu_button_set_menu_model() is called. Note thatthis property is only consulted when a new menu model is set.
	menu_button		# a GtkMenuButton 
	use_popover		# TRUE to construct a popover from the menu model
gboolean gtk_menu_button_get_use_popover (GtkMenuButton *menu_button);	# Returns whether a GtkPopover or a GtkMenu will be constructedfrom the menu model.
	menu_button		# a GtkMenuButton 
	return:		#  TRUE if using a GtkPopover  
void gtk_menu_button_set_direction (GtkMenuButton *menu_button, GtkArrowType direction);	# Sets the direction in which the popup will be popped up, aswell as changing the arrow’s direction. The child will notbe changed to an arrow if it was customized.
	menu_button		# a GtkMenuButton 
	direction		# a GtkArrowType 
GtkArrowType gtk_menu_button_get_direction (GtkMenuButton *menu_button);	# Returns the direction the popup will be pointing at when popped up.
	menu_button		# a GtkMenuButton 
	return:		#  a GtkArrowType value 
void gtk_menu_button_set_align_widget (GtkMenuButton *menu_button, GtkWidget *align_widget);	# Sets the GtkWidget to use to line the menu with when popped up.Note that the align_widget must contain the GtkMenuButton itself.
	menu_button		# a GtkMenuButton 
	align_widget		#  a GtkWidget . 
GtkWidget  *gtk_menu_button_get_align_widget (GtkMenuButton *menu_button);	# Returns the parent GtkWidget to use to line up with menu.
	menu_button		# a GtkMenuButton 
	return:		#  a GtkWidget value or NULL .  
GtkWidget  *gtk_switch_new (void );	#创建对象:GtkSwitch widget.
	return:		#  the newly created GtkSwitch instance 
void gtk_switch_set_active (GtkSwitch *sw, gboolean is_active);	# Changes the state of sw to the desired one.
	sw		# a GtkSwitch 
	is_active		# TRUE if swshould be active, and FALSE otherwise
gboolean gtk_switch_get_active (GtkSwitch *sw);	# Gets whether the GtkSwitch is in its “on” or “off” state.
	sw		# a GtkSwitch 
	return:		#  TRUE if the GtkSwitch is active, and FALSE otherwise 
void gtk_switch_set_state (GtkSwitch *sw, gboolean state);	# Sets the underlying state of the GtkSwitch .
	sw		# a GtkSwitch 
	state		# the new state
gboolean gtk_switch_get_state (GtkSwitch *sw);	# Gets the underlying state of the GtkSwitch .
	sw		# a GtkSwitch 
	return:		#  the underlying state 
GtkWidget  *gtk_scale_button_new (GtkIconSize size, gdouble min, gdouble max, gdouble step, const gchar **icons);	# Creates a GtkScaleButton , with a range between min and max, witha stepping of step.
	size		#  a stock icon size (GtkIconSize ). 
	return:		#  a new GtkScaleButton  
void gtk_scale_button_set_adjustment (GtkScaleButton *button, GtkAdjustment *adjustment);	# Sets the GtkAdjustment to be used as a modelfor the GtkScaleButton ’s scale.See gtk_range_set_adjustment() for details.
	button		# a GtkScaleButton 
	adjustment		# a GtkAdjustment 
void gtk_scale_button_set_icons (GtkScaleButton *button, const gchar **icons);	# Sets the icons to be used by the scale button.For details, see the “icons” property.
	button		# a GtkScaleButton 
	icons		#  a NULL -terminated array of icon names. 
void gtk_scale_button_set_value (GtkScaleButton *button, gdouble value);	# Sets the current value of the scale; if the value is outsidethe minimum or maximum range values, it will be clamped to fitinside them. The scale button emits the “value-changed” signal if the value changes.
	button		# a GtkScaleButton 
	value		# new value of the scale button
GtkAdjustment  *gtk_scale_button_get_adjustment (GtkScaleButton *button);	# Gets the GtkAdjustment associated with the GtkScaleButton ’s scale.See gtk_range_get_adjustment() for details.
	button		# a GtkScaleButton 
	return:		#  the adjustment associated with the scale.  
gdouble gtk_scale_button_get_value (GtkScaleButton *button);	# Gets the current value of the scale button.
	button		# a GtkScaleButton 
	return:		#  current value of the scale button 
GtkWidget  *gtk_scale_button_get_popup (GtkScaleButton *button);	# Retrieves the popup of the GtkScaleButton .
	button		# a GtkScaleButton 
	return:		#  the popup of the GtkScaleButton .  
GtkWidget  *gtk_scale_button_get_plus_button (GtkScaleButton *button);	# Retrieves the plus button of the GtkScaleButton .
	button		# a GtkScaleButton 
	return:		#  the plus button of the GtkScaleButton as a GtkButton .  
GtkWidget  *gtk_scale_button_get_minus_button (GtkScaleButton *button);	# Retrieves the minus button of the GtkScaleButton .
	button		# a GtkScaleButton 
	return:		#  the minus button of the GtkScaleButton as a GtkButton .  
GtkWidget  *gtk_volume_button_new (void );	# Creates a GtkVolumeButton , with a range between 0.0 and 1.0, witha stepping of 0.02. Volume values can be obtained and modified usingthe functions from GtkScaleButton .
	return:		#  a new GtkVolumeButton  
GtkWidget  *gtk_lock_button_new (GPermission *permission);	#创建对象:lock button which reflects the permission.
	permission		#  a GPermission . 
	return:		#  a new GtkLockButton  
GPermission  *gtk_lock_button_get_permission (GtkLockButton *button);	# Obtains the GPermission object that controls button.
	button		# a GtkLockButton 
	return:		#  the GPermission of button.  
void gtk_lock_button_set_permission (GtkLockButton *button, GPermission *permission);	# Sets the GPermission object that controls button.
	button		# a GtkLockButton 
	permission		#  a GPermission object, or NULL . 
GtkWidget  *gtk_model_button_new (void );	#创建对象:GtkModelButton.
	return:		#  the newly created GtkModelButton widget 
GtkWidget  *gtk_entry_new (void );	#创建对象:entry.
	return:		#  a new GtkEntry . 
GtkWidget  *gtk_entry_new_with_buffer (GtkEntryBuffer *buffer);	#创建对象:entry with the specified text buffer.
	buffer		# The buffer to use for the new GtkEntry .
	return:		#  a new GtkEntry  
GtkEntryBuffer  *gtk_entry_get_buffer (GtkEntry *entry);	# Get the GtkEntryBuffer object which holds the text forthis widget.
	entry		# a GtkEntry 
	return:		#  A GtkEntryBuffer object.  
void gtk_entry_set_buffer (GtkEntry *entry, GtkEntryBuffer *buffer);	# Set the GtkEntryBuffer object which holds the text forthis widget.
	entry		# a GtkEntry 
	buffer		# a GtkEntryBuffer 
void gtk_entry_set_text (GtkEntry *entry, const gchar *text);	# Sets the text in the widget to the givenvalue, replacing the current contents.
	entry		# a GtkEntry 
	text		# the new text
gchar  *gtk_entry_get_text (GtkEntry *entry);	# Retrieves the contents of the entry widget.See also gtk_editable_get_chars() .
	entry		# a GtkEntry 
	return:		#  a pointer to the contents of the widget as astring. This string points to internally allocatedstorage in the widget and must not be freed, modified orstored. 
guint16 gtk_entry_get_text_length (GtkEntry *entry);	# Retrieves the current length of the text inentry. 
	entry		# a GtkEntry 
	return:		#  the current number of charactersin GtkEntry , or 0 if there are none. 
void gtk_entry_set_visibility (GtkEntry *entry, gboolean visible);	# Sets whether the contents of the entry are visible or not.When visibility is set to FALSE , characters are displayedas the invisible char, and will also appear that way whenthe text in the entry widget is copied elsewhere.
	entry		# a GtkEntry 
	visible		# TRUE if the contents of the entry are displayedas plaintext
gboolean gtk_entry_get_visibility (GtkEntry *entry);	# Retrieves whether the text in entry is visible. Seegtk_entry_set_visibility() .
	entry		# a GtkEntry 
	return:		#  TRUE if the text is currently visible 
void gtk_entry_set_invisible_char (GtkEntry *entry, gunichar ch);	# Sets the character to use in place of the actual text whengtk_entry_set_visibility() has been called to set text visibilityto FALSE . i.e. this is the character used in “password mode” toshow the user how many characters have been typed. By default, GTK+picks the best invisible char available in the current font. If youset the invisible char to 0, then the user will get no feedbackat all; there will be no text on the screen as they type.
	entry		# a GtkEntry 
	ch		# a Unicode character
gunichar gtk_entry_get_invisible_char (GtkEntry *entry);	# Retrieves the character displayed in place of the real charactersfor entries with visibility set to false. See gtk_entry_set_invisible_char() .
	entry		# a GtkEntry 
	return:		#  the current invisible char, or 0, if the entry does notshow invisible text at all.  
void gtk_entry_unset_invisible_char (GtkEntry *entry);	# Unsets the invisible char previously set withgtk_entry_set_invisible_char() . So that thedefault invisible char is used again.
	entry		# a GtkEntry 
void gtk_entry_set_max_length (GtkEntry *entry, gint max);	# Sets the maximum allowed length of the contents of the widget. Ifthe current contents are longer than the given length, then theywill be truncated to fit.
	entry		# a GtkEntry 
	max		# the maximum length of the entry, or 0 for no maximum.(other than the maximum length of entries.) The value passed in willbe clamped to the range 0-65536.
gint gtk_entry_get_max_length (GtkEntry *entry);	# Retrieves the maximum allowed length of the text inentry. See gtk_entry_set_max_length() .
	entry		# a GtkEntry 
	return:		#  the maximum allowed number of charactersin GtkEntry , or 0 if there is no maximum. 
void gtk_entry_set_activates_default (GtkEntry *entry, gboolean setting);	# If setting is TRUE , pressing Enter in the entry will activate the defaultwidget for the window containing the entry. This usually means thatthe dialog box containing the entry will be closed, since the defaultwidget is usually one of the dialog buttons.
	entry		# a GtkEntry 
	setting		# TRUE to activate window’s default widget on Enter keypress
gboolean gtk_entry_get_activates_default (GtkEntry *entry);	# Retrieves the value set by gtk_entry_set_activates_default() .
	entry		# a GtkEntry 
	return:		#  TRUE if the entry will activate the default widget 
void gtk_entry_set_has_frame (GtkEntry *entry, gboolean setting);	# Sets whether the entry has a beveled frame around it.
	entry		# a GtkEntry 
	setting		# new value
gboolean gtk_entry_get_has_frame (GtkEntry *entry);	# Gets the value set by gtk_entry_set_has_frame() .
	entry		# a GtkEntry 
	return:		#  whether the entry has a beveled frame 
void gtk_entry_set_width_chars (GtkEntry *entry, gint n_chars);	# Changes the size request of the entry to be about the right sizefor n_chars characters. Note that it changes the sizerequest, the size can still be affected byhow you pack the widget into containers. If n_chars is -1, thesize reverts to the default entry size.
	entry		# a GtkEntry 
	n_chars		# width in chars
gint gtk_entry_get_width_chars (GtkEntry *entry);	# Gets the value set by gtk_entry_set_width_chars() .
	entry		# a GtkEntry 
	return:		#  number of chars to request space for, or negative if unset 
void gtk_entry_set_max_width_chars (GtkEntry *entry, gint n_chars);	# Sets the desired maximum width in characters of entry.
	entry		# a GtkEntry 
	n_chars		# the new desired maximum width, in characters
gint gtk_entry_get_max_width_chars (GtkEntry *entry);	# Retrieves the desired maximum width of entry, in characters.See gtk_entry_set_max_width_chars() .
	entry		# a GtkEntry 
	return:		#  the maximum width of the entry, in characters 
void gtk_entry_set_alignment (GtkEntry *entry, gfloat xalign);	# Sets the alignment for the contents of the entry. This controlsthe horizontal positioning of the contents when the displayedtext is shorter than the width of the entry.
	entry		# a GtkEntry 
	xalign		# The horizontal alignment, from 0 (left) to 1 (right).Reversed for RTL layouts
gfloat gtk_entry_get_alignment (GtkEntry *entry);	# Gets the value set by gtk_entry_set_alignment() .
	entry		# a GtkEntry 
	return:		#  the alignment 
void gtk_entry_set_placeholder_text (GtkEntry *entry, const gchar *text);	# Sets text to be displayed in entry when it is empty and unfocused.This can be used to give a visual hint of the expected contents ofthe GtkEntry .
	entry		# a GtkEntry 
	text		#  a string to be displayed when entryis empty and unfocused, or NULL . 
gchar  *gtk_entry_get_placeholder_text (GtkEntry *entry);	# Retrieves the text that will be displayed when entry is empty and unfocused
	entry		# a GtkEntry 
	return:		#  a pointer to the placeholder text as a string. This string points to internally allocatedstorage in the widget and must not be freed, modified or stored. 
void gtk_entry_set_overwrite_mode (GtkEntry *entry, gboolean overwrite);	# Sets whether the text is overwritten when typing in the GtkEntry .
	entry		# a GtkEntry 
	overwrite		# new value
gboolean gtk_entry_get_overwrite_mode (GtkEntry *entry);	# Gets the value set by gtk_entry_set_overwrite_mode() .
	entry		# a GtkEntry 
	return:		#  whether the text is overwritten when typing. 
PangoLayout  *gtk_entry_get_layout (GtkEntry *entry);	# Gets the PangoLayout used to display the entry.The layout is useful to e.g. convert text positions topixel positions, in combination with gtk_entry_get_layout_offsets() .The returned layout is owned by the entry and must not be modified or freed by the caller.
	entry		# a GtkEntry 
	return:		#  the PangoLayout for this entry.  
void gtk_entry_get_layout_offsets (GtkEntry *entry, gint *x, gint *y);	# Obtains the position of the PangoLayout used to render textin the entry, in widget coordinates. Useful if you want to lineup the text in an entry with some other text, e.g. when using theentry to implement editable cells in a sheet widget.
	entry		# a GtkEntry 
	x		#  location to store X offset of layout, or NULL . 
gint gtk_entry_layout_index_to_text_index (GtkEntry *entry, gint layout_index);	# Converts from a position in the entry’s PangoLayout (returned bygtk_entry_get_layout() ) to a position in the entry contents(returned by gtk_entry_get_text() ).
	entry		# a GtkEntry 
	layout_index		# byte index into the entry layout text
	return:		#  byte index into the entry contents 
gint gtk_entry_text_index_to_layout_index (GtkEntry *entry, gint text_index);	# Converts from a position in the entry contents (returnedby gtk_entry_get_text() ) to a position in theentry’s PangoLayout (returned by gtk_entry_get_layout() ,with text retrieved via pango_layout_get_text() ).
	entry		# a GtkEntry 
	text_index		# byte index into the entry contents
	return:		#  byte index into the entry layout text 
void gtk_entry_set_attributes (GtkEntry *entry, PangoAttrList *attrs);	# Sets a PangoAttrList ; the attributes in the list are applied to theentry text.
	entry		# a GtkEntry 
	attrs		# a PangoAttrList 
PangoAttrList  *gtk_entry_get_attributes (GtkEntry *entry);	# Gets the attribute list that was set on the entry usinggtk_entry_set_attributes() , if any.
	entry		# a GtkEntry 
	return:		#  the attribute list, or NULL if none was set.  
void gtk_entry_set_completion (GtkEntry *entry, GtkEntryCompletion *completion);	# Sets completion to be the auxiliary completion object to use with entry.All further configuration of the completion mechanism is done oncompletion using the GtkEntryCompletion API. Completion is disabled ifcompletion is set to NULL .
	entry		# A GtkEntry 
	completion		#  The GtkEntryCompletion or NULL . 
GtkEntryCompletion  *gtk_entry_get_completion (GtkEntry *entry);	# Returns the auxiliary completion object currently in use by entry.
	entry		# A GtkEntry 
	return:		#  The auxiliary completion object currentlyin use by entry.  
void gtk_entry_set_cursor_hadjustment (GtkEntry *entry, GtkAdjustment *adjustment);	# Hooks up an adjustment to the cursor position in an entry, so that when the cursor is moved, the adjustment is scrolled to show that position. See gtk_scrolled_window_get_hadjustment() for a typical way of obtaining the adjustment.
	entry		# a GtkEntry 
	adjustment		#  an adjustment which should be adjusted when the cursoris moved, or NULL . 
GtkAdjustment  *gtk_entry_get_cursor_hadjustment (GtkEntry *entry);	# Retrieves the horizontal cursor adjustment for the entry. See gtk_entry_set_cursor_hadjustment() .
	entry		# a GtkEntry 
	return:		#  the horizontal cursor adjustment, or NULL if none has been set.  
void gtk_entry_set_progress_fraction (GtkEntry *entry, gdouble fraction);	# Causes the entry’s progress indicator to “fill in” the givenfraction of the bar. The fraction should be between 0.0 and 1.0,inclusive.
	entry		# a GtkEntry 
	fraction		# fraction of the task that’s been completed
gdouble gtk_entry_get_progress_fraction (GtkEntry *entry);	# Returns the current fraction of the task that’s been completed.See gtk_entry_set_progress_fraction() .
	entry		# a GtkEntry 
	return:		#  a fraction from 0.0 to 1.0 
void gtk_entry_set_progress_pulse_step (GtkEntry *entry, gdouble fraction);	# Sets the fraction of total entry width to move the progressbouncing block for each call to gtk_entry_progress_pulse() .
	entry		# a GtkEntry 
	fraction		# fraction between 0.0 and 1.0
gdouble gtk_entry_get_progress_pulse_step (GtkEntry *entry);	# Retrieves the pulse step set with gtk_entry_set_progress_pulse_step() .
	entry		# a GtkEntry 
	return:		#  a fraction from 0.0 to 1.0 
void gtk_entry_progress_pulse (GtkEntry *entry);	# Indicates that some progress is made, but you don’t know how much.Causes the entry’s progress indicator to enter “activity mode,”where a block bounces back and forth. Each call togtk_entry_progress_pulse() causes the block to move by a little bit(the amount of movement per pulse is determined bygtk_entry_set_progress_pulse_step() ).
	entry		# a GtkEntry 
gboolean gtk_entry_im_context_filter_keypress (GtkEntry *entry, GdkEventKey *event);	# Allow the GtkEntry input method to internally handle key pressand release events. If this function returns TRUE , then no furtherprocessing should be done for this key event. Seegtk_im_context_filter_keypress() .
	entry		# a GtkEntry 
	event		#  the key event. 
	return:		#  TRUE if the input method handled the key event. 
void gtk_entry_reset_im_context (GtkEntry *entry);	# Reset the input method context of the entry if needed.
	entry		# a GtkEntry 
void gtk_entry_set_tabs (GtkEntry *entry, PangoTabArray *tabs);	# Sets a PangoTabArray ; the tabstops in the array are applied to the entrytext.
	entry		# a GtkEntry 
	tabs		# a PangoTabArray 
PangoTabArray  *gtk_entry_get_tabs (GtkEntry *entry);	# Gets the tabstops that were set on the entry using gtk_entry_set_tabs() , ifany.
	entry		# a GtkEntry 
	return:		#  the tabstops, or NULL if none was set.  
void gtk_entry_set_icon_from_pixbuf (GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkPixbuf *pixbuf);	# Sets the icon shown in the specified position using a pixbuf.
	entry		# a GtkEntry 
	icon_pos		# Icon position
	pixbuf		#  A GdkPixbuf , or NULL . 
void gtk_entry_set_icon_from_icon_name (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *icon_name);	# Sets the icon shown in the entry at the specified positionfrom the current icon theme.
	entry		# A GtkEntry 
	icon_pos		# The position at which to set the icon
	icon_name		#  An icon name, or NULL . 
void gtk_entry_set_icon_from_gicon (GtkEntry *entry, GtkEntryIconPosition icon_pos, GIcon *icon);	# Sets the icon shown in the entry at the specified positionfrom the current icon theme.If the icon isn’t known, a “broken image” icon will be displayedinstead.
	entry		# A GtkEntry 
	icon_pos		# The position at which to set the icon
	icon		#  The icon to set, or NULL . 
GtkImageType gtk_entry_get_icon_storage_type (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Gets the type of representation being used by the iconto store image data. If the icon has no image data,the return value will be GTK_IMAGE_EMPTY .
	entry		# a GtkEntry 
	icon_pos		# Icon position
	return:		#  image representation being used 
GdkPixbuf  *gtk_entry_get_icon_pixbuf (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Retrieves the image used for the icon.
	entry		# A GtkEntry 
	icon_pos		# Icon position
	return:		#  A GdkPixbuf , or NULL if no icon isset for this position.  
gchar  *gtk_entry_get_icon_name (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Retrieves the icon name used for the icon, or NULL if there isno icon or if the icon was set by some other method (e.g., bypixbuf, stock or gicon).
	entry		# A GtkEntry 
	icon_pos		# Icon position
	return:		#  An icon name, or NULL if no icon is set or if the iconwasn’t set from an icon name.  
GIcon  *gtk_entry_get_icon_gicon (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Retrieves the GIcon used for the icon, or NULL if there isno icon or if the icon was set by some other method (e.g., bystock, pixbuf, or icon name).
	entry		# A GtkEntry 
	icon_pos		# Icon position
	return:		#  A GIcon , or NULL if no icon is setor if the icon is not a GIcon .  
void gtk_entry_set_icon_activatable (GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean activatable);	# Sets whether the icon is activatable.
	entry		# A GtkEntry 
	icon_pos		# Icon position
	activatable		# TRUE if the icon should be activatable
gboolean gtk_entry_get_icon_activatable (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Returns whether the icon is activatable.
	entry		# a GtkEntry 
	icon_pos		# Icon position
	return:		#  TRUE if the icon is activatable. 
void gtk_entry_set_icon_sensitive (GtkEntry *entry, GtkEntryIconPosition icon_pos, gboolean sensitive);	# Sets the sensitivity for the specified icon.
	entry		# A GtkEntry 
	icon_pos		# Icon position
	sensitive		# Specifies whether the icon should appearsensitive or insensitive
gboolean gtk_entry_get_icon_sensitive (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Returns whether the icon appears sensitive or insensitive.
	entry		# a GtkEntry 
	icon_pos		# Icon position
	return:		#  TRUE if the icon is sensitive. 
gint gtk_entry_get_icon_at_pos (GtkEntry *entry, gint x, gint y);	# Finds the icon at the given position and return its index. Theposition’s coordinates are relative to the entry’s top left corner.If x, y doesn’t lie inside an icon, -1 is returned.This function is intended for use in a “query-tooltip” signal handler.
	entry		# a GtkEntry 
	x		# the x coordinate of the position to find
	y		# the y coordinate of the position to find
	return:		#  the index of the icon at the given position, or -1 
void gtk_entry_set_icon_tooltip_text (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip);	# Sets tooltip as the contents of the tooltip for the iconat the specified position.
	entry		# a GtkEntry 
	icon_pos		# the icon position
	tooltip		#  the contents of the tooltip for the icon, or NULL . 
gchar  *gtk_entry_get_icon_tooltip_text (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Gets the contents of the tooltip on the icon at the specified position in entry.
	entry		# a GtkEntry 
	icon_pos		# the icon position
	return:		#  the tooltip text, or NULL . Free the returnedstring with g_free() when done.  
void gtk_entry_set_icon_tooltip_markup (GtkEntry *entry, GtkEntryIconPosition icon_pos, const gchar *tooltip);	# Sets tooltip as the contents of the tooltip for the icon atthe specified position. tooltip is assumed to be marked up withthe Pango text markup language.
	entry		# a GtkEntry 
	icon_pos		# the icon position
	tooltip		#  the contents of the tooltip for the icon, or NULL . 
gchar  *gtk_entry_get_icon_tooltip_markup (GtkEntry *entry, GtkEntryIconPosition icon_pos);	# Gets the contents of the tooltip on the icon at the specified position in entry.
	entry		# a GtkEntry 
	icon_pos		# the icon position
	return:		#  the tooltip text, or NULL . Free the returnedstring with g_free() when done.  
void gtk_entry_set_icon_drag_source (GtkEntry *entry, GtkEntryIconPosition icon_pos, GtkTargetList *target_list, GdkDragAction actions);	# Sets up the icon at the given position so that GTK+ will start a dragoperation when the user clicks and drags the icon.
	entry		# a GtkEntry 
	icon_pos		# icon position
	target_list		# the targets (data formats) in which the data can be provided
	actions		# a bitmask of the allowed drag actions
gint gtk_entry_get_current_icon_drag_source (GtkEntry *entry);	# Returns the index of the icon which is the source of the currentDND operation, or -1.
	entry		# a GtkEntry 
	return:		#  index of the icon which is the source of the currentDND operation, or -1. 
void gtk_entry_get_icon_area (GtkEntry *entry, GtkEntryIconPosition icon_pos, GdkRectangle *icon_area);	# Gets the area where entry’s icon at icon_pos is drawn.This function is useful when drawing something to theentry in a draw callback.
	entry		# A GtkEntry 
	icon_pos		# Icon position
	icon_area		#  Return location for the icon’s area. 
void gtk_entry_set_input_purpose (GtkEntry *entry, GtkInputPurpose purpose);	# Sets the “input-purpose” property whichcan be used by on-screen keyboards and other inputmethods to adjust their behaviour.
	entry		# a GtkEntry 
	purpose		# the purpose
GtkInputPurpose gtk_entry_get_input_purpose (GtkEntry *entry);	# Gets the value of the “input-purpose” property.
	entry		# a GtkEntry 
void gtk_entry_set_input_hints (GtkEntry *entry, GtkInputHints hints);	# Sets the “input-hints” property, whichallows input methods to fine-tune their behaviour.
	entry		# a GtkEntry 
	hints		# the hints
GtkInputHints gtk_entry_get_input_hints (GtkEntry *entry);	# Gets the value of the “input-hints” property.
	entry		# a GtkEntry 
void gtk_entry_grab_focus_without_selecting (GtkEntry *entry);	# Causes entry to have keyboard focus.
	entry		# a GtkEntry 
GtkEntryBuffer  *gtk_entry_buffer_new (const gchar *initial_chars, gint n_initial_chars);	# Create a new GtkEntryBuffer object.
	initial_chars		#  initial buffer text, or NULL . 
	return:		#  A new GtkEntryBuffer object. 
gchar  *gtk_entry_buffer_get_text (GtkEntryBuffer *buffer);	# Retrieves the contents of the buffer.
	buffer		# a GtkEntryBuffer 
	return:		#  a pointer to the contents of the widget as astring. This string points to internally allocatedstorage in the buffer and must not be freed, modified orstored. 
void gtk_entry_buffer_set_text (GtkEntryBuffer *buffer, const gchar *chars, gint n_chars);	# Sets the text in the buffer.
	buffer		# a GtkEntryBuffer 
	chars		# the new text
	n_chars		# the number of characters in text, or -1
gsize gtk_entry_buffer_get_bytes (GtkEntryBuffer *buffer);	# Retrieves the length in bytes of the buffer.See gtk_entry_buffer_get_length() .
	buffer		# a GtkEntryBuffer 
	return:		#  The byte length of the buffer. 
guint gtk_entry_buffer_get_length (GtkEntryBuffer *buffer);	# Retrieves the length in characters of the buffer.
	buffer		# a GtkEntryBuffer 
	return:		#  The number of characters in the buffer. 
gint gtk_entry_buffer_get_max_length (GtkEntryBuffer *buffer);	# Retrieves the maximum allowed length of the text inbuffer. See gtk_entry_buffer_set_max_length() .
	buffer		# a GtkEntryBuffer 
	return:		#  the maximum allowed number of charactersin GtkEntryBuffer , or 0 if there is no maximum. 
void gtk_entry_buffer_set_max_length (GtkEntryBuffer *buffer, gint max_length);	# Sets the maximum allowed length of the contents of the buffer. Ifthe current contents are longer than the given length, then theywill be truncated to fit.
	buffer		# a GtkEntryBuffer 
	max_length		# the maximum length of the entry buffer, or 0 for no maximum.(other than the maximum length of entries.) The value passed in willbe clamped to the range 0-65536.
guint gtk_entry_buffer_insert_text (GtkEntryBuffer *buffer, guint position, const gchar *chars, gint n_chars);	# Inserts n_chars characters of chars into the contents of thebuffer, at position position.
	buffer		# a GtkEntryBuffer 
	position		# the position at which to insert text.
	chars		# the text to insert into the buffer.
	n_chars		# the length of the text in characters, or -1
	return:		#  The number of characters actually inserted. 
guint gtk_entry_buffer_delete_text (GtkEntryBuffer *buffer, guint position, gint n_chars);	# Deletes a sequence of characters from the buffer. n_chars characters aredeleted starting at position. If n_chars is negative, then all charactersuntil the end of the text are deleted.
	buffer		# a GtkEntryBuffer 
	position		# position at which to delete text
	n_chars		# number of characters to delete
	return:		#  The number of characters deleted. 
void gtk_entry_buffer_emit_deleted_text (GtkEntryBuffer *buffer, guint position, guint n_chars);	# Used when subclassing GtkEntryBuffer 
	buffer		# a GtkEntryBuffer 
	position		# position at which text was deleted
	n_chars		# number of characters deleted
void gtk_entry_buffer_emit_inserted_text (GtkEntryBuffer *buffer, guint position, const gchar *chars, guint n_chars);	# Used when subclassing GtkEntryBuffer 
	buffer		# a GtkEntryBuffer 
	position		# position at which text was inserted
	chars		# text that was inserted
	n_chars		# number of characters inserted
gboolean <span class="c_punctuation">( *GtkEntryCompletionMatchFunc<span class="c_punctuation">) (GtkEntryCompletion *completion, const gchar *key, GtkTreeIter *iter, gpointer user_data);	# A function which decides whether the row indicated by iter matchesa given key, and should be displayed as a possible completion for key.Note that key is normalized and case-folded (see g_utf8_normalize() and g_utf8_casefold() ). If this is not appropriate, match functionshave access to the unmodified key viagtk_entry_get_text (GTK_ENTRY (gtk_entry_completion_get_entry() )).
	completion		# the GtkEntryCompletion 
	key		# the string to match, normalized and case-folded
	iter		# a GtkTreeIter indicating the row to match
	user_data		# user data given to 
	return:		#  TRUE if itershould be displayed as a possible completionfor key 
GtkEntryCompletion  *gtk_entry_completion_new (void );	#创建对象:GtkEntryCompletion object.
	return:		#  A newly created GtkEntryCompletion object 
GtkEntryCompletion  *gtk_entry_completion_new_with_area (GtkCellArea *area);	#创建对象:GtkEntryCompletion object using thespecified area to layout cells in the underlyingGtkTreeViewColumn for the drop-down menu.
	area		# the GtkCellArea used to layout cells
	return:		#  A newly created GtkEntryCompletion object 
GtkWidget  *gtk_entry_completion_get_entry (GtkEntryCompletion *completion);	# Gets the entry completion has been attached to.
	completion		# a GtkEntryCompletion 
	return:		#  The entry completionhas been attached to.  
void gtk_entry_completion_set_model (GtkEntryCompletion *completion, GtkTreeModel *model);	# Sets the model for a GtkEntryCompletion . If completion already hasa model set, it will remove it before setting the new model.If model is NULL , then it will unset the model.
	completion		# a GtkEntryCompletion 
	model		#  the GtkTreeModel . 
GtkTreeModel  *gtk_entry_completion_get_model (GtkEntryCompletion *completion);	# Returns the model the GtkEntryCompletion is using as data source.Returns NULL if the model is unset.
	completion		# a GtkEntryCompletion 
	return:		#  A GtkTreeModel , or NULL if noneis currently being used.  
void gtk_entry_completion_set_match_func (GtkEntryCompletion *completion, GtkEntryCompletionMatchFunc func, gpointer func_data, GDestroyNotify func_notify);	# Sets the match function for completion to be func. The match functionis used to determine if a row should or should not be in the completionlist.
	completion		# a GtkEntryCompletion 
	func		# the GtkEntryCompletionMatchFunc to use
	func_data		# user data for func
	func_notify		# destroy notify for func_data.
void gtk_entry_completion_set_minimum_key_length (GtkEntryCompletion *completion, gint length);	# Requires the length of the search key for completion to be at leastlength. This is useful for long lists, where completing using a smallkey takes a lot of time and will come up with meaningless results anyway(ie, a too large dataset).
	completion		# a GtkEntryCompletion 
	length		# the minimum length of the key in order to start completing
gint gtk_entry_completion_get_minimum_key_length (GtkEntryCompletion *completion);	# Returns the minimum key length as set for completion.
	completion		# a GtkEntryCompletion 
	return:		#  The currently used minimum key length 
gchar  *gtk_entry_completion_compute_prefix (GtkEntryCompletion *completion, const char *key);	# Computes the common prefix that is shared by all rows in completionthat start with key. If no row matches key, NULL will be returned.Note that a text column must have been set for this function to work,see gtk_entry_completion_set_text_column() for details.
	completion		# the entry completion
	key		# The text to complete for
	return:		#  The common prefix all rows starting withkeyor NULL if no row matches key.  
void gtk_entry_completion_complete (GtkEntryCompletion *completion);	# Requests a completion operation, or in other words a refiltering of thecurrent list with completions, using the current key. The completion listview will be updated accordingly.
	completion		# a GtkEntryCompletion 
gchar  *gtk_entry_completion_get_completion_prefix (GtkEntryCompletion *completion);	# Get the original text entered by the user that triggeredthe completion or NULL if there’s no completion ongoing.
	completion		# a GtkEntryCompletion 
	return:		#  the prefix for the current completion 
void gtk_entry_completion_insert_prefix (GtkEntryCompletion *completion);	# Requests a prefix insertion.
	completion		# a GtkEntryCompletion 
void gtk_entry_completion_insert_action_text (GtkEntryCompletion *completion, gint index_, const gchar *text);	# Inserts an action in completion’s action item list at position index_with text text. If you want the action item to have markup, usegtk_entry_completion_insert_action_markup() .
	completion		# a GtkEntryCompletion 
	index_		# the index of the item to insert
	text		# text of the item to insert
void gtk_entry_completion_insert_action_markup (GtkEntryCompletion *completion, gint index_, const gchar *markup);	# Inserts an action in completion’s action item list at position index_with markup markup.
	completion		# a GtkEntryCompletion 
	index_		# the index of the item to insert
	markup		# markup of the item to insert
void gtk_entry_completion_delete_action (GtkEntryCompletion *completion, gint index_);	# Deletes the action at index_ from completion’s action list.
	completion		# a GtkEntryCompletion 
	index_		# the index of the item to delete
void gtk_entry_completion_set_text_column (GtkEntryCompletion *completion, gint column);	# Convenience function for setting up the most used case of this code: acompletion list with just strings. This function will set up completionto have a list displaying all (and just) strings in the completion list,and to get those strings from column in the model of completion.
	completion		# a GtkEntryCompletion 
	column		# the column in the model of completionto get strings from
gint gtk_entry_completion_get_text_column (GtkEntryCompletion *completion);	# Returns the column in the model of completion to get strings from.
	completion		# a GtkEntryCompletion 
	return:		#  the column containing the strings 
void gtk_entry_completion_set_inline_completion (GtkEntryCompletion *completion, gboolean inline_completion);	# Sets whether the common prefix of the possible completions shouldbe automatically inserted in the entry.
	completion		# a GtkEntryCompletion 
	inline_completion		# TRUE to do inline completion
gboolean gtk_entry_completion_get_inline_completion (GtkEntryCompletion *completion);	# Returns whether the common prefix of the possible completions shouldbe automatically inserted in the entry.
	completion		# a GtkEntryCompletion 
	return:		#  TRUE if inline completion is turned on 
void gtk_entry_completion_set_inline_selection (GtkEntryCompletion *completion, gboolean inline_selection);	# Sets whether it is possible to cycle through the possible completionsinside the entry.
	completion		# a GtkEntryCompletion 
	inline_selection		# TRUE to do inline selection
gboolean gtk_entry_completion_get_inline_selection (GtkEntryCompletion *completion);	# Returns TRUE if inline-selection mode is turned on.
	completion		# a GtkEntryCompletion 
	return:		#  TRUE if inline-selection mode is on 
void gtk_entry_completion_set_popup_completion (GtkEntryCompletion *completion, gboolean popup_completion);	# Sets whether the completions should be presented in a popup window.
	completion		# a GtkEntryCompletion 
	popup_completion		# TRUE to do popup completion
gboolean gtk_entry_completion_get_popup_completion (GtkEntryCompletion *completion);	# Returns whether the completions should be presented in a popup window.
	completion		# a GtkEntryCompletion 
	return:		#  TRUE if popup completion is turned on 
void gtk_entry_completion_set_popup_set_width (GtkEntryCompletion *completion, gboolean popup_set_width);	# Sets whether the completion popup window will be resized to be the samewidth as the entry.
	completion		# a GtkEntryCompletion 
	popup_set_width		# TRUE to make the width of the popup the same as the entry
gboolean gtk_entry_completion_get_popup_set_width (GtkEntryCompletion *completion);	# Returns whether the completion popup window will be resized to thewidth of the entry.
	completion		# a GtkEntryCompletion 
	return:		#  TRUE if the popup window will be resized to the width ofthe entry 
void gtk_entry_completion_set_popup_single_match (GtkEntryCompletion *completion, gboolean popup_single_match);	# Sets whether the completion popup window will appear even if there isonly a single match. You may want to set this to FALSE if youare using inline completion .
	completion		# a GtkEntryCompletion 
	popup_single_match		# TRUE if the popup should appear even for a singlematch
gboolean gtk_entry_completion_get_popup_single_match (GtkEntryCompletion *completion);	# Returns whether the completion popup window will appear even if there isonly a single match.
	completion		# a GtkEntryCompletion 
	return:		#  TRUE if the popup window will appear regardless of thenumber of matches 
GtkWidget  *gtk_scale_new (GtkOrientation orientation, GtkAdjustment *adjustment);	#创建对象:GtkScale .
	orientation		# the scale’s orientation.
	adjustment		#  the GtkAdjustment which sets the rangeof the scale, or NULL to create a new adjustment. 
	return:		#  a new GtkScale  
GtkWidget  *gtk_scale_new_with_range (GtkOrientation orientation, gdouble min, gdouble max, gdouble step);	#创建对象:scale widget with the given orientation that lets theuser input a number between min and max (including min and max)with the increment step. step must be nonzero; it’s the distancethe slider moves when using the arrow keys to adjust the scalevalue.
	orientation		# the scale’s orientation.
	min		# minimum value
	max		# maximum value
	step		# step increment (tick size) used with keyboard shortcuts
	return:		#  a new GtkScale  
void gtk_scale_set_digits (GtkScale *scale, gint digits);	# Sets the number of decimal places that are displayed in the value. Alsocauses the value of the adjustment to be rounded to this number of digits,so the retrieved value matches the displayed one, if “draw-value” isTRUE when the value changes. If you want to enforce rounding the value when“draw-value” is FALSE , you can set “round-digits” instead.
	scale		# a GtkScale 
	digits		# the number of decimal places to display,e.g. use 1 to display 1.0, 2 to display 1.00, etc
void gtk_scale_set_draw_value (GtkScale *scale, gboolean draw_value);	# Specifies whether the current value is displayed as a string next to the slider.
	scale		# a GtkScale 
	draw_value		# TRUE to draw the value
void gtk_scale_set_has_origin (GtkScale *scale, gboolean has_origin);	# If “has-origin” is set to TRUE (the default), the scale willhighlight the part of the trough between the origin (bottom or left side)and the current value.
	scale		# a GtkScale 
	has_origin		# TRUE if the scale has an origin
void gtk_scale_set_value_pos (GtkScale *scale, GtkPositionType pos);	# Sets the position in which the current value is displayed.
	scale		# a GtkScale 
	pos		# the position in which the current value is displayed
gint gtk_scale_get_digits (GtkScale *scale);	# Gets the number of decimal places that are displayed in the value.
	scale		# a GtkScale 
	return:		#  the number of decimal places that are displayed 
gboolean gtk_scale_get_draw_value (GtkScale *scale);	# Returns whether the current value is displayed as a string next to the slider.
	scale		# a GtkScale 
	return:		#  whether the current value is displayed as a string 
gboolean gtk_scale_get_has_origin (GtkScale *scale);	# Returns whether the scale has an origin.
	scale		# a GtkScale 
	return:		#  TRUE if the scale has an origin. 
GtkPositionType gtk_scale_get_value_pos (GtkScale *scale);	# Gets the position in which the current value is displayed.
	scale		# a GtkScale 
	return:		#  the position in which the current value is displayed 
PangoLayout  *gtk_scale_get_layout (GtkScale *scale);	# Gets the PangoLayout used to display the scale. The returnedobject is owned by the scale so does not need to be freed bythe caller.
	scale		# A GtkScale 
	return:		#  the PangoLayout for this scale,or NULL if the “draw-value” property is FALSE .  
void gtk_scale_get_layout_offsets (GtkScale *scale, gint *x, gint *y);	# Obtains the coordinates where the scale will draw the PangoLayout representing the text in the scale. Rememberwhen using the PangoLayout function you need to convert toand from pixels using PANGO_PIXELS() or PANGO_SCALE . 
	scale		# a GtkScale 
	x		#  location to store X offset of layout, or NULL . 
void gtk_scale_add_mark (GtkScale *scale, gdouble value, GtkPositionType position, const gchar *markup);	# Adds a mark at value.
	scale		# a GtkScale 
	value		# the value at which the mark is placed, must be betweenthe lower and upper limits of the scales’ adjustment
	position		# where to draw the mark. For a horizontal scale, GTK_POS_TOP and GTK_POS_LEFT are drawn above the scale, anything else below.For a vertical scale, GTK_POS_LEFT and GTK_POS_TOP are drawn tothe left of the scale, anything else to the right.
	markup		#  Text to be shown at the mark, using Pango markup, or NULL . 
void gtk_scale_clear_marks (GtkScale *scale);	# Removes any marks that have been added with gtk_scale_add_mark() .
	scale		# a GtkScale 
void gtk_spin_button_configure (GtkSpinButton *spin_button, GtkAdjustment *adjustment, gdouble climb_rate, guint digits);	# Changes the properties of an existing spin button. The adjustment,climb rate, and number of decimal places are all changed accordingly,after this function call.
	spin_button		# a GtkSpinButton 
	adjustment		#  a GtkAdjustment . 
	climb_rate		# the new climb rate
	digits		# the number of decimal places to display in the spin button
GtkWidget  *gtk_spin_button_new (GtkAdjustment *adjustment, gdouble climb_rate, guint digits);	#创建对象:GtkSpinButton .
	adjustment		#  the GtkAdjustment object that this spinbutton should use, or NULL . 
	return:		#  The new spin button as a GtkWidget  
GtkWidget  *gtk_spin_button_new_with_range (gdouble min, gdouble max, gdouble step);	# This is a convenience constructor that allows creation of a numericGtkSpinButton without manually creating an adjustment. The value isinitially set to the minimum value and a page increment of 10 * stepis the default. The precision of the spin button is equivalent to theprecision of step.
	min		# Minimum allowable value
	max		# Maximum allowable value
	step		# Increment added or subtracted by spinning the widget
	return:		#  The new spin button as a GtkWidget  
void gtk_spin_button_set_adjustment (GtkSpinButton *spin_button, GtkAdjustment *adjustment);	# Replaces the GtkAdjustment associated with spin_button.
	spin_button		# a GtkSpinButton 
	adjustment		# a GtkAdjustment to replace the existing adjustment
GtkAdjustment  *gtk_spin_button_get_adjustment (GtkSpinButton *spin_button);	# Get the adjustment associated with a GtkSpinButton 
	spin_button		# a GtkSpinButton 
	return:		#  the GtkAdjustment of spin_button.  
void gtk_spin_button_set_digits (GtkSpinButton *spin_button, guint digits);	# Set the precision to be displayed by spin_button. Up to 20 digit precisionis allowed.
	spin_button		# a GtkSpinButton 
	digits		# the number of digits after the decimal point to be displayed for the spin button’s value
void gtk_spin_button_set_increments (GtkSpinButton *spin_button, gdouble step, gdouble page);	# Sets the step and page increments for spin_button. This affects howquickly the value changes when the spin button’s arrows are activated.
	spin_button		# a GtkSpinButton 
	step		# increment applied for a button 1 press.
	page		# increment applied for a button 2 press.
void gtk_spin_button_set_range (GtkSpinButton *spin_button, gdouble min, gdouble max);	# Sets the minimum and maximum allowable values for spin_button.
	spin_button		# a GtkSpinButton 
	min		# minimum allowable value
	max		# maximum allowable value
gint gtk_spin_button_get_value_as_int (GtkSpinButton *spin_button);	# Get the value spin_button represented as an integer.
	spin_button		# a GtkSpinButton 
	return:		#  the value of spin_button 
void gtk_spin_button_set_value (GtkSpinButton *spin_button, gdouble value);	# Sets the value of spin_button.
	spin_button		# a GtkSpinButton 
	value		# the new value
void gtk_spin_button_set_update_policy (GtkSpinButton *spin_button, GtkSpinButtonUpdatePolicy policy);	# Sets the update behavior of a spin button.This determines whether the spin button is always updatedor only when a valid value is set.
	spin_button		# a GtkSpinButton 
	policy		# a GtkSpinButtonUpdatePolicy value
void gtk_spin_button_set_numeric (GtkSpinButton *spin_button, gboolean numeric);	# Sets the flag that determines if non-numeric text can be typedinto the spin button.
	spin_button		# a GtkSpinButton 
	numeric		# flag indicating if only numeric entry is allowed
void gtk_spin_button_spin (GtkSpinButton *spin_button, GtkSpinType direction, gdouble increment);	# Increment or decrement a spin button’s value in a specifieddirection by a specified amount.
	spin_button		# a GtkSpinButton 
	direction		# a GtkSpinType indicating the direction to spin
	increment		# step increment to apply in the specified direction
void gtk_spin_button_set_wrap (GtkSpinButton *spin_button, gboolean wrap);	# Sets the flag that determines if a spin button value wrapsaround to the opposite limit when the upper or lower limitof the range is exceeded.
	spin_button		# a GtkSpinButton 
	wrap		# a flag indicating if wrapping behavior is performed
void gtk_spin_button_set_snap_to_ticks (GtkSpinButton *spin_button, gboolean snap_to_ticks);	# Sets the policy as to whether values are corrected to thenearest step increment when a spin button is activated afterproviding an invalid value.
	spin_button		# a GtkSpinButton 
	snap_to_ticks		# a flag indicating if invalid values should be corrected
void gtk_spin_button_update (GtkSpinButton *spin_button);	# Manually force an update of the spin button.
	spin_button		# a GtkSpinButton 
guint gtk_spin_button_get_digits (GtkSpinButton *spin_button);	# Fetches the precision of spin_button. See gtk_spin_button_set_digits() .
	spin_button		# a GtkSpinButton 
	return:		#  the current precision 
void gtk_spin_button_get_increments (GtkSpinButton *spin_button, gdouble *step, gdouble *page);	# Gets the current step and page the increments used by spin_button. Seegtk_spin_button_set_increments() .
	spin_button		# a GtkSpinButton 
	step		#  location to store step increment, or NULL . 
gboolean gtk_spin_button_get_numeric (GtkSpinButton *spin_button);	# Returns whether non-numeric text can be typed into the spin button.See gtk_spin_button_set_numeric() .
	spin_button		# a GtkSpinButton 
	return:		#  TRUE if only numeric text can be entered 
void gtk_spin_button_get_range (GtkSpinButton *spin_button, gdouble *min, gdouble *max);	# Gets the range allowed for spin_button.See gtk_spin_button_set_range() .
	spin_button		# a GtkSpinButton 
	min		#  location to store minimum allowed value, or NULL . 
gboolean gtk_spin_button_get_snap_to_ticks (GtkSpinButton *spin_button);	# Returns whether the values are corrected to the nearest step.See gtk_spin_button_set_snap_to_ticks() .
	spin_button		# a GtkSpinButton 
	return:		#  TRUE if values are snapped to the nearest step 
GtkSpinButtonUpdatePolicy gtk_spin_button_get_update_policy (GtkSpinButton *spin_button);	# Gets the update behavior of a spin button.See gtk_spin_button_set_update_policy() .
	spin_button		# a GtkSpinButton 
	return:		#  the current update policy 
gdouble gtk_spin_button_get_value (GtkSpinButton *spin_button);	# Get the value in the spin_button.
	spin_button		# a GtkSpinButton 
	return:		#  the value of spin_button 
gboolean gtk_spin_button_get_wrap (GtkSpinButton *spin_button);	# Returns whether the spin button’s value wraps around to theopposite limit when the upper or lower limit of the range isexceeded. See gtk_spin_button_set_wrap() .
	spin_button		# a GtkSpinButton 
	return:		#  TRUE if the spin button wraps around 
GtkWidget  *gtk_search_entry_new (void );	# Creates a GtkSearchEntry , with a find icon when the search field isempty, and a clear icon when it isn't.
	return:		#  a new GtkSearchEntry  
gboolean gtk_search_entry_handle_event (GtkSearchEntry *entry, GdkEvent *event);	# This function should be called when the top-level windowwhich contains the search entry received a key event. Ifthe entry is part of a GtkSearchBar , it is preferableto call gtk_search_bar_handle_event() instead, which willreveal the entry in addition to passing the event to thisfunction.
	entry		# a GtkSearchEntry 
	event		# a key event
	return:		#  GDK_EVENT_STOP if the key press event resultedin a search beginning or continuing, GDK_EVENT_PROPAGATE otherwise. 
GtkWidget  *gtk_search_bar_new (void );	# Creates a GtkSearchBar . You will need to tell it aboutwhich widget is going to be your text entry usinggtk_search_bar_connect_entry() .
	return:		#  a new GtkSearchBar  
void gtk_search_bar_connect_entry (GtkSearchBar *bar, GtkEntry *entry);	# Connects the GtkEntry widget passed as the one to be used inthis search bar. The entry should be a descendant of the search bar.This is only required if the entry isn’t the direct child of thesearch bar (as in our main example).
	bar		# a GtkSearchBar 
	entry		# a GtkEntry 
gboolean gtk_search_bar_get_search_mode (GtkSearchBar *bar);	# Returns whether the search mode is on or off.
	bar		# a GtkSearchBar 
	return:		#  whether search mode is toggled on 
void gtk_search_bar_set_search_mode (GtkSearchBar *bar, gboolean search_mode);	# Switches the search mode on or off.
	bar		# a GtkSearchBar 
	search_mode		# the new state of the search mode
gboolean gtk_search_bar_get_show_close_button (GtkSearchBar *bar);	# Returns whether the close button is shown.
	bar		# a GtkSearchBar 
	return:		#  whether the close button is shown 
void gtk_search_bar_set_show_close_button (GtkSearchBar *bar, gboolean visible);	# Shows or hides the close button. Applications thatalready have a “search” toggle button should not show a closebutton in their search bar, as it duplicates the role of thetoggle button.
	bar		# a GtkSearchBar 
	visible		# whether the close button will be shown or not
gboolean gtk_search_bar_handle_event (GtkSearchBar *bar, GdkEvent *event);	# This function should be called when the top-levelwindow which contains the search bar received a key event.
	bar		# a GtkSearchBar 
	event		# a GdkEvent containing key press events
	return:		#  GDK_EVENT_STOP if the key press event resultedin text being entered in the search entry (and revealingthe search bar if necessary), GDK_EVENT_PROPAGATE otherwise. 
void gtk_editable_select_region (GtkEditable *editable, gint start_pos, gint end_pos);	# Selects a region of text. The characters that are selected are those characters at positions from start_pos up to, but not including end_pos. If end_pos is negative, then thecharacters selected are those characters from start_pos to the end of the text.
	editable		# a GtkEditable 
	start_pos		# start of region
	end_pos		# end of region
gboolean gtk_editable_get_selection_bounds (GtkEditable *editable, gint *start_pos, gint *end_pos);	# Retrieves the selection bound of the editable. start_pos will be filledwith the start of the selection and end_pos with end. If no text wasselected both will be identical and FALSE will be returned.
	editable		# a GtkEditable 
	start_pos		#  location to store the starting position, or NULL . 
	return:		#  TRUE if an area is selected, FALSE otherwise 
void gtk_editable_insert_text (GtkEditable *editable, const gchar *new_text, gint new_text_length, gint *position);	# Inserts new_text_length bytes of new_text into the contents of thewidget, at position position.
	editable		# a GtkEditable 
	new_text		# the text to append
	new_text_length		# the length of the text in bytes, or -1
	position		#  location of the position text will be inserted at. 
void gtk_editable_delete_text (GtkEditable *editable, gint start_pos, gint end_pos);	# Deletes a sequence of characters. The characters that are deleted are those characters at positions from start_pos up to, but not including end_pos. If end_pos is negative, then the characters deletedare those from start_pos to the end of the text.
	editable		# a GtkEditable 
	start_pos		# start position
	end_pos		# end position
gchar  *gtk_editable_get_chars (GtkEditable *editable, gint start_pos, gint end_pos);	# Retrieves a sequence of characters. The characters that are retrieved are those characters at positions from start_pos up to, but not including end_pos. If end_pos is negative, then the charactersretrieved are those characters from start_pos to the end of the text.
	editable		# a GtkEditable 
	start_pos		# start of text
	end_pos		# end of text
	return:		#  a pointer to the contents of the widget as astring. This string is allocated by the GtkEditable implementation and should be freed by the caller. 
void gtk_editable_cut_clipboard (GtkEditable *editable);	# Removes the contents of the currently selected content in the editable andputs it on the clipboard.
	editable		# a GtkEditable 
void gtk_editable_copy_clipboard (GtkEditable *editable);	# Copies the contents of the currently selected content in the editable andputs it on the clipboard.
	editable		# a GtkEditable 
void gtk_editable_paste_clipboard (GtkEditable *editable);	# Pastes the content of the clipboard to the current position of thecursor in the editable.
	editable		# a GtkEditable 
void gtk_editable_delete_selection (GtkEditable *editable);	# Deletes the currently selected text of the editable.This call doesn’t do anything if there is no selected text.
	editable		# a GtkEditable 
void gtk_editable_set_position (GtkEditable *editable, gint position);	# Sets the cursor position in the editable to the given value.
	editable		# a GtkEditable 
	position		# the position of the cursor 
gint gtk_editable_get_position (GtkEditable *editable);	# Retrieves the current position of the cursor relative to the startof the content of the editable. 
	editable		# a GtkEditable 
	return:		#  the cursor position 
void gtk_editable_set_editable (GtkEditable *editable, gboolean is_editable);	# Determines if the user can edit the text in the editablewidget or not.
	editable		# a GtkEditable 
	is_editable		# TRUE if the user is allowed to edit the textin the widget
gboolean gtk_editable_get_editable (GtkEditable *editable);	# Retrieves whether editable is editable. Seegtk_editable_set_editable() .
	editable		# a GtkEditable 
	return:		#  TRUE if editableis editable. 
GtkTextBuffer  *gtk_text_iter_get_buffer (const GtkTextIter *iter);	# Returns the GtkTextBuffer this iterator is associated with.
	iter		# an iterator
	return:		#  the buffer.  
GtkTextIter  *gtk_text_iter_copy (const GtkTextIter *iter);	# Creates a dynamically-allocated copy of an iterator. This functionis not useful in applications, because iterators can be copied with asimple assignment (GtkTextIter i = j;). Thefunction is used by language bindings.
	iter		# an iterator
	return:		#  a copy of the iter, free with gtk_text_iter_free()  
void gtk_text_iter_assign (GtkTextIter *iter, const GtkTextIter *other);	# Assigns the value of other to iter. This functionis not useful in applications, because iterators can be assignedwith GtkTextIter i = j;. Thefunction is used by language bindings.
	iter		# a GtkTextIter 
	other		# another GtkTextIter 
void gtk_text_iter_free (GtkTextIter *iter);	# Free an iterator allocated on the heap. This functionis intended for use in language bindings, and is notespecially useful for applications, because iterators cansimply be allocated on the stack.
	iter		# a dynamically-allocated iterator
gint gtk_text_iter_get_offset (const GtkTextIter *iter);	# Returns the character offset of an iterator.Each character in a GtkTextBuffer has an offset,starting with 0 for the first character in the buffer.Use gtk_text_buffer_get_iter_at_offset() to convert anoffset back into an iterator.
	iter		# an iterator
	return:		#  a character offset 
gint gtk_text_iter_get_line (const GtkTextIter *iter);	# Returns the line number containing the iterator. Lines ina GtkTextBuffer are numbered beginning with 0 for the firstline in the buffer.
	iter		# an iterator
	return:		#  a line number 
gint gtk_text_iter_get_line_offset (const GtkTextIter *iter);	# Returns the character offset of the iterator,counting from the start of a newline-terminated line.The first character on the line has offset 0.
	iter		# an iterator
	return:		#  offset from start of line 
gint gtk_text_iter_get_line_index (const GtkTextIter *iter);	# Returns the byte index of the iterator, countingfrom the start of a newline-terminated line.Remember that GtkTextBuffer encodes text inUTF-8, and that characters can require a variablenumber of bytes to represent.
	iter		# an iterator
	return:		#  distance from start of line, in bytes 
gint gtk_text_iter_get_visible_line_index (const GtkTextIter *iter);	# Returns the number of bytes from the start of theline to the given iter, not counting bytes thatare invisible due to tags with the “invisible” flagtoggled on.
	iter		# a GtkTextIter 
	return:		#  byte index of iterwith respect to the start of the line 
gint gtk_text_iter_get_visible_line_offset (const GtkTextIter *iter);	# Returns the offset in characters from the start of theline to the given iter, not counting characters thatare invisible due to tags with the “invisible” flagtoggled on.
	iter		# a GtkTextIter 
	return:		#  offset in visible characters from the start of the line  
gunichar gtk_text_iter_get_char (const GtkTextIter *iter);	# The Unicode character at this iterator is returned. (Equivalent tooperator* on a C++ iterator.) If the element at this iterator is anon-character element, such as an image embedded in the buffer, theUnicode “unknown” character 0xFFFC is returned. If invoked onthe end iterator, zero is returned; zero is not a valid Unicode character.So you can write a loop which ends when gtk_text_iter_get_char() returns 0.
	iter		# an iterator
	return:		#  a Unicode character, or 0 if iteris not dereferenceable 
gchar  *gtk_text_iter_get_slice (const GtkTextIter *start, const GtkTextIter *end);	# Returns the text in the given range. A “slice” is an array ofcharacters encoded in UTF-8 format, including the Unicode “unknown”character 0xFFFC for iterable non-character elements in the buffer,such as images. Because images are encoded in the slice, byte andcharacter offsets in the returned array will correspond to byteoffsets in the text buffer. Note that 0xFFFC can occur in normaltext as well, so it is not a reliable indicator that a pixbuf orwidget is in the buffer.
	start		# iterator at start of a range
	end		# iterator at end of a range
	return:		#  slice of text from the buffer.  
gchar  *gtk_text_iter_get_text (const GtkTextIter *start, const GtkTextIter *end);	# Returns text in the given range. If the rangecontains non-text elements such as images, the character and byteoffsets in the returned string will not correspond to character andbyte offsets in the buffer. If you want offsets to correspond, seegtk_text_iter_get_slice() .
	start		# iterator at start of a range
	end		# iterator at end of a range
	return:		#  array of characters from the buffer.  
gchar  *gtk_text_iter_get_visible_slice (const GtkTextIter *start, const GtkTextIter *end);	# Like gtk_text_iter_get_slice() , but invisible text is not included.Invisible text is usually invisible because a GtkTextTag with the“invisible” attribute turned on has been applied to it.
	start		# iterator at start of range
	end		# iterator at end of range
	return:		#  slice of text from the buffer.  
gchar  *gtk_text_iter_get_visible_text (const GtkTextIter *start, const GtkTextIter *end);	# Like gtk_text_iter_get_text() , but invisible text is not included.Invisible text is usually invisible because a GtkTextTag with the“invisible” attribute turned on has been applied to it.
	start		# iterator at start of range
	end		# iterator at end of range
	return:		#  string containing visible text in therange.  
GdkPixbuf  *gtk_text_iter_get_pixbuf (const GtkTextIter *iter);	# If the element at iter is a pixbuf, the pixbuf is returned(with no new reference count added). Otherwise,NULL is returned.
	iter		# an iterator
	return:		#  the pixbuf at iter.  
GSList  *gtk_text_iter_get_marks (const GtkTextIter *iter);	# Returns a list of all GtkTextMark at this location. Because marksare not iterable (they don’t take up any "space" in the buffer,they are just marks in between iterable locations), multiple markscan exist in the same place. The returned list is not in anymeaningful order.
	iter		# an iterator
	return:		#  list of GtkTextMark .  
GSList  *gtk_text_iter_get_toggled_tags (const GtkTextIter *iter, gboolean toggled_on);	# Returns a list of GtkTextTag that are toggled on or off at thispoint. (If toggled_on is TRUE , the list contains tags that aretoggled on.) If a tag is toggled on at iter, then some non-emptyrange of characters following iter has that tag applied to it. Ifa tag is toggled off, then some non-empty range following iterdoes not have the tag applied to it.
	iter		# an iterator
	toggled_on		# TRUE to get toggled-on tags
	return:		#  tags toggled at this point.  
GtkTextChildAnchor  *gtk_text_iter_get_child_anchor (const GtkTextIter *iter);	# If the location at iter contains a child anchor, theanchor is returned (with no new reference count added). Otherwise,NULL is returned.
	iter		# an iterator
	return:		#  the anchor at iter.  
gboolean gtk_text_iter_starts_tag (const GtkTextIter *iter, GtkTextTag *tag);	# Returns TRUE if tag is toggled on at exactly this point. If tagis NULL , returns TRUE if any tag is toggled on at this point.
	iter		# an iterator
	tag		#  a GtkTextTag , or NULL . 
	return:		#  whether iteris the start of a range tagged with tag 
gboolean gtk_text_iter_ends_tag (const GtkTextIter *iter, GtkTextTag *tag);	# Returns TRUE if tag is toggled off at exactly this point. If tagis NULL , returns TRUE if any tag is toggled off at this point.
	iter		# an iterator
	tag		#  a GtkTextTag , or NULL . 
	return:		#  whether iteris the end of a range tagged with tag 
gboolean gtk_text_iter_toggles_tag (const GtkTextIter *iter, GtkTextTag *tag);	# This is equivalent to (gtk_text_iter_starts_tag() ||gtk_text_iter_ends_tag() ), i.e. it tells you whether a range withtag applied to it begins or ends at iter.
	iter		# an iterator
	tag		#  a GtkTextTag , or NULL . 
	return:		#  whether tagis toggled on or off at iter 
gboolean gtk_text_iter_has_tag (const GtkTextIter *iter, GtkTextTag *tag);	# Returns TRUE if iter points to a character that is part of a range taggedwith tag. See also gtk_text_iter_starts_tag() and gtk_text_iter_ends_tag() .
	iter		# an iterator
	tag		# a GtkTextTag 
	return:		#  whether iteris tagged with tag 
GSList  *gtk_text_iter_get_tags (const GtkTextIter *iter);	# Returns a list of tags that apply to iter, in ascending order ofpriority (highest-priority tags are last). The GtkTextTag in thelist don’t have a reference added, but you have to free the listitself.
	iter		# a GtkTextIter 
	return:		#  list of GtkTextTag .  
gboolean gtk_text_iter_editable (const GtkTextIter *iter, gboolean default_setting);	# Returns whether the character at iter is within an editable regionof text. Non-editable text is “locked” and can’t be changed by theuser via GtkTextView . This function is simply a conveniencewrapper around gtk_text_iter_get_attributes(). If no tags appliedto this text affect editability, default_setting will be returned.
	iter		# an iterator
	default_setting		# TRUE if text is editable by default
	return:		#  whether iteris inside an editable range 
gboolean gtk_text_iter_can_insert (const GtkTextIter *iter, gboolean default_editability);	# Considering the default editability of the buffer, and tags thataffect editability, determines whether text inserted at iter wouldbe editable. If text inserted at iter would be editable then theuser should be allowed to insert text at iter.gtk_text_buffer_insert_interactive() uses this function to decidewhether insertions are allowed at a given position.
	iter		# an iterator
	default_editability		# TRUE if text is editable by default
	return:		#  whether text inserted at iterwould be editable 
gboolean gtk_text_iter_starts_word (const GtkTextIter *iter);	# Determines whether iter begins a natural-language word. Wordbreaks are determined by Pango and should be correct for nearly anylanguage (if not, the correct fix would be to the Pango word breakalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if iteris at the start of a word 
gboolean gtk_text_iter_ends_word (const GtkTextIter *iter);	# Determines whether iter ends a natural-language word. Word breaksare determined by Pango and should be correct for nearly anylanguage (if not, the correct fix would be to the Pango word breakalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if iteris at the end of a word 
gboolean gtk_text_iter_inside_word (const GtkTextIter *iter);	# Determines whether the character pointed by iter is part of anatural-language word (as opposed to say inside some whitespace). Wordbreaks are determined by Pango and should be correct for nearly any language(if not, the correct fix would be to the Pango word break algorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if iteris inside a word 
gboolean gtk_text_iter_starts_line (const GtkTextIter *iter);	# Returns TRUE if iter begins a paragraph,i.e. if gtk_text_iter_get_line_offset() would return 0.However this function is potentially more efficient thangtk_text_iter_get_line_offset() because it doesn’t have to computethe offset, it just has to see whether it’s 0.
	iter		# an iterator
	return:		#  whether iterbegins a line 
gboolean gtk_text_iter_ends_line (const GtkTextIter *iter);	# Returns TRUE if iter points to the start of the paragraphdelimiter characters for a line (delimiters will be either anewline, a carriage return, a carriage return followed by anewline, or a Unicode paragraph separator character). Note that aniterator pointing to the \n of a \r\n pair will not be counted asthe end of a line, the line ends before the \r. The end iterator isconsidered to be at the end of a line, even though there are noparagraph delimiter chars there.
	iter		# an iterator
	return:		#  whether iteris at the end of a line 
gboolean gtk_text_iter_starts_sentence (const GtkTextIter *iter);	# Determines whether iter begins a sentence. Sentence boundaries aredetermined by Pango and should be correct for nearly any language(if not, the correct fix would be to the Pango text boundaryalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if iteris at the start of a sentence. 
gboolean gtk_text_iter_ends_sentence (const GtkTextIter *iter);	# Determines whether iter ends a sentence. Sentence boundaries aredetermined by Pango and should be correct for nearly any language(if not, the correct fix would be to the Pango text boundaryalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if iteris at the end of a sentence. 
gboolean gtk_text_iter_inside_sentence (const GtkTextIter *iter);	# Determines whether iter is inside a sentence (as opposed to inbetween two sentences, e.g. after a period and before the firstletter of the next sentence). Sentence boundaries are determinedby Pango and should be correct for nearly any language (if not, thecorrect fix would be to the Pango text boundary algorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if iteris inside a sentence. 
gboolean gtk_text_iter_is_cursor_position (const GtkTextIter *iter);	# See gtk_text_iter_forward_cursor_position() or PangoLogAttr orpango_break() for details on what a cursor position is.
	iter		# a GtkTextIter 
	return:		#  TRUE if the cursor can be placed at iter 
gint gtk_text_iter_get_chars_in_line (const GtkTextIter *iter);	# Returns the number of characters in the line containing iter,including the paragraph delimiters.
	iter		# an iterator
	return:		#  number of characters in the line 
gint gtk_text_iter_get_bytes_in_line (const GtkTextIter *iter);	# Returns the number of bytes in the line containing iter,including the paragraph delimiters.
	iter		# an iterator
	return:		#  number of bytes in the line 
PangoLanguage  *gtk_text_iter_get_language (const GtkTextIter *iter);	# A convenience wrapper around gtk_text_iter_get_attributes(),which returns the language in effect at iter. If no tags affectinglanguage apply to iter, the return value is identical to that ofgtk_get_default_language() .
	iter		# an iterator
	return:		#  language in effect at iter.  
gboolean gtk_text_iter_is_end (const GtkTextIter *iter);	# Returns TRUE if iter is the end iterator, i.e. one past the lastdereferenceable iterator in the buffer. gtk_text_iter_is_end() isthe most efficient way to check whether an iterator is the enditerator.
	iter		# an iterator
	return:		#  whether iteris the end iterator 
gboolean gtk_text_iter_is_start (const GtkTextIter *iter);	# Returns TRUE if iter is the first iterator in the buffer, that isif iter has a character offset of 0.
	iter		# an iterator
	return:		#  whether iteris the first in the buffer 
gboolean gtk_text_iter_forward_char (GtkTextIter *iter);	# Moves iter forward by one character offset. Note that imagesembedded in the buffer occupy 1 character slot, sogtk_text_iter_forward_char() may actually move onto an image insteadof a character, if you have images in your buffer. If iter is theend iterator or one character before it, iter will now point atthe end iterator, and gtk_text_iter_forward_char() returns FALSE forconvenience when writing loops.
	iter		# an iterator
	return:		#  whether itermoved and is dereferenceable 
gboolean gtk_text_iter_backward_char (GtkTextIter *iter);	# Moves backward by one character offset. Returns TRUE if movementwas possible; if iter was the first in the buffer (characteroffset 0), gtk_text_iter_backward_char() returns FALSE for convenience whenwriting loops.
	iter		# an iterator
	return:		#  whether movement was possible 
gboolean gtk_text_iter_forward_chars (GtkTextIter *iter, gint count);	# Moves count characters if possible (if count would move past thestart or end of the buffer, moves to the start or end of thebuffer). The return value indicates whether the new position ofiter is different from its original position, and dereferenceable(the last iterator in the buffer is not dereferenceable). If countis 0, the function does nothing and returns FALSE .
	iter		# an iterator
	count		# number of characters to move, may be negative
	return:		#  whether itermoved and is dereferenceable 
gboolean gtk_text_iter_backward_chars (GtkTextIter *iter, gint count);	# Moves count characters backward, if possible (if count would movepast the start or end of the buffer, moves to the start or end ofthe buffer). The return value indicates whether the iterator movedonto a dereferenceable position; if the iterator didn’t move, ormoved onto the end iterator, then FALSE is returned. If count is 0,the function does nothing and returns FALSE .
	iter		# an iterator
	count		# number of characters to move
	return:		#  whether itermoved and is dereferenceable 
gboolean gtk_text_iter_forward_line (GtkTextIter *iter);	# Moves iter to the start of the next line. If the iter is already on thelast line of the buffer, moves the iter to the end of the current line.If after the operation, the iter is at the end of the buffer and notdereferencable, returns FALSE . Otherwise, returns TRUE .
	iter		# an iterator
	return:		#  whether itercan be dereferenced 
gboolean gtk_text_iter_backward_line (GtkTextIter *iter);	# Moves iter to the start of the previous line. Returns TRUE ifiter could be moved; i.e. if iter was at character offset 0, thisfunction returns FALSE . Therefore if iter was already on line 0,but not at the start of the line, iter is snapped to the start ofthe line and the function returns TRUE . (Note that this implies thatin a loop calling this function, the line number may not change onevery iteration, if your first iteration is on line 0.)
	iter		# an iterator
	return:		#  whether itermoved 
gboolean gtk_text_iter_forward_lines (GtkTextIter *iter, gint count);	# Moves count lines forward, if possible (if count would movepast the start or end of the buffer, moves to the start or end ofthe buffer). The return value indicates whether the iterator movedonto a dereferenceable position; if the iterator didn’t move, ormoved onto the end iterator, then FALSE is returned. If count is 0,the function does nothing and returns FALSE . If count is negative,moves backward by 0 - count lines.
	iter		# a GtkTextIter 
	count		# number of lines to move forward
	return:		#  whether itermoved and is dereferenceable 
gboolean gtk_text_iter_backward_lines (GtkTextIter *iter, gint count);	# Moves count lines backward, if possible (if count would movepast the start or end of the buffer, moves to the start or end ofthe buffer). The return value indicates whether the iterator movedonto a dereferenceable position; if the iterator didn’t move, ormoved onto the end iterator, then FALSE is returned. If count is 0,the function does nothing and returns FALSE . If count is negative,moves forward by 0 - count lines.
	iter		# a GtkTextIter 
	count		# number of lines to move backward
	return:		#  whether itermoved and is dereferenceable 
gboolean gtk_text_iter_forward_word_ends (GtkTextIter *iter, gint count);	# Calls gtk_text_iter_forward_word_end() up to count times.
	iter		# a GtkTextIter 
	count		# number of times to move
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_backward_word_starts (GtkTextIter *iter, gint count);	# Calls gtk_text_iter_backward_word_start() up to count times.
	iter		# a GtkTextIter 
	count		# number of times to move
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_forward_word_end (GtkTextIter *iter);	# Moves forward to the next word end. (If iter is currently on aword end, moves forward to the next one after that.) Word breaksare determined by Pango and should be correct for nearly anylanguage (if not, the correct fix would be to the Pango word breakalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_backward_word_start (GtkTextIter *iter);	# Moves backward to the previous word start. (If iter is currently on aword start, moves backward to the next one after that.) Word breaksare determined by Pango and should be correct for nearly anylanguage (if not, the correct fix would be to the Pango word breakalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_forward_cursor_position (GtkTextIter *iter);	# Moves iter forward by a single cursor position. Cursor positionsare (unsurprisingly) positions where the cursor can appear. Perhapssurprisingly, there may not be a cursor position between allcharacters. The most common example for European languages would bea carriage return/newline sequence. For some Unicode characters,the equivalent of say the letter “a” with an accent mark will berepresented as two characters, first the letter then a "combiningmark" that causes the accent to be rendered; so the cursor can’t gobetween those two characters. See also the PangoLogAttr andpango_break() function.
	iter		# a GtkTextIter 
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_backward_cursor_position (GtkTextIter *iter);	# Like gtk_text_iter_forward_cursor_position() , but moves backward.
	iter		# a GtkTextIter 
	return:		#  TRUE if we moved 
gboolean gtk_text_iter_forward_cursor_positions (GtkTextIter *iter, gint count);	# Moves up to count cursor positions. Seegtk_text_iter_forward_cursor_position() for details.
	iter		# a GtkTextIter 
	count		# number of positions to move
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_backward_cursor_positions (GtkTextIter *iter, gint count);	# Moves up to count cursor positions. Seegtk_text_iter_forward_cursor_position() for details.
	iter		# a GtkTextIter 
	count		# number of positions to move
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_backward_sentence_start (GtkTextIter *iter);	# Moves backward to the previous sentence start; if iter is already atthe start of a sentence, moves backward to the next one. Sentenceboundaries are determined by Pango and should be correct for nearlyany language (if not, the correct fix would be to the Pango textboundary algorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if itermoved and is not the end iterator 
gboolean gtk_text_iter_backward_sentence_starts (GtkTextIter *iter, gint count);	# Calls gtk_text_iter_backward_sentence_start() up to count times,or until it returns FALSE . If count is negative, moves forwardinstead of backward.
	iter		# a GtkTextIter 
	count		# number of sentences to move
	return:		#  TRUE if itermoved and is not the end iterator 
gboolean gtk_text_iter_forward_sentence_end (GtkTextIter *iter);	# Moves forward to the next sentence end. (If iter is at the end ofa sentence, moves to the next end of sentence.) Sentenceboundaries are determined by Pango and should be correct for nearlyany language (if not, the correct fix would be to the Pango textboundary algorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if itermoved and is not the end iterator 
gboolean gtk_text_iter_forward_sentence_ends (GtkTextIter *iter, gint count);	# Calls gtk_text_iter_forward_sentence_end() count times (or untilgtk_text_iter_forward_sentence_end() returns FALSE ). If count isnegative, moves backward instead of forward.
	iter		# a GtkTextIter 
	count		# number of sentences to move
	return:		#  TRUE if itermoved and is not the end iterator 
gboolean gtk_text_iter_forward_visible_word_ends (GtkTextIter *iter, gint count);	# Calls gtk_text_iter_forward_visible_word_end() up to count times.
	iter		# a GtkTextIter 
	count		# number of times to move
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_backward_visible_word_starts (GtkTextIter *iter, gint count);	# Calls gtk_text_iter_backward_visible_word_start() up to count times.
	iter		# a GtkTextIter 
	count		# number of times to move
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_forward_visible_word_end (GtkTextIter *iter);	# Moves forward to the next visible word end. (If iter is currently on aword end, moves forward to the next one after that.) Word breaksare determined by Pango and should be correct for nearly anylanguage (if not, the correct fix would be to the Pango word breakalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_backward_visible_word_start (GtkTextIter *iter);	# Moves backward to the previous visible word start. (If iter is currently on a word start, moves backward to the next one after that.) Word breaksare determined by Pango and should be correct for nearly anylanguage (if not, the correct fix would be to the Pango word breakalgorithms).
	iter		# a GtkTextIter 
	return:		#  TRUE if itermoved and is not the end iterator  
gboolean gtk_text_iter_forward_visible_cursor_position (GtkTextIter *iter);	# Moves iter forward to the next visible cursor position. See gtk_text_iter_forward_cursor_position() for details.
	iter		# a GtkTextIter 
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_backward_visible_cursor_position (GtkTextIter *iter);	# Moves iter forward to the previous visible cursor position. See gtk_text_iter_backward_cursor_position() for details.
	iter		# a GtkTextIter 
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_forward_visible_cursor_positions (GtkTextIter *iter, gint count);	# Moves up to count visible cursor positions. Seegtk_text_iter_forward_cursor_position() for details.
	iter		# a GtkTextIter 
	count		# number of positions to move
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_backward_visible_cursor_positions (GtkTextIter *iter, gint count);	# Moves up to count visible cursor positions. Seegtk_text_iter_backward_cursor_position() for details.
	iter		# a GtkTextIter 
	count		# number of positions to move
	return:		#  TRUE if we moved and the new position is dereferenceable 
gboolean gtk_text_iter_forward_visible_line (GtkTextIter *iter);	# Moves iter to the start of the next visible line. Returns TRUE if therewas a next line to move to, and FALSE if iter was simply moved tothe end of the buffer and is now not dereferenceable, or if iter wasalready at the end of the buffer.
	iter		# an iterator
	return:		#  whether itercan be dereferenced 
gboolean gtk_text_iter_backward_visible_line (GtkTextIter *iter);	# Moves iter to the start of the previous visible line. Returns TRUE ifiter could be moved; i.e. if iter was at character offset 0, thisfunction returns FALSE . Therefore if iter was already on line 0,but not at the start of the line, iter is snapped to the start ofthe line and the function returns TRUE . (Note that this implies thatin a loop calling this function, the line number may not change onevery iteration, if your first iteration is on line 0.)
	iter		# an iterator
	return:		#  whether itermoved 
gboolean gtk_text_iter_forward_visible_lines (GtkTextIter *iter, gint count);	# Moves count visible lines forward, if possible (if count would movepast the start or end of the buffer, moves to the start or end ofthe buffer). The return value indicates whether the iterator movedonto a dereferenceable position; if the iterator didn’t move, ormoved onto the end iterator, then FALSE is returned. If count is 0,the function does nothing and returns FALSE . If count is negative,moves backward by 0 - count lines.
	iter		# a GtkTextIter 
	count		# number of lines to move forward
	return:		#  whether itermoved and is dereferenceable 
gboolean gtk_text_iter_backward_visible_lines (GtkTextIter *iter, gint count);	# Moves count visible lines backward, if possible (if count would movepast the start or end of the buffer, moves to the start or end ofthe buffer). The return value indicates whether the iterator movedonto a dereferenceable position; if the iterator didn’t move, ormoved onto the end iterator, then FALSE is returned. If count is 0,the function does nothing and returns FALSE . If count is negative,moves forward by 0 - count lines.
	iter		# a GtkTextIter 
	count		# number of lines to move backward
	return:		#  whether itermoved and is dereferenceable 
void gtk_text_iter_set_offset (GtkTextIter *iter, gint char_offset);	# Sets iter to point to char_offset. char_offset counts from the startof the entire text buffer, starting with 0.
	iter		# a GtkTextIter 
	char_offset		# a character number
void gtk_text_iter_set_line (GtkTextIter *iter, gint line_number);	# Moves iterator iter to the start of the line line_number. Ifline_number is negative or larger than the number of lines in thebuffer, moves iter to the start of the last line in the buffer.
	iter		# a GtkTextIter 
	line_number		# line number (counted from 0)
void gtk_text_iter_set_line_offset (GtkTextIter *iter, gint char_on_line);	# Moves iter within a line, to a new character(not byte) offset. The given character offset must be less than orequal to the number of characters in the line; if equal, itermoves to the start of the next line. Seegtk_text_iter_set_line_index() if you have a byte index rather thana character offset.
	iter		# a GtkTextIter 
	char_on_line		# a character offset relative to the start of iter’s current line
void gtk_text_iter_set_line_index (GtkTextIter *iter, gint byte_on_line);	# Same as gtk_text_iter_set_line_offset() , but works with abyte index. The given byte index must be atthe start of a character, it can’t be in the middle of a UTF-8encoded character.
	iter		# a GtkTextIter 
	byte_on_line		# a byte index relative to the start of iter’s current line
void gtk_text_iter_set_visible_line_index (GtkTextIter *iter, gint byte_on_line);	# Like gtk_text_iter_set_line_index() , but the index is in visiblebytes, i.e. text with a tag making it invisible is not countedin the index.
	iter		# a GtkTextIter 
	byte_on_line		# a byte index
void gtk_text_iter_set_visible_line_offset (GtkTextIter *iter, gint char_on_line);	# Like gtk_text_iter_set_line_offset() , but the offset is in visiblecharacters, i.e. text with a tag making it invisible is notcounted in the offset.
	iter		# a GtkTextIter 
	char_on_line		# a character offset
void gtk_text_iter_forward_to_end (GtkTextIter *iter);	# Moves iter forward to the “end iterator,” which points one past the lastvalid character in the buffer. gtk_text_iter_get_char() called on theend iterator returns 0, which is convenient for writing loops.
	iter		# a GtkTextIter 
gboolean gtk_text_iter_forward_to_line_end (GtkTextIter *iter);	# Moves the iterator to point to the paragraph delimiter characters,which will be either a newline, a carriage return, a carriagereturn/newline in sequence, or the Unicode paragraph separatorcharacter. If the iterator is already at the paragraph delimitercharacters, moves to the paragraph delimiter characters for thenext line. If iter is on the last line in the buffer, which doesnot end in paragraph delimiters, moves to the end iterator (end ofthe last line), and returns FALSE .
	iter		# a GtkTextIter 
	return:		#  TRUE if we moved and the new location is not the end iterator 
gboolean gtk_text_iter_forward_to_tag_toggle (GtkTextIter *iter, GtkTextTag *tag);	# Moves forward to the next toggle (on or off) of theGtkTextTag tag, or to the next toggle of any tag iftag is NULL . If no matching tag toggles are found,returns FALSE , otherwise TRUE . Does not return toggleslocated at iter, only toggles after iter. Sets iter tothe location of the toggle, or to the end of the bufferif no toggle is found.
	iter		# a GtkTextIter 
	tag		#  a GtkTextTag , or NULL . 
	return:		#  whether we found a tag toggle after iter 
gboolean gtk_text_iter_backward_to_tag_toggle (GtkTextIter *iter, GtkTextTag *tag);	# Moves backward to the next toggle (on or off) of theGtkTextTag tag, or to the next toggle of any tag iftag is NULL . If no matching tag toggles are found,returns FALSE , otherwise TRUE . Does not return toggleslocated at iter, only toggles before iter. Sets iterto the location of the toggle, or the start of the bufferif no toggle is found.
	iter		# a GtkTextIter 
	tag		#  a GtkTextTag , or NULL . 
	return:		#  whether we found a tag toggle before iter 
gboolean <span class="c_punctuation">( *GtkTextCharPredicate<span class="c_punctuation">) (gunichar ch, gpointer user_data);	# gboolean <span class="c_punctuation">( *GtkTextCharPredicate<span class="c_punctuation">) (gunichar ch, gpointer user_data);</pre></div><hr>
gboolean gtk_text_iter_forward_find_char (GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);	# Advances iter, calling pred on each character. Ifpred returns TRUE , returns TRUE and stops scanning.If pred never returns TRUE , iter is set to limit iflimit is non-NULL , otherwise to the end iterator.
	iter		# a GtkTextIter 
	pred		#  a function to be called on each character. 
	return:		#  whether a match was found 
gboolean gtk_text_iter_backward_find_char (GtkTextIter *iter, GtkTextCharPredicate pred, gpointer user_data, const GtkTextIter *limit);	# Same as gtk_text_iter_forward_find_char() , but goes backward from iter.
	iter		# a GtkTextIter 
	pred		#  function to be called on each character. 
	return:		#  whether a match was found 
gboolean gtk_text_iter_forward_search (const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);	# Searches forward for str. Any match is returned by settingmatch_start to the first character of the match and match_end to thefirst character after the match. The search will not continue pastlimit. Note that a search is a linear or O(n) operation, so youmay wish to use limit to avoid locking up your UI on largebuffers.
	iter		# start of search
	str		# a search string
	flags		# flags affecting how the search is done
	match_start		#  return location for start of match, or NULL . 
	return:		#  whether a match was found 
gboolean gtk_text_iter_backward_search (const GtkTextIter *iter, const gchar *str, GtkTextSearchFlags flags, GtkTextIter *match_start, GtkTextIter *match_end, const GtkTextIter *limit);	# Same as gtk_text_iter_forward_search() , but moves backward.
	iter		# a GtkTextIter where the search begins
	str		# search string
	flags		# bitmask of flags affecting the search
	match_start		#  return location for start of match, or NULL . 
	return:		#  whether a match was found 
gboolean gtk_text_iter_equal (const GtkTextIter *lhs, const GtkTextIter *rhs);	# Tests whether two iterators are equal, using the fastest possiblemechanism. This function is very fast; you can expect it to performbetter than e.g. getting the character offset for each iterator andcomparing the offsets yourself. Also, it’s a bit faster thangtk_text_iter_compare() .
	lhs		# a GtkTextIter 
	rhs		# another GtkTextIter 
	return:		#  TRUE if the iterators point to the same place in the buffer 
gint gtk_text_iter_compare (const GtkTextIter *lhs, const GtkTextIter *rhs);	# A qsort()-style function that returns negative if lhs is less thanrhs, positive if lhs is greater than rhs, and 0 if they’re equal.Ordering is in character offset order, i.e. the first character in the bufferis less than the second character in the buffer.
	lhs		# a GtkTextIter 
	rhs		# another GtkTextIter 
	return:		#  -1 if lhsis less than rhs, 1 if lhsis greater, 0 if they are equal 
gboolean gtk_text_iter_in_range (const GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);	# Checks whether iter falls in the range [start, end).start and end must be in ascending order.
	iter		# a GtkTextIter 
	start		# start of range
	end		# end of range
	return:		#  TRUE if iteris in the range 
void gtk_text_iter_order (GtkTextIter *first, GtkTextIter *second);	# Swaps the value of first and second if second comes beforefirst in the buffer. That is, ensures that first and second arein sequence. Most text buffer functions that take a range call thisautomatically on your behalf, so there’s no real reason to call it yourselfin those cases. There are some exceptions, such as gtk_text_iter_in_range() ,that expect a pre-sorted range.
	first		# a GtkTextIter 
	second		# another GtkTextIter 
GtkTextMark  *gtk_text_mark_new (const gchar *name, gboolean left_gravity);	# Creates a text mark. Add it to a buffer using gtk_text_buffer_add_mark() .If name is NULL , the mark is anonymous; otherwise, the mark can be retrieved by name using gtk_text_buffer_get_mark() . If a mark has left gravity, and text is inserted at the mark’s current location, the mark will be moved to the left of the newly-inserted text. If the mark has right gravity (left_gravity = FALSE ), the mark will end up on the right of newly-inserted text. The standard left-to-right cursor is a mark with right gravity (when you type, the cursor stays on the rightside of the text you’re typing).
	name		#  mark name or NULL . 
	return:		#  new GtkTextMark  
void gtk_text_mark_set_visible (GtkTextMark *mark, gboolean setting);	# Sets the visibility of mark; the insertion point is normallyvisible, i.e. you can see it as a vertical bar. Also, the textwidget uses a visible mark to indicate where a drop will occur whendragging-and-dropping text. Most other marks are not visible.Marks are not visible by default.
	mark		# a GtkTextMark 
	setting		# visibility of mark
gboolean gtk_text_mark_get_visible (GtkTextMark *mark);	# Returns TRUE if the mark is visible (i.e. a cursor is displayedfor it).
	mark		# a GtkTextMark 
	return:		#  TRUE if visible 
gboolean gtk_text_mark_get_deleted (GtkTextMark *mark);	# Returns TRUE if the mark has been removed from its bufferwith gtk_text_buffer_delete_mark() . See gtk_text_buffer_add_mark() for a way to add it to a buffer again.
	mark		# a GtkTextMark 
	return:		#  whether the mark is deleted 
gchar  *gtk_text_mark_get_name (GtkTextMark *mark);	# Returns the mark name; returns NULL for anonymous marks.
	mark		# a GtkTextMark 
	return:		#  mark name 
GtkTextBuffer  *gtk_text_mark_get_buffer (GtkTextMark *mark);	# Gets the buffer this mark is located inside,or NULL if the mark is deleted.
	mark		# a GtkTextMark 
	return:		#  the mark’s GtkTextBuffer .  
gboolean gtk_text_mark_get_left_gravity (GtkTextMark *mark);	# Determines whether the mark has left gravity.
	mark		# a GtkTextMark 
	return:		#  TRUE if the mark has left gravity, FALSE otherwise 
GtkTextBuffer  *gtk_text_buffer_new (GtkTextTagTable *table);	#创建对象:text buffer.
	table		#  a tag table, or NULL to create a new one. 
	return:		#  a new text buffer 
gint gtk_text_buffer_get_line_count (GtkTextBuffer *buffer);	# Obtains the number of lines in the buffer. This value is cached, sothe function is very fast.
	buffer		# a GtkTextBuffer 
	return:		#  number of lines in the buffer 
gint gtk_text_buffer_get_char_count (GtkTextBuffer *buffer);	# Gets the number of characters in the buffer; note that charactersand bytes are not the same, you can’t e.g. expect the contents ofthe buffer in string form to be this many bytes long. The charactercount is cached, so this function is very fast.
	buffer		# a GtkTextBuffer 
	return:		#  number of characters in the buffer 
GtkTextTagTable  *gtk_text_buffer_get_tag_table (GtkTextBuffer *buffer);	# Get the GtkTextTagTable associated with this buffer.
	buffer		# a GtkTextBuffer 
	return:		#  the buffer’s tag table.  
void gtk_text_buffer_insert (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len);	# Inserts len bytes of text at position iter. If len is -1,text must be nul-terminated and will be inserted in itsentirety. Emits the “insert-text” signal; insertion actually occursin the default handler for the signal. iter is invalidated wheninsertion occurs (because the buffer contents change), but thedefault signal handler revalidates it to point to the end of theinserted text.
	buffer		# a GtkTextBuffer 
	iter		# a position in the buffer
	text		# text in UTF-8 format
	len		# length of text in bytes, or -1
void gtk_text_buffer_insert_at_cursor (GtkTextBuffer *buffer, const gchar *text, gint len);	# Simply calls gtk_text_buffer_insert() , using the currentcursor position as the insertion point.
	buffer		# a GtkTextBuffer 
	text		# text in UTF-8 format
	len		# length of text, in bytes
gboolean gtk_text_buffer_insert_interactive (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, gboolean default_editable);	# Like gtk_text_buffer_insert() , but the insertion will not occur ifiter is at a non-editable location in the buffer. Usually youwant to prevent insertions at ineditable locations if the insertionresults from a user action (is interactive).
	buffer		# a GtkTextBuffer 
	iter		# a position in buffer
	text		# some UTF-8 text
	len		# length of text in bytes, or -1
	default_editable		# default editability of buffer
	return:		#  whether text was actually inserted 
gboolean gtk_text_buffer_insert_interactive_at_cursor (GtkTextBuffer *buffer, const gchar *text, gint len, gboolean default_editable);	# Calls gtk_text_buffer_insert_interactive() at the cursorposition.
	buffer		# a GtkTextBuffer 
	text		# text in UTF-8 format
	len		# length of text in bytes, or -1
	default_editable		# default editability of buffer
	return:		#  whether text was actually inserted 
void gtk_text_buffer_insert_range (GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end);	# Copies text, tags, and pixbufs between start and end (the orderof start and end doesn’t matter) and inserts the copy at iter.Used instead of simply getting/inserting text because it preservesimages and tags. If start and end are in a different buffer frombuffer, the two buffers must share the same tag table.
	buffer		# a GtkTextBuffer 
	iter		# a position in buffer
	start		# a position in a GtkTextBuffer 
	end		# another position in the same buffer as start
gboolean gtk_text_buffer_insert_range_interactive (GtkTextBuffer *buffer, GtkTextIter *iter, const GtkTextIter *start, const GtkTextIter *end, gboolean default_editable);	# Same as gtk_text_buffer_insert_range() , but does nothing if theinsertion point isn’t editable. The default_editable parameterindicates whether the text is editable at iter if no tagsenclosing iter affect editability. Typically the result ofgtk_text_view_get_editable() is appropriate here.
	buffer		# a GtkTextBuffer 
	iter		# a position in buffer
	start		# a position in a GtkTextBuffer 
	end		# another position in the same buffer as start
	default_editable		# default editability of the buffer
	return:		#  whether an insertion was possible at iter 
void gtk_text_buffer_insert_with_tags (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, GtkTextTag *first_tag, ...);	# Inserts text into buffer at iter, applying the list of tags tothe newly-inserted text. The last tag specified must be NULL toterminate the list. Equivalent to calling gtk_text_buffer_insert() ,then gtk_text_buffer_apply_tag() on the inserted text;gtk_text_buffer_insert_with_tags() is just a convenience function.
	buffer		# a GtkTextBuffer 
	iter		# an iterator in buffer
	text		# UTF-8 text
	len		# length of text, or -1
	first_tag		# first tag to apply to text
	...		# NULL -terminated list of tags to apply
void gtk_text_buffer_insert_with_tags_by_name (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *text, gint len, const gchar *first_tag_name, ...);	# Same as gtk_text_buffer_insert_with_tags() , but allows youto pass in tag names instead of tag objects.
	buffer		# a GtkTextBuffer 
	iter		# position in buffer
	text		# UTF-8 text
	len		# length of text, or -1
	first_tag_name		# name of a tag to apply to text
	...		# more tag names
void gtk_text_buffer_insert_markup (GtkTextBuffer *buffer, GtkTextIter *iter, const gchar *markup, gint len);	# Inserts the text in markup at position iter. markup will be insertedin its entirety and must be nul-terminated and valid UTF-8. Emits the“insert-text” signal, possibly multiple times; insertionactually occurs in the default handler for the signal. iter will pointto the end of the inserted text on return.
	buffer		# a GtkTextBuffer 
	iter		# location to insert the markup
	markup		# a nul-terminated UTF-8 string containing Pango markup
	len		# length of markupin bytes, or -1
void gtk_text_buffer_delete (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);	# Deletes text between start and end. The order of start and endis not actually relevant; gtk_text_buffer_delete() will reorderthem. This function actually emits the “delete-range” signal, andthe default handler of that signal deletes the text. Because thebuffer is modified, all outstanding iterators become invalid aftercalling this function; however, the start and end will bere-initialized to point to the location where text was deleted.
	buffer		# a GtkTextBuffer 
	start		# a position in buffer
	end		# another position in buffer
gboolean gtk_text_buffer_delete_interactive (GtkTextBuffer *buffer, GtkTextIter *start_iter, GtkTextIter *end_iter, gboolean default_editable);	# Deletes all editable text in the given range.Calls gtk_text_buffer_delete() for each editable sub-range of[start,end). start and end are revalidated to point tothe location of the last deleted range, or left untouched ifno text was deleted.
	buffer		# a GtkTextBuffer 
	start_iter		# start of range to delete
	end_iter		# end of range
	default_editable		# whether the buffer is editable by default
	return:		#  whether some text was actually deleted 
gboolean gtk_text_buffer_backspace (GtkTextBuffer *buffer, GtkTextIter *iter, gboolean interactive, gboolean default_editable);	# Performs the appropriate action as if the user hit the deletekey with the cursor at the position specified by iter. In thenormal case a single character will be deleted, but whencombining accents are involved, more than one character canbe deleted, and when precomposed character and accent combinationsare involved, less than one character will be deleted.
	buffer		# a GtkTextBuffer 
	iter		# a position in buffer
	interactive		# whether the deletion is caused by user interaction
	default_editable		# whether the buffer is editable by default
	return:		#  TRUE if the buffer was modified 
void gtk_text_buffer_set_text (GtkTextBuffer *buffer, const gchar *text, gint len);	# Deletes current contents of buffer, and inserts text instead. Iflen is -1, text must be nul-terminated. text must be valid UTF-8.
	buffer		# a GtkTextBuffer 
	text		# UTF-8 text to insert
	len		# length of textin bytes
gchar  *gtk_text_buffer_get_text (GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);	# Returns the text in the range [start,end). Excludes undisplayedtext (text marked with tags that set the invisibility attribute) ifinclude_hidden_chars is FALSE . Does not include charactersrepresenting embedded images, so byte and character indexes intothe returned string do not correspond to byteand character indexes into the buffer. Contrast withgtk_text_buffer_get_slice() .
	buffer		# a GtkTextBuffer 
	start		# start of a range
	end		# end of a range
	include_hidden_chars		# whether to include invisible text
	return:		#  an allocated UTF-8 string.  
gchar  *gtk_text_buffer_get_slice (GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end, gboolean include_hidden_chars);	# Returns the text in the range [start,end). Excludes undisplayedtext (text marked with tags that set the invisibility attribute) ifinclude_hidden_chars is FALSE . The returned string includes a0xFFFC character whenever the buffer containsembedded images, so byte and character indexes intothe returned string do correspond to byteand character indexes into the buffer. Contrast withgtk_text_buffer_get_text() . Note that 0xFFFC can occur in normaltext as well, so it is not a reliable indicator that a pixbuf orwidget is in the buffer.
	buffer		# a GtkTextBuffer 
	start		# start of a range
	end		# end of a range
	include_hidden_chars		# whether to include invisible text
	return:		#  an allocated UTF-8 string.  
void gtk_text_buffer_insert_pixbuf (GtkTextBuffer *buffer, GtkTextIter *iter, GdkPixbuf *pixbuf);	# Inserts an image into the text buffer at iter. The image will becounted as one character in character counts, and when obtainingthe buffer contents as a string, will be represented by the Unicode“object replacement character” 0xFFFC. Note that the “slice”variants for obtaining portions of the buffer as a string includethis character for pixbufs, but the “text” variants donot. e.g. see gtk_text_buffer_get_slice() andgtk_text_buffer_get_text() .
	buffer		# a GtkTextBuffer 
	iter		# location to insert the pixbuf
	pixbuf		# a GdkPixbuf 
void gtk_text_buffer_insert_child_anchor (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);	# Inserts a child widget anchor into the text buffer at iter. Theanchor will be counted as one character in character counts, andwhen obtaining the buffer contents as a string, will be representedby the Unicode “object replacement character” 0xFFFC. Note that the“slice” variants for obtaining portions of the buffer as a stringinclude this character for child anchors, but the “text” variants donot. E.g. see gtk_text_buffer_get_slice() andgtk_text_buffer_get_text() . Considergtk_text_buffer_create_child_anchor() as a more convenientalternative to this function. The buffer will add a reference tothe anchor, so you can unref it after insertion.
	buffer		# a GtkTextBuffer 
	iter		# location to insert the anchor
	anchor		# a GtkTextChildAnchor 
GtkTextChildAnchor  *gtk_text_buffer_create_child_anchor (GtkTextBuffer *buffer, GtkTextIter *iter);	# This is a convenience function which simply creates a child anchorwith gtk_text_child_anchor_new() and inserts it into the bufferwith gtk_text_buffer_insert_child_anchor() . The new anchor isowned by the buffer; no reference count is returned tothe caller of gtk_text_buffer_create_child_anchor() .
	buffer		# a GtkTextBuffer 
	iter		# location in the buffer
	return:		#  the created child anchor.  
GtkTextMark  *gtk_text_buffer_create_mark (GtkTextBuffer *buffer, const gchar *mark_name, const GtkTextIter *where, gboolean left_gravity);	# Creates a mark at position where. If mark_name is NULL , the markis anonymous; otherwise, the mark can be retrieved by name usinggtk_text_buffer_get_mark() . If a mark has left gravity, and text isinserted at the mark’s current location, the mark will be moved tothe left of the newly-inserted text. If the mark has right gravity(left_gravity = FALSE ), the mark will end up on the right ofnewly-inserted text. The standard left-to-right cursor is a markwith right gravity (when you type, the cursor stays on the rightside of the text you’re typing).
	buffer		# a GtkTextBuffer 
	mark_name		#  name for mark, or NULL . 
	return:		#  the new GtkTextMark object.  
void gtk_text_buffer_move_mark (GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);	# Moves mark to the new location where. Emits the “mark-set” signal as notification of the move.
	buffer		# a GtkTextBuffer 
	mark		# a GtkTextMark 
	where		# new location for markin buffer
void gtk_text_buffer_move_mark_by_name (GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *where);	# Moves the mark named name (which must exist) to location where.See gtk_text_buffer_move_mark() for details.
	buffer		# a GtkTextBuffer 
	name		# name of a mark
	where		# new location for mark
void gtk_text_buffer_add_mark (GtkTextBuffer *buffer, GtkTextMark *mark, const GtkTextIter *where);	# Adds the mark at position where. The mark must not be added toanother buffer, and if its name is not NULL then there must notbe another mark in the buffer with the same name.
	buffer		# a GtkTextBuffer 
	mark		# the mark to add
	where		# location to place mark
void gtk_text_buffer_delete_mark (GtkTextBuffer *buffer, GtkTextMark *mark);	# Deletes mark, so that it’s no longer located anywhere in thebuffer. Removes the reference the buffer holds to the mark, so ifyou haven’t called g_object_ref() on the mark, it will be freed. Evenif the mark isn’t freed, most operations on mark becomeinvalid, until it gets added to a buffer again with gtk_text_buffer_add_mark() . Use gtk_text_mark_get_deleted() to find out if a mark has been removed from its buffer.The “mark-deleted” signal will be emitted as notification afterthe mark is deleted.
	buffer		# a GtkTextBuffer 
	mark		# a GtkTextMark in buffer
void gtk_text_buffer_delete_mark_by_name (GtkTextBuffer *buffer, const gchar *name);	# Deletes the mark named name; the mark must exist. Seegtk_text_buffer_delete_mark() for details.
	buffer		# a GtkTextBuffer 
	name		# name of a mark in buffer
GtkTextMark  *gtk_text_buffer_get_mark (GtkTextBuffer *buffer, const gchar *name);	# Returns the mark named name in buffer buffer, or NULL if no suchmark exists in the buffer.
	buffer		# a GtkTextBuffer 
	name		# a mark name
	return:		#  a GtkTextMark , or NULL .  
GtkTextMark  *gtk_text_buffer_get_insert (GtkTextBuffer *buffer);	# Returns the mark that represents the cursor (insertion point).Equivalent to calling gtk_text_buffer_get_mark() to get the marknamed “insert”, but very slightly more efficient, and involves lesstyping.
	buffer		# a GtkTextBuffer 
	return:		#  insertion point mark.  
GtkTextMark  *gtk_text_buffer_get_selection_bound (GtkTextBuffer *buffer);	# Returns the mark that represents the selection bound. Equivalentto calling gtk_text_buffer_get_mark() to get the mark named“selection_bound”, but very slightly more efficient, and involvesless typing.
	buffer		# a GtkTextBuffer 
	return:		#  selection bound mark.  
gboolean gtk_text_buffer_get_has_selection (GtkTextBuffer *buffer);	# Indicates whether the buffer has some text currently selected.
	buffer		# a GtkTextBuffer 
	return:		#  TRUE if the there is text selected 
void gtk_text_buffer_place_cursor (GtkTextBuffer *buffer, const GtkTextIter *where);	# This function moves the “insert” and “selection_bound” markssimultaneously. If you move them to the same place in two stepswith gtk_text_buffer_move_mark() , you will temporarily select aregion in between their old and new locations, which can be prettyinefficient since the temporarily-selected region will force stuffto be recalculated. This function moves them as a unit, which canbe optimized.
	buffer		# a GtkTextBuffer 
	where		# where to put the cursor
void gtk_text_buffer_select_range (GtkTextBuffer *buffer, const GtkTextIter *ins, const GtkTextIter *bound);	# This function moves the “insert” and “selection_bound” markssimultaneously. If you move them in two stepswith gtk_text_buffer_move_mark() , you will temporarily select aregion in between their old and new locations, which can be prettyinefficient since the temporarily-selected region will force stuffto be recalculated. This function moves them as a unit, which canbe optimized.
	buffer		# a GtkTextBuffer 
	ins		# where to put the “insert” mark
	bound		# where to put the “selection_bound” mark
void gtk_text_buffer_apply_tag (GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);	# Emits the “apply-tag” signal on buffer. The defaulthandler for the signal applies tag to the given range.start and end do not have to be in order.
	buffer		# a GtkTextBuffer 
	tag		# a GtkTextTag 
	start		# one bound of range to be tagged
	end		# other bound of range to be tagged
void gtk_text_buffer_remove_tag (GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);	# Emits the “remove-tag” signal. The default handler for the signalremoves all occurrences of tag from the given range. start andend don’t have to be in order.
	buffer		# a GtkTextBuffer 
	tag		# a GtkTextTag 
	start		# one bound of range to be untagged
	end		# other bound of range to be untagged
void gtk_text_buffer_apply_tag_by_name (GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end);	# Calls gtk_text_tag_table_lookup() on the buffer’s tag table toget a GtkTextTag , then calls gtk_text_buffer_apply_tag() .
	buffer		# a GtkTextBuffer 
	name		# name of a named GtkTextTag 
	start		# one bound of range to be tagged
	end		# other bound of range to be tagged
void gtk_text_buffer_remove_tag_by_name (GtkTextBuffer *buffer, const gchar *name, const GtkTextIter *start, const GtkTextIter *end);	# Calls gtk_text_tag_table_lookup() on the buffer’s tag table toget a GtkTextTag , then calls gtk_text_buffer_remove_tag() .
	buffer		# a GtkTextBuffer 
	name		# name of a GtkTextTag 
	start		# one bound of range to be untagged
	end		# other bound of range to be untagged
void gtk_text_buffer_remove_all_tags (GtkTextBuffer *buffer, const GtkTextIter *start, const GtkTextIter *end);	# Removes all tags in the range between start and end. Be carefulwith this function; it could remove tags added in code unrelated tothe code you’re currently writing. That is, using this function isprobably a bad idea if you have two or more unrelated code sectionsthat add tags.
	buffer		# a GtkTextBuffer 
	start		# one bound of range to be untagged
	end		# other bound of range to be untagged
GtkTextTag  *gtk_text_buffer_create_tag (GtkTextBuffer *buffer, const gchar *tag_name, const gchar *first_property_name, ...);	# Creates a tag and adds it to the tag table for buffer.Equivalent to calling gtk_text_tag_new() and then adding thetag to the buffer’s tag table. The returned tag is owned bythe buffer’s tag table, so the ref count will be equal to one.
	buffer		# a GtkTextBuffer 
	tag_name		#  name of the new tag, or NULL . 
	return:		#  a new tag.  
void gtk_text_buffer_get_iter_at_line_offset (GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint char_offset);	# Obtains an iterator pointing to char_offset within the given line. Notecharacters, not bytes; UTF-8 may encode one character as multiple bytes.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
	line_number		# line number counting from 0
	char_offset		# char offset from start of line
void gtk_text_buffer_get_iter_at_offset (GtkTextBuffer *buffer, GtkTextIter *iter, gint char_offset);	# Initializes iter to a position char_offset chars from the startof the entire buffer. If char_offset is -1 or greater than the numberof characters in the buffer, iter is initialized to the end iterator,the iterator one past the last valid character in the buffer.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
	char_offset		# char offset from start of buffer, counting from 0, or -1
void gtk_text_buffer_get_iter_at_line (GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number);	# Initializes iter to the start of the given line. If line_number is greaterthan the number of lines in the buffer, the end iterator is returned.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
	line_number		# line number counting from 0
void gtk_text_buffer_get_iter_at_line_index (GtkTextBuffer *buffer, GtkTextIter *iter, gint line_number, gint byte_index);	# Obtains an iterator pointing to byte_index within the given line.byte_index must be the start of a UTF-8 character. Note bytes, notcharacters; UTF-8 may encode one character as multiple bytes.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
	line_number		# line number counting from 0
	byte_index		# byte index from start of line
void gtk_text_buffer_get_iter_at_mark (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextMark *mark);	# Initializes iter with the current position of mark.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
void gtk_text_buffer_get_iter_at_child_anchor (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);	# Obtains the location of anchor within buffer.
	buffer		# a GtkTextBuffer 
	iter		#  an iterator to be initialized. 
	anchor		# a child anchor that appears in buffer
void gtk_text_buffer_get_start_iter (GtkTextBuffer *buffer, GtkTextIter *iter);	# Initialized iter with the first position in the text buffer. Thisis the same as using gtk_text_buffer_get_iter_at_offset() to getthe iter at character offset 0.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
void gtk_text_buffer_get_end_iter (GtkTextBuffer *buffer, GtkTextIter *iter);	# Initializes iter with the “end iterator,” one past the last validcharacter in the text buffer. If dereferenced withgtk_text_iter_get_char() , the end iterator has a character value of 0.The entire buffer lies in the range from the first position inthe buffer (call gtk_text_buffer_get_start_iter() to getcharacter position 0) to the end iterator.
	buffer		# a GtkTextBuffer 
	iter		#  iterator to initialize. 
void gtk_text_buffer_get_bounds (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);	# Retrieves the first and last iterators in the buffer, i.e. theentire buffer lies within the range [start,end).
	buffer		# a GtkTextBuffer 
	start		#  iterator to initialize with first position in the buffer. 
	end		#  iterator to initialize with the end iterator. 
gboolean gtk_text_buffer_get_modified (GtkTextBuffer *buffer);	# Indicates whether the buffer has been modified since the last callto gtk_text_buffer_set_modified() set the modification flag toFALSE . Used for example to enable a “save” function in a texteditor.
	buffer		# a GtkTextBuffer 
	return:		#  TRUE if the buffer has been modified 
void gtk_text_buffer_set_modified (GtkTextBuffer *buffer, gboolean setting);	# Used to keep track of whether the buffer has been modified since thelast time it was saved. Whenever the buffer is saved to disk, callgtk_text_buffer_set_modified (buffer, FALSE). When the buffer is modified,it will automatically toggled on the modified bit again. When the modifiedbit flips, the buffer emits the “modified-changed” signal.
	buffer		# a GtkTextBuffer 
	setting		# modification flag setting
gboolean gtk_text_buffer_delete_selection (GtkTextBuffer *buffer, gboolean interactive, gboolean default_editable);	# Deletes the range between the “insert” and “selection_bound” marks,that is, the currently-selected text. If interactive is TRUE ,the editability of the selection will be considered (users can’t deleteuneditable text).
	buffer		# a GtkTextBuffer 
	interactive		# whether the deletion is caused by user interaction
	default_editable		# whether the buffer is editable by default
	return:		#  whether there was a non-empty selection to delete 
void gtk_text_buffer_paste_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard, GtkTextIter *override_location, gboolean default_editable);	# Pastes the contents of a clipboard. If override_location is NULL , thepasted text will be inserted at the cursor position, or the buffer selectionwill be replaced if the selection is non-empty.
	buffer		# a GtkTextBuffer 
	clipboard		# the GtkClipboard to paste from
	override_location		#  location to insert pasted text, or NULL . 
	default_editable		# whether the buffer is editable by default
void gtk_text_buffer_copy_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard);	# Copies the currently-selected text to a clipboard.
	buffer		# a GtkTextBuffer 
	clipboard		# the GtkClipboard object to copy to
void gtk_text_buffer_cut_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard, gboolean default_editable);	# Copies the currently-selected text to a clipboard, then deletessaid text if it’s editable.
	buffer		# a GtkTextBuffer 
	clipboard		# the GtkClipboard object to cut to
	default_editable		# default editability of the buffer
gboolean gtk_text_buffer_get_selection_bounds (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);	# Returns TRUE if some text is selected; places the boundsof the selection in start and end (if the selection has length 0,then start and end are filled in with the same value).start and end will be in ascending order. If start and end areNULL, then they are not filled in, but the return value still indicateswhether text is selected.
	buffer		# a GtkTextBuffer a GtkTextBuffer 
	start		#  iterator to initialize with selection start. 
	return:		#  whether the selection has nonzero length 
void gtk_text_buffer_begin_user_action (GtkTextBuffer *buffer);	# Called to indicate that the buffer operations between here and acall to gtk_text_buffer_end_user_action() are part of a singleuser-visible operation. The operations betweengtk_text_buffer_begin_user_action() andgtk_text_buffer_end_user_action() can then be grouped when creatingan undo stack. GtkTextBuffer maintains a count of calls togtk_text_buffer_begin_user_action() that have not been closed witha call to gtk_text_buffer_end_user_action() , and emits the “begin-user-action” and “end-user-action” signals only for the outermost pair of calls. This allows you to build user actions from other user actions.
	buffer		# a GtkTextBuffer 
void gtk_text_buffer_end_user_action (GtkTextBuffer *buffer);	# Should be paired with a call to gtk_text_buffer_begin_user_action() .See that function for a full explanation.
	buffer		# a GtkTextBuffer 
void gtk_text_buffer_add_selection_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard);	# Adds clipboard to the list of clipboards in which the selection contents of buffer are available. In most cases, clipboard will be the GtkClipboard of type GDK_SELECTION_PRIMARY for a view of buffer.
	buffer		# a GtkTextBuffer 
	clipboard		# a GtkClipboard 
void gtk_text_buffer_remove_selection_clipboard (GtkTextBuffer *buffer, GtkClipboard *clipboard);	# Removes a GtkClipboard added with gtk_text_buffer_add_selection_clipboard() .
	buffer		# a GtkTextBuffer 
	clipboard		# a GtkClipboard added to bufferby
gboolean <span class="c_punctuation">( *GtkTextBufferDeserializeFunc<span class="c_punctuation">) (GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GtkTextIter *iter, const guint8 *data, gsize length, gboolean create_tags, gpointer user_data, GError **error);	# A function that is called to deserialize rich text that has beenserialized with gtk_text_buffer_serialize() , and insert it at iter.
	register_buffer		# the GtkTextBuffer the format is registered with
	content_buffer		# the GtkTextBuffer to deserialize into
	iter		# insertion point for the deserialized text
	data		#  data to deserialize. 
	user_data		# user data that was specified when registering the format
	error		# return location for a GError 
	return:		#  TRUE on success, FALSE otherwise 
gboolean gtk_text_buffer_deserialize (GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, GtkTextIter *iter, const guint8 *data, gsize length, GError **error);	# This function deserializes rich text in format format and insertsit at iter.
	register_buffer		# the GtkTextBuffer formatis registered with
	content_buffer		# the GtkTextBuffer to deserialize into
	format		# the rich text format to use for deserializing
	iter		# insertion point for the deserialized text
	data		#  data to deserialize. 
	return:		#  TRUE on success, FALSE otherwise. 
gboolean gtk_text_buffer_deserialize_get_can_create_tags (GtkTextBuffer *buffer, GdkAtom format);	# This functions returns the value set withgtk_text_buffer_deserialize_set_can_create_tags() 
	buffer		# a GtkTextBuffer 
	format		# a GdkAtom representing a registered rich text format
	return:		#  whether deserializing this format may create tags 
void gtk_text_buffer_deserialize_set_can_create_tags (GtkTextBuffer *buffer, GdkAtom format, gboolean can_create_tags);	# Use this function to allow a rich text deserialization function tocreate new tags in the receiving buffer. Note that using thisfunction is almost always a bad idea, because the rich textfunctions you register should know how to map the rich text formatthey handler to your text buffers set of tags.
	buffer		# a GtkTextBuffer 
	format		# a GdkAtom representing a registered rich text format
	can_create_tags		# whether deserializing this format may create tags
GtkTargetList  *gtk_text_buffer_get_copy_target_list (GtkTextBuffer *buffer);	# This function returns the list of targets this text buffer canprovide for copying and as DND source. The targets in the list areadded with info values from the GtkTextBufferTargetInfo enum,using gtk_target_list_add_rich_text_targets() andgtk_target_list_add_text_targets() .
	buffer		# a GtkTextBuffer 
	return:		#  the GtkTargetList .  
GdkAtom  *gtk_text_buffer_get_deserialize_formats (GtkTextBuffer *buffer, gint *n_formats);	# This function returns the rich text deserialize formats registeredwith buffer using gtk_text_buffer_register_deserialize_format() orgtk_text_buffer_register_deserialize_tagset() 
	buffer		# a GtkTextBuffer 
	n_formats		#  return location for the number of formats. 
	return:		#  an array ofGdkAtoms representing the registered formats.  
GtkTargetList  *gtk_text_buffer_get_paste_target_list (GtkTextBuffer *buffer);	# This function returns the list of targets this text buffer supportsfor pasting and as DND destination. The targets in the list areadded with info values from the GtkTextBufferTargetInfo enum,using gtk_target_list_add_rich_text_targets() andgtk_target_list_add_text_targets() .
	buffer		# a GtkTextBuffer 
	return:		#  the GtkTargetList .  
GdkAtom  *gtk_text_buffer_get_serialize_formats (GtkTextBuffer *buffer, gint *n_formats);	# This function returns the rich text serialize formats registeredwith buffer using gtk_text_buffer_register_serialize_format() orgtk_text_buffer_register_serialize_tagset() 
	buffer		# a GtkTextBuffer 
	n_formats		#  return location for the number of formats. 
	return:		#  an array ofGdkAtoms representing the registered formats.  
GdkAtom gtk_text_buffer_register_deserialize_format (GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy);	# This function registers a rich text deserialization function along withits mime_type with the passed buffer.
	buffer		# a GtkTextBuffer 
	mime_type		# the format’s mime-type
	function		# the deserialize function to register
	user_data		# function’s user_data
	user_data_destroy		# a function to call when user_datais no longer needed
	return:		#  the GdkAtom that corresponds to thenewly registered format’s mime-type.  
GdkAtom gtk_text_buffer_register_deserialize_tagset (GtkTextBuffer *buffer, const gchar *tagset_name);	# This function registers GTK+’s internal rich text serializationformat with the passed buffer. Seegtk_text_buffer_register_serialize_tagset() for details.
	buffer		# a GtkTextBuffer 
	tagset_name		#  an optional tagset name, on NULL . 
	return:		#  the GdkAtom that corresponds to thenewly registered format’s mime-type.  
GdkAtom gtk_text_buffer_register_serialize_format (GtkTextBuffer *buffer, const gchar *mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy);	# This function registers a rich text serialization function along withits mime_type with the passed buffer.
	buffer		# a GtkTextBuffer 
	mime_type		# the format’s mime-type
	function		# the serialize function to register
	user_data		# function’s user_data
	user_data_destroy		# a function to call when user_datais no longer needed
	return:		#  the GdkAtom that corresponds to thenewly registered format’s mime-type.  
GdkAtom gtk_text_buffer_register_serialize_tagset (GtkTextBuffer *buffer, const gchar *tagset_name);	# This function registers GTK+’s internal rich text serializationformat with the passed buffer. The internal format does not complyto any standard rich text format and only works between GtkTextBuffer instances. It is capable of serializing all of a text buffer’s tagsand embedded pixbufs.
	buffer		# a GtkTextBuffer 
	tagset_name		#  an optional tagset name, on NULL . 
	return:		#  the GdkAtom that corresponds to thenewly registered format’s mime-type.  
guint8  *<span class="c_punctuation">( *GtkTextBufferSerializeFunc<span class="c_punctuation">) (GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, const GtkTextIter *start, const GtkTextIter *end, gsize *length, gpointer user_data);	# A function that is called to serialize the content of a text buffer.It must return the serialized form of the content.
	register_buffer		# the GtkTextBuffer for which the format is registered
	content_buffer		# the GtkTextBuffer to serialize
	start		# start of the block of text to serialize
	end		# end of the block of text to serialize
	length		# Return location for the length of the serialized data
	user_data		# user data that was specified when registering the format
	return:		#  a newly-allocated array of guint8 which containsthe serialized data, or NULL if an error occurred.  
guint8  *gtk_text_buffer_serialize (GtkTextBuffer *register_buffer, GtkTextBuffer *content_buffer, GdkAtom format, const GtkTextIter *start, const GtkTextIter *end, gsize *length);	# This function serializes the portion of text between startand end in the rich text format represented by format.
	register_buffer		# the GtkTextBuffer formatis registered with
	content_buffer		# the GtkTextBuffer to serialize
	format		# the rich text format to use for serializing
	start		# start of block of text to serialize
	end		# end of block of test to serialize
	length		#  return location for the length of the serialized data. 
	return:		#  the serializeddata, encoded as format.  
void gtk_text_buffer_unregister_deserialize_format (GtkTextBuffer *buffer, GdkAtom format);	# This function unregisters a rich text format that was previouslyregistered using gtk_text_buffer_register_deserialize_format() orgtk_text_buffer_register_deserialize_tagset() .
	buffer		# a GtkTextBuffer 
	format		# a GdkAtom representing a registered rich text format.
void gtk_text_buffer_unregister_serialize_format (GtkTextBuffer *buffer, GdkAtom format);	# This function unregisters a rich text format that was previouslyregistered using gtk_text_buffer_register_serialize_format() orgtk_text_buffer_register_serialize_tagset() 
	buffer		# a GtkTextBuffer 
	format		# a GdkAtom representing a registered rich text format.
GtkTextTag  *gtk_text_tag_new (const gchar *name);	# Creates a GtkTextTag . Configure the tag using object arguments,i.e. using g_object_set() .
	name		#  tag name, or NULL . 
	return:		#  a new GtkTextTag  
gint gtk_text_tag_get_priority (GtkTextTag *tag);	# Get the tag priority.
	tag		# a GtkTextTag 
	return:		#  The tag’s priority. 
void gtk_text_tag_set_priority (GtkTextTag *tag, gint priority);	# Sets the priority of a GtkTextTag . Valid prioritiesstart at 0 and go to one less than gtk_text_tag_table_get_size() .Each tag in a table has a unique priority; setting the priorityof one tag shifts the priorities of all the other tags in thetable to maintain a unique priority for each tag. Higher prioritytags “win” if two tags both set the same text attribute. When addinga tag to a tag table, it will be assigned the highest priority inthe table by default; so normally the precedence of a set of tagsis the order in which they were added to the table, or created withgtk_text_buffer_create_tag() , which adds the tag to the buffer’s tableautomatically.
	tag		# a GtkTextTag 
	priority		# the new priority
gboolean gtk_text_tag_event (GtkTextTag *tag, GObject *event_object, GdkEvent *event, const GtkTextIter *iter);	# Emits the “event” signal on the GtkTextTag .
	tag		# a GtkTextTag 
	event_object		# object that received the event, such as a widget
	event		# the event
	iter		# location where the event was received
	return:		#  result of signal emission (whether the event was handled) 
void gtk_text_tag_changed (GtkTextTag *tag, gboolean size_changed);	# Emits the “tag-changed” signal on the GtkTextTagTable wherethe tag is included.
	tag		# a GtkTextTag .
	size_changed		# whether the change affects the GtkTextView layout.
void <span class="c_punctuation">( *GtkTextTagTableForeach<span class="c_punctuation">) (GtkTextTag *tag, gpointer data);	# tag
	data		#  data passed to 
GtkTextTagTable  *gtk_text_tag_table_new (void );	#创建对象:GtkTextTagTable . The table contains no tags bydefault.
	return:		#  a new GtkTextTagTable  
gboolean gtk_text_tag_table_add (GtkTextTagTable *table, GtkTextTag *tag);	# Add a tag to the table. The tag is assigned the highest priorityin the table.
	table		# a GtkTextTagTable 
	tag		# a GtkTextTag 
	return:		#  TRUE on success. 
void gtk_text_tag_table_remove (GtkTextTagTable *table, GtkTextTag *tag);	# Remove a tag from the table. If a GtkTextBuffer has table as its tag table,the tag is removed from the buffer. The table’s reference to the tag isremoved, so the tag will end up destroyed if you don’t have a reference toit.
	table		# a GtkTextTagTable 
	tag		# a GtkTextTag 
GtkTextTag  *gtk_text_tag_table_lookup (GtkTextTagTable *table, const gchar *name);	# Look up a named tag.
	table		# a GtkTextTagTable 
	name		# name of a tag
	return:		#  The tag, or NULL if none by thatname is in the table.  
void gtk_text_tag_table_foreach (GtkTextTagTable *table, GtkTextTagTableForeach func, gpointer data);	# Calls func on each tag in table, with user data data.Note that the table may not be modified while iterating over it (you can’t add/remove tags).
	table		# a GtkTextTagTable 
	func		#  a function to call on each tag. 
	data		# user data
gint gtk_text_tag_table_get_size (GtkTextTagTable *table);	# Returns the size of the table (number of tags)
	table		# a GtkTextTagTable 
	return:		#  number of tags in table 

GtkWidget  *gtk_text_view_new (void );	#创建对象:GtkTextView . If you don’t call gtk_text_view_set_buffer() before using the text view, an empty default buffer will be createdfor you. Get the buffer with gtk_text_view_get_buffer() . If you wantto specify your own buffer, consider gtk_text_view_new_with_buffer() .
	return:		#  a new GtkTextView  
GtkWidget  *gtk_text_view_new_with_buffer (GtkTextBuffer *buffer);	#创建对象:GtkTextView widget displaying the bufferbuffer. One buffer can be shared among many widgets.buffer may be NULL to create a default buffer, in which casethis function is equivalent to gtk_text_view_new() . Thetext view adds its own reference count to the buffer; it does nottake over an existing reference.
	buffer		# a GtkTextBuffer 
	return:		#  a new GtkTextView . 
void gtk_text_view_set_buffer (GtkTextView *text_view, GtkTextBuffer *buffer);	# Sets buffer as the buffer being displayed by text_view. The previousbuffer displayed by the text view is unreferenced, and a reference isadded to buffer. If you owned a reference to buffer before passing itto this function, you must remove that reference yourself; GtkTextView will not “adopt” it.
	text_view		# a GtkTextView 
	buffer		#  a GtkTextBuffer . 
GtkTextBuffer  *gtk_text_view_get_buffer (GtkTextView *text_view);	# Returns the GtkTextBuffer being displayed by this text view.The reference count on the buffer is not incremented; the callerof this function won’t own a new reference.
	text_view		# a GtkTextView 
	return:		#  a GtkTextBuffer .  
void gtk_text_view_scroll_to_mark (GtkTextView *text_view, GtkTextMark *mark, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign);	# Scrolls text_view so that mark is on the screen in the positionindicated by xalign and yalign. An alignment of 0.0 indicatesleft or top, 1.0 indicates right or bottom, 0.5 means center. If use_align is FALSE , the text scrolls the minimal distance to get the mark onscreen, possibly not scrolling at all. The effective screen for purposes of this function is reduced by a margin of size within_margin.
	text_view		# a GtkTextView 
	mark		# a GtkTextMark 
	within_margin		# margin as a [0.0,0.5) fraction of screen size
	use_align		# whether to use alignment arguments (if FALSE , justget the mark onscreen)
	xalign		# horizontal alignment of mark within visible area
	yalign		# vertical alignment of mark within visible area
gboolean gtk_text_view_scroll_to_iter (GtkTextView *text_view, GtkTextIter *iter, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign);	# Scrolls text_view so that iter is on the screen in the positionindicated by xalign and yalign. An alignment of 0.0 indicatesleft or top, 1.0 indicates right or bottom, 0.5 means center.If use_align is FALSE , the text scrolls the minimal distance toget the mark onscreen, possibly not scrolling at all. The effectivescreen for purposes of this function is reduced by a margin of sizewithin_margin.
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	within_margin		# margin as a [0.0,0.5) fraction of screen size
	use_align		# whether to use alignment arguments (if FALSE ,just get the mark onscreen)
	xalign		# horizontal alignment of mark within visible area
	yalign		# vertical alignment of mark within visible area
	return:		#  TRUE if scrolling occurred 
void gtk_text_view_scroll_mark_onscreen (GtkTextView *text_view, GtkTextMark *mark);	# Scrolls text_view the minimum distance such that mark is containedwithin the visible area of the widget.
	text_view		# a GtkTextView 
	mark		# a mark in the buffer for text_view
gboolean gtk_text_view_move_mark_onscreen (GtkTextView *text_view, GtkTextMark *mark);	# Moves a mark within the buffer so that it'slocated within the currently-visible text area.
	text_view		# a GtkTextView 
	mark		# a GtkTextMark 
	return:		#  TRUE if the mark moved (wasn’t already onscreen) 
gboolean gtk_text_view_place_cursor_onscreen (GtkTextView *text_view);	# Moves the cursor to the currently visible region of thebuffer, it it isn’t there already.
	text_view		# a GtkTextView 
	return:		#  TRUE if the cursor had to be moved. 
void gtk_text_view_get_visible_rect (GtkTextView *text_view, GdkRectangle *visible_rect);	# Fills visible_rect with the currently-visibleregion of the buffer, in buffer coordinates. Convert to window coordinateswith gtk_text_view_buffer_to_window_coords() .
	text_view		# a GtkTextView 
	visible_rect		#  rectangle to fill. 
void gtk_text_view_get_iter_location (GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *location);	# Gets a rectangle which roughly contains the character at iter.The rectangle position is in buffer coordinates; usegtk_text_view_buffer_to_window_coords() to convert thesecoordinates to coordinates for one of the windows in the text view.
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	location		#  bounds of the character at iter. 
void gtk_text_view_get_cursor_locations (GtkTextView *text_view, const GtkTextIter *iter, GdkRectangle *strong, GdkRectangle *weak);	# Given an iter within a text layout, determine the positions of thestrong and weak cursors if the insertion point is at thatiterator. The position of each cursor is stored as a zero-widthrectangle. The strong cursor location is the location wherecharacters of the directionality equal to the base direction of theparagraph are inserted. The weak cursor location is the locationwhere characters of the directionality opposite to the basedirection of the paragraph are inserted.
	text_view		# a GtkTextView 
	iter		#  a GtkTextIter . 
void gtk_text_view_get_line_at_y (GtkTextView *text_view, GtkTextIter *target_iter, gint y, gint *line_top);	# Gets the GtkTextIter at the start of the line containingthe coordinate y. y is in buffer coordinates, convert fromwindow coordinates with gtk_text_view_window_to_buffer_coords() .If non-NULL , line_top will be filled with the coordinate of the topedge of the line.
	text_view		# a GtkTextView 
	target_iter		#  a GtkTextIter . 
	y		# a y coordinate
	line_top		#  return location for top coordinate of the line. 
void gtk_text_view_get_line_yrange (GtkTextView *text_view, const GtkTextIter *iter, gint *y, gint *height);	# Gets the y coordinate of the top of the line containing iter,and the height of the line. The coordinate is a buffer coordinate;convert to window coordinates with gtk_text_view_buffer_to_window_coords() .
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	y		#  return location for a y coordinate. 
	height		#  return location for a height. 
gboolean gtk_text_view_get_iter_at_location (GtkTextView *text_view, GtkTextIter *iter, gint x, gint y);	# Retrieves the iterator at buffer coordinates x and y. Buffercoordinates are coordinates for the entire buffer, not just thecurrently-displayed portion. If you have coordinates from anevent, you have to convert those to buffer coordinates withgtk_text_view_window_to_buffer_coords() .
	text_view		# a GtkTextView 
	iter		#  a GtkTextIter . 
	return:		#  TRUE if the position is over text 
gboolean gtk_text_view_get_iter_at_position (GtkTextView *text_view, GtkTextIter *iter, gint *trailing, gint x, gint y);	# Retrieves the iterator pointing to the character at buffercoordinates x and y. Buffer coordinates are coordinates forthe entire buffer, not just the currently-displayed portion.If you have coordinates from an event, you have to convertthose to buffer coordinates withgtk_text_view_window_to_buffer_coords() .
	text_view		# a GtkTextView 
	iter		#  a GtkTextIter . 
	return:		#  TRUE if the position is over text 
void gtk_text_view_buffer_to_window_coords (GtkTextView *text_view, GtkTextWindowType win, gint buffer_x, gint buffer_y, gint *window_x, gint *window_y);	# Converts coordinate (buffer_x, buffer_y) to coordinates for the windowwin, and stores the result in (window_x, window_y). 
	text_view		# a GtkTextView 
	win		# a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE 
	buffer_x		# buffer x coordinate
	buffer_y		# buffer y coordinate
	window_x		#  window x coordinate return location or NULL . 
void gtk_text_view_window_to_buffer_coords (GtkTextView *text_view, GtkTextWindowType win, gint window_x, gint window_y, gint *buffer_x, gint *buffer_y);	# Converts coordinates on the window identified by win to buffercoordinates, storing the result in (buffer_x,buffer_y).
	text_view		# a GtkTextView 
	win		# a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE 
	window_x		# window x coordinate
	window_y		# window y coordinate
	buffer_x		#  buffer x coordinate return location or NULL . 
GdkWindow  *gtk_text_view_get_window (GtkTextView *text_view, GtkTextWindowType win);	# Retrieves the GdkWindow corresponding to an area of the text view;possible windows include the overall widget window, child windowson the left, right, top, bottom, and the window that displays thetext buffer. Windows are NULL and nonexistent if their width orheight is 0, and are nonexistent before the widget has beenrealized.
	text_view		# a GtkTextView 
	win		# window to get
	return:		#  a GdkWindow , or NULL .  
GtkTextWindowType gtk_text_view_get_window_type (GtkTextView *text_view, GdkWindow *window);	# Usually used to find out which window an event corresponds to.If you connect to an event signal on text_view, this functionshould be called on event-&gt;window tosee which window it was.
	text_view		# a GtkTextView 
	window		# a window type
	return:		#  the window type. 
void gtk_text_view_set_border_window_size (GtkTextView *text_view, GtkTextWindowType type, gint size);	# Sets the width of GTK_TEXT_WINDOW_LEFT or GTK_TEXT_WINDOW_RIGHT ,or the height of GTK_TEXT_WINDOW_TOP or GTK_TEXT_WINDOW_BOTTOM .Automatically destroys the corresponding window if the size is setto 0, and creates the window if the size is set to non-zero. Thisfunction can only be used for the “border windows,” it doesn’t workwith GTK_TEXT_WINDOW_WIDGET , GTK_TEXT_WINDOW_TEXT , orGTK_TEXT_WINDOW_PRIVATE .
	text_view		# a GtkTextView 
	type		# window to affect
	size		# width or height of the window
gint gtk_text_view_get_border_window_size (GtkTextView *text_view, GtkTextWindowType type);	# Gets the width of the specified border window. Seegtk_text_view_set_border_window_size() .
	text_view		# a GtkTextView 
	type		# window to return size from
	return:		#  width of window 
gboolean gtk_text_view_forward_display_line (GtkTextView *text_view, GtkTextIter *iter);	# Moves the given iter forward by one display (wrapped) line.A display line is different from a paragraph. Paragraphs areseparated by newlines or other paragraph separator characters.Display lines are created by line-wrapping a paragraph. Ifwrapping is turned off, display lines and paragraphs will be thesame. Display lines are divided differently for each view, sincethey depend on the view’s width; paragraphs are the same in allviews, since they depend on the contents of the GtkTextBuffer .
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	return:		#  TRUE if iterwas moved and is not on the end iterator 
gboolean gtk_text_view_backward_display_line (GtkTextView *text_view, GtkTextIter *iter);	# Moves the given iter backward by one display (wrapped) line.A display line is different from a paragraph. Paragraphs areseparated by newlines or other paragraph separator characters.Display lines are created by line-wrapping a paragraph. Ifwrapping is turned off, display lines and paragraphs will be thesame. Display lines are divided differently for each view, sincethey depend on the view’s width; paragraphs are the same in allviews, since they depend on the contents of the GtkTextBuffer .
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	return:		#  TRUE if iterwas moved and is not on the end iterator 
gboolean gtk_text_view_forward_display_line_end (GtkTextView *text_view, GtkTextIter *iter);	# Moves the given iter forward to the next display line end.A display line is different from a paragraph. Paragraphs areseparated by newlines or other paragraph separator characters.Display lines are created by line-wrapping a paragraph. Ifwrapping is turned off, display lines and paragraphs will be thesame. Display lines are divided differently for each view, sincethey depend on the view’s width; paragraphs are the same in allviews, since they depend on the contents of the GtkTextBuffer .
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	return:		#  TRUE if iterwas moved and is not on the end iterator 
gboolean gtk_text_view_backward_display_line_start (GtkTextView *text_view, GtkTextIter *iter);	# Moves the given iter backward to the next display line start.A display line is different from a paragraph. Paragraphs areseparated by newlines or other paragraph separator characters.Display lines are created by line-wrapping a paragraph. Ifwrapping is turned off, display lines and paragraphs will be thesame. Display lines are divided differently for each view, sincethey depend on the view’s width; paragraphs are the same in allviews, since they depend on the contents of the GtkTextBuffer .
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	return:		#  TRUE if iterwas moved and is not on the end iterator 
gboolean gtk_text_view_starts_display_line (GtkTextView *text_view, const GtkTextIter *iter);	# Determines whether iter is at the start of a display line.See gtk_text_view_forward_display_line() for an explanation ofdisplay lines vs. paragraphs.
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	return:		#  TRUE if iterbegins a wrapped line 
gboolean gtk_text_view_move_visually (GtkTextView *text_view, GtkTextIter *iter, gint count);	# Move the iterator a given number of characters visually, treatingit as the strong cursor position. If count is positive, then thenew strong cursor position will be count positions to the right ofthe old cursor position. If count is negative then the new strongcursor position will be count positions to the left of the oldcursor position.
	text_view		# a GtkTextView 
	iter		# a GtkTextIter 
	count		# number of characters to move (negative moves left,positive moves right)
	return:		#  TRUE if itermoved and is not on the end iterator 
void gtk_text_view_add_child_at_anchor (GtkTextView *text_view, GtkWidget *child, GtkTextChildAnchor *anchor);	# Adds a child widget in the text buffer, at the given anchor.
	text_view		# a GtkTextView 
	child		# a GtkWidget 
	anchor		# a GtkTextChildAnchor in the GtkTextBuffer for text_view
GtkTextChildAnchor  *gtk_text_child_anchor_new (void );	#创建对象:GtkTextChildAnchor . Usually you would then insertit into a GtkTextBuffer with gtk_text_buffer_insert_child_anchor() .To perform the creation and insertion in one step, use theconvenience function gtk_text_buffer_create_child_anchor() .
	return:		#  a new GtkTextChildAnchor  
GList  *gtk_text_child_anchor_get_widgets (GtkTextChildAnchor *anchor);	# Gets a list of all widgets anchored at this child anchor.The returned list should be freed with g_list_free() .
	anchor		# a GtkTextChildAnchor 
	return:		#  list of widgets anchored at anchor.  
gboolean gtk_text_child_anchor_get_deleted (GtkTextChildAnchor *anchor);	# Determines whether a child anchor has been deleted fromthe buffer. Keep in mind that the child anchor will beunreferenced when removed from the buffer, so you need tohold your own reference (with g_object_ref() ) if you planto use this function — otherwise all deleted child anchorswill also be finalized.
	anchor		# a GtkTextChildAnchor 
	return:		#  TRUE if the child anchor has been deleted from its buffer 
void gtk_text_view_add_child_in_window (GtkTextView *text_view, GtkWidget *child, GtkTextWindowType which_window, gint xpos, gint ypos);	# Adds a child at fixed coordinates in one of the text widget'swindows.
	text_view		# a GtkTextView 
	child		# a GtkWidget 
	which_window		# which window the child should appear in
	xpos		# X position of child in window coordinates
	ypos		# Y position of child in window coordinates
void gtk_text_view_move_child (GtkTextView *text_view, GtkWidget *child, gint xpos, gint ypos);	# Updates the position of a child, as for gtk_text_view_add_child_in_window() .
	text_view		# a GtkTextView 
	child		# child widget already added to the text view
	xpos		# new X position in window coordinates
	ypos		# new Y position in window coordinates
void gtk_text_view_set_wrap_mode (GtkTextView *text_view, GtkWrapMode wrap_mode);	# Sets the line wrapping for the view.
	text_view		# a GtkTextView 
	wrap_mode		# a GtkWrapMode 
GtkWrapMode gtk_text_view_get_wrap_mode (GtkTextView *text_view);	# Gets the line wrapping for the view.
	text_view		# a GtkTextView 
	return:		#  the line wrap setting 
void gtk_text_view_set_editable (GtkTextView *text_view, gboolean setting);	# Sets the default editability of the GtkTextView . You can overridethis default setting with tags in the buffer, using the “editable”attribute of tags.
	text_view		# a GtkTextView 
	setting		# whether it’s editable
gboolean gtk_text_view_get_editable (GtkTextView *text_view);	# Returns the default editability of the GtkTextView . Tags in thebuffer may override this setting for some ranges of text.
	text_view		# a GtkTextView 
	return:		#  whether text is editable by default 
void gtk_text_view_set_cursor_visible (GtkTextView *text_view, gboolean setting);	# Toggles whether the insertion point should be displayed. A buffer withno editable text probably shouldn’t have a visible cursor, so you maywant to turn the cursor off.
	text_view		# a GtkTextView 
	setting		# whether to show the insertion cursor
gboolean gtk_text_view_get_cursor_visible (GtkTextView *text_view);	# Find out whether the cursor should be displayed.
	text_view		# a GtkTextView 
	return:		#  whether the insertion mark is visible 
void gtk_text_view_reset_cursor_blink (GtkTextView *text_view);	# Ensures that the cursor is shown (i.e. not in an 'off' blinkinterval) and resets the time that it will stay blinking (orvisible, in case blinking is disabled).
	text_view		# a GtkTextView 
void gtk_text_view_set_overwrite (GtkTextView *text_view, gboolean overwrite);	# Changes the GtkTextView overwrite mode.
	text_view		# a GtkTextView 
	overwrite		# TRUE to turn on overwrite mode, FALSE to turn it off
gboolean gtk_text_view_get_overwrite (GtkTextView *text_view);	# Returns whether the GtkTextView is in overwrite mode or not.
	text_view		# a GtkTextView 
	return:		#  whether text_viewis in overwrite mode or not. 
void gtk_text_view_set_pixels_above_lines (GtkTextView *text_view, gint pixels_above_lines);	# Sets the default number of blank pixels above paragraphs in text_view.Tags in the buffer for text_view may override the defaults.
	text_view		# a GtkTextView 
	pixels_above_lines		# pixels above paragraphs
gint gtk_text_view_get_pixels_above_lines (GtkTextView *text_view);	# Gets the default number of pixels to put above paragraphs.Adding this function with gtk_text_view_get_pixels_below_lines() is equal to the line space between each paragraph.
	text_view		# a GtkTextView 
	return:		#  default number of pixels above paragraphs 
void gtk_text_view_set_pixels_below_lines (GtkTextView *text_view, gint pixels_below_lines);	# Sets the default number of pixels of blank spaceto put below paragraphs in text_view. May be overriddenby tags applied to text_view’s buffer.
	text_view		# a GtkTextView 
	pixels_below_lines		# pixels below paragraphs 
gint gtk_text_view_get_pixels_below_lines (GtkTextView *text_view);	# Gets the value set by gtk_text_view_set_pixels_below_lines() .
	text_view		# a GtkTextView 
	return:		#  default number of blank pixels below paragraphs 
void gtk_text_view_set_pixels_inside_wrap (GtkTextView *text_view, gint pixels_inside_wrap);	# Sets the default number of pixels of blank space to leave betweendisplay/wrapped lines within a paragraph. May be overridden bytags in text_view’s buffer.
	text_view		# a GtkTextView 
	pixels_inside_wrap		# default number of pixels between wrapped lines
gint gtk_text_view_get_pixels_inside_wrap (GtkTextView *text_view);	# Gets the value set by gtk_text_view_set_pixels_inside_wrap() .
	text_view		# a GtkTextView 
	return:		#  default number of pixels of blank space between wrapped lines 
void gtk_text_view_set_justification (GtkTextView *text_view, GtkJustification justification);	# Sets the default justification of text in text_view.Tags in the view’s buffer may override the default.
	text_view		# a GtkTextView 
	justification		# justification
GtkJustification gtk_text_view_get_justification (GtkTextView *text_view);	# Gets the default justification of paragraphs in text_view.Tags in the buffer may override the default.
	text_view		# a GtkTextView 
	return:		#  default justification 
void gtk_text_view_set_left_margin (GtkTextView *text_view, gint left_margin);	# Sets the default left margin for text in text_view.Tags in the buffer may override the default.
	text_view		# a GtkTextView 
	left_margin		# left margin in pixels
gint gtk_text_view_get_left_margin (GtkTextView *text_view);	# Gets the default left margin size of paragraphs in the text_view.Tags in the buffer may override the default.
	text_view		# a GtkTextView 
	return:		#  left margin in pixels 
void gtk_text_view_set_right_margin (GtkTextView *text_view, gint right_margin);	# Sets the default right margin for text in the text view.Tags in the buffer may override the default.
	text_view		# a GtkTextView 
	right_margin		# right margin in pixels
gint gtk_text_view_get_right_margin (GtkTextView *text_view);	# Gets the default right margin for text in text_view. Tagsin the buffer may override the default.
	text_view		# a GtkTextView 
	return:		#  right margin in pixels 
void gtk_text_view_set_top_margin (GtkTextView *text_view, gint top_margin);	# Sets the top margin for text in text_view.
	text_view		# a GtkTextView 
	top_margin		# top margin in pixels
gint gtk_text_view_get_top_margin (GtkTextView *text_view);	# Gets the top margin for text in the text_view.
	text_view		# a GtkTextView 
	return:		#  top margin in pixels 
void gtk_text_view_set_bottom_margin (GtkTextView *text_view, gint bottom_margin);	# Sets the bottom margin for text in text_view.
	text_view		# a GtkTextView 
	bottom_margin		# bottom margin in pixels
gint gtk_text_view_get_bottom_margin (GtkTextView *text_view);	# Gets the bottom margin for text in the text_view.
	text_view		# a GtkTextView 
	return:		#  bottom margin in pixels 
void gtk_text_view_set_indent (GtkTextView *text_view, gint indent);	# Sets the default indentation for paragraphs in text_view.Tags in the buffer may override the default.
	text_view		# a GtkTextView 
	indent		# indentation in pixels
gint gtk_text_view_get_indent (GtkTextView *text_view);	# Gets the default indentation of paragraphs in text_view.Tags in the view’s buffer may override the default.The indentation may be negative.
	text_view		# a GtkTextView 
	return:		#  number of pixels of indentation 
void gtk_text_view_set_tabs (GtkTextView *text_view, PangoTabArray *tabs);	# Sets the default tab stops for paragraphs in text_view.Tags in the buffer may override the default.
	text_view		# a GtkTextView 
	tabs		# tabs as a PangoTabArray 
PangoTabArray  *gtk_text_view_get_tabs (GtkTextView *text_view);	# Gets the default tabs for text_view. Tags in the buffer mayoverride the defaults. The returned array will be NULL if“standard” (8-space) tabs are used. Free the return valuewith pango_tab_array_free() .
	text_view		# a GtkTextView 
	return:		#  copy of default tab array, or NULL if“standard" tabs are used; must be freed with pango_tab_array_free() .  
void gtk_text_view_set_accepts_tab (GtkTextView *text_view, gboolean accepts_tab);	# Sets the behavior of the text widget when the Tab key is pressed. If accepts_tab is TRUE , a tab character is inserted. If accepts_tab is FALSE the keyboard focus is moved to the next widget in the focus chain.
	text_view		# A GtkTextView 
	accepts_tab		# TRUE if pressing the Tab key should insert a tabcharacter, FALSE , if pressing the Tab key should move thekeyboard focus.
gboolean gtk_text_view_get_accepts_tab (GtkTextView *text_view);	# Returns whether pressing the Tab key inserts a tab characters.gtk_text_view_set_accepts_tab() .
	text_view		# A GtkTextView 
	return:		#  TRUE if pressing the Tab key inserts a tab character,FALSE if pressing the Tab key moves the keyboard focus. 
gboolean gtk_text_view_im_context_filter_keypress (GtkTextView *text_view, GdkEventKey *event);	# Allow the GtkTextView input method to internally handle key pressand release events. If this function returns TRUE , then no furtherprocessing should be done for this key event. Seegtk_im_context_filter_keypress() .
	text_view		# a GtkTextView 
	event		# the key event
	return:		#  TRUE if the input method handled the key event. 
void gtk_text_view_reset_im_context (GtkTextView *text_view);	# Reset the input method context of the text view if needed.
	text_view		# a GtkTextView 
void gtk_text_view_set_input_purpose (GtkTextView *text_view, GtkInputPurpose purpose);	# Sets the “input-purpose” property whichcan be used by on-screen keyboards and other inputmethods to adjust their behaviour.
	text_view		# a GtkTextView 
	purpose		# the purpose
GtkInputPurpose gtk_text_view_get_input_purpose (GtkTextView *text_view);	# Gets the value of the “input-purpose” property.
	text_view		# a GtkTextView 
void gtk_text_view_set_input_hints (GtkTextView *text_view, GtkInputHints hints);	# Sets the “input-hints” property, whichallows input methods to fine-tune their behaviour.
	text_view		# a GtkTextView 
	hints		# the hints
GtkInputHints gtk_text_view_get_input_hints (GtkTextView *text_view);	# Gets the value of the “input-hints” property.
	text_view		# a GtkTextView 
void gtk_text_view_set_monospace (GtkTextView *text_view, gboolean monospace);	# Sets the “monospace” property, whichindicates that the text view should use monospacefonts.
	text_view		# a GtkTextView 
	monospace		# TRUE to request monospace styling
gboolean gtk_text_view_get_monospace (GtkTextView *text_view);	# Gets the value of the “monospace” property.
	text_view		# a GtkTextView 
gboolean <span class="c_punctuation">( *GtkTreeModelForeachFunc<span class="c_punctuation">) (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);	# Type of the callback passed to gtk_tree_model_foreach() toiterate over the rows in a tree model.
	model		# the GtkTreeModel being iterated
	path		# the current GtkTreePath 
	iter		# the current GtkTreeIter 
	data		#  The user data passed to 
	return:		#  TRUE to stop iterating, FALSE to continue 
GtkTreePath  *gtk_tree_path_new (void );	#创建对象:GtkTreePath .This refers to a row.
	return:		#  A newly created GtkTreePath . 
GtkTreePath  *gtk_tree_path_new_from_string (const gchar *path);	#创建对象:GtkTreePath initialized to path.
	path		# The string representation of a path
	return:		#  A newly-created GtkTreePath , or NULL  
GtkTreePath  *gtk_tree_path_new_from_indices (gint first_index, ...);	#创建对象:path with first_index and varargs as indices.
	first_index		# first integer
	...		# list of integers terminated by -1
	return:		#  A newly created GtkTreePath  
GtkTreePath  *gtk_tree_path_new_from_indicesv (gint *indices, gsize length);	#创建对象:path with the given indices array of length.
	indices		#  array of indices. 
	return:		#  A newly created GtkTreePath  
gchar  *gtk_tree_path_to_string (GtkTreePath *path);	# Generates a string representation of the path.
	path		# A GtkTreePath 
	return:		#  A newly-allocated string.Must be freed with g_free() . 
GtkTreePath  *gtk_tree_path_new_first (void );	#创建对象:GtkTreePath .
	return:		#  A new GtkTreePath  
void gtk_tree_path_append_index (GtkTreePath *path, gint index_);	# Appends a new index to a path.
	path		# a GtkTreePath 
	index_		# the index
void gtk_tree_path_prepend_index (GtkTreePath *path, gint index_);	# Prepends a new index to a path.
	path		# a GtkTreePath 
	index_		# the index
gint gtk_tree_path_get_depth (GtkTreePath *path);	# Returns the current depth of path.
	path		# a GtkTreePath 
	return:		#  The depth of path 
gint  *gtk_tree_path_get_indices (GtkTreePath *path);	# Returns the current indices of path.
	path		# a GtkTreePath 
	return:		#  The current indices, or NULL  
gint  *gtk_tree_path_get_indices_with_depth (GtkTreePath *path, gint *depth);	# Returns the current indices of path.
	path		# a GtkTreePath 
	depth		#  return location for number of elementsreturned in the integer array, or NULL . 
	return:		#  The currentindices, or NULL .  
void gtk_tree_path_free (GtkTreePath *path);	# Frees path. If path is NULL , it simply returns.
	path		#  a GtkTreePath . 
GtkTreePath  *gtk_tree_path_copy (const GtkTreePath *path);	#创建对象:GtkTreePath as a copy of path.
	path		# a GtkTreePath 
	return:		#  a new GtkTreePath  
gint gtk_tree_path_compare (const GtkTreePath *a, const GtkTreePath *b);	# Compares two paths.
	a		# a GtkTreePath 
	b		# a GtkTreePath to compare with
	return:		#  the relative positions of aand b 
void gtk_tree_path_next (GtkTreePath *path);	# Moves the path to point to the next node at the current depth.
	path		# a GtkTreePath 
gboolean gtk_tree_path_prev (GtkTreePath *path);	# Moves the path to point to the previous node at thecurrent depth, if it exists.
	path		# a GtkTreePath 
	return:		#  TRUE if pathhas a previous node, andthe move was made 
gboolean gtk_tree_path_up (GtkTreePath *path);	# Moves the path to point to its parent node, if it has a parent.
	path		# a GtkTreePath 
	return:		#  TRUE if pathhas a parent, and the move was made 
void gtk_tree_path_down (GtkTreePath *path);	# Moves path to point to the first child of the current path.
	path		# a GtkTreePath 
gboolean gtk_tree_path_is_ancestor (GtkTreePath *path, GtkTreePath *descendant);	# Returns TRUE if descendant is a descendant of path.
	path		# a GtkTreePath 
	descendant		# another GtkTreePath 
	return:		#  TRUE if descendantis contained inside path 
gboolean gtk_tree_path_is_descendant (GtkTreePath *path, GtkTreePath *ancestor);	# Returns TRUE if path is a descendant of ancestor.
	path		# a GtkTreePath 
	ancestor		# another GtkTreePath 
	return:		#  TRUE if ancestorcontains pathsomewhere below it 
GtkTreeRowReference  *gtk_tree_row_reference_new (GtkTreeModel *model, GtkTreePath *path);	# Creates a row reference based on path.
	model		# a GtkTreeModel 
	path		# a valid GtkTreePath to monitor
	return:		#  a newly allocated GtkTreeRowReference , or NULL  
GtkTreeRowReference  *gtk_tree_row_reference_new_proxy (GObject *proxy, GtkTreeModel *model, GtkTreePath *path);	# You do not need to use this function.
	proxy		# a proxy GObject 
	model		# a GtkTreeModel 
	path		# a valid GtkTreePath to monitor
	return:		#  a newly allocated GtkTreeRowReference , or NULL  
GtkTreeModel  *gtk_tree_row_reference_get_model (GtkTreeRowReference *reference);	# Returns the model that the row reference is monitoring.
	reference		# a GtkTreeRowReference 
	return:		#  the model.  
GtkTreePath  *gtk_tree_row_reference_get_path (GtkTreeRowReference *reference);	# Returns a path that the row reference currently points to,or NULL if the path pointed to is no longer valid.
	reference		# a GtkTreeRowReference 
	return:		#  a current path, or NULL .  
gboolean gtk_tree_row_reference_valid (GtkTreeRowReference *reference);	# Returns TRUE if the reference is non-NULL and refers toa current valid path.
	reference		#  a GtkTreeRowReference , or NULL . 
	return:		#  TRUE if referencepoints to a valid path 
void gtk_tree_row_reference_free (GtkTreeRowReference *reference);	# Free’s reference. reference may be NULL 
	reference		#  a GtkTreeRowReference , or NULL . 
GtkTreeRowReference  *gtk_tree_row_reference_copy (GtkTreeRowReference *reference);	# Copies a GtkTreeRowReference .
	reference		# a GtkTreeRowReference 
	return:		#  a copy of reference 
void gtk_tree_row_reference_inserted (GObject *proxy, GtkTreePath *path);	# Lets a set of row reference created bygtk_tree_row_reference_new_proxy() know that themodel emitted the “row-inserted” signal.
	proxy		# a GObject 
	path		# the row position that was inserted
void gtk_tree_row_reference_deleted (GObject *proxy, GtkTreePath *path);	# Lets a set of row reference created bygtk_tree_row_reference_new_proxy() know that themodel emitted the “row-deleted” signal.
	proxy		# a GObject 
	path		# the path position that was deleted
void gtk_tree_row_reference_reordered (GObject *proxy, GtkTreePath *path, GtkTreeIter *iter, gint *new_order);	# Lets a set of row reference created bygtk_tree_row_reference_new_proxy() know that themodel emitted the “rows-reordered” signal.
	proxy		# a GObject 
	path		# the parent path of the reordered signal
	iter		# the iter pointing to the parent of the reordered
	new_order		#  the new order of rows. 
GtkTreeIter  *gtk_tree_iter_copy (GtkTreeIter *iter);	# Creates a dynamically allocated tree iterator as a copy of iter.
	iter		# a GtkTreeIter 
	return:		#  a newly-allocated copy of iter 
void gtk_tree_iter_free (GtkTreeIter *iter);	# Frees an iterator that has been allocated by gtk_tree_iter_copy() .
	iter		# a dynamically allocated tree iterator
GtkTreeModelFlags gtk_tree_model_get_flags (GtkTreeModel *tree_model);	# Returns a set of flags supported by this interface.
	tree_model		# a GtkTreeModel 
	return:		#  the flags supported by this interface 
gint gtk_tree_model_get_n_columns (GtkTreeModel *tree_model);	# Returns the number of columns supported by tree_model.
	tree_model		# a GtkTreeModel 
	return:		#  the number of columns 
GType gtk_tree_model_get_column_type (GtkTreeModel *tree_model, gint index_);	# Returns the type of the column.
	tree_model		# a GtkTreeModel 
	index_		# the column index
	return:		#  the type of the column 
gboolean gtk_tree_model_get_iter (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path);	# Sets iter to a valid iterator pointing to path. If path doesnot exist, iter is set to an invalid iterator and FALSE is returned.
	tree_model		# a GtkTreeModel 
	iter		#  the uninitialized GtkTreeIter . 
	return:		#  TRUE , if iterwas set 
gboolean gtk_tree_model_get_iter_from_string (GtkTreeModel *tree_model, GtkTreeIter *iter, const gchar *path_string);	# Sets iter to a valid iterator pointing to path_string, if itexists. Otherwise, iter is left invalid and FALSE is returned.
	tree_model		# a GtkTreeModel 
	iter		#  an uninitialized GtkTreeIter . 
	return:		#  TRUE , if iterwas set 
gboolean gtk_tree_model_get_iter_first (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Initializes iter with the first iterator in the tree(the one at the path "0") and returns TRUE . ReturnsFALSE if the tree is empty.
	tree_model		# a GtkTreeModel 
	iter		#  the uninitialized GtkTreeIter . 
	return:		#  TRUE , if iterwas set 
GtkTreePath  *gtk_tree_model_get_path (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Returns a newly-created GtkTreePath referenced by iter.
	tree_model		# a GtkTreeModel 
	iter		# the GtkTreeIter 
	return:		#  a newly-created GtkTreePath  
void gtk_tree_model_get_value (GtkTreeModel *tree_model, GtkTreeIter *iter, gint column, GValue *value);	# Initializes and sets value to that at column.
	tree_model		# a GtkTreeModel 
	iter		# the GtkTreeIter 
	column		# the column to lookup the value at
	value		#  an empty GValue to set. 
gboolean gtk_tree_model_iter_next (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Sets iter to point to the node following it at the current level.
	tree_model		# a GtkTreeModel 
	iter		#  the GtkTreeIter . 
	return:		#  TRUE if iterhas been changed to the next node 
gboolean gtk_tree_model_iter_previous (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Sets iter to point to the previous node at the current level.
	tree_model		# a GtkTreeModel 
	iter		#  the GtkTreeIter . 
	return:		#  TRUE if iterhas been changed to the previous node 
gboolean gtk_tree_model_iter_children (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent);	# Sets iter to point to the first child of parent.
	tree_model		# a GtkTreeModel 
	iter		#  the new GtkTreeIter to be set to the child. 
	return:		#  TRUE , if iterhas been set to the first child 
gboolean gtk_tree_model_iter_has_child (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Returns TRUE if iter has children, FALSE otherwise.
	tree_model		# a GtkTreeModel 
	iter		# the GtkTreeIter to test for children
	return:		#  TRUE if iterhas children 
gint gtk_tree_model_iter_n_children (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Returns the number of children that iter has.
	tree_model		# a GtkTreeModel 
	iter		#  the GtkTreeIter , or NULL . 
	return:		#  the number of children of iter 
gboolean gtk_tree_model_iter_nth_child (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, gint n);	# Sets iter to be the child of parent, using the given index.
	tree_model		# a GtkTreeModel 
	iter		#  the GtkTreeIter to set to the nth child. 
	return:		#  TRUE , if parenthas an n-th child 
gboolean gtk_tree_model_iter_parent (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child);	# Sets iter to be the parent of child.
	tree_model		# a GtkTreeModel 
	iter		#  the new GtkTreeIter to set to the parent. 
	return:		#  TRUE , if iteris set to the parent of child 
gchar  *gtk_tree_model_get_string_from_iter (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Generates a string representation of the iter.
	tree_model		# a GtkTreeModel 
	iter		# a GtkTreeIter 
	return:		#  a newly-allocated string.Must be freed with g_free() . 
void gtk_tree_model_ref_node (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Lets the tree ref the node.
	tree_model		# a GtkTreeModel 
	iter		# the GtkTreeIter 
void gtk_tree_model_unref_node (GtkTreeModel *tree_model, GtkTreeIter *iter);	# Lets the tree unref the node.
	tree_model		# a GtkTreeModel 
	iter		# the GtkTreeIter 
void gtk_tree_model_get (GtkTreeModel *tree_model, GtkTreeIter *iter, ...);	# Gets the value of one or more cells in the row referenced by iter.The variable argument list should contain integer column numbers,each column number followed by a place to store the value beingretrieved. The list is terminated by a -1. For example, to get avalue from column 0 with type G_TYPE_STRING , you wouldwrite: gtk_tree_model_get (model, iter, 0, &amp;place_string_here, -1),where place_string_here is a gchararray to be filled with the string.
	tree_model		# a GtkTreeModel 
	iter		# a row in tree_model
	...		# pairs of column number and value return locations,terminated by -1
void gtk_tree_model_get_valist (GtkTreeModel *tree_model, GtkTreeIter *iter, va_list var_args);	# See gtk_tree_model_get() , this version takes a va_listfor language bindings to use.
	tree_model		# a GtkTreeModel 
	iter		# a row in tree_model
	var_args		# va_list of column/return location pairs
void gtk_tree_model_foreach (GtkTreeModel *model, GtkTreeModelForeachFunc func, gpointer user_data);	# Calls func on each node in model in a depth-first fashion.
	model		# a GtkTreeModel 
	func		#  a function to be called on each row. 
	user_data		# user data to passed to func
void gtk_tree_model_row_changed (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);	# Emits the “row-changed” signal on tree_model.
	tree_model		# a GtkTreeModel 
	path		# a GtkTreePath pointing to the changed row
	iter		# a valid GtkTreeIter pointing to the changed row
void gtk_tree_model_row_inserted (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);	# Emits the “row-inserted” signal on tree_model.
	tree_model		# a GtkTreeModel 
	path		# a GtkTreePath pointing to the inserted row
	iter		# a valid GtkTreeIter pointing to the inserted row
void gtk_tree_model_row_has_child_toggled (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);	# Emits the “row-has-child-toggled” signal ontree_model. This should be called by models after the childstate of a node changes.
	tree_model		# a GtkTreeModel 
	path		# a GtkTreePath pointing to the changed row
	iter		# a valid GtkTreeIter pointing to the changed row
void gtk_tree_model_row_deleted (GtkTreeModel *tree_model, GtkTreePath *path);	# Emits the “row-deleted” signal on tree_model.
	tree_model		# a GtkTreeModel 
	path		# a GtkTreePath pointing to the previous location ofthe deleted row
void gtk_tree_model_rows_reordered (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order);	# Emits the “rows-reordered” signal on tree_model.
	tree_model		# a GtkTreeModel 
	path		# a GtkTreePath pointing to the tree node whose childrenhave been reordered
	iter		# a valid GtkTreeIter pointing to the node whose childrenhave been reordered, or NULL if the depth of pathis 0
	new_order		# an array of integers mapping the current position ofeach child to its old position before the re-ordering,i.e. new_order[newpos] = oldpos
void gtk_tree_model_rows_reordered_with_length (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order, gint length);	# Emits the “rows-reordered” signal on tree_model.
	tree_model		# a GtkTreeModel 
	path		# a GtkTreePath pointing to the tree node whose childrenhave been reordered
	iter		#  a valid GtkTreeIter pointing to the nodewhose children have been reordered, or NULL if the depthof pathis 0. 
gboolean <span class="c_punctuation">( *GtkTreeSelectionFunc<span class="c_punctuation">) (GtkTreeSelection *selection, GtkTreeModel *model, GtkTreePath *path, gboolean path_currently_selected, gpointer data);	# A function used by gtk_tree_selection_set_select_function() to filterwhether or not a row may be selected. It is called whenever a row'sstate might change. A return value of TRUE indicates to selectionthat it is okay to change the selection.
	selection		# A GtkTreeSelection 
	model		# A GtkTreeModel being viewed
	path		# The GtkTreePath of the row in question
	path_currently_selected		# TRUE , if the path is currently selected
	data		#  user data. 
	return:		#  TRUE , if the selection state of the row can be toggled 
void <span class="c_punctuation">( *GtkTreeSelectionForeachFunc<span class="c_punctuation">) (GtkTreeModel *model, GtkTreePath *path, GtkTreeIter *iter, gpointer data);	# A function used by gtk_tree_selection_selected_foreach() to map allselected rows. It will be called on every selected row in the view.
	model		# The GtkTreeModel being viewed
	path		# The GtkTreePath of a selected row
	iter		# A GtkTreeIter pointing to a selected row
	data		#  user data. 
void gtk_tree_selection_set_mode (GtkTreeSelection *selection, GtkSelectionMode type);	# Sets the selection mode of the selection. If the previous type wasGTK_SELECTION_MULTIPLE , then the anchor is kept selected, if it waspreviously selected.
	selection		# A GtkTreeSelection .
	type		# The selection mode
GtkSelectionMode gtk_tree_selection_get_mode (GtkTreeSelection *selection);	# Gets the selection mode for selection. Seegtk_tree_selection_set_mode() .
	selection		# a GtkTreeSelection 
	return:		#  the current selection mode 
void gtk_tree_selection_set_select_function (GtkTreeSelection *selection, GtkTreeSelectionFunc func, gpointer data, GDestroyNotify destroy);	# Sets the selection function.
	selection		# A GtkTreeSelection .
	func		# The selection function. May be NULL 
	data		# The selection function’s data. May be NULL 
	destroy		# The destroy function for user data. May be NULL 
GtkTreeSelectionFunc gtk_tree_selection_get_select_function (GtkTreeSelection *selection);	# Returns the current selection function.
	selection		# A GtkTreeSelection .
	return:		#  The function. 
gpointer gtk_tree_selection_get_user_data (GtkTreeSelection *selection);	# Returns the user data for the selection function.
	selection		# A GtkTreeSelection .
	return:		#  The user data. 
GtkTreeView  *gtk_tree_selection_get_tree_view (GtkTreeSelection *selection);	# Returns the tree view associated with selection.
	selection		# A GtkTreeSelection 
	return:		#  A GtkTreeView .  
gboolean gtk_tree_selection_get_selected (GtkTreeSelection *selection, GtkTreeModel **model, GtkTreeIter *iter);	# Sets iter to the currently selected node if selection is set toGTK_SELECTION_SINGLE or GTK_SELECTION_BROWSE . iter may be NULL if youjust want to test if selection has any selected nodes. model is filledwith the current model as a convenience. This function will not work if youuse selection is GTK_SELECTION_MULTIPLE .
	selection		# A GtkTreeSelection .
	model		#  A pointer to set to the GtkTreeModel , or NULL. 
	return:		#  TRUE, if there is a selected node. 
void gtk_tree_selection_selected_foreach (GtkTreeSelection *selection, GtkTreeSelectionForeachFunc func, gpointer data);	# Calls a function for each selected node. Note that you cannot modifythe tree or selection from within this function. As a result,gtk_tree_selection_get_selected_rows() might be more useful.
	selection		# A GtkTreeSelection .
	func		#  The function to call for each selected node. 
	data		# user data to pass to the function.
GList  *gtk_tree_selection_get_selected_rows (GtkTreeSelection *selection, GtkTreeModel **model);	# Creates a list of path of all selected rows. Additionally, if you areplanning on modifying the model after calling this function, you maywant to convert the returned list into a list of GtkTreeRowReferences .To do this, you can use gtk_tree_row_reference_new() .
	selection		# A GtkTreeSelection .
	model		#  A pointer to set to the GtkTreeModel , or NULL . 
	return:		#  A GList containing a GtkTreePath for each selected row.  
gint gtk_tree_selection_count_selected_rows (GtkTreeSelection *selection);	# Returns the number of rows that have been selected in tree.
	selection		# A GtkTreeSelection .
	return:		#  The number of rows selected. 
void gtk_tree_selection_select_path (GtkTreeSelection *selection, GtkTreePath *path);	# Select the row at path.
	selection		# A GtkTreeSelection .
	path		# The GtkTreePath to be selected.
void gtk_tree_selection_unselect_path (GtkTreeSelection *selection, GtkTreePath *path);	# Unselects the row at path.
	selection		# A GtkTreeSelection .
	path		# The GtkTreePath to be unselected.
gboolean gtk_tree_selection_path_is_selected (GtkTreeSelection *selection, GtkTreePath *path);	# Returns TRUE if the row pointed to by path is currently selected. If pathdoes not point to a valid location, FALSE is returned
	selection		# A GtkTreeSelection .
	path		# A GtkTreePath to check selection on.
	return:		#  TRUE if pathis selected. 
void gtk_tree_selection_select_iter (GtkTreeSelection *selection, GtkTreeIter *iter);	# Selects the specified iterator.
	selection		# A GtkTreeSelection .
	iter		# The GtkTreeIter to be selected.
void gtk_tree_selection_unselect_iter (GtkTreeSelection *selection, GtkTreeIter *iter);	# Unselects the specified iterator.
	selection		# A GtkTreeSelection .
	iter		# The GtkTreeIter to be unselected.
gboolean gtk_tree_selection_iter_is_selected (GtkTreeSelection *selection, GtkTreeIter *iter);	# Returns TRUE if the row at iter is currently selected.
	selection		# A GtkTreeSelection 
	iter		# A valid GtkTreeIter 
	return:		#  TRUE , if iteris selected 
void gtk_tree_selection_select_all (GtkTreeSelection *selection);	# Selects all the nodes. selection must be set to GTK_SELECTION_MULTIPLE mode.
	selection		# A GtkTreeSelection .
void gtk_tree_selection_unselect_all (GtkTreeSelection *selection);	# Unselects all the nodes.
	selection		# A GtkTreeSelection .
void gtk_tree_selection_select_range (GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path);	# Selects a range of nodes, determined by start_path and end_path inclusive.selection must be set to GTK_SELECTION_MULTIPLE mode.
	selection		# A GtkTreeSelection .
	start_path		# The initial node of the range.
	end_path		# The final node of the range.
void gtk_tree_selection_unselect_range (GtkTreeSelection *selection, GtkTreePath *start_path, GtkTreePath *end_path);	# Unselects a range of nodes, determined by start_path and end_pathinclusive.
	selection		# A GtkTreeSelection .
	start_path		# The initial node of the range.
	end_path		# The initial node of the range.
void <span class="c_punctuation">( *GtkTreeCellDataFunc<span class="c_punctuation">) (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, GtkTreeModel *tree_model, GtkTreeIter *iter, gpointer data);	# A function to set the properties of a cell instead of just using thestraight mapping between the cell and the model. This is useful forcustomizing the cell renderer. For example, a function might get aninteger from the tree_model, and render it to the “text” attribute of“cell” by converting it to its written equivalent. This is set bycalling gtk_tree_view_column_set_cell_data_func() 
	tree_column		# A GtkTreeViewColumn 
	cell		# The GtkCellRenderer that is being rendered by tree_column
	tree_model		# The GtkTreeModel being rendered
	iter		# A GtkTreeIter of the current row rendered
	data		#  user data. 
GtkTreeViewColumn  *gtk_tree_view_column_new (void );	#创建对象:GtkTreeViewColumn .
	return:		#  A newly created GtkTreeViewColumn . 
GtkTreeViewColumn  *gtk_tree_view_column_new_with_area (GtkCellArea *area);	#创建对象:GtkTreeViewColumn using area to render its cells.
	area		# the GtkCellArea that the newly created column should use to layout cells.
	return:		#  A newly created GtkTreeViewColumn . 
GtkTreeViewColumn  *gtk_tree_view_column_new_with_attributes (const gchar *title, GtkCellRenderer *cell, ...);	#创建对象:GtkTreeViewColumn with a number of default values.This is equivalent to calling gtk_tree_view_column_set_title() ,gtk_tree_view_column_pack_start() , andgtk_tree_view_column_set_attributes() on the newly created GtkTreeViewColumn .
	title		# The title to set the header to
	cell		# The GtkCellRenderer 
	...		# A NULL -terminated list of attributes
	return:		#  A newly created GtkTreeViewColumn . 
void gtk_tree_view_column_pack_start (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand);	# Packs the cell into the beginning of the column. If expand is FALSE , thenthe cell is allocated no more space than it needs. Any unused space is dividedevenly between cells for which expand is TRUE .
	tree_column		# A GtkTreeViewColumn .
	cell		# The GtkCellRenderer . 
	expand		# TRUE if cellis to be given extra space allocated to tree_column.
void gtk_tree_view_column_pack_end (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell, gboolean expand);	# Adds the cell to end of the column. If expand is FALSE , then the cellis allocated no more space than it needs. Any unused space is dividedevenly between cells for which expand is TRUE .
	tree_column		# A GtkTreeViewColumn .
	cell		# The GtkCellRenderer . 
	expand		# TRUE if cellis to be given extra space allocated to tree_column.
void gtk_tree_view_column_clear (GtkTreeViewColumn *tree_column);	# Unsets all the mappings on all renderers on the tree_column.
	tree_column		# A GtkTreeViewColumn 
void gtk_tree_view_column_add_attribute (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, const gchar *attribute, gint column);	# Adds an attribute mapping to the list in tree_column. The column is thecolumn of the model to get a value from, and the attribute is theparameter on cell_renderer to be set from the value. So for exampleif column 2 of the model contains strings, you could have the“text” attribute of a GtkCellRendererText get its values fromcolumn 2.
	tree_column		# A GtkTreeViewColumn .
	cell_renderer		# the GtkCellRenderer to set attributes on
	attribute		# An attribute on the renderer
	column		# The column position on the model to get the attribute from.
void gtk_tree_view_column_set_attributes (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, ...);	# Sets the attributes in the list as the attributes of tree_column.The attributes should be in attribute/column order, as ingtk_tree_view_column_add_attribute() . All existing attributesare removed, and replaced with the new attributes.
	tree_column		# A GtkTreeViewColumn 
	cell_renderer		# the GtkCellRenderer we’re setting the attributes of
	...		# A NULL -terminated list of attributes
void gtk_tree_view_column_set_cell_data_func (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, GtkTreeCellDataFunc func, gpointer func_data, GDestroyNotify destroy);	# Sets the GtkTreeCellDataFunc to use for the column. Thisfunction is used instead of the standard attributes mapping forsetting the column value, and should set the value of tree_column'scell renderer as appropriate. func may be NULL to remove anolder one.
	tree_column		# A GtkTreeViewColumn 
	cell_renderer		# A GtkCellRenderer 
	func		#  The GtkTreeCellDataFunc to use. 
	func_data		#  The user data for func. 
	destroy		# The destroy notification for func_data
void gtk_tree_view_column_clear_attributes (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer);	# Clears all existing attributes previously set withgtk_tree_view_column_set_attributes() .
	tree_column		# a GtkTreeViewColumn 
	cell_renderer		# a GtkCellRenderer to clear the attribute mapping on.
void gtk_tree_view_column_set_spacing (GtkTreeViewColumn *tree_column, gint spacing);	# Sets the spacing field of tree_column, which is the number of pixels toplace between cell renderers packed into it.
	tree_column		# A GtkTreeViewColumn .
	spacing		# distance between cell renderers in pixels.
gint gtk_tree_view_column_get_spacing (GtkTreeViewColumn *tree_column);	# Returns the spacing of tree_column.
	tree_column		# A GtkTreeViewColumn .
	return:		#  the spacing of tree_column. 
void gtk_tree_view_column_set_visible (GtkTreeViewColumn *tree_column, gboolean visible);	# Sets the visibility of tree_column.
	tree_column		# A GtkTreeViewColumn .
	visible		# TRUE if the tree_columnis visible.
gboolean gtk_tree_view_column_get_visible (GtkTreeViewColumn *tree_column);	# Returns TRUE if tree_column is visible.
	tree_column		# A GtkTreeViewColumn .
	return:		#  whether the column is visible or not. If it is visible, thenthe tree will show the column. 
void gtk_tree_view_column_set_resizable (GtkTreeViewColumn *tree_column, gboolean resizable);	# If resizable is TRUE , then the user can explicitly resize the column bygrabbing the outer edge of the column button. If resizable is TRUE andsizing mode of the column is GTK_TREE_VIEW_COLUMN_AUTOSIZE , then the sizingmode is changed to GTK_TREE_VIEW_COLUMN_GROW_ONLY .
	tree_column		# A GtkTreeViewColumn 
	resizable		# TRUE , if the column can be resized
gboolean gtk_tree_view_column_get_resizable (GtkTreeViewColumn *tree_column);	# Returns TRUE if the tree_column can be resized by the end user.
	tree_column		# A GtkTreeViewColumn 
	return:		#  TRUE , if the tree_columncan be resized. 
void gtk_tree_view_column_set_sizing (GtkTreeViewColumn *tree_column, GtkTreeViewColumnSizing type);	# Sets the growth behavior of tree_column to type.
	tree_column		# A GtkTreeViewColumn .
	type		# The GtkTreeViewColumnSizing .
GtkTreeViewColumnSizing gtk_tree_view_column_get_sizing (GtkTreeViewColumn *tree_column);	# Returns the current type of tree_column.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The type of tree_column. 
gint gtk_tree_view_column_get_width (GtkTreeViewColumn *tree_column);	# Returns the current size of tree_column in pixels.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The current width of tree_column. 
gint gtk_tree_view_column_get_fixed_width (GtkTreeViewColumn *tree_column);	# Gets the fixed width of the column. This may not be the actual displayedwidth of the column; for that, use gtk_tree_view_column_get_width() .
	tree_column		# A GtkTreeViewColumn .
	return:		#  The fixed width of the column. 
void gtk_tree_view_column_set_fixed_width (GtkTreeViewColumn *tree_column, gint fixed_width);	# If fixed_width is not -1, sets the fixed width of tree_column; otherwiseunsets it. The effective value of fixed_width is clamped between theminimum and maximum width of the column; however, the value stored in the“fixed-width” property is not clamped. If the column sizing isGTK_TREE_VIEW_COLUMN_GROW_ONLY or GTK_TREE_VIEW_COLUMN_AUTOSIZE , settinga fixed width overrides the automatically calculated width. Note thatfixed_width is only a hint to GTK+; the width actually allocated to thecolumn may be greater or less than requested.
	tree_column		# A GtkTreeViewColumn .
	fixed_width		# The new fixed width, in pixels, or -1.
void gtk_tree_view_column_set_min_width (GtkTreeViewColumn *tree_column, gint min_width);	# Sets the minimum width of the tree_column. If min_width is -1, then theminimum width is unset.
	tree_column		# A GtkTreeViewColumn .
	min_width		# The minimum width of the column in pixels, or -1.
gint gtk_tree_view_column_get_min_width (GtkTreeViewColumn *tree_column);	# Returns the minimum width in pixels of the tree_column, or -1 if no minimumwidth is set.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The minimum width of the tree_column. 
void gtk_tree_view_column_set_max_width (GtkTreeViewColumn *tree_column, gint max_width);	# Sets the maximum width of the tree_column. If max_width is -1, then themaximum width is unset. Note, the column can actually be wider than maxwidth if it’s the last column in a view. In this case, the column expands tofill any extra space.
	tree_column		# A GtkTreeViewColumn .
	max_width		# The maximum width of the column in pixels, or -1.
gint gtk_tree_view_column_get_max_width (GtkTreeViewColumn *tree_column);	# Returns the maximum width in pixels of the tree_column, or -1 if no maximumwidth is set.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The maximum width of the tree_column. 
void gtk_tree_view_column_clicked (GtkTreeViewColumn *tree_column);	# Emits the “clicked” signal on the column. This function will only work iftree_column is clickable.
	tree_column		# a GtkTreeViewColumn 
void gtk_tree_view_column_set_title (GtkTreeViewColumn *tree_column, const gchar *title);	# Sets the title of the tree_column. If a custom widget has been set, thenthis value is ignored.
	tree_column		# A GtkTreeViewColumn .
	title		# The title of the tree_column.
gchar  *gtk_tree_view_column_get_title (GtkTreeViewColumn *tree_column);	# Returns the title of the widget.
	tree_column		# A GtkTreeViewColumn .
	return:		#  the title of the column. This string should not bemodified or freed. 
void gtk_tree_view_column_set_expand (GtkTreeViewColumn *tree_column, gboolean expand);	# Sets the column to take available extra space. This space is shared equallyamongst all columns that have the expand set to TRUE . If no column has thisoption set, then the last column gets all extra space. By default, everycolumn is created with this FALSE .
	tree_column		# A GtkTreeViewColumn .
	expand		# TRUE if the column should expand to fill available space.
gboolean gtk_tree_view_column_get_expand (GtkTreeViewColumn *tree_column);	# Returns TRUE if the column expands to fill available space.
	tree_column		# A GtkTreeViewColumn .
	return:		#  TRUE if the column expands to fill available space. 
void gtk_tree_view_column_set_clickable (GtkTreeViewColumn *tree_column, gboolean clickable);	# Sets the header to be active if clickable is TRUE . When the header isactive, then it can take keyboard focus, and can be clicked.
	tree_column		# A GtkTreeViewColumn .
	clickable		# TRUE if the header is active.
gboolean gtk_tree_view_column_get_clickable (GtkTreeViewColumn *tree_column);	# Returns TRUE if the user can click on the header for the column.
	tree_column		# a GtkTreeViewColumn 
	return:		#  TRUE if user can click the column header. 
void gtk_tree_view_column_set_widget (GtkTreeViewColumn *tree_column, GtkWidget *widget);	# Sets the widget in the header to be widget. If widget is NULL , then theheader button is set with a GtkLabel set to the title of tree_column.
	tree_column		# A GtkTreeViewColumn .
	widget		#  A child GtkWidget , or NULL . 
GtkWidget  *gtk_tree_view_column_get_widget (GtkTreeViewColumn *tree_column);	# Returns the GtkWidget in the button on the column header.If a custom widget has not been set then NULL is returned.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The GtkWidget in the columnheader, or NULL .  
GtkWidget  *gtk_tree_view_column_get_button (GtkTreeViewColumn *tree_column);	# Returns the button used in the treeview column header
	tree_column		# A GtkTreeViewColumn 
	return:		#  The button for the column header.  
void gtk_tree_view_column_set_alignment (GtkTreeViewColumn *tree_column, gfloat xalign);	# Sets the alignment of the title or custom widget inside the column header.The alignment determines its location inside the button -- 0.0 for left, 0.5for center, 1.0 for right.
	tree_column		# A GtkTreeViewColumn .
	xalign		# The alignment, which is between [0.0 and 1.0] inclusive.
gfloat gtk_tree_view_column_get_alignment (GtkTreeViewColumn *tree_column);	# Returns the current x alignment of tree_column. This value can rangebetween 0.0 and 1.0.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The current alignent of tree_column. 
void gtk_tree_view_column_set_reorderable (GtkTreeViewColumn *tree_column, gboolean reorderable);	# If reorderable is TRUE , then the column can be reordered by the end userdragging the header.
	tree_column		# A GtkTreeViewColumn 
	reorderable		# TRUE , if the column can be reordered.
gboolean gtk_tree_view_column_get_reorderable (GtkTreeViewColumn *tree_column);	# Returns TRUE if the tree_column can be reordered by the user.
	tree_column		# A GtkTreeViewColumn 
	return:		#  TRUE if the tree_columncan be reordered by the user. 
void gtk_tree_view_column_set_sort_column_id (GtkTreeViewColumn *tree_column, gint sort_column_id);	# Sets the logical sort_column_id that this column sorts on when this column is selected for sorting. Doing so makes the column header clickable.
	tree_column		# a GtkTreeViewColumn 
	sort_column_id		# The sort_column_idof the model to sort on.
gint gtk_tree_view_column_get_sort_column_id (GtkTreeViewColumn *tree_column);	# Gets the logical sort_column_id that the model sorts on when thiscolumn is selected for sorting.See gtk_tree_view_column_set_sort_column_id() .
	tree_column		# a GtkTreeViewColumn 
	return:		#  the current sort_column_idfor this column, or -1 ifthis column can’t be used for sorting. 
void gtk_tree_view_column_set_sort_indicator (GtkTreeViewColumn *tree_column, gboolean setting);	# Call this function with a setting of TRUE to display an arrow inthe header button indicating the column is sorted. Callgtk_tree_view_column_set_sort_order() to change the direction ofthe arrow.
	tree_column		# a GtkTreeViewColumn 
	setting		# TRUE to display an indicator that the column is sorted
gboolean gtk_tree_view_column_get_sort_indicator (GtkTreeViewColumn *tree_column);	# Gets the value set by gtk_tree_view_column_set_sort_indicator() .
	tree_column		# a GtkTreeViewColumn 
	return:		#  whether the sort indicator arrow is displayed 
void gtk_tree_view_column_set_sort_order (GtkTreeViewColumn *tree_column, GtkSortType order);	# Changes the appearance of the sort indicator. 
	tree_column		# a GtkTreeViewColumn 
	order		# sort order that the sort indicator should indicate
GtkSortType gtk_tree_view_column_get_sort_order (GtkTreeViewColumn *tree_column);	# Gets the value set by gtk_tree_view_column_set_sort_order() .
	tree_column		# a GtkTreeViewColumn 
	return:		#  the sort order the sort indicator is indicating 
void gtk_tree_view_column_cell_set_cell_data (GtkTreeViewColumn *tree_column, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded);	# Sets the cell renderer based on the tree_model and iter. That is, forevery attribute mapping in tree_column, it will get a value from the setcolumn on the iter, and use that value to set the attribute on the cellrenderer. This is used primarily by the GtkTreeView .
	tree_column		# A GtkTreeViewColumn .
	tree_model		# The GtkTreeModel to to get the cell renderers attributes from.
	iter		# The GtkTreeIter to to get the cell renderer’s attributes from.
	is_expander		# TRUE , if the row has children
	is_expanded		# TRUE , if the row has visible children
void gtk_tree_view_column_cell_get_size (GtkTreeViewColumn *tree_column, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height);	# Obtains the width and height needed to render the column. This is usedprimarily by the GtkTreeView .
	tree_column		# A GtkTreeViewColumn .
	cell_area		#  The area a cell in the column will be allocated, or NULL . 
gboolean gtk_tree_view_column_cell_get_position (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell_renderer, gint *x_offset, gint *width);	# Obtains the horizontal position and size of a cell in a column. If thecell is not found in the column, start_pos and width are not changed andFALSE is returned.
	tree_column		# a GtkTreeViewColumn 
	cell_renderer		# a GtkCellRenderer 
	x_offset		#  return location for the horizontalposition of cellwithin tree_column, may be NULL . 
	return:		#  TRUE if cellbelongs to tree_column. 
gboolean gtk_tree_view_column_cell_is_visible (GtkTreeViewColumn *tree_column);	# Returns TRUE if any of the cells packed into the tree_column are visible.For this to be meaningful, you must first initialize the cells withgtk_tree_view_column_cell_set_cell_data() 
	tree_column		# A GtkTreeViewColumn 
	return:		#  TRUE , if any of the cells packed into the tree_columnare currently visible 
void gtk_tree_view_column_focus_cell (GtkTreeViewColumn *tree_column, GtkCellRenderer *cell);	# Sets the current keyboard focus to be at cell, if the column contains2 or more editable and activatable cells.
	tree_column		# A GtkTreeViewColumn 
	cell		# A GtkCellRenderer 
void gtk_tree_view_column_queue_resize (GtkTreeViewColumn *tree_column);	# Flags the column, and the cell renderers added to this column, to havetheir sizes renegotiated.
	tree_column		# A GtkTreeViewColumn 
GtkWidget  *gtk_tree_view_column_get_tree_view (GtkTreeViewColumn *tree_column);	# Returns the GtkTreeView wherein tree_column has been inserted.If column is currently not inserted in any tree view, NULL isreturned.
	tree_column		# A GtkTreeViewColumn 
	return:		#  The tree view wherein columnhasbeen inserted if any, NULL otherwise.  
gint gtk_tree_view_column_get_x_offset (GtkTreeViewColumn *tree_column);	# Returns the current X offset of tree_column in pixels.
	tree_column		# A GtkTreeViewColumn .
	return:		#  The current X offset of tree_column. 
gboolean <span class="c_punctuation">( *GtkTreeViewColumnDropFunc<span class="c_punctuation">) (GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *prev_column, GtkTreeViewColumn *next_column, gpointer data);	# Function type for determining whether column can be dropped in aparticular spot (as determined by prev_column and next_column). Inleft to right locales, prev_column is on the left of the potential dropspot, and next_column is on the right. In right to left mode, this isreversed. This function should return TRUE if the spot is a valid dropspot. Please note that returning TRUE does not actually indicate thatthe column drop was made, but is meant only to indicate a possible dropspot to the user.
	tree_view		# A GtkTreeView 
	column		# The GtkTreeViewColumn being dragged
	prev_column		# A GtkTreeViewColumn on one side of column
	next_column		# A GtkTreeViewColumn on the other side of column
	data		#  user data. 
	return:		#  TRUE , if columncan be dropped in this spot 
void <span class="c_punctuation">( *GtkTreeViewMappingFunc<span class="c_punctuation">) (GtkTreeView *tree_view, GtkTreePath *path, gpointer user_data);	# Function used for gtk_tree_view_map_expanded_rows() .
	tree_view		# A GtkTreeView 
	path		# The path that’s expanded
	user_data		# user data
gboolean <span class="c_punctuation">( *GtkTreeViewSearchEqualFunc<span class="c_punctuation">) (GtkTreeModel *model, gint column, const gchar *key, GtkTreeIter *iter, gpointer search_data);	# A function used for checking whether a row in model matchesa search key string entered by the user. Note the return valueis reversed from what you would normally expect, though ithas some similarity to strcmp() returning 0 for equal strings.
	model		# the GtkTreeModel being searched
	column		# the search column set by 
	key		# the key string to compare with
	iter		# a GtkTreeIter pointing the row of modelthat should be comparedwith key.
	search_data		#  user data from 
	return:		#  FALSE if the row matches, TRUE otherwise. 
GtkWidget  *gtk_tree_view_new (void );	#创建对象:GtkTreeView widget.
	return:		#  A newly created GtkTreeView widget. 
gint gtk_tree_view_get_level_indentation (GtkTreeView *tree_view);	# Returns the amount, in pixels, of extra indentation for child levelsin tree_view.
	tree_view		# a GtkTreeView .
	return:		#  the amount of extra indentation for child levels intree_view. A return value of 0 means that this feature is disabled. 
gboolean gtk_tree_view_get_show_expanders (GtkTreeView *tree_view);	# Returns whether or not expanders are drawn in tree_view.
	tree_view		# a GtkTreeView .
	return:		#  TRUE if expanders are drawn in tree_view, FALSE otherwise. 
void gtk_tree_view_set_level_indentation (GtkTreeView *tree_view, gint indentation);	# Sets the amount of extra indentation for child levels to use in tree_viewin addition to the default indentation. The value should be specified inpixels, a value of 0 disables this feature and in this case only the defaultindentation will be used.This does not have any visible effects for lists.
	tree_view		# a GtkTreeView 
	indentation		# the amount, in pixels, of extra indentation in tree_view.
void gtk_tree_view_set_show_expanders (GtkTreeView *tree_view, gboolean enabled);	# Sets whether to draw and enable expanders and indent child rows intree_view. When disabled there will be no expanders visible in treesand there will be no way to expand and collapse rows by default. Alsonote that hiding the expanders will disable the default indentation. Youcan set a custom indentation in this case usinggtk_tree_view_set_level_indentation() .This does not have any visible effects for lists.
	tree_view		# a GtkTreeView 
	enabled		# TRUE to enable expander drawing, FALSE otherwise.
GtkWidget  *gtk_tree_view_new_with_model (GtkTreeModel *model);	#创建对象:GtkTreeView widget with the model initialized to model.
	model		# the model.
	return:		#  A newly created GtkTreeView widget. 
GtkTreeModel  *gtk_tree_view_get_model (GtkTreeView *tree_view);	# Returns the model the GtkTreeView is based on. Returns NULL if themodel is unset.
	tree_view		# a GtkTreeView 
	return:		#  A GtkTreeModel , or NULL ifnone is currently being used.  
void gtk_tree_view_set_model (GtkTreeView *tree_view, GtkTreeModel *model);	# Sets the model for a GtkTreeView . If the tree_view already has a modelset, it will remove it before setting the new model. If model is NULL ,then it will unset the old model.
	tree_view		# A GtkTreeView .
	model		#  The model. 
GtkTreeSelection  *gtk_tree_view_get_selection (GtkTreeView *tree_view);	# Gets the GtkTreeSelection associated with tree_view.
	tree_view		# A GtkTreeView .
	return:		#  A GtkTreeSelection object.  
gboolean gtk_tree_view_get_headers_visible (GtkTreeView *tree_view);	# Returns TRUE if the headers on the tree_view are visible.
	tree_view		# A GtkTreeView .
	return:		#  Whether the headers are visible or not. 
void gtk_tree_view_set_headers_visible (GtkTreeView *tree_view, gboolean headers_visible);	# Sets the visibility state of the headers.
	tree_view		# A GtkTreeView .
	headers_visible		# TRUE if the headers are visible
void gtk_tree_view_columns_autosize (GtkTreeView *tree_view);	# Resizes all columns to their optimal width. Only works after thetreeview has been realized.
	tree_view		# A GtkTreeView .
gboolean gtk_tree_view_get_headers_clickable (GtkTreeView *tree_view);	# Returns whether all header columns are clickable.
	tree_view		# A GtkTreeView .
	return:		#  TRUE if all header columns are clickable, otherwise FALSE  
void gtk_tree_view_set_headers_clickable (GtkTreeView *tree_view, gboolean setting);	# Allow the column title buttons to be clicked.
	tree_view		# A GtkTreeView .
	setting		# TRUE if the columns are clickable.
void gtk_tree_view_set_activate_on_single_click (GtkTreeView *tree_view, gboolean single);	# Cause the “row-activated” signal to be emittedon a single click instead of a double click.
	tree_view		# a GtkTreeView 
	single		# TRUE to emit row-activated on a single click
gboolean gtk_tree_view_get_activate_on_single_click (GtkTreeView *tree_view);	# Gets the setting set by gtk_tree_view_set_activate_on_single_click() .
	tree_view		# a GtkTreeView 
	return:		#  TRUE if row-activated will be emitted on a single click 
gint gtk_tree_view_append_column (GtkTreeView *tree_view, GtkTreeViewColumn *column);	# Appends column to the list of columns. If tree_view has “fixed_height”mode enabled, then column must have its “sizing” property set to beGTK_TREE_VIEW_COLUMN_FIXED.
	tree_view		# A GtkTreeView .
	column		# The GtkTreeViewColumn to add.
	return:		#  The number of columns in tree_viewafter appending. 
gint gtk_tree_view_remove_column (GtkTreeView *tree_view, GtkTreeViewColumn *column);	# Removes column from tree_view.
	tree_view		# A GtkTreeView .
	column		# The GtkTreeViewColumn to remove.
	return:		#  The number of columns in tree_viewafter removing. 
gint gtk_tree_view_insert_column (GtkTreeView *tree_view, GtkTreeViewColumn *column, gint position);	# This inserts the column into the tree_view at position. If position is-1, then the column is inserted at the end. If tree_view has“fixed_height” mode enabled, then column must have its “sizing” propertyset to be GTK_TREE_VIEW_COLUMN_FIXED.
	tree_view		# A GtkTreeView .
	column		# The GtkTreeViewColumn to be inserted.
	position		# The position to insert columnin.
	return:		#  The number of columns in tree_viewafter insertion. 
gint gtk_tree_view_insert_column_with_attributes (GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, ...);	#创建对象:GtkTreeViewColumn and inserts it into the tree_view atposition. If position is -1, then the newly created column is inserted atthe end. The column is initialized with the attributes given. If tree_viewhas “fixed_height” mode enabled, then the new column will have its sizingproperty set to be GTK_TREE_VIEW_COLUMN_FIXED.
	tree_view		# A GtkTreeView 
	position		# The position to insert the new column in
	title		# The title to set the header to
	cell		# The GtkCellRenderer 
	...		# A NULL -terminated list of attributes
	return:		#  The number of columns in tree_viewafter insertion. 
gint gtk_tree_view_insert_column_with_data_func (GtkTreeView *tree_view, gint position, const gchar *title, GtkCellRenderer *cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify);	# Convenience function that inserts a new column into the GtkTreeView with the given cell renderer and a GtkTreeCellDataFunc to set cell rendererattributes (normally using data from the model). See alsogtk_tree_view_column_set_cell_data_func() , gtk_tree_view_column_pack_start() .If tree_view has “fixed_height” mode enabled, then the new column will have its“sizing” property set to be GTK_TREE_VIEW_COLUMN_FIXED.
	tree_view		# a GtkTreeView 
	position		# Position to insert, -1 for append
	title		# column title
	cell		# cell renderer for column
	func		# function to set attributes of cell renderer
	data		# data for func
	dnotify		# destroy notifier for data
	return:		#  number of columns in the tree view post-insert 
guint gtk_tree_view_get_n_columns (GtkTreeView *tree_view);	# Queries the number of columns in the given tree_view.
	tree_view		# a GtkTreeView 
	return:		#  The number of columns in the tree_view 
GtkTreeViewColumn  *gtk_tree_view_get_column (GtkTreeView *tree_view, gint n);	# Gets the GtkTreeViewColumn at the given position in the tree_view .
	tree_view		# A GtkTreeView .
	n		# The position of the column, counting from 0.
	return:		#  The GtkTreeViewColumn , or NULL if theposition is outside the range of columns.  
GList  *gtk_tree_view_get_columns (GtkTreeView *tree_view);	# Returns a GList of all the GtkTreeViewColumn s currently in tree_view.The returned list must be freed with g_list_free() .
	tree_view		# A GtkTreeView 
	return:		#  A list of GtkTreeViewColumn s.  
void gtk_tree_view_move_column_after (GtkTreeView *tree_view, GtkTreeViewColumn *column, GtkTreeViewColumn *base_column);	# Moves column to be after to base_column. If base_column is NULL , thencolumn is placed in the first position.
	tree_view		# A GtkTreeView 
	column		# The GtkTreeViewColumn to be moved.
	base_column		#  The GtkTreeViewColumn to be moved relative to, or NULL . 
void gtk_tree_view_set_expander_column (GtkTreeView *tree_view, GtkTreeViewColumn *column);	# Sets the column to draw the expander arrow at. It must be in tree_view. If column is NULL , then the expander arrow is always at the first visible column.
	tree_view		# A GtkTreeView 
	column		# NULL , or the column to draw the expander arrow at.
GtkTreeViewColumn  *gtk_tree_view_get_expander_column (GtkTreeView *tree_view);	# Returns the column that is the current expander column.This column has the expander arrow drawn next to it.
	tree_view		# A GtkTreeView 
	return:		#  The expander column.  
void gtk_tree_view_set_column_drag_function (GtkTreeView *tree_view, GtkTreeViewColumnDropFunc func, gpointer user_data, GDestroyNotify destroy);	# Sets a user function for determining where a column may be dropped whendragged. This function is called on every column pair in turn at thebeginning of a column drag to determine where a drop can take place. Thearguments passed to func are: the tree_view, the GtkTreeViewColumn beingdragged, the two GtkTreeViewColumn s determining the drop spot, anduser_data. If either of the GtkTreeViewColumn arguments for the drop spotare NULL , then they indicate an edge. If func is set to be NULL , thentree_view reverts to the default behavior of allowing all columns to bedropped everywhere.
	tree_view		# A GtkTreeView .
	func		#  A function to determine which columns are reorderable, or NULL . 
void gtk_tree_view_scroll_to_point (GtkTreeView *tree_view, gint tree_x, gint tree_y);	# Scrolls the tree view such that the top-left corner of the visiblearea is tree_x, tree_y, where tree_x and tree_y are specifiedin tree coordinates. The tree_view must be realized beforethis function is called. If it isn't, you probably want to beusing gtk_tree_view_scroll_to_cell() .
	tree_view		# a GtkTreeView 
	tree_x		# X coordinate of new top-left pixel of visible area, or -1
	tree_y		# Y coordinate of new top-left pixel of visible area, or -1
void gtk_tree_view_scroll_to_cell (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, gboolean use_align, gfloat row_align, gfloat col_align);	# Moves the alignments of tree_view to the position specified by column andpath. If column is NULL , then no horizontal scrolling occurs. Likewise,if path is NULL no vertical scrolling occurs. At a minimum, one of columnor path need to be non-NULL . row_align determines where the row isplaced, and col_align determines where column is placed. Both are expectedto be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 meansright/bottom alignment, 0.5 means center.
	tree_view		# A GtkTreeView .
	path		#  The path of the row to move to, or NULL . 
	row_align		# The vertical alignment of the row specified by path.
	col_align		# The horizontal alignment of the column specified by column.
void gtk_tree_view_set_cursor (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, gboolean start_editing);	# Sets the current keyboard focus to be at path, and selects it. This isuseful when you want to focus the user’s attention on a particular row. Iffocus_column is not NULL , then focus is given to the column specified by it. Additionally, if focus_column is specified, and start_editing is TRUE , then editing should be started in the specified cell. This function is often followed by gtk_widget_grab_focus (tree_view) in order to give keyboard focus to the widget. Please note that editing can only happen when the widget is realized.
	tree_view		# A GtkTreeView 
	path		# A GtkTreePath 
	focus_column		#  A GtkTreeViewColumn , or NULL . 
void gtk_tree_view_set_cursor_on_cell (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *focus_column, GtkCellRenderer *focus_cell, gboolean start_editing);	# Sets the current keyboard focus to be at path, and selects it. This isuseful when you want to focus the user’s attention on a particular row. Iffocus_column is not NULL , then focus is given to the column specified byit. If focus_column and focus_cell are not NULL , and focus_columncontains 2 or more editable or activatable cells, then focus is given tothe cell specified by focus_cell. Additionally, if focus_column isspecified, and start_editing is TRUE , then editing should be started inthe specified cell. This function is often followed bygtk_widget_grab_focus (tree_view) in order to give keyboard focus to thewidget. Please note that editing can only happen when the widget isrealized.
	tree_view		# A GtkTreeView 
	path		# A GtkTreePath 
	focus_column		#  A GtkTreeViewColumn , or NULL . 
void gtk_tree_view_get_cursor (GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewColumn **focus_column);	# Fills in path and focus_column with the current path and focus column. Ifthe cursor isn’t currently set, then *path will be NULL . If no columncurrently has focus, then *focus_column will be NULL .
	tree_view		# A GtkTreeView 
	path		#  A pointer to befilled with the current cursor path, or NULL . 
void gtk_tree_view_row_activated (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column);	# Activates the cell determined by path and column.
	tree_view		# A GtkTreeView 
	path		# The GtkTreePath to be activated.
	column		# The GtkTreeViewColumn to be activated.
void gtk_tree_view_expand_all (GtkTreeView *tree_view);	# Recursively expands all nodes in the tree_view.
	tree_view		# A GtkTreeView .
void gtk_tree_view_collapse_all (GtkTreeView *tree_view);	# Recursively collapses all visible, expanded nodes in tree_view.
	tree_view		# A GtkTreeView .
void gtk_tree_view_expand_to_path (GtkTreeView *tree_view, GtkTreePath *path);	# Expands the row at path. This will also expand all parent rows ofpath as necessary.
	tree_view		# A GtkTreeView .
	path		# path to a row.
gboolean gtk_tree_view_expand_row (GtkTreeView *tree_view, GtkTreePath *path, gboolean open_all);	# Opens the row so its children are visible.
	tree_view		# a GtkTreeView 
	path		# path to a row
	open_all		# whether to recursively expand, or just expand immediate children
	return:		#  TRUE if the row existed and had children 
gboolean gtk_tree_view_collapse_row (GtkTreeView *tree_view, GtkTreePath *path);	# Collapses a row (hides its child rows, if they exist).
	tree_view		# a GtkTreeView 
	path		# path to a row in the tree_view
	return:		#  TRUE if the row was collapsed. 
void gtk_tree_view_map_expanded_rows (GtkTreeView *tree_view, GtkTreeViewMappingFunc func, gpointer data);	# Calls func on all expanded rows.
	tree_view		# A GtkTreeView 
	func		#  A function to be called. 
	data		# User data to be passed to the function.
gboolean gtk_tree_view_row_expanded (GtkTreeView *tree_view, GtkTreePath *path);	# Returns TRUE if the node pointed to by path is expanded in tree_view.
	tree_view		# A GtkTreeView .
	path		# A GtkTreePath to test expansion state.
	return:		#  TRUE if path is expanded. 
void gtk_tree_view_set_reorderable (GtkTreeView *tree_view, gboolean reorderable);	# This function is a convenience function to allow you to reordermodels that support the GtkTreeDragSourceIface and theGtkTreeDragDestIface . Both GtkTreeStore and GtkListStore supportthese. If reorderable is TRUE , then the user can reorder themodel by dragging and dropping rows. The developer can listen tothese changes by connecting to the model’s “row-inserted” and “row-deleted” signals. The reordering is implementedby setting up the tree view as a drag source and destination.Therefore, drag and drop can not be used in a reorderable view for anyother purpose.
	tree_view		# A GtkTreeView .
	reorderable		# TRUE , if the tree can be reordered.
gboolean gtk_tree_view_get_reorderable (GtkTreeView *tree_view);	# Retrieves whether the user can reorder the tree via drag-and-drop. Seegtk_tree_view_set_reorderable() .
	tree_view		# a GtkTreeView 
	return:		#  TRUE if the tree can be reordered. 
gboolean gtk_tree_view_get_path_at_pos (GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y);	# Finds the path at the point (x, y), relative to bin_window coordinates.That is, x and y are relative to an events coordinates. Widget-relativecoordinates must be converted usinggtk_tree_view_convert_widget_to_bin_window_coords() . It is primarily forthings like popup menus. If path is non-NULL , then it will be filledwith the GtkTreePath at that point. This path should be freed withgtk_tree_path_free() . If column is non-NULL , then it will be filledwith the column at that point. cell_x and cell_y return the coordinatesrelative to the cell background (i.e. the background_area passed togtk_cell_renderer_render()). This function is only meaningful iftree_view is realized. Therefore this function will always return FALSE if tree_view is not realized or does not have a model.
	tree_view		# A GtkTreeView .
	x		# The x position to be identified (relative to bin_window).
	y		# The y position to be identified (relative to bin_window).
	path		#  A pointer to a GtkTreePath pointer to be filled in, or NULL . 
	return:		#  TRUE if a row exists at that coordinate. 
gboolean gtk_tree_view_is_blank_at_pos (GtkTreeView *tree_view, gint x, gint y, GtkTreePath **path, GtkTreeViewColumn **column, gint *cell_x, gint *cell_y);	# Determine whether the point (x, y) in tree_view is blank, that is nocell content nor an expander arrow is drawn at the location. If so, thelocation can be considered as the background. You might wish to takespecial action on clicks on the background, such as clearing a currentselection, having a custom context menu or starting rubber banding.
	tree_view		# A GtkTreeView 
	x		# The x position to be identified (relative to bin_window)
	y		# The y position to be identified (relative to bin_window)
	path		#  A pointer to a GtkTreePath pointer to be filled in, or NULL . 
	return:		#  TRUE if the area at the given coordinates is blank,FALSE otherwise. 
void gtk_tree_view_get_cell_area (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect);	# Fills the bounding rectangle in bin_window coordinates for the cell at therow specified by path and the column specified by column. If path isNULL , or points to a path not currently displayed, the y and height fieldsof the rectangle will be filled with 0. If column is NULL , the x and widthfields will be filled with 0. The sum of all cell rects does not cover theentire tree; there are extra pixels in between rows, for example. Thereturned rectangle is equivalent to the cell_area passed togtk_cell_renderer_render(). This function is only valid if tree_view isrealized.
	tree_view		# a GtkTreeView 
	path		#  a GtkTreePath for the row, or NULL to get only horizontal coordinates. 
	rect		#  rectangle to fill with cell rect. 
void gtk_tree_view_get_background_area (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewColumn *column, GdkRectangle *rect);	# Fills the bounding rectangle in bin_window coordinates for the cell at therow specified by path and the column specified by column. If path isNULL , or points to a node not found in the tree, the y and height fields ofthe rectangle will be filled with 0. If column is NULL , the x and widthfields will be filled with 0. The returned rectangle is equivalent to thebackground_area passed to gtk_cell_renderer_render(). These backgroundareas tile to cover the entire bin window. Contrast with the cell_area,returned by gtk_tree_view_get_cell_area() , which returns only the cellitself, excluding surrounding borders and the tree expander area.
	tree_view		# a GtkTreeView 
	path		#  a GtkTreePath for the row, or NULL to get only horizontal coordinates. 
	rect		#  rectangle to fill with cell background rect. 
void gtk_tree_view_get_visible_rect (GtkTreeView *tree_view, GdkRectangle *visible_rect);	# Fills visible_rect with the currently-visible region of thebuffer, in tree coordinates. Convert to bin_window coordinates withgtk_tree_view_convert_tree_to_bin_window_coords() .Tree coordinates start at 0,0 for row 0 of the tree, and cover the entirescrollable area of the tree.
	tree_view		# a GtkTreeView 
	visible_rect		#  rectangle to fill. 
gboolean gtk_tree_view_get_visible_range (GtkTreeView *tree_view, GtkTreePath **start_path, GtkTreePath **end_path);	# Sets start_path and end_path to be the first and last visible path.Note that there may be invisible paths in between.
	tree_view		# A GtkTreeView 
	start_path		#  Return location for start of region,or NULL . 
	return:		#  TRUE , if valid paths were placed in start_pathand end_path. 
void gtk_tree_view_convert_bin_window_to_tree_coords (GtkTreeView *tree_view, gint bx, gint by, gint *tx, gint *ty);	# Converts bin_window coordinates to coordinates for thetree (the full scrollable area of the tree).
	tree_view		# a GtkTreeView 
	bx		# X coordinate relative to bin_window
	by		# Y coordinate relative to bin_window
	tx		#  return location for tree X coordinate. 
	ty		#  return location for tree Y coordinate. 
void gtk_tree_view_convert_bin_window_to_widget_coords (GtkTreeView *tree_view, gint bx, gint by, gint *wx, gint *wy);	# Converts bin_window coordinates to widget relative coordinates.
	tree_view		# a GtkTreeView 
	bx		# bin_window X coordinate
	by		# bin_window Y coordinate
	wx		#  return location for widget X coordinate. 
	wy		#  return location for widget Y coordinate. 
void gtk_tree_view_convert_tree_to_bin_window_coords (GtkTreeView *tree_view, gint tx, gint ty, gint *bx, gint *by);	# Converts tree coordinates (coordinates in full scrollable area of the tree)to bin_window coordinates.
	tree_view		# a GtkTreeView 
	tx		# tree X coordinate
	ty		# tree Y coordinate
	bx		#  return location for X coordinate relative to bin_window. 
	by		#  return location for Y coordinate relative to bin_window. 
void gtk_tree_view_convert_tree_to_widget_coords (GtkTreeView *tree_view, gint tx, gint ty, gint *wx, gint *wy);	# Converts tree coordinates (coordinates in full scrollable area of the tree)to widget coordinates.
	tree_view		# a GtkTreeView 
	tx		# X coordinate relative to the tree
	ty		# Y coordinate relative to the tree
	wx		#  return location for widget X coordinate. 
	wy		#  return location for widget Y coordinate. 
void gtk_tree_view_convert_widget_to_bin_window_coords (GtkTreeView *tree_view, gint wx, gint wy, gint *bx, gint *by);	# Converts widget coordinates to coordinates for the bin_window.
	tree_view		# a GtkTreeView 
	wx		# X coordinate relative to the widget
	wy		# Y coordinate relative to the widget
	bx		#  return location for bin_window X coordinate. 
	by		#  return location for bin_window Y coordinate. 
void gtk_tree_view_convert_widget_to_tree_coords (GtkTreeView *tree_view, gint wx, gint wy, gint *tx, gint *ty);	# Converts widget coordinates to coordinates for thetree (the full scrollable area of the tree).
	tree_view		# a GtkTreeView 
	wx		# X coordinate relative to the widget
	wy		# Y coordinate relative to the widget
	tx		#  return location for tree X coordinate. 
	ty		#  return location for tree Y coordinate. 
void gtk_tree_view_enable_model_drag_dest (GtkTreeView *tree_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);	# Turns tree_view into a drop destination for automatic DND. Callingthis method sets “reorderable” to FALSE .
	tree_view		# a GtkTreeView 
	targets		#  the table of targets thatthe drag will support. 
	n_targets		# the number of items in targets
	actions		# the bitmask of possible actions for a drag from thiswidget
void gtk_tree_view_enable_model_drag_source (GtkTreeView *tree_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);	# Turns tree_view into a drag source for automatic DND. Calling thismethod sets “reorderable” to FALSE .
	tree_view		# a GtkTreeView 
	start_button_mask		# Mask of allowed buttons to start drag
	targets		#  the table of targets that the drag will support. 
	n_targets		# the number of items in targets
	actions		# the bitmask of possible actions for a drag from thiswidget
void gtk_tree_view_unset_rows_drag_source (GtkTreeView *tree_view);	# Undoes the effect ofgtk_tree_view_enable_model_drag_source() . Calling this method sets“reorderable” to FALSE .
	tree_view		# a GtkTreeView 
void gtk_tree_view_unset_rows_drag_dest (GtkTreeView *tree_view);	# Undoes the effect ofgtk_tree_view_enable_model_drag_dest() . Calling this method sets“reorderable” to FALSE .
	tree_view		# a GtkTreeView 
void gtk_tree_view_set_drag_dest_row (GtkTreeView *tree_view, GtkTreePath *path, GtkTreeViewDropPosition pos);	# Sets the row that is highlighted for feedback.If path is NULL , an existing highlight is removed.
	tree_view		# a GtkTreeView 
	path		#  The path of the row to highlight, or NULL . 
	pos		# Specifies whether to drop before, after or into the row
void gtk_tree_view_get_drag_dest_row (GtkTreeView *tree_view, GtkTreePath **path, GtkTreeViewDropPosition *pos);	# Gets information about the row that is highlighted for feedback.
	tree_view		# a GtkTreeView 
	path		#  Return location for the path of the highlighted row, or NULL . 
gboolean gtk_tree_view_get_dest_row_at_pos (GtkTreeView *tree_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkTreeViewDropPosition *pos);	# Determines the destination row for a given position. drag_x anddrag_y are expected to be in widget coordinates. This function is onlymeaningful if tree_view is realized. Therefore this function will alwaysreturn FALSE if tree_view is not realized or does not have a model.
	tree_view		# a GtkTreeView 
	drag_x		# the position to determine the destination row for
	drag_y		# the position to determine the destination row for
	path		#  Return location for the path ofthe highlighted row, or NULL . 
	return:		#  whether there is a row at the given position, TRUE if thisis indeed the case. 
cairo_surface_t  *gtk_tree_view_create_row_drag_icon (GtkTreeView *tree_view, GtkTreePath *path);	# Creates a cairo_surface_t representation of the row at path. This image is used for a drag icon.
	tree_view		# a GtkTreeView 
	path		# a GtkTreePath in tree_view
	return:		#  a newly-allocated surface of the drag icon.  
void gtk_tree_view_set_enable_search (GtkTreeView *tree_view, gboolean enable_search);	# If enable_search is set, then the user can type in text to search throughthe tree interactively (this is sometimes called "typeahead find").
	tree_view		# A GtkTreeView 
	enable_search		# TRUE , if the user can search interactively
gboolean gtk_tree_view_get_enable_search (GtkTreeView *tree_view);	# Returns whether or not the tree allows to start interactive searching by typing in text.
	tree_view		# A GtkTreeView 
	return:		#  whether or not to let the user search interactively 
gint gtk_tree_view_get_search_column (GtkTreeView *tree_view);	# Gets the column searched on by the interactive search code.
	tree_view		# A GtkTreeView 
	return:		#  the column the interactive search code searches in. 
void gtk_tree_view_set_search_column (GtkTreeView *tree_view, gint column);	# Sets column as the column where the interactive search code shouldsearch in for the current model. 
	tree_view		# A GtkTreeView 
	column		# the column of the model to search in, or -1 to disable searching
GtkTreeViewSearchEqualFunc gtk_tree_view_get_search_equal_func (GtkTreeView *tree_view);	# Returns the compare function currently in use.
	tree_view		# A GtkTreeView 
	return:		#  the currently used compare function for the search code. 
void gtk_tree_view_set_search_equal_func (GtkTreeView *tree_view, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy);	# Sets the compare function for the interactive search capabilities; notethat somewhat like strcmp() returning 0 for equalityGtkTreeViewSearchEqualFunc returns FALSE on matches.
	tree_view		# A GtkTreeView 
	search_equal_func		# the compare function to use during the search
	search_user_data		#  user data to pass to search_equal_func, or NULL . 
GtkEntry  *gtk_tree_view_get_search_entry (GtkTreeView *tree_view);	# Returns the GtkEntry which is currently in use as interactive searchentry for tree_view. In case the built-in entry is being used, NULL will be returned.
	tree_view		# A GtkTreeView 
	return:		#  the entry currently in use as search entry.  
void gtk_tree_view_set_search_entry (GtkTreeView *tree_view, GtkEntry *entry);	# Sets the entry which the interactive search code will use for thistree_view. This is useful when you want to provide a search entryin our interface at all time at a fixed position. Passing NULL forentry will make the interactive search code use the built-in popupentry again.
	tree_view		# A GtkTreeView 
	entry		#  the entry the interactive search code of tree_viewshould use or NULL . 
void <span class="c_punctuation">( *GtkTreeViewSearchPositionFunc<span class="c_punctuation">) (GtkTreeView *tree_view, GtkWidget *search_dialog, gpointer user_data);	# void <span class="c_punctuation">( *GtkTreeViewSearchPositionFunc<span class="c_punctuation">) (GtkTreeView *tree_view, GtkWidget *search_dialog, gpointer user_data);</pre></div><hr>
GtkTreeViewSearchPositionFunc gtk_tree_view_get_search_position_func (GtkTreeView *tree_view);	# Returns the positioning function currently in use.
	tree_view		# A GtkTreeView 
	return:		#  the currently used function for positioning the search dialog. 
void gtk_tree_view_set_search_position_func (GtkTreeView *tree_view, GtkTreeViewSearchPositionFunc func, gpointer data, GDestroyNotify destroy);	# Sets the function to use when positioning the search dialog.
	tree_view		# A GtkTreeView 
	func		#  the function to use to position the search dialog, or NULL to use the default search position function. 
gboolean gtk_tree_view_get_fixed_height_mode (GtkTreeView *tree_view);	# Returns whether fixed height mode is turned on for tree_view.
	tree_view		# a GtkTreeView 
	return:		#  TRUE if tree_viewis in fixed height mode 
void gtk_tree_view_set_fixed_height_mode (GtkTreeView *tree_view, gboolean enable);	# Enables or disables the fixed height mode of tree_view. Fixed height mode speeds up GtkTreeView by assuming that all rows have the same height. Only enable this option if all rows are the same height and allcolumns are of type GTK_TREE_VIEW_COLUMN_FIXED .
	tree_view		# a GtkTreeView 
	enable		# TRUE to enable fixed height mode
gboolean gtk_tree_view_get_hover_selection (GtkTreeView *tree_view);	# Returns whether hover selection mode is turned on for tree_view.
	tree_view		# a GtkTreeView 
	return:		#  TRUE if tree_viewis in hover selection mode 
void gtk_tree_view_set_hover_selection (GtkTreeView *tree_view, gboolean hover);	# Enables or disables the hover selection mode of tree_view.Hover selection makes the selected row follow the pointer.Currently, this works only for the selection modes GTK_SELECTION_SINGLE and GTK_SELECTION_BROWSE .
	tree_view		# a GtkTreeView 
	hover		# TRUE to enable hover selection mode
gboolean gtk_tree_view_get_hover_expand (GtkTreeView *tree_view);	# Returns whether hover expansion mode is turned on for tree_view.
	tree_view		# a GtkTreeView 
	return:		#  TRUE if tree_viewis in hover expansion mode 
void gtk_tree_view_set_hover_expand (GtkTreeView *tree_view, gboolean expand);	# Enables or disables the hover expansion mode of tree_view.Hover expansion makes rows expand or collapse if the pointer moves over them.
	tree_view		# a GtkTreeView 
	expand		# TRUE to enable hover selection mode
gboolean <span class="c_punctuation">( *GtkTreeViewRowSeparatorFunc<span class="c_punctuation">) (GtkTreeModel *model, GtkTreeIter *iter, gpointer data);	# Function type for determining whether the row pointed to by iter shouldbe rendered as a separator. A common way to implement this is to have aboolean column in the model, whose values the GtkTreeViewRowSeparatorFunc returns.
	model		# the GtkTreeModel 
	iter		# a GtkTreeIter pointing at a row in model
	data		#  user data. 
	return:		#  TRUE if the row is a separator 
GtkTreeViewRowSeparatorFunc gtk_tree_view_get_row_separator_func (GtkTreeView *tree_view);	# Returns the current row separator function.
	tree_view		# a GtkTreeView 
	return:		#  the current row separator function. 
void gtk_tree_view_set_row_separator_func (GtkTreeView *tree_view, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy);	# Sets the row separator function, which is used to determinewhether a row should be drawn as a separator. If the row separatorfunction is NULL , no separators are drawn. This is the default value.
	tree_view		# a GtkTreeView 
	func		#  a GtkTreeViewRowSeparatorFunc . 
gboolean gtk_tree_view_get_rubber_banding (GtkTreeView *tree_view);	# Returns whether rubber banding is turned on for tree_view. If theselection mode is GTK_SELECTION_MULTIPLE , rubber banding will allow theuser to select multiple rows by dragging the mouse.
	tree_view		# a GtkTreeView 
	return:		#  TRUE if rubber banding in tree_viewis enabled. 
void gtk_tree_view_set_rubber_banding (GtkTreeView *tree_view, gboolean enable);	# Enables or disables rubber banding in tree_view. If the selection modeis GTK_SELECTION_MULTIPLE , rubber banding will allow the user to selectmultiple rows by dragging the mouse.
	tree_view		# a GtkTreeView 
	enable		# TRUE to enable rubber banding
gboolean gtk_tree_view_is_rubber_banding_active (GtkTreeView *tree_view);	# Returns whether a rubber banding operation is currently being donein tree_view.
	tree_view		# a GtkTreeView 
	return:		#  TRUE if a rubber banding operation is currently beingdone in tree_view. 
gboolean gtk_tree_view_get_enable_tree_lines (GtkTreeView *tree_view);	# Returns whether or not tree lines are drawn in tree_view.
	tree_view		# a GtkTreeView .
	return:		#  TRUE if tree lines are drawn in tree_view, FALSE otherwise. 
void gtk_tree_view_set_enable_tree_lines (GtkTreeView *tree_view, gboolean enabled);	# Sets whether to draw lines interconnecting the expanders in tree_view.This does not have any visible effects for lists.
	tree_view		# a GtkTreeView 
	enabled		# TRUE to enable tree line drawing, FALSE otherwise.
GtkTreeViewGridLines gtk_tree_view_get_grid_lines (GtkTreeView *tree_view);	# Returns which grid lines are enabled in tree_view.
	tree_view		# a GtkTreeView 
	return:		#  a GtkTreeViewGridLines value indicating which grid linesare enabled. 
void gtk_tree_view_set_grid_lines (GtkTreeView *tree_view, GtkTreeViewGridLines grid_lines);	# Sets which grid lines to draw in tree_view.
	tree_view		# a GtkTreeView 
	grid_lines		# a GtkTreeViewGridLines value indicating which grid lines toenable.
void gtk_tree_view_set_tooltip_row (GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path);	# Sets the tip area of tooltip to be the area covered by the row at path.See also gtk_tree_view_set_tooltip_column() for a simpler alternative.See also gtk_tooltip_set_tip_area() .
	tree_view		# a GtkTreeView 
	tooltip		# a GtkTooltip 
	path		# a GtkTreePath 
void gtk_tree_view_set_tooltip_cell (GtkTreeView *tree_view, GtkTooltip *tooltip, GtkTreePath *path, GtkTreeViewColumn *column, GtkCellRenderer *cell);	# Sets the tip area of tooltip to the area path, column and cell havein common. For example if path is NULL and column is set, the tiparea will be set to the full area covered by column. See alsogtk_tooltip_set_tip_area() .
	tree_view		# a GtkTreeView 
	tooltip		# a GtkTooltip 
	path		#  a GtkTreePath or NULL . 
gboolean gtk_tree_view_get_tooltip_context (GtkTreeView *tree_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter);	# This function is supposed to be used in a “query-tooltip” signal handler for GtkTreeView . The x, y and keyboard_tip valueswhich are received in the signal handler, should be passed to thisfunction without modification.
	tree_view		# a GtkTreeView 
	x		#  the x coordinate (relative to widget coordinates). 
	return:		#  whether or not the given tooltip context points to a row. 
gint gtk_tree_view_get_tooltip_column (GtkTreeView *tree_view);	# Returns the column of tree_view’s model which is being used fordisplaying tooltips on tree_view’s rows.
	tree_view		# a GtkTreeView 
	return:		#  the index of the tooltip column that is currently beingused, or -1 if this is disabled. 
void gtk_tree_view_set_tooltip_column (GtkTreeView *tree_view, gint column);	# If you only plan to have simple (text-only) tooltips on full rows, youcan use this function to have GtkTreeView handle these automaticallyfor you. column should be set to the column in tree_view’s modelcontaining the tooltip texts, or -1 to disable this feature.
	tree_view		# a GtkTreeView 
	column		# an integer, which is a valid column number for tree_view’s model
gboolean gtk_tree_drag_source_drag_data_delete (GtkTreeDragSource *drag_source, GtkTreePath *path);	# Asks the GtkTreeDragSource to delete the row at path, becauseit was moved somewhere else via drag-and-drop. Returns FALSE if the deletion fails because path no longer exists, or forsome model-specific reason. Should robustly handle a path nolonger found in the model!
	drag_source		# a GtkTreeDragSource 
	path		# row that was being dragged
	return:		#  TRUE if the row was successfully deleted 
gboolean gtk_tree_drag_source_drag_data_get (GtkTreeDragSource *drag_source, GtkTreePath *path, GtkSelectionData *selection_data);	# Asks the GtkTreeDragSource to fill in selection_data with arepresentation of the row at path. selection_data-&gt;target givesthe required type of the data. Should robustly handle a path nolonger found in the model!
	drag_source		# a GtkTreeDragSource 
	path		# row that was dragged
	selection_data		# a GtkSelectionData to fill with datafrom the dragged row
	return:		#  TRUE if data of the required type was provided  
gboolean gtk_tree_drag_source_row_draggable (GtkTreeDragSource *drag_source, GtkTreePath *path);	# Asks the GtkTreeDragSource whether a particular row can be used asthe source of a DND operation. If the source doesn’t implementthis interface, the row is assumed draggable.
	drag_source		# a GtkTreeDragSource 
	path		# row on which user is initiating a drag
	return:		#  TRUE if the row can be dragged 
gboolean gtk_tree_drag_dest_drag_data_received (GtkTreeDragDest *drag_dest, GtkTreePath *dest, GtkSelectionData *selection_data);	# Asks the GtkTreeDragDest to insert a row before the path dest,deriving the contents of the row from selection_data. If dest isoutside the tree so that inserting before it is impossible, FALSE will be returned. Also, FALSE may be returned if the new row isnot created for some model-specific reason. Should robustly handlea dest no longer found in the model!
	drag_dest		# a GtkTreeDragDest 
	dest		# row to drop in front of
	selection_data		# data to drop
	return:		#  whether a new row was created before position dest 
gboolean gtk_tree_drag_dest_row_drop_possible (GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, GtkSelectionData *selection_data);	# Determines whether a drop is possible before the given dest_path,at the same depth as dest_path. i.e., can we drop the data inselection_data at that location. dest_path does not have toexist; the return value will almost certainly be FALSE if theparent of dest_path doesn’t exist, though.
	drag_dest		# a GtkTreeDragDest 
	dest_path		# destination row
	selection_data		# the data being dragged
	return:		#  TRUE if a drop is possible before dest_path 
gboolean gtk_tree_set_row_drag_data (GtkSelectionData *selection_data, GtkTreeModel *tree_model, GtkTreePath *path);	# Sets selection data of target type GTK_TREE_MODEL_ROW. Normally usedin a drag_data_get handler.
	selection_data		# some GtkSelectionData 
	tree_model		# a GtkTreeModel 
	path		# a row in tree_model
	return:		#  TRUE if the GtkSelectionData had the proper target type to allow us to set a tree row 
gboolean gtk_tree_get_row_drag_data (GtkSelectionData *selection_data, GtkTreeModel **tree_model, GtkTreePath **path);	# Obtains a tree_model and path from selection data of target typeGTK_TREE_MODEL_ROW. Normally called from a drag_data_received handler.This function can only be used if selection_data originates from the sameprocess that’s calling this function, because a pointer to the tree modelis being passed around. If you aren’t in the same process, then you'llget memory corruption. In the GtkTreeDragDest drag_data_received handler,you can assume that selection data of type GTK_TREE_MODEL_ROW isin from the current process. The returned path must be freed withgtk_tree_path_free() .
	selection_data		# a GtkSelectionData 
	tree_model		#  a GtkTreeModel . 
	return:		#  TRUE if selection_datahad target type GTK_TREE_MODEL_ROW andis otherwise valid 
GtkWidget  *gtk_cell_view_new (void );	#创建对象:GtkCellView widget.
	return:		#  A newly created GtkCellView widget. 
GtkWidget  *gtk_cell_view_new_with_context (GtkCellArea *area, GtkCellAreaContext *context);	#创建对象:GtkCellView widget with a specific GtkCellArea to layout cells and a specific GtkCellAreaContext .
	area		# the GtkCellArea to layout cells
	context		# the GtkCellAreaContext in which to calculate cell geometry
	return:		#  A newly created GtkCellView widget. 
GtkWidget  *gtk_cell_view_new_with_text (const gchar *text);	#创建对象:GtkCellView widget, adds a GtkCellRendererText to it, and makes it show text.
	text		# the text to display in the cell view
	return:		#  A newly created GtkCellView widget. 
GtkWidget  *gtk_cell_view_new_with_markup (const gchar *markup);	#创建对象:GtkCellView widget, adds a GtkCellRendererText to it, and makes it show markup. The text can bemarked up with the Pango text markup language.
	markup		# the text to display in the cell view
	return:		#  A newly created GtkCellView widget. 
GtkWidget  *gtk_cell_view_new_with_pixbuf (GdkPixbuf *pixbuf);	#创建对象:GtkCellView widget, adds a GtkCellRendererPixbuf to it, and makes it show pixbuf.
	pixbuf		# the image to display in the cell view
	return:		#  A newly created GtkCellView widget. 
void gtk_cell_view_set_model (GtkCellView *cell_view, GtkTreeModel *model);	# Sets the model for cell_view. If cell_view already has a modelset, it will remove it before setting the new model. If model isNULL , then it will unset the old model.
	cell_view		# a GtkCellView 
	model		#  a GtkTreeModel . 
GtkTreeModel  *gtk_cell_view_get_model (GtkCellView *cell_view);	# Returns the model for cell_view. If no model is used NULL isreturned.
	cell_view		# a GtkCellView 
	return:		#  a GtkTreeModel used or NULL .  
void gtk_cell_view_set_displayed_row (GtkCellView *cell_view, GtkTreePath *path);	# Sets the row of the model that is currently displayedby the GtkCellView . If the path is unset, then thecontents of the cellview “stick” at their last value;this is not normally a desired result, but may bea needed intermediate state if say, the model forthe GtkCellView becomes temporarily empty.
	cell_view		# a GtkCellView 
	path		#  a GtkTreePath or NULL to unset. 
GtkTreePath  *gtk_cell_view_get_displayed_row (GtkCellView *cell_view);	# Returns a GtkTreePath referring to the currently displayed row. If no row is currently displayed, NULL is returned.
	cell_view		# a GtkCellView 
	return:		#  the currently displayed row or NULL .  
void gtk_cell_view_set_draw_sensitive (GtkCellView *cell_view, gboolean draw_sensitive);	# Sets whether cell_view should draw all of itscells in a sensitive state, this is used by GtkComboBox menusto ensure that rows with insensitive cells that containchildren appear sensitive in the parent menu item.
	cell_view		# a GtkCellView 
	draw_sensitive		# whether to draw all cells in a sensitive state.
gboolean gtk_cell_view_get_draw_sensitive (GtkCellView *cell_view);	# Gets whether cell_view is configured to draw all of itscells in a sensitive state.
	cell_view		# a GtkCellView 
	return:		#  whether cell_viewdraws all of itscells in a sensitive state 
void gtk_cell_view_set_fit_model (GtkCellView *cell_view, gboolean fit_model);	# Sets whether cell_view should request space to fit the entire GtkTreeModel .
	cell_view		# a GtkCellView 
	fit_model		# whether cell_viewshould request space for the whole model.
gboolean gtk_cell_view_get_fit_model (GtkCellView *cell_view);	# Gets whether cell_view is configured to request spaceto fit the entire GtkTreeModel .
	cell_view		# a GtkCellView 
	return:		#  whether cell_viewrequests space to fitthe entire GtkTreeModel . 
void <span class="c_punctuation">( *GtkIconViewForeachFunc<span class="c_punctuation">) (GtkIconView *icon_view, GtkTreePath *path, gpointer data);	# A function used by gtk_icon_view_selected_foreach() to map allselected rows. It will be called on every selected row in the view.
	icon_view		# a GtkIconView 
	path		# The GtkTreePath of a selected row
	data		#  user data. 
GtkWidget  *gtk_icon_view_new (void );	#创建对象:GtkIconView widget
	return:		#  A newly created GtkIconView widget 
GtkWidget  *gtk_icon_view_new_with_area (GtkCellArea *area);	#创建对象:GtkIconView widget using thespecified area to layout cells inside the icons.
	area		# the GtkCellArea to use to layout cells
	return:		#  A newly created GtkIconView widget 
GtkWidget  *gtk_icon_view_new_with_model (GtkTreeModel *model);	#创建对象:GtkIconView widget with the model model.
	model		# The model.
	return:		#  A newly created GtkIconView widget. 
void gtk_icon_view_set_model (GtkIconView *icon_view, GtkTreeModel *model);	# Sets the model for a GtkIconView .If the icon_view already has a model set, it will removeit before setting the new model. If model is NULL , thenit will unset the old model.
	icon_view		# A GtkIconView .
	model		#  The model. 
GtkTreeModel  *gtk_icon_view_get_model (GtkIconView *icon_view);	# Returns the model the GtkIconView is based on. Returns NULL if themodel is unset.
	icon_view		# a GtkIconView 
	return:		#  A GtkTreeModel , or NULL if none iscurrently being used.  
void gtk_icon_view_set_text_column (GtkIconView *icon_view, gint column);	# Sets the column with text for icon_view to be column. The textcolumn must be of type G_TYPE_STRING .
	icon_view		# A GtkIconView .
	column		# A column in the currently used model, or -1 to display no text
gint gtk_icon_view_get_text_column (GtkIconView *icon_view);	# Returns the column with text for icon_view.
	icon_view		# A GtkIconView .
	return:		#  the text column, or -1 if it’s unset. 
void gtk_icon_view_set_markup_column (GtkIconView *icon_view, gint column);	# Sets the column with markup information for icon_view to becolumn. The markup column must be of type G_TYPE_STRING .If the markup column is set to something, it overridesthe text column set by gtk_icon_view_set_text_column() .
	icon_view		# A GtkIconView .
	column		# A column in the currently used model, or -1 to display no text
gint gtk_icon_view_get_markup_column (GtkIconView *icon_view);	# Returns the column with markup text for icon_view.
	icon_view		# A GtkIconView .
	return:		#  the markup column, or -1 if it’s unset. 
void gtk_icon_view_set_pixbuf_column (GtkIconView *icon_view, gint column);	# Sets the column with pixbufs for icon_view to be column. The pixbufcolumn must be of type GDK_TYPE_PIXBUF 
	icon_view		# A GtkIconView .
	column		# A column in the currently used model, or -1 to disable
gint gtk_icon_view_get_pixbuf_column (GtkIconView *icon_view);	# Returns the column with pixbufs for icon_view.
	icon_view		# A GtkIconView .
	return:		#  the pixbuf column, or -1 if it’s unset. 
GtkTreePath  *gtk_icon_view_get_path_at_pos (GtkIconView *icon_view, gint x, gint y);	# Finds the path at the point (x, y), relative to bin_window coordinates.See gtk_icon_view_get_item_at_pos() , if you are also interested inthe cell at the specified position. See gtk_icon_view_convert_widget_to_bin_window_coords() for convertingwidget coordinates to bin_window coordinates.
	icon_view		# A GtkIconView .
	x		# The x position to be identified
	y		# The y position to be identified
	return:		#  The GtkTreePath correspondingto the icon or NULL if no icon exists at that position.  
gboolean gtk_icon_view_get_item_at_pos (GtkIconView *icon_view, gint x, gint y, GtkTreePath **path, GtkCellRenderer **cell);	# Finds the path at the point (x, y), relative to bin_window coordinates.In contrast to gtk_icon_view_get_path_at_pos() , this function also obtains the cell at the specified position. The returned path shouldbe freed with gtk_tree_path_free() .See gtk_icon_view_convert_widget_to_bin_window_coords() for convertingwidget coordinates to bin_window coordinates.
	icon_view		# A GtkIconView .
	x		# The x position to be identified
	y		# The y position to be identified
	path		#  Return location for the path, or NULL . 
	return:		#  TRUE if an item exists at the specified position 
void gtk_icon_view_convert_widget_to_bin_window_coords (GtkIconView *icon_view, gint wx, gint wy, gint *bx, gint *by);	# Converts widget coordinates to coordinates for the bin_window,as expected by e.g. gtk_icon_view_get_path_at_pos() .
	icon_view		# a GtkIconView 
	wx		# X coordinate relative to the widget
	wy		# Y coordinate relative to the widget
	bx		#  return location for bin_window X coordinate. 
	by		#  return location for bin_window Y coordinate. 
void gtk_icon_view_set_cursor (GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, gboolean start_editing);	# Sets the current keyboard focus to be at path, and selects it. This isuseful when you want to focus the user’s attention on a particular item.If cell is not NULL , then focus is given to the cell specified by it. Additionally, if start_editing is TRUE , then editing should be started in the specified cell. 
	icon_view		# A GtkIconView 
	path		# A GtkTreePath 
	cell		#  One of the cell renderers of icon_view, or NULL . 
gboolean gtk_icon_view_get_cursor (GtkIconView *icon_view, GtkTreePath **path, GtkCellRenderer **cell);	# Fills in path and cell with the current cursor path and cell. If the cursor isn’t currently set, then *path will be NULL . If no cell currently has focus, then *cell will be NULL .
	icon_view		# A GtkIconView 
	path		#  Return location for the currentcursor path, or NULL . 
	return:		#  TRUE if the cursor is set. 
void gtk_icon_view_selected_foreach (GtkIconView *icon_view, GtkIconViewForeachFunc func, gpointer data);	# Calls a function for each selected icon. Note that the model orselection cannot be modified from within this function.
	icon_view		# A GtkIconView .
	func		#  The function to call for each selected icon. 
	data		# User data to pass to the function.
void gtk_icon_view_set_selection_mode (GtkIconView *icon_view, GtkSelectionMode mode);	# Sets the selection mode of the icon_view.
	icon_view		# A GtkIconView .
	mode		# The selection mode
GtkSelectionMode gtk_icon_view_get_selection_mode (GtkIconView *icon_view);	# Gets the selection mode of the icon_view.
	icon_view		# A GtkIconView .
	return:		#  the current selection mode 
void gtk_icon_view_set_item_orientation (GtkIconView *icon_view, GtkOrientation orientation);	# Sets the ::item-orientation property which determines whether the labels are drawn beside the icons instead of below.
	icon_view		# a GtkIconView 
	orientation		# the relative position of texts and icons 
GtkOrientation gtk_icon_view_get_item_orientation (GtkIconView *icon_view);	# Returns the value of the ::item-orientation property which determines whether the labels are drawn beside the icons instead of below.
	icon_view		# a GtkIconView 
	return:		#  the relative position of texts and icons  
void gtk_icon_view_set_columns (GtkIconView *icon_view, gint columns);	# Sets the ::columns property which determines in howmany columns the icons are arranged. If columns is-1, the number of columns will be chosen automatically to fill the available area.
	icon_view		# a GtkIconView 
	columns		# the number of columns
gint gtk_icon_view_get_columns (GtkIconView *icon_view);	# Returns the value of the ::columns property.
	icon_view		# a GtkIconView 
	return:		#  the number of columns, or -1 
void gtk_icon_view_set_item_width (GtkIconView *icon_view, gint item_width);	# Sets the ::item-width property which specifies the width to use for each item. If it is set to -1, the icon view will automatically determine a suitable item size.
	icon_view		# a GtkIconView 
	item_width		# the width for each item
gint gtk_icon_view_get_item_width (GtkIconView *icon_view);	# Returns the value of the ::item-width property.
	icon_view		# a GtkIconView 
	return:		#  the width of a single item, or -1 
void gtk_icon_view_set_spacing (GtkIconView *icon_view, gint spacing);	# Sets the ::spacing property which specifies the space which is inserted between the cells (i.e. the icon and the text) of an item.
	icon_view		# a GtkIconView 
	spacing		# the spacing
gint gtk_icon_view_get_spacing (GtkIconView *icon_view);	# Returns the value of the ::spacing property.
	icon_view		# a GtkIconView 
	return:		#  the space between cells  
void gtk_icon_view_set_row_spacing (GtkIconView *icon_view, gint row_spacing);	# Sets the ::row-spacing property which specifies the space which is inserted between the rows of the icon view.
	icon_view		# a GtkIconView 
	row_spacing		# the row spacing
gint gtk_icon_view_get_row_spacing (GtkIconView *icon_view);	# Returns the value of the ::row-spacing property.
	icon_view		# a GtkIconView 
	return:		#  the space between rows 
void gtk_icon_view_set_column_spacing (GtkIconView *icon_view, gint column_spacing);	# Sets the ::column-spacing property which specifies the space which is inserted between the columns of the icon view.
	icon_view		# a GtkIconView 
	column_spacing		# the column spacing
gint gtk_icon_view_get_column_spacing (GtkIconView *icon_view);	# Returns the value of the ::column-spacing property.
	icon_view		# a GtkIconView 
	return:		#  the space between columns 
void gtk_icon_view_set_margin (GtkIconView *icon_view, gint margin);	# Sets the ::margin property which specifies the space which is inserted at the top, bottom, left and right of the icon view.
	icon_view		# a GtkIconView 
	margin		# the margin
gint gtk_icon_view_get_margin (GtkIconView *icon_view);	# Returns the value of the ::margin property.
	icon_view		# a GtkIconView 
	return:		#  the space at the borders  
void gtk_icon_view_set_item_padding (GtkIconView *icon_view, gint item_padding);	# Sets the “item-padding” property which specifies the paddingaround each of the icon view’s items.
	icon_view		# a GtkIconView 
	item_padding		# the item padding
gint gtk_icon_view_get_item_padding (GtkIconView *icon_view);	# Returns the value of the ::item-padding property.
	icon_view		# a GtkIconView 
	return:		#  the padding around items 
void gtk_icon_view_set_activate_on_single_click (GtkIconView *icon_view, gboolean single);	# Causes the “item-activated” signal to be emitted ona single click instead of a double click.
	icon_view		# a GtkIconView 
	single		# TRUE to emit item-activated on a single click
gboolean gtk_icon_view_get_activate_on_single_click (GtkIconView *icon_view);	# Gets the setting set by gtk_icon_view_set_activate_on_single_click() .
	icon_view		# a GtkIconView 
	return:		#  TRUE if item-activated will be emitted on a single click 
gboolean gtk_icon_view_get_cell_rect (GtkIconView *icon_view, GtkTreePath *path, GtkCellRenderer *cell, GdkRectangle *rect);	# Fills the bounding rectangle in widget coordinates for the cell specified bypath and cell. If cell is NULL the main cell area is used.
	icon_view		# a GtkIconView 
	path		# a GtkTreePath 
	cell		#  a GtkCellRenderer or NULL . 
	return:		#  FALSE if there is no such item, TRUE otherwise 
void gtk_icon_view_select_path (GtkIconView *icon_view, GtkTreePath *path);	# Selects the row at path.
	icon_view		# A GtkIconView .
	path		# The GtkTreePath to be selected.
void gtk_icon_view_unselect_path (GtkIconView *icon_view, GtkTreePath *path);	# Unselects the row at path.
	icon_view		# A GtkIconView .
	path		# The GtkTreePath to be unselected.
gboolean gtk_icon_view_path_is_selected (GtkIconView *icon_view, GtkTreePath *path);	# Returns TRUE if the icon pointed to by path is currentlyselected. If path does not point to a valid location, FALSE is returned.
	icon_view		# A GtkIconView .
	path		# A GtkTreePath to check selection on.
	return:		#  TRUE if pathis selected. 
GList  *gtk_icon_view_get_selected_items (GtkIconView *icon_view);	# Creates a list of paths of all selected items. Additionally, if you areplanning on modifying the model after calling this function, you maywant to convert the returned list into a list of GtkTreeRowReferences .To do this, you can use gtk_tree_row_reference_new() .
	icon_view		# A GtkIconView .
	return:		#  A GList containing a GtkTreePath for each selected row.  
void gtk_icon_view_select_all (GtkIconView *icon_view);	# Selects all the icons. icon_view must has its selection mode setto GTK_SELECTION_MULTIPLE .
	icon_view		# A GtkIconView .
void gtk_icon_view_unselect_all (GtkIconView *icon_view);	# Unselects all the icons.
	icon_view		# A GtkIconView .
void gtk_icon_view_item_activated (GtkIconView *icon_view, GtkTreePath *path);	# Activates the item determined by path.
	icon_view		# A GtkIconView 
	path		# The GtkTreePath to be activated
void gtk_icon_view_scroll_to_path (GtkIconView *icon_view, GtkTreePath *path, gboolean use_align, gfloat row_align, gfloat col_align);	# Moves the alignments of icon_view to the position specified by path. row_align determines where the row is placed, and col_align determines where column is placed. Both are expected to be between 0.0 and 1.0. 0.0 means left/top alignment, 1.0 means right/bottom alignment, 0.5 means center.
	icon_view		# A GtkIconView .
	path		# The path of the item to move to.
	use_align		# whether to use alignment arguments, or FALSE .
	row_align		# The vertical alignment of the item specified by path.
	col_align		# The horizontal alignment of the item specified by path.
gboolean gtk_icon_view_get_visible_range (GtkIconView *icon_view, GtkTreePath **start_path, GtkTreePath **end_path);	# Sets start_path and end_path to be the first and last visible path. Note that there may be invisible paths in between.
	icon_view		# A GtkIconView 
	start_path		#  Return location for start of region,or NULL . 
	return:		#  TRUE , if valid paths were placed in start_pathand end_path 
void gtk_icon_view_set_tooltip_item (GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path);	# Sets the tip area of tooltip to be the area covered by the item at path.See also gtk_icon_view_set_tooltip_column() for a simpler alternative.See also gtk_tooltip_set_tip_area() .
	icon_view		# a GtkIconView 
	tooltip		# a GtkTooltip 
	path		# a GtkTreePath 
void gtk_icon_view_set_tooltip_cell (GtkIconView *icon_view, GtkTooltip *tooltip, GtkTreePath *path, GtkCellRenderer *cell);	# Sets the tip area of tooltip to the area which cell occupies inthe item pointed to by path. See also gtk_tooltip_set_tip_area() .
	icon_view		# a GtkIconView 
	tooltip		# a GtkTooltip 
	path		# a GtkTreePath 
	cell		#  a GtkCellRenderer or NULL . 
gboolean gtk_icon_view_get_tooltip_context (GtkIconView *icon_view, gint *x, gint *y, gboolean keyboard_tip, GtkTreeModel **model, GtkTreePath **path, GtkTreeIter *iter);	# This function is supposed to be used in a “query-tooltip” signal handler for GtkIconView . The x, y and keyboard_tip valueswhich are received in the signal handler, should be passed to thisfunction without modification.
	icon_view		# an GtkIconView 
	x		#  the x coordinate (relative to widget coordinates). 
	return:		#  whether or not the given tooltip context points to a item 
void gtk_icon_view_set_tooltip_column (GtkIconView *icon_view, gint column);	# If you only plan to have simple (text-only) tooltips on full items, youcan use this function to have GtkIconView handle these automaticallyfor you. column should be set to the column in icon_view’s modelcontaining the tooltip texts, or -1 to disable this feature.
	icon_view		# a GtkIconView 
	column		# an integer, which is a valid column number for icon_view’s model
gint gtk_icon_view_get_tooltip_column (GtkIconView *icon_view);	# Returns the column of icon_view’s model which is being used fordisplaying tooltips on icon_view’s rows.
	icon_view		# a GtkIconView 
	return:		#  the index of the tooltip column that is currently beingused, or -1 if this is disabled. 
gint gtk_icon_view_get_item_row (GtkIconView *icon_view, GtkTreePath *path);	# Gets the row in which the item path is currentlydisplayed. Row numbers start at 0.
	icon_view		# a GtkIconView 
	path		# the GtkTreePath of the item
	return:		#  The row in which the item is displayed 
gint gtk_icon_view_get_item_column (GtkIconView *icon_view, GtkTreePath *path);	# Gets the column in which the item path is currentlydisplayed. Column numbers start at 0.
	icon_view		# a GtkIconView 
	path		# the GtkTreePath of the item
	return:		#  The column in which the item is displayed 
void gtk_icon_view_enable_model_drag_source (GtkIconView *icon_view, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);	# Turns icon_view into a drag source for automatic DND. Calling thismethod sets “reorderable” to FALSE .
	icon_view		# a GtkIconView 
	start_button_mask		# Mask of allowed buttons to start drag
	targets		#  the table of targets that the drag willsupport. 
	n_targets		# the number of items in targets
	actions		# the bitmask of possible actions for a drag from thiswidget
void gtk_icon_view_enable_model_drag_dest (GtkIconView *icon_view, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);	# Turns icon_view into a drop destination for automatic DND. Calling thismethod sets “reorderable” to FALSE .
	icon_view		# a GtkIconView 
	targets		#  the table of targets that the drag willsupport. 
	n_targets		# the number of items in targets
	actions		# the bitmask of possible actions for a drag to thiswidget
void gtk_icon_view_unset_model_drag_source (GtkIconView *icon_view);	# Undoes the effect of gtk_icon_view_enable_model_drag_source() . Calling thismethod sets “reorderable” to FALSE .
	icon_view		# a GtkIconView 
void gtk_icon_view_unset_model_drag_dest (GtkIconView *icon_view);	# Undoes the effect of gtk_icon_view_enable_model_drag_dest() . Calling thismethod sets “reorderable” to FALSE .
	icon_view		# a GtkIconView 
void gtk_icon_view_set_reorderable (GtkIconView *icon_view, gboolean reorderable);	# This function is a convenience function to allow you to reorder models thatsupport the GtkTreeDragSourceIface and the GtkTreeDragDestIface . BothGtkTreeStore and GtkListStore support these. If reorderable is TRUE , thenthe user can reorder the model by dragging and dropping rows. Thedeveloper can listen to these changes by connecting to the model'srow_inserted and row_deleted signals. The reordering is implemented by setting upthe icon view as a drag source and destination. Therefore, drag anddrop can not be used in a reorderable view for any other purpose.
	icon_view		# A GtkIconView .
	reorderable		# TRUE , if the list of items can be reordered.
gboolean gtk_icon_view_get_reorderable (GtkIconView *icon_view);	# Retrieves whether the user can reorder the list via drag-and-drop. See gtk_icon_view_set_reorderable() .
	icon_view		# a GtkIconView 
	return:		#  TRUE if the list can be reordered. 
void gtk_icon_view_set_drag_dest_item (GtkIconView *icon_view, GtkTreePath *path, GtkIconViewDropPosition pos);	# Sets the item that is highlighted for feedback.
	icon_view		# a GtkIconView 
	path		#  The path of the item to highlight, or NULL . 
	pos		# Specifies where to drop, relative to the item
void gtk_icon_view_get_drag_dest_item (GtkIconView *icon_view, GtkTreePath **path, GtkIconViewDropPosition *pos);	# Gets information about the item that is highlighted for feedback.
	icon_view		# a GtkIconView 
	path		#  Return location for the path ofthe highlighted item, or NULL . 
gboolean gtk_icon_view_get_dest_item_at_pos (GtkIconView *icon_view, gint drag_x, gint drag_y, GtkTreePath **path, GtkIconViewDropPosition *pos);	# Determines the destination item for a given position.
	icon_view		# a GtkIconView 
	drag_x		# the position to determine the destination item for
	drag_y		# the position to determine the destination item for
	path		#  Return location for the path of the item,or NULL . 
	return:		#  whether there is an item at the given position. 
cairo_surface_t  *gtk_icon_view_create_drag_icon (GtkIconView *icon_view, GtkTreePath *path);	# Creates a cairo_surface_t representation of the item at path. This image is used for a drag icon.
	icon_view		# a GtkIconView 
	path		# a GtkTreePath in icon_view
	return:		#  a newly-allocated surface of the drag icon.  
gint <span class="c_punctuation">( *GtkTreeIterCompareFunc<span class="c_punctuation">) (GtkTreeModel *model, GtkTreeIter *a, GtkTreeIter *b, gpointer user_data);	# A GtkTreeIterCompareFunc should return a negative integer, zero, or a positiveinteger if a sorts before b, a sorts with b, or a sorts after brespectively. If two iters compare as equal, their order in the sorted modelis undefined. In order to ensure that the GtkTreeSortable behaves asexpected, the GtkTreeIterCompareFunc must define a partial order onthe model, i.e. it must be reflexive, antisymmetric and transitive.
	model		# The GtkTreeModel the comparison is within
	a		# A GtkTreeIter in model
	b		# Another GtkTreeIter in model
	user_data		# Data passed when the compare func is assigned e.g. by
	return:		#  a negative integer, zero or a positive integer depending on whetherasorts before, with or after b 
void gtk_tree_sortable_sort_column_changed (GtkTreeSortable *sortable);	# Emits a “sort-column-changed” signal on sortable.
	sortable		# A GtkTreeSortable 
gboolean gtk_tree_sortable_get_sort_column_id (GtkTreeSortable *sortable, gint *sort_column_id, GtkSortType *order);	# Fills in sort_column_id and order with the current sort column and theorder. It returns TRUE unless the sort_column_id is GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID or GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID .
	sortable		# A GtkTreeSortable 
	sort_column_id		#  The sort column id to be filled in. 
	return:		#  TRUE if the sort column is not one of the special sortcolumn ids. 
void gtk_tree_sortable_set_sort_column_id (GtkTreeSortable *sortable, gint sort_column_id, GtkSortType order);	# Sets the current sort column to be sort_column_id. The sortable willresort itself to reflect this change, after emitting a“sort-column-changed” signal. sort_column_id may either bea regular column id, or one of the following special values:
	sortable		# A GtkTreeSortable 
	sort_column_id		# the sort column id to set
	order		# The sort order of the column
void gtk_tree_sortable_set_sort_func (GtkTreeSortable *sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);	# Sets the comparison function used when sorting to be sort_func. If thecurrent sort column id of sortable is the same as sort_column_id, then the model will sort using this function.
	sortable		# A GtkTreeSortable 
	sort_column_id		# the sort column id to set the function for
	sort_func		# The comparison function
	user_data		#  User data to pass to sort_func, or NULL . 
void gtk_tree_sortable_set_default_sort_func (GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);	# Sets the default comparison function used when sorting to be sort_func. If the current sort column id of sortable isGTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID , then the model will sort using this function.
	sortable		# A GtkTreeSortable 
	sort_func		# The comparison function
	user_data		#  User data to pass to sort_func, or NULL . 
gboolean gtk_tree_sortable_has_default_sort_func (GtkTreeSortable *sortable);	# Returns TRUE if the model has a default sort function. This is usedprimarily by GtkTreeViewColumns in order to determine if a model can go back to the default state, or not.
	sortable		# A GtkTreeSortable 
	return:		#  TRUE , if the model has a default sort function 
GtkTreeModel  *gtk_tree_model_sort_new_with_model (GtkTreeModel *child_model);	#创建对象:GtkTreeModel , with child_model as the child model.
	child_model		# A GtkTreeModel 
	return:		#  A new GtkTreeModel .  
GtkTreeModel  *gtk_tree_model_sort_get_model (GtkTreeModelSort *tree_model);	# Returns the model the GtkTreeModelSort is sorting.
	tree_model		# a GtkTreeModelSort 
	return:		#  the "child model" being sorted.  
GtkTreePath  *gtk_tree_model_sort_convert_child_path_to_path (GtkTreeModelSort *tree_model_sort, GtkTreePath *child_path);	# Converts child_path to a path relative to tree_model_sort. That is,child_path points to a path in the child model. The returned path willpoint to the same row in the sorted model. If child_path isn’t a valid path on the child model, then NULL is returned.
	tree_model_sort		# A GtkTreeModelSort 
	child_path		# A GtkTreePath to convert
	return:		#  A newly allocated GtkTreePath , or NULL .  
gboolean gtk_tree_model_sort_convert_child_iter_to_iter (GtkTreeModelSort *tree_model_sort, GtkTreeIter *sort_iter, GtkTreeIter *child_iter);	# Sets sort_iter to point to the row in tree_model_sort that corresponds tothe row pointed at by child_iter. If sort_iter was not set, FALSE is returned. Note: a boolean is only returned since 2.14.
	tree_model_sort		# A GtkTreeModelSort 
	sort_iter		#  An uninitialized GtkTreeIter . 
	return:		#  TRUE , if sort_iterwas set, i.e. if sort_iteris avalid iterator pointer to a visible row in the child model. 
GtkTreePath  *gtk_tree_model_sort_convert_path_to_child_path (GtkTreeModelSort *tree_model_sort, GtkTreePath *sorted_path);	# Converts sorted_path to a path on the child model of tree_model_sort. That is, sorted_path points to a location in tree_model_sort. The returned path will point to the same location in the model not being sorted. If sorted_path does not point to a location in the child model, NULL is returned.
	tree_model_sort		# A GtkTreeModelSort 
	sorted_path		# A GtkTreePath to convert
	return:		#  A newly allocated GtkTreePath , or NULL .  
void gtk_tree_model_sort_convert_iter_to_child_iter (GtkTreeModelSort *tree_model_sort, GtkTreeIter *child_iter, GtkTreeIter *sorted_iter);	# Sets child_iter to point to the row pointed to by sorted_iter.
	tree_model_sort		# A GtkTreeModelSort 
	child_iter		#  An uninitialized GtkTreeIter . 
void gtk_tree_model_sort_reset_default_sort_func (GtkTreeModelSort *tree_model_sort);	# This resets the default sort function to be in the “unsorted” state. Thatis, it is in the same order as the child model. It will re-sort the modelto be in the same order as the child model only if the GtkTreeModelSort is in “unsorted” state.
	tree_model_sort		# A GtkTreeModelSort 
void gtk_tree_model_sort_clear_cache (GtkTreeModelSort *tree_model_sort);	# This function should almost never be called. It clears the tree_model_sortof any cached iterators that haven’t been reffed withgtk_tree_model_ref_node() . This might be useful if the child model beingsorted is static (and doesn’t change often) and there has been a lot ofunreffed access to nodes. As a side effect of this function, all unreffediters will be invalid.
	tree_model_sort		# A GtkTreeModelSort 
gboolean gtk_tree_model_sort_iter_is_valid (GtkTreeModelSort *tree_model_sort, GtkTreeIter *iter);	# This function is slow. Only use it for debugging and/or testingpurposes.
	tree_model_sort		# A GtkTreeModelSort .
	iter		# A GtkTreeIter .
	return:		#  TRUE if the iter is valid, FALSE if the iter is invalid. 
gboolean <span class="c_punctuation">( *GtkTreeModelFilterVisibleFunc<span class="c_punctuation">) (GtkTreeModel *model, GtkTreeIter *iter, gpointer data);	# A function which decides whether the row indicated by iter is visible.
	model		# the child model of the GtkTreeModelFilter 
	iter		# a GtkTreeIter pointing to the row in modelwhose visibilityis determined
	data		#  user data given to 
	return:		#  Whether the row indicated by iteris visible. 
void <span class="c_punctuation">( *GtkTreeModelFilterModifyFunc<span class="c_punctuation">) (GtkTreeModel *model, GtkTreeIter *iter, GValue *value, gint column, gpointer data);	# A function which calculates display values from raw values in the model.It must fill value with the display value for the column column in therow indicated by iter.
	model		# the GtkTreeModelFilter 
	iter		# a GtkTreeIter pointing to the row whose display values are determined
	value		#  A GValue which is already initialized forwith the correct type for the column column. 
GtkTreeModel  *gtk_tree_model_filter_new (GtkTreeModel *child_model, GtkTreePath *root);	#创建对象:GtkTreeModel , with child_model as the child_modeland root as the virtual root.
	child_model		# A GtkTreeModel .
	root		#  A GtkTreePath or NULL . 
	return:		#  A new GtkTreeModel .  
void gtk_tree_model_filter_set_visible_func (GtkTreeModelFilter *filter, GtkTreeModelFilterVisibleFunc func, gpointer data, GDestroyNotify destroy);	# Sets the visible function used when filtering the filter to be func.The function should return TRUE if the given row should be visible andFALSE otherwise.
	filter		# A GtkTreeModelFilter 
	func		# A GtkTreeModelFilterVisibleFunc , the visible function
	data		#  User data to pass to the visible function, or NULL . 
void gtk_tree_model_filter_set_modify_func (GtkTreeModelFilter *filter, gint n_columns, GType *types, GtkTreeModelFilterModifyFunc func, gpointer data, GDestroyNotify destroy);	# With the n_columns and types parameters, you give an array of columntypes for this model (which will be exposed to the parent model/view).The func, data and destroy parameters are for specifying the modifyfunction. The modify function will get called for eachdata access, the goal of the modify function is to return the data which should be displayed at the location specified using the parameters of the modify function.
	filter		# A GtkTreeModelFilter .
	n_columns		# The number of columns in the filter model.
	types		#  The GTypes of the columns. 
	data		#  User data to pass to the modify function, or NULL . 
void gtk_tree_model_filter_set_visible_column (GtkTreeModelFilter *filter, gint column);	# Sets column of the child_model to be the column where filter shouldlook for visibility information. columns should be a column of typeG_TYPE_BOOLEAN , where TRUE means that a row is visible, and FALSE if not.
	filter		# A GtkTreeModelFilter 
	column		# A gint which is the column containing the visible information
GtkTreeModel  *gtk_tree_model_filter_get_model (GtkTreeModelFilter *filter);	# Returns a pointer to the child model of filter.
	filter		# A GtkTreeModelFilter .
	return:		#  A pointer to a GtkTreeModel .  
gboolean gtk_tree_model_filter_convert_child_iter_to_iter (GtkTreeModelFilter *filter, GtkTreeIter *filter_iter, GtkTreeIter *child_iter);	# Sets filter_iter to point to the row in filter that corresponds to therow pointed at by child_iter. If filter_iter was not set, FALSE isreturned.
	filter		# A GtkTreeModelFilter .
	filter_iter		#  An uninitialized GtkTreeIter . 
	return:		#  TRUE , if filter_iterwas set, i.e. if child_iteris avalid iterator pointing to a visible row in child model. 
void gtk_tree_model_filter_convert_iter_to_child_iter (GtkTreeModelFilter *filter, GtkTreeIter *child_iter, GtkTreeIter *filter_iter);	# Sets child_iter to point to the row pointed to by filter_iter.
	filter		# A GtkTreeModelFilter .
	child_iter		#  An uninitialized GtkTreeIter . 
GtkTreePath  *gtk_tree_model_filter_convert_child_path_to_path (GtkTreeModelFilter *filter, GtkTreePath *child_path);	# Converts child_path to a path relative to filter. That is, child_pathpoints to a path in the child model. The rerturned path will point to thesame row in the filtered model. If child_path isn’t a valid path on thechild model or points to a row which is not visible in filter, then NULL is returned.
	filter		# A GtkTreeModelFilter .
	child_path		# A GtkTreePath to convert.
	return:		#  A newly allocated GtkTreePath , or NULL .  
GtkTreePath  *gtk_tree_model_filter_convert_path_to_child_path (GtkTreeModelFilter *filter, GtkTreePath *filter_path);	# Converts filter_path to a path on the child model of filter. That is,filter_path points to a location in filter. The returned path willpoint to the same location in the model not being filtered. If filter_pathdoes not point to a location in the child model, NULL is returned.
	filter		# A GtkTreeModelFilter .
	filter_path		# A GtkTreePath to convert.
	return:		#  A newly allocated GtkTreePath , or NULL .  
void gtk_tree_model_filter_refilter (GtkTreeModelFilter *filter);	# Emits ::row_changed for each row in the child model, which causesthe filter to re-evaluate whether a row is visible or not.
	filter		# A GtkTreeModelFilter .
void gtk_tree_model_filter_clear_cache (GtkTreeModelFilter *filter);	# This function should almost never be called. It clears the filterof any cached iterators that haven’t been reffed withgtk_tree_model_ref_node() . This might be useful if the child modelbeing filtered is static (and doesn’t change often) and there has beena lot of unreffed access to nodes. As a side effect of this function,all unreffed iters will be invalid.
	filter		# A GtkTreeModelFilter .
void <span class="c_punctuation">( *GtkCellLayoutDataFunc<span class="c_punctuation">) (GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkTreeModel *tree_model, GtkTreeIter *iter, gpointer data);	# A function which should set the value of cell_layout’s cell renderer(s)as appropriate.
	cell_layout		# a GtkCellLayout 
	cell		# the cell renderer whose value is to be set
	tree_model		# the model
	iter		# a GtkTreeIter indicating the row to set the value for
	data		#  user data passed to 
void gtk_cell_layout_pack_start (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);	# Packs the cell into the beginning of cell_layout. If expand is FALSE ,then the cell is allocated no more space than it needs. Any unused spaceis divided evenly between cells for which expand is TRUE .
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer 
	expand		# TRUE if cellis to be given extra space allocated to cell_layout
void gtk_cell_layout_pack_end (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);	# Adds the cell to the end of cell_layout. If expand is FALSE , then thecell is allocated no more space than it needs. Any unused space isdivided evenly between cells for which expand is TRUE .
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer 
	expand		# TRUE if cellis to be given extra space allocated to cell_layout
GtkCellArea  *gtk_cell_layout_get_area (GtkCellLayout *cell_layout);	# Returns the underlying GtkCellArea which might be cell_layoutif called on a GtkCellArea or might be NULL if no GtkCellArea is used by cell_layout.
	cell_layout		# a GtkCellLayout 
	return:		#  the cell area used by cell_layout,or NULL in case no cell area is used.  
GList  *gtk_cell_layout_get_cells (GtkCellLayout *cell_layout);	# Returns the cell renderers which have been added to cell_layout.
	cell_layout		# a GtkCellLayout 
	return:		#  a list of cell renderers. The list, but not the renderers hasbeen newly allocated and should be freed with g_list_free() when no longer needed.  
void gtk_cell_layout_reorder (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gint position);	# Re-inserts cell at position.
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer to reorder
	position		# new position to insert cellat
void gtk_cell_layout_clear (GtkCellLayout *cell_layout);	# Unsets all the mappings on all renderers on cell_layout andremoves all renderers from cell_layout.
	cell_layout		# a GtkCellLayout 
void gtk_cell_layout_set_attributes (GtkCellLayout *cell_layout, GtkCellRenderer *cell, ...);	# Sets the attributes in list as the attributes of cell_layout.
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer 
	...		# a NULL -terminated list of attributes
void gtk_cell_layout_add_attribute (GtkCellLayout *cell_layout, GtkCellRenderer *cell, const gchar *attribute, gint column);	# Adds an attribute mapping to the list in cell_layout.
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer 
	attribute		# an attribute on the renderer
	column		# the column position on the model to get the attribute from
void gtk_cell_layout_set_cell_data_func (GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy);	# Sets the GtkCellLayoutDataFunc to use for cell_layout.
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer 
	func		#  the GtkCellLayoutDataFunc to use, or NULL . 
	func_data		#  user data for func. 
	destroy		# destroy notify for func_data
void gtk_cell_layout_clear_attributes (GtkCellLayout *cell_layout, GtkCellRenderer *cell);	# Clears all existing attributes previously set withgtk_cell_layout_set_attributes() .
	cell_layout		# a GtkCellLayout 
	cell		# a GtkCellRenderer to clear the attribute mapping on
gboolean <span class="c_punctuation">( *GtkCellCallback<span class="c_punctuation">) (GtkCellRenderer *renderer, gpointer data);	# The type of the callback functions used for iterating overthe cell renderers of a GtkCellArea , see gtk_cell_area_foreach() .
	renderer		# the cell renderer to operate on
	data		#  user-supplied data. 
	return:		#  TRUE to stop iterating over cells. 
gboolean <span class="c_punctuation">( *GtkCellAllocCallback<span class="c_punctuation">) (GtkCellRenderer *renderer, const GdkRectangle *cell_area, const GdkRectangle *cell_background, gpointer data);	# The type of the callback functions used for iterating over thecell renderers and their allocated areas inside a GtkCellArea ,see gtk_cell_area_foreach_alloc() .
	renderer		# the cell renderer to operate on
	cell_area		# the area allocated to rendererinside the rectangleprovided to 
	cell_background		# the background area for rendererinside thebackground area provided to 
	data		#  user-supplied data. 
	return:		#  TRUE to stop iterating over cells. 
void gtk_cell_area_add (GtkCellArea *area, GtkCellRenderer *renderer);	# Adds renderer to area with the default child cell properties.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to add to area
void gtk_cell_area_remove (GtkCellArea *area, GtkCellRenderer *renderer);	# Removes renderer from area.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to remove from area
gboolean gtk_cell_area_has_renderer (GtkCellArea *area, GtkCellRenderer *renderer);	# Checks if area contains renderer.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to check
	return:		#  TRUE if rendereris in the area. 
void gtk_cell_area_foreach (GtkCellArea *area, GtkCellCallback callback, gpointer callback_data);	# Calls callback for every GtkCellRenderer in area.
	area		# a GtkCellArea 
	callback		#  the GtkCellCallback to call. 
void gtk_cell_area_foreach_alloc (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, const GdkRectangle *background_area, GtkCellAllocCallback callback, gpointer callback_data);	# Calls callback for every GtkCellRenderer in area with theallocated rectangle inside cell_area.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext for this row of data.
	widget		# the GtkWidget that areais rendering to
	cell_area		# the widgetrelative coordinates and size for area
	background_area		# the widgetrelative coordinates of the background area
	callback		#  the GtkCellAllocCallback to call. 
gint gtk_cell_area_event (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags);	# Delegates event handling to a GtkCellArea .
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext for this row of data.
	widget		# the GtkWidget that areais rendering to
	event		# the GdkEvent to handle
	cell_area		# the widgetrelative coordinates for area
	flags		# the GtkCellRendererState for areain this row.
	return:		#  TRUE if the event was handled by area. 
void gtk_cell_area_snapshot (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkSnapshot *snapshot, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean paint_focus);	# Snapshots area’s cells according to area’s layout onto atthe given coordinates.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext for this row of data.
	widget		# the GtkWidget that areais rendering to
	snapshot		# the GtkSnapshot to draw to
	background_area		# the widgetrelative coordinates for area’s background
	cell_area		# the widgetrelative coordinates for area
	flags		# the GtkCellRendererState for areain this row.
	paint_focus		# whether areashould paint focus on focused cells for focused rows or not.
void gtk_cell_area_get_cell_allocation (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkCellRenderer *renderer, const GdkRectangle *cell_area, GdkRectangle *allocation);	# Derives the allocation of renderer inside area if areawere to be renderered in cell_area.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext used to hold sizes for area.
	widget		# the GtkWidget that areais rendering on
	renderer		# the GtkCellRenderer to get the allocation for
	cell_area		# the whole allocated area for areain widgetfor this row
	allocation		#  where to store the allocation for renderer. 
GtkCellRenderer  *gtk_cell_area_get_cell_at_position (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, gint x, gint y, GdkRectangle *alloc_area);	# Gets the GtkCellRenderer at x and y coordinates inside area and optionallyreturns the full cell allocation for it inside cell_area.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext used to hold sizes for area.
	widget		# the GtkWidget that areais rendering on
	cell_area		# the whole allocated area for areain widgetfor this row
	x		# the x position
	y		# the y position
	alloc_area		#  where to store the inner allocated area of thereturned cell renderer, or NULL . 
	return:		#  the GtkCellRenderer at xand y.  
GtkCellAreaContext  *gtk_cell_area_create_context (GtkCellArea *area);	# Creates a GtkCellAreaContext to be used with area forall purposes. GtkCellAreaContext stores geometry informationfor rows for which it was operated on, it is important to usethe same context for the same row of data at all times (i.e.one should render and handle events with the same GtkCellAreaContext which was used to request the size of those rows of data).
	area		# a GtkCellArea 
	return:		#  a newly created GtkCellAreaContext which can be used with area.  
GtkCellAreaContext  *gtk_cell_area_copy_context (GtkCellArea *area, GtkCellAreaContext *context);	# This is sometimes needed for cases where rows need to sharealignments in one orientation but may be separately groupedin the opposing orientation.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext to copy
	return:		#  a newly created GtkCellAreaContext copy of context.  
GtkSizeRequestMode gtk_cell_area_get_request_mode (GtkCellArea *area);	# Gets whether the area prefers a height-for-width layoutor a width-for-height layout.
	area		# a GtkCellArea 
	return:		#  The GtkSizeRequestMode preferred by area. 
void gtk_cell_area_get_preferred_width (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_width, gint *natural_width);	# Retrieves a cell area’s initial minimum and natural width.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext to perform this request with
	widget		# the GtkWidget where areawill be rendering
	minimum_width		#  location to store the minimum width, or NULL . 
void gtk_cell_area_get_preferred_height_for_width (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height);	# Retrieves a cell area’s minimum and natural height if it would be giventhe specified width.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext which has already been requested for widths.
	widget		# the GtkWidget where areawill be rendering
	width		# the width for which to check the height of this area
	minimum_height		#  location to store the minimum height, or NULL . 
void gtk_cell_area_get_preferred_height (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_height, gint *natural_height);	# Retrieves a cell area’s initial minimum and natural height.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext to perform this request with
	widget		# the GtkWidget where areawill be rendering
	minimum_height		#  location to store the minimum height, or NULL . 
void gtk_cell_area_get_preferred_width_for_height (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width);	# Retrieves a cell area’s minimum and natural width if it would be giventhe specified height.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext which has already been requested for widths.
	widget		# the GtkWidget where areawill be rendering
	height		# the height for which to check the width of this area
	minimum_width		#  location to store the minimum width, or NULL . 
gchar  *gtk_cell_area_get_current_path_string (GtkCellArea *area);	# Gets the current GtkTreePath string for the currentlyapplied GtkTreeIter , this is implicitly updated whengtk_cell_area_apply_attributes() is called and can beused to interact with renderers from GtkCellArea subclasses.
	area		# a GtkCellArea 
	return:		#  The current GtkTreePath string for the currentattributes applied to area. This string belongs to the area andshould not be freed. 
void gtk_cell_area_apply_attributes (GtkCellArea *area, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded);	# Applies any connected attributes to the renderers inarea by pulling the values from tree_model.
	area		# a GtkCellArea 
	tree_model		# the GtkTreeModel to pull values from
	iter		# the GtkTreeIter in tree_modelto apply values for
	is_expander		# whether iterhas children
	is_expanded		# whether iteris expanded in the view andchildren are visible
void gtk_cell_area_attribute_connect (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute, gint column);	# Connects an attribute to apply values from column for theGtkTreeModel in use.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to connect an attribute for
	attribute		# the attribute name
	column		# the GtkTreeModel column to fetch attribute values from
void gtk_cell_area_attribute_disconnect (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute);	# Disconnects attribute for the renderer in area so thatattribute will no longer be updated with values from themodel.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to disconnect an attribute for
	attribute		# the attribute name
gint gtk_cell_area_attribute_get_column (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *attribute);	# Returns the model column that an attribute has been mapped to,or -1 if the attribute is not mapped.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer 
	attribute		# an attribute on the renderer
	return:		#  the model column, or -1 
void gtk_cell_area_class_install_cell_property (GtkCellAreaClass *aclass, guint property_id, GParamSpec *pspec);	# Installs a cell property on a cell area class.
	aclass		# a GtkCellAreaClass 
	property_id		# the id for the property
	pspec		# the GParamSpec for the property
GParamSpec  *gtk_cell_area_class_find_cell_property (GtkCellAreaClass *aclass, const gchar *property_name);	# Finds a cell property of a cell area class by name.
	aclass		# a GtkCellAreaClass 
	property_name		# the name of the child property to find
	return:		#  the GParamSpec of the child propertyor NULL if aclasshas no child property with that name.  
GParamSpec  **gtk_cell_area_class_list_cell_properties (GtkCellAreaClass *aclass, guint *n_properties);	# Returns all cell properties of a cell area class.
	aclass		# a GtkCellAreaClass 
	n_properties		#  location to return the number of cell properties found. 
	return:		#  a newlyallocated NULL -terminated array of GParamSpec *. The arraymust be freed with g_free() .  
void gtk_cell_area_add_with_properties (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...);	# Adds renderer to area, setting cell properties at the same time.See gtk_cell_area_add() and gtk_cell_area_cell_set() for more details.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer to be placed inside area
	first_prop_name		# the name of the first cell property to set
	...		# a NULL -terminated list of property names and values, startingwith first_prop_name
void gtk_cell_area_cell_set (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...);	# Sets one or more cell properties for cell in area.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer which is a cell inside area
	first_prop_name		# the name of the first cell property to set
	...		# a NULL -terminated list of property names and values, startingwith first_prop_name
void gtk_cell_area_cell_get (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_prop_name, ...);	# Gets the values of one or more cell properties for renderer in area.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer which is inside area
	first_prop_name		# the name of the first cell property to get
	...		# return location for the first cell property, followedoptionally by more name/return location pairs, followed by NULL 
void gtk_cell_area_cell_set_valist (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_property_name, va_list var_args);	# Sets one or more cell properties for renderer in area.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer which inside area
	first_property_name		# the name of the first cell property to set
	var_args		# a NULL -terminated list of property names and values, startingwith first_prop_name
void gtk_cell_area_cell_get_valist (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *first_property_name, va_list var_args);	# Gets the values of one or more cell properties for renderer in area.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer inside area
	first_property_name		# the name of the first property to get
	var_args		# return location for the first property, followedoptionally by more name/return location pairs, followed by NULL 
void gtk_cell_area_cell_set_property (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, const GValue *value);	# Sets a cell property for renderer in area.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer inside area
	property_name		# the name of the cell property to set
	value		# the value to set the cell property to
void gtk_cell_area_cell_get_property (GtkCellArea *area, GtkCellRenderer *renderer, const gchar *property_name, GValue *value);	# Gets the value of a cell property for renderer in area.
	area		# a GtkCellArea 
	renderer		# a GtkCellRenderer inside area
	property_name		# the name of the property to get
	value		# a location to return the value
gboolean gtk_cell_area_is_activatable (GtkCellArea *area);	# Returns whether the area can do anything when activated,after applying new attributes to area.
	area		# a GtkCellArea 
	return:		#  whether areacan do anything when activated. 
gboolean gtk_cell_area_activate (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean edit_only);	# Activates area, usually by activating the currently focusedcell, however some subclasses which embed widgets in the areacan also activate a widget if it currently has the focus.
	area		# a GtkCellArea 
	context		# the GtkCellAreaContext in context with the current row data
	widget		# the GtkWidget that areais rendering on
	cell_area		# the size and location of arearelative to widget’s allocation
	flags		# the GtkCellRendererState flags for areafor this row of data.
	edit_only		# if TRUE then only cell renderers that are GTK_CELL_RENDERER_MODE_EDITABLE will be activated.
	return:		#  Whether areawas successfully activated. 
gboolean gtk_cell_area_focus (GtkCellArea *area, GtkDirectionType direction);	# This should be called by the area’s owning layout widgetwhen focus is to be passed to area, or moved within areafor a given direction and row data.
	area		# a GtkCellArea 
	direction		# the GtkDirectionType 
	return:		#  TRUE if focus remains inside areaas a result of this call. 
void gtk_cell_area_set_focus_cell (GtkCellArea *area, GtkCellRenderer *renderer);	# Explicitly sets the currently focused cell to renderer.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to give focus to
GtkCellRenderer  *gtk_cell_area_get_focus_cell (GtkCellArea *area);	# Retrieves the currently focused cell for area
	area		# a GtkCellArea 
	return:		#  the currently focused cell in area.  
void gtk_cell_area_add_focus_sibling (GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling);	# Adds sibling to renderer’s focusable area, focus will be drawnaround renderer and all of its siblings if renderer canfocus for a given row.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer expected to have focus
	sibling		# the GtkCellRenderer to add to renderer’s focus area
void gtk_cell_area_remove_focus_sibling (GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling);	# Removes sibling from renderer’s focus sibling list(see gtk_cell_area_add_focus_sibling() ).
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer expected to have focus
	sibling		# the GtkCellRenderer to remove from renderer’s focus area
gboolean gtk_cell_area_is_focus_sibling (GtkCellArea *area, GtkCellRenderer *renderer, GtkCellRenderer *sibling);	# Returns whether sibling is one of renderer’s focus siblings(see gtk_cell_area_add_focus_sibling() ).
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer expected to have focus
	sibling		# the GtkCellRenderer to check against renderer’s sibling list
	return:		#  TRUE if siblingis a focus sibling of renderer 
GList  *gtk_cell_area_get_focus_siblings (GtkCellArea *area, GtkCellRenderer *renderer);	# Gets the focus sibling cell renderers for renderer.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer expected to have focus
	return:		#  A GList of GtkCellRenderers .The returned list is internal and should not be freed.  
GtkCellRenderer  *gtk_cell_area_get_focus_from_sibling (GtkCellArea *area, GtkCellRenderer *renderer);	# Gets the GtkCellRenderer which is expected to be focusablefor which renderer is, or may be a sibling.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer 
	return:		#  the GtkCellRenderer for which rendereris a sibling, or NULL .  
GtkCellRenderer  *gtk_cell_area_get_edited_cell (GtkCellArea *area);	# Gets the GtkCellRenderer in area that is currentlybeing edited.
	area		# a GtkCellArea 
	return:		#  The currently edited GtkCellRenderer .  
GtkCellEditable  *gtk_cell_area_get_edit_widget (GtkCellArea *area);	# Gets the GtkCellEditable widget currently usedto edit the currently edited cell.
	area		# a GtkCellArea 
	return:		#  The currently active GtkCellEditable widget.  
gboolean gtk_cell_area_activate_cell (GtkCellArea *area, GtkWidget *widget, GtkCellRenderer *renderer, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags);	# This is used by GtkCellArea subclasses when handling eventsto activate cells, the base GtkCellArea class activates cellsfor keyboard events for free in its own GtkCellArea-&gt;activate()implementation.
	area		# a GtkCellArea 
	widget		# the GtkWidget that areais rendering onto
	renderer		# the GtkCellRenderer in areato activate
	event		# the GdkEvent for which cell activation should occur
	cell_area		# the GdkRectangle in widgetrelative coordinatesof rendererfor the current row.
	flags		# the GtkCellRendererState for renderer
	return:		#  whether cell activation was successful 
void gtk_cell_area_stop_editing (GtkCellArea *area, gboolean canceled);	# Explicitly stops the editing of the currently edited cell.
	area		# a GtkCellArea 
	canceled		# whether editing was canceled.
void gtk_cell_area_inner_cell_area (GtkCellArea *area, GtkWidget *widget, const GdkRectangle *cell_area, GdkRectangle *inner_area);	# This is a convenience function for GtkCellArea implementationsto get the inner area where a given GtkCellRenderer will berendered. It removes any padding previously added by gtk_cell_area_request_renderer() .
	area		# a GtkCellArea 
	widget		# the GtkWidget that areais rendering onto
	cell_area		# the widgetrelative coordinates where one of area’s cellsis to be placed
	inner_area		#  the return location for the inner cell area. 
void gtk_cell_area_request_renderer (GtkCellArea *area, GtkCellRenderer *renderer, GtkOrientation orientation, GtkWidget *widget, gint for_size, gint *minimum_size, gint *natural_size);	# This is a convenience function for GtkCellArea implementationsto request size for cell renderers. It’s important to use thisfunction to request size and then use gtk_cell_area_inner_cell_area() at render and event time since this function will add paddingaround the cell for focus painting.
	area		# a GtkCellArea 
	renderer		# the GtkCellRenderer to request size for
	orientation		# the GtkOrientation in which to request size
	widget		# the GtkWidget that areais rendering onto
	for_size		# the allocation contextual size to request for, or -1 ifthe base request for the orientation is to be returned.
	minimum_size		#  location to store the minimum size, or NULL . 
GtkCellArea  *gtk_cell_area_box_new (void );	#创建对象:GtkCellAreaBox .
	return:		#  a newly created GtkCellAreaBox  
void gtk_cell_area_box_pack_start (GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed);	# Adds renderer to box, packed with reference to the start of box.
	box		# a GtkCellAreaBox 
	renderer		# the GtkCellRenderer to add
	expand		# whether renderershould receive extra space when the area receivesmore than its natural size
	align		# whether renderershould be aligned in adjacent rows
	fixed		# whether renderershould have the same size in all rows
void gtk_cell_area_box_pack_end (GtkCellAreaBox *box, GtkCellRenderer *renderer, gboolean expand, gboolean align, gboolean fixed);	# Adds renderer to box, packed with reference to the end of box.
	box		# a GtkCellAreaBox 
	renderer		# the GtkCellRenderer to add
	expand		# whether renderershould receive extra space when the area receivesmore than its natural size
	align		# whether renderershould be aligned in adjacent rows
	fixed		# whether renderershould have the same size in all rows
gint gtk_cell_area_box_get_spacing (GtkCellAreaBox *box);	# Gets the spacing added between cell renderers.
	box		# a GtkCellAreaBox 
	return:		#  the space added between cell renderers in box. 
void gtk_cell_area_box_set_spacing (GtkCellAreaBox *box, gint spacing);	# Sets the spacing to add between cell renderers in box.
	box		# a GtkCellAreaBox 
	spacing		# the space to add between GtkCellRenderers 
GtkCellArea  *gtk_cell_area_context_get_area (GtkCellAreaContext *context);	# Fetches the GtkCellArea this context was created by.
	context		# a GtkCellAreaContext 
	return:		#  the GtkCellArea this context was created by.  
void gtk_cell_area_context_allocate (GtkCellAreaContext *context, gint width, gint height);	# Allocates a width and/or a height for all rows which are to berendered with context.
	context		# a GtkCellAreaContext 
	width		# the allocated width for all GtkTreeModel rows renderedwith context, or -1.
	height		# the allocated height for all GtkTreeModel rows renderedwith context, or -1.
void gtk_cell_area_context_reset (GtkCellAreaContext *context);	# Resets any previously cached request and allocationdata.
	context		# a GtkCellAreaContext 
void gtk_cell_area_context_get_preferred_width (GtkCellAreaContext *context, gint *minimum_width, gint *natural_width);	# Gets the accumulative preferred width for all rows which have beenrequested with this context.
	context		# a GtkCellAreaContext 
	minimum_width		#  location to store the minimum width,or NULL . 
void gtk_cell_area_context_get_preferred_height (GtkCellAreaContext *context, gint *minimum_height, gint *natural_height);	# Gets the accumulative preferred height for all rows which have beenrequested with this context.
	context		# a GtkCellAreaContext 
	minimum_height		#  location to store the minimum height,or NULL . 
void gtk_cell_area_context_get_preferred_height_for_width (GtkCellAreaContext *context, gint width, gint *minimum_height, gint *natural_height);	# Gets the accumulative preferred height for width for all rowswhich have been requested for the same said width with this context.
	context		# a GtkCellAreaContext 
	width		# a proposed width for allocation
	minimum_height		#  location to store the minimum height,or NULL . 
void gtk_cell_area_context_get_preferred_width_for_height (GtkCellAreaContext *context, gint height, gint *minimum_width, gint *natural_width);	# Gets the accumulative preferred width for height for all rows whichhave been requested for the same said height with this context.
	context		# a GtkCellAreaContext 
	height		# a proposed height for allocation
	minimum_width		#  location to store the minimum width,or NULL . 
void gtk_cell_area_context_get_allocation (GtkCellAreaContext *context, gint *width, gint *height);	# Fetches the current allocation size for context.
	context		# a GtkCellAreaContext 
	width		#  location to store the allocated width, or NULL . 
void gtk_cell_area_context_push_preferred_width (GtkCellAreaContext *context, gint minimum_width, gint natural_width);	# Causes the minimum and/or natural width to grow if the newproposed sizes exceed the current minimum and natural width.
	context		# a GtkCellAreaContext 
	minimum_width		# the proposed new minimum width for context
	natural_width		# the proposed new natural width for context
void gtk_cell_area_context_push_preferred_height (GtkCellAreaContext *context, gint minimum_height, gint natural_height);	# Causes the minimum and/or natural height to grow if the newproposed sizes exceed the current minimum and natural height.
	context		# a GtkCellAreaContext 
	minimum_height		# the proposed new minimum height for context
	natural_height		# the proposed new natural height for context
void gtk_cell_renderer_class_set_accessible_type (GtkCellRendererClass *renderer_class, GType type);	# Sets the type to be used for creating accessibles for cells rendered bycell renderers of renderer_class. Note that multiple accessibles willbe created.
	renderer_class		# class to set the accessible type for
	type		# The object type that implements the accessible for widget_class.The type must be a subtype of GtkRendererCellAccessible 
void gtk_cell_renderer_get_aligned_area (GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle *aligned_area);	# Gets the aligned area used by cell inside cell_area. Used for findingthe appropriate edit and focus rectangle.
	cell		# a GtkCellRenderer instance
	widget		# the GtkWidget this cell will be rendering to
	flags		# render flags
	cell_area		# cell area which would be passed to 
	aligned_area		#  the return location for the space inside cell_areathat would acually be used to render. 
void gtk_cell_renderer_get_size (GtkCellRenderer *cell, GtkWidget *widget, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height);	# gtk_cell_renderer_get_size has been deprecated since version 3.0 and should not be used in newly-written code.
	cell		# a GtkCellRenderer 
	widget		# the widget the renderer is rendering to
	cell_area		#  The area a cell will be allocated, or NULL . 
void gtk_cell_renderer_snapshot (GtkCellRenderer *cell, GtkSnapshot *snapshot, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);	# Invokes the virtual render function of the GtkCellRenderer . The threepassed-in rectangles are areas in cr. Most renderers will draw withincell_area; the xalign, yalign, xpad, and ypad fields of the GtkCellRenderer should be honored with respect to cell_area. background_area includes theblank space around the cell, and also the area containing the tree expander;so the background_area rectangles for all cells tile to cover the entirewindow.
	cell		# a GtkCellRenderer 
	snapshot		# a GtkSnapshot to draw to
	widget		# the widget owning window
	background_area		# entire cell area (including tree expanders and maybepadding on the sides)
	cell_area		# area normally rendered by a cell renderer
	flags		# flags that affect rendering
gboolean gtk_cell_renderer_activate (GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);	# Passes an activate event to the cell renderer for possible processing. Some cell renderers may use events; for example, GtkCellRendererToggle toggles when it gets a mouse click.
	cell		# a GtkCellRenderer 
	event		# a GdkEvent 
	widget		# widget that received the event
	path		# widget-dependent string representation of the event location;e.g. for GtkTreeView , a string representation of GtkTreePath 
	background_area		# background area as passed to 
	cell_area		# cell area as passed to 
	flags		# render flags
	return:		#  TRUE if the event was consumed/handled 
GtkCellEditable  *gtk_cell_renderer_start_editing (GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);	# Passes an activate event to the cell renderer for possible processing.
	cell		# a GtkCellRenderer 
	event		#  a GdkEvent . 
	background_area		# background area as passed to 
	cell_area		# cell area as passed to 
	flags		# render flags
	return:		#  A new GtkCellEditable , or NULL .  
void gtk_cell_renderer_stop_editing (GtkCellRenderer *cell, gboolean canceled);	# Informs the cell renderer that the editing is stopped.If canceled is TRUE , the cell renderer will emit the “editing-canceled” signal. 
	cell		# A GtkCellRenderer 
	canceled		# TRUE if the editing has been canceled
void gtk_cell_renderer_get_fixed_size (GtkCellRenderer *cell, gint *width, gint *height);	# Fills in width and height with the appropriate size of cell.
	cell		# A GtkCellRenderer 
	width		#  location to fill in with the fixed width of the cell, or NULL . 
void gtk_cell_renderer_set_fixed_size (GtkCellRenderer *cell, gint width, gint height);	# Sets the renderer size to be explicit, independent of the properties set.
	cell		# A GtkCellRenderer 
	width		# the width of the cell renderer, or -1
	height		# the height of the cell renderer, or -1
gboolean gtk_cell_renderer_get_visible (GtkCellRenderer *cell);	# Returns the cell renderer’s visibility.
	cell		# A GtkCellRenderer 
	return:		#  TRUE if the cell renderer is visible 
void gtk_cell_renderer_set_visible (GtkCellRenderer *cell, gboolean visible);	# Sets the cell renderer’s visibility.
	cell		# A GtkCellRenderer 
	visible		# the visibility of the cell
gboolean gtk_cell_renderer_get_sensitive (GtkCellRenderer *cell);	# Returns the cell renderer’s sensitivity.
	cell		# A GtkCellRenderer 
	return:		#  TRUE if the cell renderer is sensitive 
void gtk_cell_renderer_set_sensitive (GtkCellRenderer *cell, gboolean sensitive);	# Sets the cell renderer’s sensitivity.
	cell		# A GtkCellRenderer 
	sensitive		# the sensitivity of the cell
void gtk_cell_renderer_get_alignment (GtkCellRenderer *cell, gfloat *xalign, gfloat *yalign);	# Fills in xalign and yalign with the appropriate values of cell.
	cell		# A GtkCellRenderer 
	xalign		#  location to fill in with the x alignment of the cell, or NULL . 
void gtk_cell_renderer_set_alignment (GtkCellRenderer *cell, gfloat xalign, gfloat yalign);	# Sets the renderer’s alignment within its available space.
	cell		# A GtkCellRenderer 
	xalign		# the x alignment of the cell renderer
	yalign		# the y alignment of the cell renderer
void gtk_cell_renderer_get_padding (GtkCellRenderer *cell, gint *xpad, gint *ypad);	# Fills in xpad and ypad with the appropriate values of cell.
	cell		# A GtkCellRenderer 
	xpad		#  location to fill in with the x padding of the cell, or NULL . 
void gtk_cell_renderer_set_padding (GtkCellRenderer *cell, gint xpad, gint ypad);	# Sets the renderer’s padding.
	cell		# A GtkCellRenderer 
	xpad		# the x padding of the cell renderer
	ypad		# the y padding of the cell renderer
GtkStateFlags gtk_cell_renderer_get_state (GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState cell_state);	# Translates the cell renderer state to GtkStateFlags ,based on the cell renderer and widget sensitivity, andthe given GtkCellRendererState .
	cell		#  a GtkCellRenderer , or NULL . 
	return:		#  the widget state flags applying to cell 
gboolean gtk_cell_renderer_is_activatable (GtkCellRenderer *cell);	# Checks whether the cell renderer can do something when activated.
	cell		# A GtkCellRenderer 
	return:		#  TRUE if the cell renderer can do anything when activated 
void gtk_cell_renderer_get_preferred_height (GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size);	# Retreives a renderer’s natural size when rendered to widget.
	cell		# a GtkCellRenderer instance
	widget		# the GtkWidget this cell will be rendering to
	minimum_size		#  location to store the minimum size, or NULL . 
void gtk_cell_renderer_get_preferred_height_for_width (GtkCellRenderer *cell, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height);	# Retreives a cell renderers’s minimum and natural height if it were rendered to widget with the specified width.
	cell		# a GtkCellRenderer instance
	widget		# the GtkWidget this cell will be rendering to
	width		# the size which is available for allocation
	minimum_height		#  location for storing the minimum size, or NULL . 
void gtk_cell_renderer_get_preferred_size (GtkCellRenderer *cell, GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size);	# Retrieves the minimum and natural size of a cell takinginto account the widget’s preference for height-for-width management.
	cell		# a GtkCellRenderer instance
	widget		# the GtkWidget this cell will be rendering to
	minimum_size		#  location for storing the minimum size, or NULL . 
void gtk_cell_renderer_get_preferred_width (GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size);	# Retreives a renderer’s natural size when rendered to widget.
	cell		# a GtkCellRenderer instance
	widget		# the GtkWidget this cell will be rendering to
	minimum_size		#  location to store the minimum size, or NULL . 
void gtk_cell_renderer_get_preferred_width_for_height (GtkCellRenderer *cell, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width);	# Retreives a cell renderers’s minimum and natural width if it were rendered to widget with the specified height.
	cell		# a GtkCellRenderer instance
	widget		# the GtkWidget this cell will be rendering to
	height		# the size which is available for allocation
	minimum_width		#  location for storing the minimum size, or NULL . 
GtkSizeRequestMode gtk_cell_renderer_get_request_mode (GtkCellRenderer *cell);	# Gets whether the cell renderer prefers a height-for-width layoutor a width-for-height layout.
	cell		# a GtkCellRenderer instance
	return:		#  The GtkSizeRequestMode preferred by this renderer. 
void gtk_cell_editable_start_editing (GtkCellEditable *cell_editable, GdkEvent *event);	# Begins editing on a cell_editable. event is the GdkEvent that began the editing process. It may be NULL , in the instance that editing was initiated through programatic means.
	cell_editable		# A GtkCellEditable 
	event		#  A GdkEvent , or NULL . 
void gtk_cell_editable_editing_done (GtkCellEditable *cell_editable);	# Emits the “editing-done” signal.
	cell_editable		# A GtkCellEditable 
void gtk_cell_editable_remove_widget (GtkCellEditable *cell_editable);	# Emits the “remove-widget” signal.
	cell_editable		# A GtkCellEditable 
GtkCellRenderer  *gtk_cell_renderer_accel_new (void );	#创建对象:GtkCellRendererAccel .
	return:		#  the new cell renderer 
GtkCellRenderer  *gtk_cell_renderer_combo_new (void );	#创建对象:GtkCellRendererCombo . Adjust how text is drawn using object properties. Object properties can be set globally (with g_object_set() ). Also, with GtkTreeViewColumn , you can bind a property to a value in a GtkTreeModel . For example, you can bind the “text” property on the cell renderer to a string value in the model, thus rendering a different string in each row of the GtkTreeView .
	return:		#  the new cell renderer 
GtkCellRenderer  *gtk_cell_renderer_pixbuf_new (void );	#创建对象:GtkCellRendererPixbuf . Adjust renderingparameters using object properties. Object properties can be setglobally (with g_object_set() ). Also, with GtkTreeViewColumn , youcan bind a property to a value in a GtkTreeModel . For example, youcan bind the “pixbuf” property on the cell renderer to a pixbuf valuein the model, thus rendering a different image in each row of theGtkTreeView .
	return:		#  the new cell renderer 
GtkCellRenderer  *gtk_cell_renderer_progress_new (void );	#创建对象:GtkCellRendererProgress .
	return:		#  the new cell renderer 
GtkCellRenderer  *gtk_cell_renderer_spin_new (void );	#创建对象:GtkCellRendererSpin .
	return:		#  a new GtkCellRendererSpin  
GtkCellRenderer  *gtk_cell_renderer_text_new (void );	#创建对象:GtkCellRendererText . Adjust how text is drawn usingobject properties. Object properties can beset globally (with g_object_set() ). Also, with GtkTreeViewColumn ,you can bind a property to a value in a GtkTreeModel . For example,you can bind the “text” property on the cell renderer to a stringvalue in the model, thus rendering a different string in each rowof the GtkTreeView 
	return:		#  the new cell renderer 
void gtk_cell_renderer_text_set_fixed_height_from_font (GtkCellRendererText *renderer, gint number_of_rows);	# Sets the height of a renderer to explicitly be determined by the “font” and“y_pad” property set on it. Further changes in these properties do notaffect the height, so they must be accompanied by a subsequent call to thisfunction. Using this function is unflexible, and should really only be usedif calculating the size of a cell is too slow (ie, a massive number of cellsdisplayed). If number_of_rows is -1, then the fixed height is unset, andthe height is determined by the properties again.
	renderer		# A GtkCellRendererText 
	number_of_rows		# Number of rows of text each cell renderer is allocated, or -1
GtkCellRenderer  *gtk_cell_renderer_toggle_new (void );	#创建对象:GtkCellRendererToggle . Adjust renderingparameters using object properties. Object properties can be setglobally (with g_object_set() ). Also, with GtkTreeViewColumn , youcan bind a property to a value in a GtkTreeModel . For example, youcan bind the “active” property on the cell renderer to a boolean valuein the model, thus causing the check button to reflect the state ofthe model.
	return:		#  the new cell renderer 
gboolean gtk_cell_renderer_toggle_get_radio (GtkCellRendererToggle *toggle);	# Returns whether we’re rendering radio toggles rather than checkboxes.
	toggle		# a GtkCellRendererToggle 
	return:		#  TRUE if we’re rendering radio toggles rather than checkboxes 
void gtk_cell_renderer_toggle_set_radio (GtkCellRendererToggle *toggle, gboolean radio);	# If radio is TRUE , the cell renderer renders a radio toggle(i.e. a toggle in a group of mutually-exclusive toggles).If FALSE , it renders a check toggle (a standalone boolean option).This can be set globally for the cell renderer, or changed justbefore rendering each cell in the model (for GtkTreeView , you setup a per-row setting using GtkTreeViewColumn to associate modelcolumns with cell renderer properties).
	toggle		# a GtkCellRendererToggle 
	radio		# TRUE to make the toggle look like a radio button
gboolean gtk_cell_renderer_toggle_get_active (GtkCellRendererToggle *toggle);	# Returns whether the cell renderer is active. Seegtk_cell_renderer_toggle_set_active() .
	toggle		# a GtkCellRendererToggle 
	return:		#  TRUE if the cell renderer is active. 
void gtk_cell_renderer_toggle_set_active (GtkCellRendererToggle *toggle, gboolean setting);	# Activates or deactivates a cell renderer.
	toggle		# a GtkCellRendererToggle .
	setting		# the value to set.
gboolean gtk_cell_renderer_toggle_get_activatable (GtkCellRendererToggle *toggle);	# Returns whether the cell renderer is activatable. Seegtk_cell_renderer_toggle_set_activatable() .
	toggle		# a GtkCellRendererToggle 
	return:		#  TRUE if the cell renderer is activatable. 
void gtk_cell_renderer_toggle_set_activatable (GtkCellRendererToggle *toggle, gboolean setting);	# Makes the cell renderer activatable.
	toggle		# a GtkCellRendererToggle .
	setting		# the value to set.
GtkCellRenderer  *gtk_cell_renderer_spinner_new (void );	# Returns a new cell renderer which will show a spinner to indicateactivity.
	return:		#  a new GtkCellRenderer  
GtkListStore  *gtk_list_store_new (gint n_columns, ...);	#创建对象:list store as with n_columns columns each of the types passedin. Note that only types derived from standard GObject fundamental typesare supported.
	n_columns		# number of columns in the list store
	...		# all GType types for the columns, from first to last
	return:		#  a new GtkListStore  
GtkListStore  *gtk_list_store_newv (gint n_columns, GType *types);	# Non-vararg creation function. Used primarily by language bindings.
	n_columns		# number of columns in the list store
	types		#  an array of GType types for the columns, from first to last. 
	return:		#  a new GtkListStore .  
void gtk_list_store_set_column_types (GtkListStore *list_store, gint n_columns, GType *types);	# This function is meant primarily for GObjects that inherit from GtkListStore ,and should only be used when constructing a new GtkListStore . It will notfunction after a row has been added, or a method on the GtkTreeModel interface is called.
	list_store		# A GtkListStore 
	n_columns		# Number of columns for the list store
	types		#  An array length n of GTypes . 
void gtk_list_store_set (GtkListStore *list_store, GtkTreeIter *iter, ...);	# Sets the value of one or more cells in the row referenced by iter.The variable argument list should contain integer column numbers,each column number followed by the value to be set.The list is terminated by a -1. For example, to set column 0 with typeG_TYPE_STRING to “Foo”, you would write gtk_list_store_set (store, iter,0, "Foo", -1).
	list_store		# a GtkListStore 
	iter		# row iterator
	...		# pairs of column number and value, terminated with -1
void gtk_list_store_set_valist (GtkListStore *list_store, GtkTreeIter *iter, va_list var_args);	# See gtk_list_store_set() ; this version takes a va_list for use by languagebindings.
	list_store		# A GtkListStore 
	iter		# A valid GtkTreeIter for the row being modified
	var_args		# va_list of column/value pairs
void gtk_list_store_set_value (GtkListStore *list_store, GtkTreeIter *iter, gint column, GValue *value);	# Sets the data in the cell specified by iter and column.The type of value must be convertible to the type of thecolumn.
	list_store		# A GtkListStore 
	iter		# A valid GtkTreeIter for the row being modified
	column		# column number to modify
	value		# new value for the cell
void gtk_list_store_set_valuesv (GtkListStore *list_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values);	# A variant of gtk_list_store_set_valist() whichtakes the columns and values as two arrays, instead ofvarargs. This function is mainly intended for language-bindings and in case the number of columns tochange is not known until run-time.
	list_store		# A GtkListStore 
	iter		# A valid GtkTreeIter for the row being modified
	columns		#  an array of column numbers. 
	values		#  an array of GValues. 
	n_values		# the length of the columnsand valuesarrays
gboolean gtk_list_store_remove (GtkListStore *list_store, GtkTreeIter *iter);	# Removes the given row from the list store. After being removed, iter is set to be the next valid row, or invalidated if it pointed to the last row in list_store.
	list_store		# A GtkListStore 
	iter		# A valid GtkTreeIter 
	return:		#  TRUE if iteris valid, FALSE if not. 
void gtk_list_store_insert (GtkListStore *list_store, GtkTreeIter *iter, gint position);	#创建对象:row at position. iter will be changed to point to this newrow. If position is -1 or is larger than the number of rows on the list,then the new row will be appended to the list. The row will be empty afterthis function is called. To fill in values, you need to callgtk_list_store_set() or gtk_list_store_set_value() .
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the new row. 
	position		# position to insert the new row, or -1 for last
void gtk_list_store_insert_before (GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling);	# Inserts a new row before sibling. If sibling is NULL , then the row will be appended to the end of the list. iter will be changed to point to this new row. The row will be empty after this function is called. To fill in values, you need to call gtk_list_store_set() or gtk_list_store_set_value() .
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the new row. 
void gtk_list_store_insert_after (GtkListStore *list_store, GtkTreeIter *iter, GtkTreeIter *sibling);	# Inserts a new row after sibling. If sibling is NULL , then the row will beprepended to the beginning of the list. iter will be changed to point tothis new row. The row will be empty after this function is called. To fillin values, you need to call gtk_list_store_set() or gtk_list_store_set_value() .
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the new row. 
void gtk_list_store_insert_with_values (GtkListStore *list_store, GtkTreeIter *iter, gint position, ...);	#创建对象:row at position. iter will be changed to point to this newrow. If position is -1, or larger than the number of rows in the list, thenthe new row will be appended to the list. The row will be filled with thevalues given to this function.
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the new row, or NULL . 
	position		# position to insert the new row, or -1 to append after existingrows
	...		# pairs of column number and value, terminated with -1
void gtk_list_store_insert_with_valuesv (GtkListStore *list_store, GtkTreeIter *iter, gint position, gint *columns, GValue *values, gint n_values);	# A variant of gtk_list_store_insert_with_values() whichtakes the columns and values as two arrays, instead ofvarargs. This function is mainly intended for language-bindings.
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the new row, or NULL . 
	position		# position to insert the new row, or -1 for last
	columns		#  an array of column numbers. 
	values		#  an array of GValues. 
	n_values		# the length of the columnsand valuesarrays
void gtk_list_store_prepend (GtkListStore *list_store, GtkTreeIter *iter);	# Prepends a new row to list_store. iter will be changed to point to this newrow. The row will be empty after this function is called. To fill invalues, you need to call gtk_list_store_set() or gtk_list_store_set_value() .
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the prepend row. 
void gtk_list_store_append (GtkListStore *list_store, GtkTreeIter *iter);	# Appends a new row to list_store. iter will be changed to point to this newrow. The row will be empty after this function is called. To fill invalues, you need to call gtk_list_store_set() or gtk_list_store_set_value() .
	list_store		# A GtkListStore 
	iter		#  An unset GtkTreeIter to set to the appended row. 
void gtk_list_store_clear (GtkListStore *list_store);	# Removes all rows from the list store.
	list_store		# a GtkListStore .
gboolean gtk_list_store_iter_is_valid (GtkListStore *list_store, GtkTreeIter *iter);	# This function is slow. Only use it for debugging and/or testingpurposes.
	list_store		# A GtkListStore .
	iter		# A GtkTreeIter .
	return:		#  TRUE if the iter is valid, FALSE if the iter is invalid. 
void gtk_list_store_reorder (GtkListStore *store, gint *new_order);	# Reorders store to follow the order indicated by new_order. Note thatthis function only works with unsorted stores.
	store		# A GtkListStore .
	new_order		#  an array of integers mapping the newposition of each child to its old position before the re-ordering,i.e. new_order[newpos] = oldpos. It must haveexactly as many items as the list store’s length. 
void gtk_list_store_swap (GtkListStore *store, GtkTreeIter *a, GtkTreeIter *b);	# Swaps a and b in store. Note that this function only works withunsorted stores.
	store		# A GtkListStore .
	a		# A GtkTreeIter .
	b		# Another GtkTreeIter .
void gtk_list_store_move_before (GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position);	# Moves iter in store to the position before position. Note that thisfunction only works with unsorted stores. If position is NULL , iterwill be moved to the end of the list.
	store		# A GtkListStore .
	iter		# A GtkTreeIter .
	position		#  A GtkTreeIter , or NULL . 
void gtk_list_store_move_after (GtkListStore *store, GtkTreeIter *iter, GtkTreeIter *position);	# Moves iter in store to the position after position. Note that thisfunction only works with unsorted stores. If position is NULL , iterwill be moved to the start of the list.
	store		# A GtkListStore .
	iter		# A GtkTreeIter .
	position		#  A GtkTreeIter or NULL . 
GtkTreeStore  *gtk_tree_store_new (gint n_columns, ...);	#创建对象:tree store as with n_columns columns each of the types passedin. Note that only types derived from standard GObject fundamental typesare supported.
	n_columns		# number of columns in the tree store
	...		# all GType types for the columns, from first to last
	return:		#  a new GtkTreeStore  
GtkTreeStore  *gtk_tree_store_newv (gint n_columns, GType *types);	# Non vararg creation function. Used primarily by language bindings.
	n_columns		# number of columns in the tree store
	types		#  an array of GType types for the columns, from first to last. 
	return:		#  a new GtkTreeStore .  
void gtk_tree_store_set_column_types (GtkTreeStore *tree_store, gint n_columns, GType *types);	# This function is meant primarily for GObjects that inherit from GtkTreeStore , and should only be used when constructing a new GtkTreeStore . It will not function after a row has been added, or a method on the GtkTreeModel interface is called.
	tree_store		# A GtkTreeStore 
	n_columns		# Number of columns for the tree store
	types		#  An array of GType types, one for each column. 
void gtk_tree_store_set_value (GtkTreeStore *tree_store, GtkTreeIter *iter, gint column, GValue *value);	# Sets the data in the cell specified by iter and column.The type of value must be convertible to the type of thecolumn.
	tree_store		# a GtkTreeStore 
	iter		# A valid GtkTreeIter for the row being modified
	column		# column number to modify
	value		# new value for the cell
void gtk_tree_store_set (GtkTreeStore *tree_store, GtkTreeIter *iter, ...);	# Sets the value of one or more cells in the row referenced by iter.The variable argument list should contain integer column numbers,each column number followed by the value to be set.The list is terminated by a -1. For example, to set column 0 with typeG_TYPE_STRING to “Foo”, you would writegtk_tree_store_set (store, iter, 0, "Foo", -1).
	tree_store		# A GtkTreeStore 
	iter		# A valid GtkTreeIter for the row being modified
	...		# pairs of column number and value, terminated with -1
void gtk_tree_store_set_valist (GtkTreeStore *tree_store, GtkTreeIter *iter, va_list var_args);	# See gtk_tree_store_set() ; this version takes a va_list foruse by language bindings.
	tree_store		# A GtkTreeStore 
	iter		# A valid GtkTreeIter for the row being modified
	var_args		# va_list of column/value pairs
void gtk_tree_store_set_valuesv (GtkTreeStore *tree_store, GtkTreeIter *iter, gint *columns, GValue *values, gint n_values);	# A variant of gtk_tree_store_set_valist() which takesthe columns and values as two arrays, instead of varargs. Thisfunction is mainly intended for language bindings or in casethe number of columns to change is not known until run-time.
	tree_store		# A GtkTreeStore 
	iter		# A valid GtkTreeIter for the row being modified
	columns		#  an array of column numbers. 
	values		#  an array of GValues. 
	n_values		# the length of the columnsand valuesarrays
gboolean gtk_tree_store_remove (GtkTreeStore *tree_store, GtkTreeIter *iter);	# Removes iter from tree_store. After being removed, iter is set to thenext valid row at that level, or invalidated if it previously pointed to thelast one.
	tree_store		# A GtkTreeStore 
	iter		# A valid GtkTreeIter 
	return:		#  TRUE if iteris still valid, FALSE if not. 
void gtk_tree_store_insert (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position);	#创建对象:row at position. If parent is non-NULL , then the row will bemade a child of parent. Otherwise, the row will be created at the toplevel.If position is -1 or is larger than the number of rows at that level, thenthe new row will be inserted to the end of the list. iter will be changedto point to this new row. The row will be empty after this function iscalled. To fill in values, you need to call gtk_tree_store_set() orgtk_tree_store_set_value() .
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set to the new row. 
	position		# position to insert the new row, or -1 for last
void gtk_tree_store_insert_before (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling);	# Inserts a new row before sibling. If sibling is NULL , then the row willbe appended to parent ’s children. If parent and sibling are NULL , thenthe row will be appended to the toplevel. If both sibling and parent areset, then parent must be the parent of sibling. When sibling is set,parent is optional.
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set to the new row. 
void gtk_tree_store_insert_after (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, GtkTreeIter *sibling);	# Inserts a new row after sibling. If sibling is NULL , then the row will beprepended to parent ’s children. If parent and sibling are NULL , thenthe row will be prepended to the toplevel. If both sibling and parent areset, then parent must be the parent of sibling. When sibling is set,parent is optional.
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set to the new row. 
void gtk_tree_store_insert_with_values (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, ...);	#创建对象:row at position. iter will be changed to point to thisnew row. If position is -1, or larger than the number of rows on the list, thenthe new row will be appended to the list. The row will be filled withthe values given to this function.
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set the new row, or NULL . 
	position		# position to insert the new row, or -1 to append after existing rows
	...		# pairs of column number and value, terminated with -1
void gtk_tree_store_insert_with_valuesv (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent, gint position, gint *columns, GValue *values, gint n_values);	# A variant of gtk_tree_store_insert_with_values() which takesthe columns and values as two arrays, instead of varargs. Thisfunction is mainly intended for language bindings.
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set the new row, or NULL . 
	position		# position to insert the new row, or -1 for last
	columns		#  an array of column numbers. 
	values		#  an array of GValues. 
	n_values		# the length of the columnsand valuesarrays
void gtk_tree_store_prepend (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent);	# Prepends a new row to tree_store. If parent is non-NULL , then it will prependthe new row before the first child of parent, otherwise it will prepend a rowto the top level. iter will be changed to point to this new row. The rowwill be empty after this function is called. To fill in values, you need tocall gtk_tree_store_set() or gtk_tree_store_set_value() .
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set to the prepended row. 
void gtk_tree_store_append (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *parent);	# Appends a new row to tree_store. If parent is non-NULL , then it will append thenew row after the last child of parent, otherwise it will append a row tothe top level. iter will be changed to point to this new row. The row willbe empty after this function is called. To fill in values, you need to callgtk_tree_store_set() or gtk_tree_store_set_value() .
	tree_store		# A GtkTreeStore 
	iter		#  An unset GtkTreeIter to set to the appended row. 
gboolean gtk_tree_store_is_ancestor (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *descendant);	# Returns TRUE if iter is an ancestor of descendant. That is, iter is theparent (or grandparent or great-grandparent) of descendant.
	tree_store		# A GtkTreeStore 
	iter		# A valid GtkTreeIter 
	descendant		# A valid GtkTreeIter 
	return:		#  TRUE , if iteris an ancestor of descendant 
gint gtk_tree_store_iter_depth (GtkTreeStore *tree_store, GtkTreeIter *iter);	# Returns the depth of iter. This will be 0 for anything on the root level, 1for anything down a level, etc.
	tree_store		# A GtkTreeStore 
	iter		# A valid GtkTreeIter 
	return:		#  The depth of iter 
void gtk_tree_store_clear (GtkTreeStore *tree_store);	# Removes all rows from tree_store
	tree_store		# a GtkTreeStore 
gboolean gtk_tree_store_iter_is_valid (GtkTreeStore *tree_store, GtkTreeIter *iter);	# WARNING: This function is slow. Only use it for debugging and/or testingpurposes.
	tree_store		# A GtkTreeStore .
	iter		# A GtkTreeIter .
	return:		#  TRUE if the iter is valid, FALSE if the iter is invalid. 
void gtk_tree_store_reorder (GtkTreeStore *tree_store, GtkTreeIter *parent, gint *new_order);	# Reorders the children of parent in tree_store to follow the orderindicated by new_order. Note that this function only works withunsorted stores.
	tree_store		# A GtkTreeStore 
	parent		#  A GtkTreeIter , or NULL . 
	new_order		#  an array of integers mapping the new position of each childto its old position before the re-ordering,i.e. new_order[newpos] = oldpos. 
void gtk_tree_store_swap (GtkTreeStore *tree_store, GtkTreeIter *a, GtkTreeIter *b);	# Swaps a and b in the same level of tree_store. Note that this functiononly works with unsorted stores.
	tree_store		# A GtkTreeStore .
	a		# A GtkTreeIter .
	b		# Another GtkTreeIter .
void gtk_tree_store_move_before (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position);	# Moves iter in tree_store to the position before position. iter andposition should be in the same level. Note that this function onlyworks with unsorted stores. If position is NULL , iter will bemoved to the end of the level.
	tree_store		# A GtkTreeStore .
	iter		# A GtkTreeIter .
	position		#  A GtkTreeIter or NULL . 
void gtk_tree_store_move_after (GtkTreeStore *tree_store, GtkTreeIter *iter, GtkTreeIter *position);	# Moves iter in tree_store to the position after position. iter andposition should be in the same level. Note that this function onlyworks with unsorted stores. If position is NULL , iter will be movedto the start of the level.
	tree_store		# A GtkTreeStore .
	iter		# A GtkTreeIter .
	position		#  A GtkTreeIter . 
GtkWidget  *gtk_combo_box_new (void );	#创建对象:empty GtkComboBox .
	return:		#  A new GtkComboBox . 
GtkWidget  *gtk_combo_box_new_with_entry (void );	#创建对象:empty GtkComboBox with an entry.
	return:		#  A new GtkComboBox . 
GtkWidget  *gtk_combo_box_new_with_model (GtkTreeModel *model);	#创建对象:GtkComboBox with the model initialized to model.
	model		# A GtkTreeModel .
	return:		#  A new GtkComboBox . 
GtkWidget  *gtk_combo_box_new_with_model_and_entry (GtkTreeModel *model);	#创建对象:empty GtkComboBox with an entryand with the model initialized to model.
	model		# A GtkTreeModel 
	return:		#  A new GtkComboBox  
gint gtk_combo_box_get_wrap_width (GtkComboBox *combo_box);	# Returns the wrap width which is used to determine the number of columnsfor the popup menu. If the wrap width is larger than 1, the combo boxis in table mode.
	combo_box		# A GtkComboBox 
	return:		#  the wrap width. 
void gtk_combo_box_set_wrap_width (GtkComboBox *combo_box, gint width);	# Sets the wrap width of combo_box to be width. The wrap width is basicallythe preferred number of columns when you want the popup to be layed outin a table.
	combo_box		# A GtkComboBox 
	width		# Preferred number of columns
gint gtk_combo_box_get_row_span_column (GtkComboBox *combo_box);	# Returns the column with row span information for combo_box.
	combo_box		# A GtkComboBox 
	return:		#  the row span column. 
void gtk_combo_box_set_row_span_column (GtkComboBox *combo_box, gint row_span);	# Sets the column with row span information for combo_box to be row_span.The row span column contains integers which indicate how many rowsan item should span.
	combo_box		# A GtkComboBox .
	row_span		# A column in the model passed during construction.
gint gtk_combo_box_get_column_span_column (GtkComboBox *combo_box);	# Returns the column with column span information for combo_box.
	combo_box		# A GtkComboBox 
	return:		#  the column span column. 
void gtk_combo_box_set_column_span_column (GtkComboBox *combo_box, gint column_span);	# Sets the column with column span information for combo_box to becolumn_span. The column span column contains integers which indicatehow many columns an item should span.
	combo_box		# A GtkComboBox 
	column_span		# A column in the model passed during construction
gint gtk_combo_box_get_active (GtkComboBox *combo_box);	# Returns the index of the currently active item, or -1 if there’s noactive item. If the model is a non-flat treemodel, and the active itemis not an immediate child of the root of the tree, this function returnsgtk_tree_path_get_indices (path)[0], wherepath is the GtkTreePath of the active item.
	combo_box		# A GtkComboBox 
	return:		#  An integer which is the index of the currently active item,or -1 if there’s no active item. 
void gtk_combo_box_set_active (GtkComboBox *combo_box, gint index_);	# Sets the active item of combo_box to be the item at index.
	combo_box		# A GtkComboBox 
	index_		# An index in the model passed during construction, or -1 to haveno active item
gboolean gtk_combo_box_get_active_iter (GtkComboBox *combo_box, GtkTreeIter *iter);	# Sets iter to point to the current active item, if it exists.
	combo_box		# A GtkComboBox 
	iter		#  The uninitialized GtkTreeIter . 
	return:		#  TRUE , if iterwas set 
void gtk_combo_box_set_active_iter (GtkComboBox *combo_box, GtkTreeIter *iter);	# Sets the current active item to be the one referenced by iter, orunsets the active item if iter is NULL .
	combo_box		# A GtkComboBox 
	iter		#  The GtkTreeIter , or NULL . 
gint gtk_combo_box_get_id_column (GtkComboBox *combo_box);	# Returns the column which combo_box is using to get string IDsfor values from.
	combo_box		# A GtkComboBox 
	return:		#  A column in the data source model of combo_box. 
void gtk_combo_box_set_id_column (GtkComboBox *combo_box, gint id_column);	# Sets the model column which combo_box should use to get string IDsfor values from. The column id_column in the model of combo_boxmust be of type G_TYPE_STRING .
	combo_box		# A GtkComboBox 
	id_column		# A column in modelto get string IDs for values from
gchar  *gtk_combo_box_get_active_id (GtkComboBox *combo_box);	# Returns the ID of the active row of combo_box. This value is takenfrom the active row and the column specified by the “id-column” property of combo_box (see gtk_combo_box_set_id_column() ).
	combo_box		# a GtkComboBox 
	return:		#  the ID of the active row, or NULL .  
gboolean gtk_combo_box_set_active_id (GtkComboBox *combo_box, const gchar *active_id);	# Changes the active row of combo_box to the one that has an ID equal toactive_id, or unsets the active row if active_id is NULL . Rows havinga NULL ID string cannot be made active by this function.
	combo_box		# a GtkComboBox 
	active_id		#  the ID of the row to select, or NULL . 
	return:		#  TRUE if a row with a matching ID was found. If a NULL active_idwas given to unset the active row, the functionalways returns TRUE . 
GtkTreeModel  *gtk_combo_box_get_model (GtkComboBox *combo_box);	# Returns the GtkTreeModel which is acting as data source for combo_box.
	combo_box		# A GtkComboBox 
	return:		#  A GtkTreeModel which was passedduring construction.  
void gtk_combo_box_set_model (GtkComboBox *combo_box, GtkTreeModel *model);	# Sets the model used by combo_box to be model. Will unset a previously setmodel (if applicable). If model is NULL , then it will unset the model.
	combo_box		# A GtkComboBox 
	model		#  A GtkTreeModel . 
void gtk_combo_box_popup_for_device (GtkComboBox *combo_box, GdkDevice *device);	# Pops up the menu of combo_box. Note that currently this does not do anythingwith the device, as it was previously only used for list-mode ComboBoxes,and those were removed in GTK+ 4. However, it is retained in case similarfunctionality is added back later.
	combo_box		# a GtkComboBox 
	device		# a GdkDevice 
void gtk_combo_box_popup (GtkComboBox *combo_box);	# Pops up the menu or dropdown list of combo_box.
	combo_box		# a GtkComboBox 
void gtk_combo_box_popdown (GtkComboBox *combo_box);	# Hides the menu or dropdown list of combo_box.
	combo_box		# a GtkComboBox 
AtkObject  *gtk_combo_box_get_popup_accessible (GtkComboBox *combo_box);	# Gets the accessible object corresponding to the combo box’s popup.
	combo_box		# a GtkComboBox 
	return:		#  the accessible object correspondingto the combo box’s popup.  
GtkTreeViewRowSeparatorFunc gtk_combo_box_get_row_separator_func (GtkComboBox *combo_box);	# Returns the current row separator function.
	combo_box		# a GtkComboBox 
	return:		#  the current row separator function. 
void gtk_combo_box_set_row_separator_func (GtkComboBox *combo_box, GtkTreeViewRowSeparatorFunc func, gpointer data, GDestroyNotify destroy);	# Sets the row separator function, which is used to determinewhether a row should be drawn as a separator. If the row separatorfunction is NULL , no separators are drawn. This is the default value.
	combo_box		# a GtkComboBox 
	func		# a GtkTreeViewRowSeparatorFunc 
	data		#  user data to pass to func, or NULL . 
void gtk_combo_box_set_button_sensitivity (GtkComboBox *combo_box, GtkSensitivityType sensitivity);	# Sets whether the dropdown button of the combo box should bealways sensitive (GTK_SENSITIVITY_ON ), never sensitive (GTK_SENSITIVITY_OFF )or only if there is at least one item to display (GTK_SENSITIVITY_AUTO ).
	combo_box		# a GtkComboBox 
	sensitivity		# specify the sensitivity of the dropdown button
GtkSensitivityType gtk_combo_box_get_button_sensitivity (GtkComboBox *combo_box);	# Returns whether the combo box sets the dropdown buttonsensitive or not when there are no items in the model.
	combo_box		# a GtkComboBox 
	return:		#  GTK_SENSITIVITY_ON if the dropdown buttonis sensitive when the model is empty, GTK_SENSITIVITY_OFF if the button is always insensitive orGTK_SENSITIVITY_AUTO if it is only sensitive as long asthe model has one item to be selected. 
gboolean gtk_combo_box_get_has_entry (GtkComboBox *combo_box);	# Returns whether the combo box has an entry.
	combo_box		# a GtkComboBox 
	return:		#  whether there is an entry in combo_box. 
void gtk_combo_box_set_entry_text_column (GtkComboBox *combo_box, gint text_column);	# Sets the model column which combo_box should use to get strings fromto be text_column. The column text_column in the model of combo_boxmust be of type G_TYPE_STRING .
	combo_box		# A GtkComboBox 
	text_column		# A column in modelto get the strings from forthe internal entry
gint gtk_combo_box_get_entry_text_column (GtkComboBox *combo_box);	# Returns the column which combo_box is using to get the stringsfrom to display in the internal entry.
	combo_box		# A GtkComboBox .
	return:		#  A column in the data source model of combo_box. 
void gtk_combo_box_set_popup_fixed_width (GtkComboBox *combo_box, gboolean fixed);	# Specifies whether the popup’s width should be a fixed widthmatching the allocated width of the combo box.
	combo_box		# a GtkComboBox 
	fixed		# whether to use a fixed popup width
gboolean gtk_combo_box_get_popup_fixed_width (GtkComboBox *combo_box);	# Gets whether the popup uses a fixed width matchingthe allocated width of the combo box.
	combo_box		# a GtkComboBox 
	return:		#  TRUE if the popup uses a fixed width 
GtkWidget  *gtk_combo_box_text_new (void );	#创建对象:GtkComboBoxText , which is a GtkComboBox just displayingstrings.
	return:		#  A new GtkComboBoxText  
GtkWidget  *gtk_combo_box_text_new_with_entry (void );	#创建对象:GtkComboBoxText , which is a GtkComboBox just displayingstrings. The combo box created by this function has an entry.
	return:		#  a new GtkComboBoxText  
void gtk_combo_box_text_append (GtkComboBoxText *combo_box, const gchar *id, const gchar *text);	# Appends text to the list of strings stored in combo_box.If id is non-NULL then it is used as the ID of the row.
	combo_box		# A GtkComboBoxText 
	id		#  a string ID for this value, or NULL . 
	text		# A string
void gtk_combo_box_text_prepend (GtkComboBoxText *combo_box, const gchar *id, const gchar *text);	# Prepends text to the list of strings stored in combo_box.If id is non-NULL then it is used as the ID of the row.
	combo_box		# A GtkComboBox 
	id		#  a string ID for this value, or NULL . 
	text		# a string
void gtk_combo_box_text_insert (GtkComboBoxText *combo_box, gint position, const gchar *id, const gchar *text);	# Inserts text at position in the list of strings stored in combo_box.If id is non-NULL then it is used as the ID of the row. See“id-column” .
	combo_box		# A GtkComboBoxText 
	position		# An index to insert text
	id		#  a string ID for this value, or NULL . 
void gtk_combo_box_text_append_text (GtkComboBoxText *combo_box, const gchar *text);	# Appends text to the list of strings stored in combo_box.
	combo_box		# A GtkComboBoxText 
	text		# A string
void gtk_combo_box_text_prepend_text (GtkComboBoxText *combo_box, const gchar *text);	# Prepends text to the list of strings stored in combo_box.
	combo_box		# A GtkComboBox 
	text		# A string
void gtk_combo_box_text_insert_text (GtkComboBoxText *combo_box, gint position, const gchar *text);	# Inserts text at position in the list of strings stored in combo_box.
	combo_box		# A GtkComboBoxText 
	position		# An index to insert text
	text		# A string
void gtk_combo_box_text_remove (GtkComboBoxText *combo_box, gint position);	# Removes the string at position from combo_box.
	combo_box		# A GtkComboBox 
	position		# Index of the item to remove
void gtk_combo_box_text_remove_all (GtkComboBoxText *combo_box);	# Removes all the text entries from the combo box.
	combo_box		# A GtkComboBoxText 
gchar  *gtk_combo_box_text_get_active_text (GtkComboBoxText *combo_box);	# Returns the currently active string in combo_box, or NULL if none is selected. If combo_box contains an entry, thisfunction will return its contents (which will not necessarilybe an item from the list).
	combo_box		# A GtkComboBoxText 
	return:		#  a newly allocated string containing thecurrently active text. Must be freed with g_free() .  
GtkWidget  *gtk_menu_new (void );	#创建对象:GtkMenu 
	return:		#  a new GtkMenu  
GtkWidget  *gtk_menu_new_from_model (GMenuModel *model);	# Creates a GtkMenu and populates it with menu items andsubmenus according to model.
	model		# a GMenuModel 
	return:		#  a new GtkMenu  
void gtk_menu_set_screen (GtkMenu *menu, GdkScreen *screen);	# Sets the GdkScreen on which the menu will be displayed.
	menu		# a GtkMenu 
	screen		#  a GdkScreen , or NULL if the screen should bedetermined by the widget the menu is attached to. 
void gtk_menu_reorder_child (GtkMenu *menu, GtkWidget *child, gint position);	# Moves child to a new position in the list of menuchildren.
	menu		# a GtkMenu 
	child		# the GtkMenuItem to move
	position		# the new position to place child.Positions are numbered from 0 to n - 1
void gtk_menu_attach (GtkMenu *menu, GtkWidget *child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach);	# Adds a new GtkMenuItem to a (table) menu. The number of “cells” thatan item will occupy is specified by left_attach, right_attach,top_attach and bottom_attach. These each represent the leftmost,rightmost, uppermost and lower column and row numbers of the table.(Columns and rows are indexed from zero).
	menu		# a GtkMenu 
	child		# a GtkMenuItem 
	left_attach		# The column number to attach the left side of the item to
	right_attach		# The column number to attach the right side of the item to
	top_attach		# The row number to attach the top of the item to
	bottom_attach		# The row number to attach the bottom of the item to
void gtk_menu_popup_at_rect (GtkMenu *menu, GdkWindow *rect_window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event);	# Displays menu and makes it available for selection.
	menu		# the GtkMenu to pop up
	rect_window		#  the GdkWindow rectis relative to. 
void gtk_menu_popup_at_widget (GtkMenu *menu, GtkWidget *widget, GdkGravity widget_anchor, GdkGravity menu_anchor, const GdkEvent *trigger_event);	# Displays menu and makes it available for selection.
	menu		# the GtkMenu to pop up
	widget		#  the GtkWidget to align menuwith. 
void gtk_menu_popup_at_pointer (GtkMenu *menu, const GdkEvent *trigger_event);	# Displays menu and makes it available for selection.
	menu		# the GtkMenu to pop up
	trigger_event		#  the GdkEvent that initiated this request orNULL if it's the current event. 
void gtk_menu_popup_for_device (GtkMenu *menu, GdkDevice *device, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, GDestroyNotify destroy, guint button, guint32 activate_time);	# Displays a menu and makes it available for selection.
	menu		# a GtkMenu 
	device		#  a GdkDevice . 
void gtk_menu_popup (GtkMenu *menu, GtkWidget *parent_menu_shell, GtkWidget *parent_menu_item, GtkMenuPositionFunc func, gpointer data, guint button, guint32 activate_time);	# Displays a menu and makes it available for selection.
	menu		# a GtkMenu 
	parent_menu_shell		#  the menu shell containing thetriggering menu item, or NULL . 
	data		# user supplied data to be passed to func.
	button		# the mouse button which was pressed to initiate the event.
	activate_time		# the time at which the activation event occurred.
void gtk_menu_set_accel_group (GtkMenu *menu, GtkAccelGroup *accel_group);	# Set the GtkAccelGroup which holds global accelerators for themenu. This accelerator group needs to also be added to all windowsthat this menu is being used in with gtk_window_add_accel_group() ,in order for those windows to support all the acceleratorscontained in this group.
	menu		# a GtkMenu 
	accel_group		#  the GtkAccelGroup to be associatedwith the menu. 
GtkAccelGroup  *gtk_menu_get_accel_group (GtkMenu *menu);	# Gets the GtkAccelGroup which holds global accelerators for themenu. See gtk_menu_set_accel_group() .
	menu		# a GtkMenu 
	return:		#  the GtkAccelGroup associated with the menu.  
void gtk_menu_set_accel_path (GtkMenu *menu, const gchar *accel_path);	# Sets an accelerator path for this menu from which accelerator pathsfor its immediate children, its menu items, can be constructed.The main purpose of this function is to spare the programmer theinconvenience of having to call gtk_menu_item_set_accel_path() oneach menu item that should support runtime user changable accelerators.Instead, by just calling gtk_menu_set_accel_path() on their parent,each menu item of this menu, that contains a label describing itspurpose, automatically gets an accel path assigned.
	menu		# a valid GtkMenu 
	accel_path		#  a valid accelerator path. 
gchar  *gtk_menu_get_accel_path (GtkMenu *menu);	# Retrieves the accelerator path set on the menu.
	menu		# a valid GtkMenu 
	return:		#  the accelerator path set on the menu. 
void gtk_menu_set_monitor (GtkMenu *menu, gint monitor_num);	# Informs GTK+ on which monitor a menu should be popped up.See gdk_monitor_get_geometry() .
	menu		# a GtkMenu 
	monitor_num		# the number of the monitor on which the menu shouldbe popped up
gint gtk_menu_get_monitor (GtkMenu *menu);	# Retrieves the number of the monitor on which to show the menu.
	menu		# a GtkMenu 
	return:		#  the number of the monitor on which the menu shouldbe popped up or -1, if no monitor has been set 
void gtk_menu_place_on_monitor (GtkMenu *menu, GdkMonitor *monitor);	# Places menu on the given monitor.
	menu		# a GtkMenu 
	monitor		# the monitor to place the menu on
void gtk_menu_set_reserve_toggle_size (GtkMenu *menu, gboolean reserve_toggle_size);	# Sets whether the menu should reserve space for drawing togglesor icons, regardless of their actual presence.
	menu		# a GtkMenu 
	reserve_toggle_size		# whether to reserve size for toggles
gboolean gtk_menu_get_reserve_toggle_size (GtkMenu *menu);	# Returns whether the menu reserves space for toggles andicons, regardless of their actual presence.
	menu		# a GtkMenu 
	return:		#  Whether the menu reserves toggle space 
void gtk_menu_popdown (GtkMenu *menu);	# Removes the menu from the screen.
	menu		# a GtkMenu 
void gtk_menu_reposition (GtkMenu *menu);	# Repositions the menu according to its position function.
	menu		# a GtkMenu 
GtkWidget  *gtk_menu_get_active (GtkMenu *menu);	# Returns the selected menu item from the menu. This is used by theGtkComboBox .
	menu		# a GtkMenu 
	return:		#  the GtkMenuItem that was last selectedin the menu. If a selection has not yet been made, thefirst menu item is selected.  
void gtk_menu_set_active (GtkMenu *menu, guint index);	# Selects the specified menu item within the menu. This is used bythe GtkComboBox and should not be used by anyone else.
	menu		# a GtkMenu 
	index		# the index of the menu item to select. Index values arefrom 0 to n-1
void gtk_menu_attach_to_widget (GtkMenu *menu, GtkWidget *attach_widget, GtkMenuDetachFunc detacher);	# Attaches the menu to the widget and provides a callback functionthat will be invoked when the menu calls gtk_menu_detach() duringits destruction.
	menu		# a GtkMenu 
	attach_widget		# the GtkWidget that the menu will be attached to
	detacher		#  the user supplied callback functionthat will be called when the menu calls 
void gtk_menu_detach (GtkMenu *menu);	# Detaches the menu from the widget to which it had been attached.This function will call the callback function, detacher, providedwhen the gtk_menu_attach_to_widget() function was called.
	menu		# a GtkMenu 
GtkWidget  *gtk_menu_get_attach_widget (GtkMenu *menu);	# Returns the GtkWidget that the menu is attached to.
	menu		# a GtkMenu 
	return:		#  the GtkWidget that the menu is attached to.  
GList  *gtk_menu_get_for_attach_widget (GtkWidget *widget);	# Returns a list of the menus which are attached to this widget.This list is owned by GTK+ and must not be modified.
	widget		# a GtkWidget 
	return:		#  the listof menus attached to his widget.  
void <span class="c_punctuation">( *GtkMenuPositionFunc<span class="c_punctuation">) (GtkMenu *menu, gint *x, gint *y, gboolean *push_in, gpointer user_data);	# A user function supplied when calling gtk_menu_popup() whichcontrols the positioning of the menu when it is displayed. Thefunction sets the x and y parameters to the coordinates where themenu is to be drawn. To make the menu appear on a differentmonitor than the mouse pointer, gtk_menu_set_monitor() must becalled.
	menu		# a GtkMenu .
	x		#  address of the gint representing the horizontalposition where the menu shall be drawn. 
void <span class="c_punctuation">( *GtkMenuDetachFunc<span class="c_punctuation">) (GtkWidget *attach_widget, GtkMenu *menu);	# A user function supplied when calling gtk_menu_attach_to_widget() which will be called when the menu is later detached from the widget.
	attach_widget		# the GtkWidget that the menu is being detached from.
	menu		# the GtkMenu being detached.
GtkWidget  *gtk_menu_bar_new (void );	#创建对象:GtkMenuBar 
	return:		#  the new menu bar, as a GtkWidget  
GtkWidget  *gtk_menu_bar_new_from_model (GMenuModel *model);	#创建对象:GtkMenuBar and populates it with menu itemsand submenus according to model.
	model		# a GMenuModel 
	return:		#  a new GtkMenuBar  
void gtk_menu_bar_set_pack_direction (GtkMenuBar *menubar, GtkPackDirection pack_dir);	# Sets how items should be packed inside a menubar.
	menubar		# a GtkMenuBar 
	pack_dir		# a new GtkPackDirection 
GtkPackDirection gtk_menu_bar_get_pack_direction (GtkMenuBar *menubar);	# Retrieves the current pack direction of the menubar. See gtk_menu_bar_set_pack_direction() .
	menubar		# a GtkMenuBar 
	return:		#  the pack direction 
void gtk_menu_bar_set_child_pack_direction (GtkMenuBar *menubar, GtkPackDirection child_pack_dir);	# Sets how widgets should be packed inside the children of a menubar.
	menubar		# a GtkMenuBar 
	child_pack_dir		# a new GtkPackDirection 
GtkPackDirection gtk_menu_bar_get_child_pack_direction (GtkMenuBar *menubar);	# Retrieves the current child pack direction of the menubar.See gtk_menu_bar_set_child_pack_direction() .
	menubar		# a GtkMenuBar 
	return:		#  the child pack direction 
GtkWidget  *gtk_menu_item_new (void );	#创建对象:GtkMenuItem .
	return:		#  the newly created GtkMenuItem  
GtkWidget  *gtk_menu_item_new_with_label (const gchar *label);	#创建对象:GtkMenuItem whose child is a GtkLabel .
	label		# the text for the label
	return:		#  the newly created GtkMenuItem  
GtkWidget  *gtk_menu_item_new_with_mnemonic (const gchar *label);	#创建对象:GtkMenuItem containing a label.
	label		# The text of the button, with an underscore in front of themnemonic character
	return:		#  a new GtkMenuItem  
gchar  *gtk_menu_item_get_label (GtkMenuItem *menu_item);	# Sets text on the menu_item label
	menu_item		# a GtkMenuItem 
	return:		#  The text in the menu_itemlabel. This is the internalstring used by the label, and must not be modified. 
void gtk_menu_item_set_label (GtkMenuItem *menu_item, const gchar *label);	# Sets text on the menu_item label
	menu_item		# a GtkMenuItem 
	label		# the text you want to set
gboolean gtk_menu_item_get_use_underline (GtkMenuItem *menu_item);	# Checks if an underline in the text indicates the next charactershould be used for the mnemonic accelerator key.
	menu_item		# a GtkMenuItem 
	return:		#  TRUE if an embedded underline in the labelindicates the mnemonic accelerator key. 
void gtk_menu_item_set_use_underline (GtkMenuItem *menu_item, gboolean setting);	# If true, an underline in the text indicates the next charactershould be used for the mnemonic accelerator key.
	menu_item		# a GtkMenuItem 
	setting		# TRUE if underlines in the text indicate mnemonics
void gtk_menu_item_set_submenu (GtkMenuItem *menu_item, GtkWidget *submenu);	# Sets or replaces the menu item’s submenu, or removes it when a NULL submenu is passed.
	menu_item		# a GtkMenuItem 
	submenu		#  the submenu, or NULL . 
GtkWidget  *gtk_menu_item_get_submenu (GtkMenuItem *menu_item);	# Gets the submenu underneath this menu item, if any.See gtk_menu_item_set_submenu() .
	menu_item		# a GtkMenuItem 
	return:		#  submenu for this menu item, or NULL if none.  
void gtk_menu_item_set_accel_path (GtkMenuItem *menu_item, const gchar *accel_path);	# Set the accelerator path on menu_item, through which runtimechanges of the menu item’s accelerator caused by the user can beidentified and saved to persistent storage (see gtk_accel_map_save() on this). To set up a default accelerator for this menu item, callgtk_accel_map_add_entry() with the same accel_path. See alsogtk_accel_map_add_entry() on the specifics of accelerator paths,and gtk_menu_set_accel_path() for a more convenient variant ofthis function.
	menu_item		# a valid GtkMenuItem 
	accel_path		#  accelerator path, corresponding to this menuitem’s functionality, or NULL to unset the current path. 
gchar  *gtk_menu_item_get_accel_path (GtkMenuItem *menu_item);	# Retrieve the accelerator path that was previously set on menu_item.
	menu_item		# a valid GtkMenuItem 
	return:		#  the accelerator path corresponding tothis menu item’s functionality, or NULL if not set.  
void gtk_menu_item_select (GtkMenuItem *menu_item);	# Emits the “select” signal on the given item.
	menu_item		# the menu item
void gtk_menu_item_deselect (GtkMenuItem *menu_item);	# Emits the “deselect” signal on the given item.
	menu_item		# the menu item
void gtk_menu_item_activate (GtkMenuItem *menu_item);	# Emits the “activate” signal on the given item
	menu_item		# the menu item
void gtk_menu_item_toggle_size_request (GtkMenuItem *menu_item, gint *requisition);	# Emits the “toggle-size-request” signal on the given item.
	menu_item		# the menu item
	requisition		#  the requisition to use as signal data. 
void gtk_menu_item_toggle_size_allocate (GtkMenuItem *menu_item, gint allocation);	# Emits the “toggle-size-allocate” signal on the given item.
	menu_item		# the menu item.
	allocation		# the allocation to use as signal data.
gboolean gtk_menu_item_get_reserve_indicator (GtkMenuItem *menu_item);	# Returns whether the menu_item reserves space forthe submenu indicator, regardless if it has a submenuor not.
	menu_item		# a GtkMenuItem 
	return:		#  TRUE if menu_itemalways reserves space for thesubmenu indicator 
void gtk_menu_item_set_reserve_indicator (GtkMenuItem *menu_item, gboolean reserve);	# Sets whether the menu_item should reserve space forthe submenu indicator, regardless if it actually hasa submenu or not.
	menu_item		# a GtkMenuItem 
	reserve		# the new value
GtkWidget  *gtk_radio_menu_item_new (GSList *group);	#创建对象:GtkRadioMenuItem .
	group		#  the group to which theradio menu item is to be attached, or NULL . 
	return:		#  a new GtkRadioMenuItem  
GtkWidget  *gtk_radio_menu_item_new_with_label (GSList *group, const gchar *label);	#创建对象:GtkRadioMenuItem whose child is a simple GtkLabel .
	group		#  group the radio menu item is inside, or NULL . 
	return:		#  A new GtkRadioMenuItem .  
GtkWidget  *gtk_radio_menu_item_new_with_mnemonic (GSList *group, const gchar *label);	#创建对象:GtkRadioMenuItem containing a label. The labelwill be created using gtk_label_new_with_mnemonic() , so underscoresin label indicate the mnemonic for the menu item.
	group		#  group the radio menu item is inside, or NULL . 
	return:		#  a new GtkRadioMenuItem  
GtkWidget  *gtk_radio_menu_item_new_from_widget (GtkRadioMenuItem *group);	#创建对象:GtkRadioMenuItem adding it to the same group as group.
	group		#  An existing GtkRadioMenuItem . 
	return:		#  The new GtkRadioMenuItem .  
GtkWidget  *gtk_radio_menu_item_new_with_label_from_widget (GtkRadioMenuItem *group, const gchar *label);	#创建对象:GtkRadioMenuItem whose child is a simple GtkLabel.The new GtkRadioMenuItem is added to the same group as group.
	group		#  an existing GtkRadioMenuItem . 
	return:		#  The new GtkRadioMenuItem .  
GtkWidget  *gtk_radio_menu_item_new_with_mnemonic_from_widget (GtkRadioMenuItem *group, const gchar *label);	#创建对象:GtkRadioMenuItem containing a label. The label will becreated using gtk_label_new_with_mnemonic() , so underscores in labelindicate the mnemonic for the menu item.
	group		#  An existing GtkRadioMenuItem . 
	return:		#  The new GtkRadioMenuItem .  
void gtk_radio_menu_item_set_group (GtkRadioMenuItem *radio_menu_item, GSList *group);	# Sets the group of a radio menu item, or changes it.
	radio_menu_item		# a GtkRadioMenuItem .
	group		#  the new group, or NULL . 
GSList  *gtk_radio_menu_item_get_group (GtkRadioMenuItem *radio_menu_item);	# Returns the group to which the radio menu item belongs, as a GList ofGtkRadioMenuItem . The list belongs to GTK+ and should not be freed.
	radio_menu_item		# a GtkRadioMenuItem 
	return:		#  the groupof radio_menu_item.  
void gtk_radio_menu_item_join_group (GtkRadioMenuItem *radio_menu_item, GtkRadioMenuItem *group_source);	# Joins a GtkRadioMenuItem object to the group of another GtkRadioMenuItem object.
	radio_menu_item		# a GtkRadioMenuItem 
	group_source		#  a GtkRadioMenuItem whose group we arejoining, or NULL to remove the radio_menu_itemfrom its currentgroup. 
GtkWidget  *gtk_check_menu_item_new (void );	#创建对象:GtkCheckMenuItem .
	return:		#  a new GtkCheckMenuItem . 
GtkWidget  *gtk_check_menu_item_new_with_label (const gchar *label);	#创建对象:GtkCheckMenuItem with a label.
	label		# the string to use for the label.
	return:		#  a new GtkCheckMenuItem . 
GtkWidget  *gtk_check_menu_item_new_with_mnemonic (const gchar *label);	#创建对象:GtkCheckMenuItem containing a label. The labelwill be created using gtk_label_new_with_mnemonic() , so underscoresin label indicate the mnemonic for the menu item.
	label		# The text of the button, with an underscore in front of thecharacter
	return:		#  a new GtkCheckMenuItem  
gboolean gtk_check_menu_item_get_active (GtkCheckMenuItem *check_menu_item);	# Returns whether the check menu item is active. Seegtk_check_menu_item_set_active() .
	check_menu_item		# a GtkCheckMenuItem 
	return:		#  TRUE if the menu item is checked. 
void gtk_check_menu_item_set_active (GtkCheckMenuItem *check_menu_item, gboolean is_active);	# Sets the active state of the menu item’s check box.
	check_menu_item		# a GtkCheckMenuItem .
	is_active		# boolean value indicating whether the check box is active.
void gtk_check_menu_item_toggled (GtkCheckMenuItem *check_menu_item);	# Emits the “toggled” signal.
	check_menu_item		# a GtkCheckMenuItem .
gboolean gtk_check_menu_item_get_inconsistent (GtkCheckMenuItem *check_menu_item);	# Retrieves the value set by gtk_check_menu_item_set_inconsistent() .
	check_menu_item		# a GtkCheckMenuItem 
	return:		#  TRUE if inconsistent 
void gtk_check_menu_item_set_inconsistent (GtkCheckMenuItem *check_menu_item, gboolean setting);	# If the user has selected a range of elements (such as some text orspreadsheet cells) that are affected by a boolean setting, and thecurrent values in that range are inconsistent, you may want todisplay the check in an “in between” state. This function turns on“in between” display. Normally you would turn off the inconsistentstate again if the user explicitly selects a setting. This has to bedone manually, gtk_check_menu_item_set_inconsistent() only affectsvisual appearance, it doesn’t affect the semantics of the widget.
	check_menu_item		# a GtkCheckMenuItem 
	setting		# TRUE to display an “inconsistent” third state check
void gtk_check_menu_item_set_draw_as_radio (GtkCheckMenuItem *check_menu_item, gboolean draw_as_radio);	# Sets whether check_menu_item is drawn like a GtkRadioMenuItem 
	check_menu_item		# a GtkCheckMenuItem 
	draw_as_radio		# whether check_menu_itemis drawn like a GtkRadioMenuItem 
gboolean gtk_check_menu_item_get_draw_as_radio (GtkCheckMenuItem *check_menu_item);	# Returns whether check_menu_item looks like a GtkRadioMenuItem 
	check_menu_item		# a GtkCheckMenuItem 
	return:		#  Whether check_menu_itemlooks like a GtkRadioMenuItem  
GtkWidget  *gtk_separator_menu_item_new (void );	#创建对象:GtkSeparatorMenuItem .
	return:		#  a new GtkSeparatorMenuItem . 
PangoEllipsizeMode gtk_tool_shell_get_ellipsize_mode (GtkToolShell *shell);	# Retrieves the current ellipsize mode for the tool shell. Tool items must notcall this function directly, but rely on gtk_tool_item_get_ellipsize_mode() instead.
	shell		# a GtkToolShell 
	return:		#  the current ellipsize mode of shell 
GtkIconSize gtk_tool_shell_get_icon_size (GtkToolShell *shell);	# Retrieves the icon size for the tool shell. Tool items must not call thisfunction directly, but rely on gtk_tool_item_get_icon_size() instead.
	shell		# a GtkToolShell 
	return:		#  the current size (GtkIconSize ) for icons of shell.  
GtkOrientation gtk_tool_shell_get_orientation (GtkToolShell *shell);	# Retrieves the current orientation for the tool shell. Tool items must notcall this function directly, but rely on gtk_tool_item_get_orientation() instead.
	shell		# a GtkToolShell 
	return:		#  the current orientation of shell 
GtkToolbarStyle gtk_tool_shell_get_style (GtkToolShell *shell);	# Retrieves whether the tool shell has text, icons, or both. Tool items mustnot call this function directly, but rely on gtk_tool_item_get_toolbar_style() instead.
	shell		# a GtkToolShell 
	return:		#  the current style of shell 
gfloat gtk_tool_shell_get_text_alignment (GtkToolShell *shell);	# Retrieves the current text alignment for the tool shell. Tool items must notcall this function directly, but rely on gtk_tool_item_get_text_alignment() instead.
	shell		# a GtkToolShell 
	return:		#  the current text alignment of shell 
GtkOrientation gtk_tool_shell_get_text_orientation (GtkToolShell *shell);	# Retrieves the current text orientation for the tool shell. Tool items must notcall this function directly, but rely on gtk_tool_item_get_text_orientation() instead.
	shell		# a GtkToolShell 
	return:		#  the current text orientation of shell 
void gtk_tool_shell_rebuild_menu (GtkToolShell *shell);	# Calling this function signals the tool shell that the overflow menu item fortool items have changed. If there is an overflow menu and if it is visiblewhen this function it called, the menu will be rebuilt.
	shell		# a GtkToolShell 
GtkSizeGroup  *gtk_tool_shell_get_text_size_group (GtkToolShell *shell);	# Retrieves the current text size group for the tool shell. Tool items must notcall this function directly, but rely on gtk_tool_item_get_text_size_group() instead.
	shell		# a GtkToolShell 
	return:		#  the current text size group of shell.  
GtkWidget  *gtk_toolbar_new (void );	#创建对象:toolbar.
	return:		#  the newly-created toolbar. 
void gtk_toolbar_insert (GtkToolbar *toolbar, GtkToolItem *item, gint pos);	# Insert a GtkToolItem into the toolbar at position pos. If pos is0 the item is prepended to the start of the toolbar. If pos isnegative, the item is appended to the end of the toolbar.
	toolbar		# a GtkToolbar 
	item		# a GtkToolItem 
	pos		# the position of the new item
gint gtk_toolbar_get_item_index (GtkToolbar *toolbar, GtkToolItem *item);	# Returns the position of item on the toolbar, starting from 0.It is an error if item is not a child of the toolbar.
	toolbar		# a GtkToolbar 
	item		# a GtkToolItem that is a child of toolbar
	return:		#  the position of item on the toolbar. 
gint gtk_toolbar_get_n_items (GtkToolbar *toolbar);	# Returns the number of items on the toolbar.
	toolbar		# a GtkToolbar 
	return:		#  the number of items on the toolbar 
GtkToolItem  *gtk_toolbar_get_nth_item (GtkToolbar *toolbar, gint n);	# Returns the n'th item on toolbar, or NULL if thetoolbar does not contain an n'th item.
	toolbar		# a GtkToolbar 
	n		# A position on the toolbar
	return:		#  The n'th GtkToolItem on toolbar,or NULL if there isn’t an n'th item.  
gint gtk_toolbar_get_drop_index (GtkToolbar *toolbar, gint x, gint y);	# Returns the position corresponding to the indicated point ontoolbar. This is useful when dragging items to the toolbar:this function returns the position a new item should beinserted.
	toolbar		# a GtkToolbar 
	x		# x coordinate of a point on the toolbar
	y		# y coordinate of a point on the toolbar
	return:		#  The position corresponding to the point (x, y) on the toolbar. 
void gtk_toolbar_set_drop_highlight_item (GtkToolbar *toolbar, GtkToolItem *tool_item, gint index_);	# Highlights toolbar to give an idea of what it would look likeif item was added to toolbar at the position indicated by index_.If item is NULL , highlighting is turned off. In that case index_ is ignored.
	toolbar		# a GtkToolbar 
	tool_item		#  a GtkToolItem , or NULL to turn of highlighting. 
	index_		# a position on toolbar
void gtk_toolbar_set_show_arrow (GtkToolbar *toolbar, gboolean show_arrow);	# Sets whether to show an overflow menu whentoolbar doesn’t have room for all items on it. If TRUE ,items that there are not room are available through anoverflow menu.
	toolbar		# a GtkToolbar 
	show_arrow		# Whether to show an overflow menu
void gtk_toolbar_unset_icon_size (GtkToolbar *toolbar);	# Unsets toolbar icon size set with gtk_toolbar_set_icon_size() , so thatuser preferences will be used to determine the icon size.
	toolbar		# a GtkToolbar 
gboolean gtk_toolbar_get_show_arrow (GtkToolbar *toolbar);	# Returns whether the toolbar has an overflow menu.See gtk_toolbar_set_show_arrow() .
	toolbar		# a GtkToolbar 
	return:		#  TRUE if the toolbar has an overflow menu. 
GtkToolbarStyle gtk_toolbar_get_style (GtkToolbar *toolbar);	# Retrieves whether the toolbar has text, icons, or both . Seegtk_toolbar_set_style() .
	toolbar		# a GtkToolbar 
	return:		#  the current style of toolbar 
GtkIconSize gtk_toolbar_get_icon_size (GtkToolbar *toolbar);	# Retrieves the icon size for the toolbar. See gtk_toolbar_set_icon_size() .
	toolbar		# a GtkToolbar 
	return:		#  the current icon size for the icons on the toolbar. 
void gtk_toolbar_set_style (GtkToolbar *toolbar, GtkToolbarStyle style);	# Alters the view of toolbar to display either icons only, text only, or both.
	toolbar		# a GtkToolbar .
	style		# the new style for toolbar.
void gtk_toolbar_set_icon_size (GtkToolbar *toolbar, GtkIconSize icon_size);	# This function sets the size of stock icons in the toolbar. Youcan call it both before you add the icons and after they’ve beenadded. The size you set will override user preferences for the defaulticon size.
	toolbar		# A GtkToolbar 
	icon_size		# The GtkIconSize that stock icons in the toolbar shall have.
void gtk_toolbar_unset_style (GtkToolbar *toolbar);	# Unsets a toolbar style set with gtk_toolbar_set_style() , so thatuser preferences will be used to determine the toolbar style.
	toolbar		# a GtkToolbar 
GtkToolItem  *gtk_tool_item_new (void );	#创建对象:GtkToolItem 
	return:		#  the new GtkToolItem  
void gtk_tool_item_set_homogeneous (GtkToolItem *tool_item, gboolean homogeneous);	# Sets whether tool_item is to be allocated the same size as otherhomogeneous items. The effect is that all homogeneous items will havethe same width as the widest of the items.
	tool_item		# a GtkToolItem 
	homogeneous		# whether tool_itemis the same size as other homogeneous items
gboolean gtk_tool_item_get_homogeneous (GtkToolItem *tool_item);	# Returns whether tool_item is the same size as other homogeneousitems. See gtk_tool_item_set_homogeneous() .
	tool_item		# a GtkToolItem 
	return:		#  TRUE if the item is the same size as other homogeneousitems. 
void gtk_tool_item_set_expand (GtkToolItem *tool_item, gboolean expand);	# Sets whether tool_item is allocated extra space when thereis more room on the toolbar then needed for the items. Theeffect is that the item gets bigger when the toolbar gets biggerand smaller when the toolbar gets smaller.
	tool_item		# a GtkToolItem 
	expand		# Whether tool_itemis allocated extra space
gboolean gtk_tool_item_get_expand (GtkToolItem *tool_item);	# Returns whether tool_item is allocated extra space.See gtk_tool_item_set_expand() .
	tool_item		# a GtkToolItem 
	return:		#  TRUE if tool_itemis allocated extra space. 
void gtk_tool_item_set_tooltip_text (GtkToolItem *tool_item, const gchar *text);	# Sets the text to be displayed as tooltip on the item.See gtk_widget_set_tooltip_text() .
	tool_item		# a GtkToolItem 
	text		# text to be used as tooltip for tool_item
void gtk_tool_item_set_tooltip_markup (GtkToolItem *tool_item, const gchar *markup);	# Sets the markup text to be displayed as tooltip on the item.See gtk_widget_set_tooltip_markup() .
	tool_item		# a GtkToolItem 
	markup		# markup text to be used as tooltip for tool_item
void gtk_tool_item_set_use_drag_window (GtkToolItem *tool_item, gboolean use_drag_window);	# Sets whether tool_item has a drag window. When TRUE thetoolitem can be used as a drag source through gtk_drag_source_set() .When tool_item has a drag window it will intercept all events,even those that would otherwise be sent to a child of tool_item.
	tool_item		# a GtkToolItem 
	use_drag_window		# Whether tool_itemhas a drag window.
gboolean gtk_tool_item_get_use_drag_window (GtkToolItem *tool_item);	# Returns whether tool_item has a drag window. Seegtk_tool_item_set_use_drag_window() .
	tool_item		# a GtkToolItem 
	return:		#  TRUE if tool_itemuses a drag window. 
void gtk_tool_item_set_visible_horizontal (GtkToolItem *tool_item, gboolean visible_horizontal);	# Sets whether tool_item is visible when the toolbar is docked horizontally.
	tool_item		# a GtkToolItem 
	visible_horizontal		# Whether tool_itemis visible when in horizontal mode
gboolean gtk_tool_item_get_visible_horizontal (GtkToolItem *tool_item);	# Returns whether the tool_item is visible on toolbars that aredocked horizontally.
	tool_item		# a GtkToolItem 
	return:		#  TRUE if tool_itemis visible on toolbars that aredocked horizontally. 
void gtk_tool_item_set_visible_vertical (GtkToolItem *tool_item, gboolean visible_vertical);	# Sets whether tool_item is visible when the toolbar is dockedvertically. Some tool items, such as text entries, are too wide to beuseful on a vertically docked toolbar. If visible_vertical is FALSE tool_item will not appear on toolbars that are docked vertically.
	tool_item		# a GtkToolItem 
	visible_vertical		# whether tool_itemis visible when the toolbaris in vertical mode
gboolean gtk_tool_item_get_visible_vertical (GtkToolItem *tool_item);	# Returns whether tool_item is visible when the toolbar is docked vertically.See gtk_tool_item_set_visible_vertical() .
	tool_item		# a GtkToolItem 
	return:		#  Whether tool_itemis visible when the toolbar is docked vertically 
void gtk_tool_item_set_is_important (GtkToolItem *tool_item, gboolean is_important);	# Sets whether tool_item should be considered important. The GtkToolButton class uses this property to determine whether to show or hide its labelwhen the toolbar style is GTK_TOOLBAR_BOTH_HORIZ . The result is thatonly tool buttons with the “is_important” property set have labels, aneffect known as “priority text”
	tool_item		# a GtkToolItem 
	is_important		# whether the tool item should be considered important
gboolean gtk_tool_item_get_is_important (GtkToolItem *tool_item);	# Returns whether tool_item is considered important. Seegtk_tool_item_set_is_important() 
	tool_item		# a GtkToolItem 
	return:		#  TRUE if tool_itemis considered important. 
PangoEllipsizeMode gtk_tool_item_get_ellipsize_mode (GtkToolItem *tool_item);	# Returns the ellipsize mode used for tool_item. Custom subclasses ofGtkToolItem should call this function to find out how text shouldbe ellipsized.
	tool_item		# a GtkToolItem 
	return:		#  a PangoEllipsizeMode indicating how text in tool_itemshould be ellipsized. 
GtkIconSize gtk_tool_item_get_icon_size (GtkToolItem *tool_item);	# Returns the icon size used for tool_item. Custom subclasses ofGtkToolItem should call this function to find out what size iconsthey should use.
	tool_item		# a GtkToolItem 
	return:		#  a GtkIconSize indicating the icon sizeused for tool_item.  
GtkOrientation gtk_tool_item_get_orientation (GtkToolItem *tool_item);	# Returns the orientation used for tool_item. Custom subclasses ofGtkToolItem should call this function to find out what size iconsthey should use.
	tool_item		# a GtkToolItem 
	return:		#  a GtkOrientation indicating the orientationused for tool_item 
GtkToolbarStyle gtk_tool_item_get_toolbar_style (GtkToolItem *tool_item);	# Returns the toolbar style used for tool_item. Custom subclasses ofGtkToolItem should call this function in the handler of theGtkToolItem::toolbar_reconfigured signal to find out in what stylethe toolbar is displayed and change themselves accordingly 
	tool_item		# a GtkToolItem 
	return:		#  A GtkToolbarStyle indicating the toolbar style usedfor tool_item. 
gfloat gtk_tool_item_get_text_alignment (GtkToolItem *tool_item);	# Returns the text alignment used for tool_item. Custom subclasses ofGtkToolItem should call this function to find out how text shouldbe aligned.
	tool_item		# a GtkToolItem : 
	return:		#  a gfloat indicating the horizontal text alignmentused for tool_item 
GtkOrientation gtk_tool_item_get_text_orientation (GtkToolItem *tool_item);	# Returns the text orientation used for tool_item. Custom subclasses ofGtkToolItem should call this function to find out how text shouldbe orientated.
	tool_item		# a GtkToolItem 
	return:		#  a GtkOrientation indicating the text orientationused for tool_item 
GtkWidget  *gtk_tool_item_retrieve_proxy_menu_item (GtkToolItem *tool_item);	# Returns the GtkMenuItem that was last set bygtk_tool_item_set_proxy_menu_item() , ie. the GtkMenuItem that is going to appear in the overflow menu.
	tool_item		# a GtkToolItem 
	return:		#  The GtkMenuItem that is going to appear in theoverflow menu for tool_item.  
GtkWidget  *gtk_tool_item_get_proxy_menu_item (GtkToolItem *tool_item, const gchar *menu_item_id);	# If menu_item_id matches the string passed togtk_tool_item_set_proxy_menu_item() return the corresponding GtkMenuItem .
	tool_item		# a GtkToolItem 
	menu_item_id		# a string used to identify the menu item
	return:		#  The GtkMenuItem passed togtk_tool_item_set_proxy_menu_item() , if the menu_item_idsmatch.  
void gtk_tool_item_set_proxy_menu_item (GtkToolItem *tool_item, const gchar *menu_item_id, GtkWidget *menu_item);	# Sets the GtkMenuItem used in the toolbar overflow menu. Themenu_item_id is used to identify the caller of this function andshould also be used with gtk_tool_item_get_proxy_menu_item() .
	tool_item		# a GtkToolItem 
	menu_item_id		# a string used to identify menu_item
	menu_item		# a GtkMenuItem to be used in the overflow menu
void gtk_tool_item_rebuild_menu (GtkToolItem *tool_item);	# Calling this function signals to the toolbar that theoverflow menu item for tool_item has changed. If theoverflow menu is visible when this function it called,the menu will be rebuilt.
	tool_item		# a GtkToolItem 
void gtk_tool_item_toolbar_reconfigured (GtkToolItem *tool_item);	# Emits the signal “toolbar_reconfigured” on tool_item.GtkToolbar and other GtkToolShell implementations use this functionto notify children, when some aspect of their configuration changes.
	tool_item		# a GtkToolItem 
GtkSizeGroup  *gtk_tool_item_get_text_size_group (GtkToolItem *tool_item);	# Returns the size group used for labels in tool_item.Custom subclasses of GtkToolItem should call this functionand use the size group for labels.
	tool_item		# a GtkToolItem 
	return:		#  a GtkSizeGroup .  
GtkWidget  *gtk_tool_palette_new (void );	#创建对象:tool palette.
	return:		#  a new GtkToolPalette  
gboolean gtk_tool_palette_get_exclusive (GtkToolPalette *palette, GtkToolItemGroup *group);	# Gets whether group is exclusive or not.See gtk_tool_palette_set_exclusive() .
	palette		# a GtkToolPalette 
	group		# a GtkToolItemGroup which is a child of palette
	return:		#  TRUE if groupis exclusive 
void gtk_tool_palette_set_exclusive (GtkToolPalette *palette, GtkToolItemGroup *group, gboolean exclusive);	# Sets whether the group should be exclusive or not.If an exclusive group is expanded all other groups are collapsed.
	palette		# a GtkToolPalette 
	group		# a GtkToolItemGroup which is a child of palette
	exclusive		# whether the group should be exclusive or not
gboolean gtk_tool_palette_get_expand (GtkToolPalette *palette, GtkToolItemGroup *group);	# Gets whether group should be given extra space.See gtk_tool_palette_set_expand() .
	palette		# a GtkToolPalette 
	group		# a GtkToolItemGroup which is a child of palette
	return:		#  TRUE if group should be given extra space, FALSE otherwise 
void gtk_tool_palette_set_expand (GtkToolPalette *palette, GtkToolItemGroup *group, gboolean expand);	# Sets whether the group should be given extra space.
	palette		# a GtkToolPalette 
	group		# a GtkToolItemGroup which is a child of palette
	expand		# whether the group should be given extra space
gint gtk_tool_palette_get_group_position (GtkToolPalette *palette, GtkToolItemGroup *group);	# Gets the position of group in palette as index.See gtk_tool_palette_set_group_position() .
	palette		# a GtkToolPalette 
	group		# a GtkToolItemGroup 
	return:		#  the index of group or -1 if groupis not a child of palette 
void gtk_tool_palette_set_group_position (GtkToolPalette *palette, GtkToolItemGroup *group, gint position);	# Sets the position of the group as an index of the tool palette.If position is 0 the group will become the first child, if position is-1 it will become the last child.
	palette		# a GtkToolPalette 
	group		# a GtkToolItemGroup which is a child of palette
	position		# a new index for group
GtkIconSize gtk_tool_palette_get_icon_size (GtkToolPalette *palette);	# Gets the size of icons in the tool palette.See gtk_tool_palette_set_icon_size() .
	palette		# a GtkToolPalette 
	return:		#  the GtkIconSize of icons in the tool palette.  
void gtk_tool_palette_set_icon_size (GtkToolPalette *palette, GtkIconSize icon_size);	# Sets the size of icons in the tool palette.
	palette		# a GtkToolPalette 
	icon_size		#  the GtkIconSize that icons in the toolpalette shall have. 
void gtk_tool_palette_unset_icon_size (GtkToolPalette *palette);	# Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size() ,so that user preferences will be used to determine the icon size.
	palette		# a GtkToolPalette 
GtkToolbarStyle gtk_tool_palette_get_style (GtkToolPalette *palette);	# Gets the style (icons, text or both) of items in the tool palette.
	palette		# a GtkToolPalette 
	return:		#  the GtkToolbarStyle of items in the tool palette. 
void gtk_tool_palette_set_style (GtkToolPalette *palette, GtkToolbarStyle style);	# Sets the style (text, icons or both) of items in the tool palette.
	palette		# a GtkToolPalette 
	style		# the GtkToolbarStyle that items in the tool palette shall have
void gtk_tool_palette_unset_style (GtkToolPalette *palette);	# Unsets a toolbar style set with gtk_tool_palette_set_style() ,so that user preferences will be used to determine the toolbar style.
	palette		# a GtkToolPalette 
void gtk_tool_palette_add_drag_dest (GtkToolPalette *palette, GtkWidget *widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions);	# Sets palette as drag source (see gtk_tool_palette_set_drag_source() )and sets widget as a drag destination for drags from palette.See gtk_drag_dest_set() .
	palette		# a GtkToolPalette 
	widget		# a GtkWidget which should be a drag destination for palette
	flags		# the flags that specify what actions GTK+ should take for dropson that widget
	targets		# the GtkToolPaletteDragTargets which the widgetshould support
	actions		# the GdkDragActions which the widget should suppport
GtkWidget  *gtk_tool_palette_get_drag_item (GtkToolPalette *palette, const GtkSelectionData *selection);	# Get the dragged item from the selection.This could be a GtkToolItem or a GtkToolItemGroup .
	palette		# a GtkToolPalette 
	selection		# a GtkSelectionData 
	return:		#  the dragged item in selection.  
GtkTargetEntry  *gtk_tool_palette_get_drag_target_group (void );	# Get the target entry for a dragged GtkToolItemGroup .
	return:		#  the GtkTargetEntry for a dragged group.  
GtkTargetEntry  *gtk_tool_palette_get_drag_target_item (void );	# Gets the target entry for a dragged GtkToolItem .
	return:		#  the GtkTargetEntry for a dragged item.  
GtkToolItemGroup  *gtk_tool_palette_get_drop_group (GtkToolPalette *palette, gint x, gint y);	# Gets the group at position (x, y).
	palette		# a GtkToolPalette 
	x		# the x position
	y		# the y position
	return:		#  the GtkToolItemGroup at positionor NULL if there is no such group.  
GtkToolItem  *gtk_tool_palette_get_drop_item (GtkToolPalette *palette, gint x, gint y);	# Gets the item at position (x, y).See gtk_tool_palette_get_drop_group() .
	palette		# a GtkToolPalette 
	x		# the x position
	y		# the y position
	return:		#  the GtkToolItem at position or NULL if there is no such item.  
void gtk_tool_palette_set_drag_source (GtkToolPalette *palette, GtkToolPaletteDragTargets targets);	# Sets the tool palette as a drag source.Enables all groups and items in the tool palette as drag sourceson button 1 and button 3 press with copy and move actions.See gtk_drag_source_set() .
	palette		# a GtkToolPalette 
	targets		# the GtkToolPaletteDragTargets which the widget should support
gboolean gtk_tool_item_group_get_collapsed (GtkToolItemGroup *group);	# Gets whether group is collapsed or expanded.
	group		# a GtkToolItemGroup
	return:		#  TRUE if groupis collapsed, FALSE if it is expanded 
GtkToolItem  *gtk_tool_item_group_get_drop_item (GtkToolItemGroup *group, gint x, gint y);	# Gets the tool item at position (x, y).
	group		# a GtkToolItemGroup 
	x		# the x position
	y		# the y position
	return:		#  the GtkToolItem at position (x, y).  
PangoEllipsizeMode gtk_tool_item_group_get_ellipsize (GtkToolItemGroup *group);	# Gets the ellipsization mode of group.
	group		# a GtkToolItemGroup 
	return:		#  the PangoEllipsizeMode of group 
gint gtk_tool_item_group_get_item_position (GtkToolItemGroup *group, GtkToolItem *item);	# Gets the position of item in group as index.
	group		# a GtkToolItemGroup 
	item		# a GtkToolItem 
	return:		#  the index of itemin groupor -1 if itemis no child of group 
guint gtk_tool_item_group_get_n_items (GtkToolItemGroup *group);	# Gets the number of tool items in group.
	group		# a GtkToolItemGroup 
	return:		#  the number of tool items in group 
gchar  *gtk_tool_item_group_get_label (GtkToolItemGroup *group);	# Gets the label of group.
	group		# a GtkToolItemGroup 
	return:		#  the label of group. The label is an internal string of groupand must not be modified. Note that NULL is returned if a customlabel has been set with gtk_tool_item_group_set_label_widget()  
GtkWidget  *gtk_tool_item_group_get_label_widget (GtkToolItemGroup *group);	# Gets the label widget of group.See gtk_tool_item_group_set_label_widget() .
	group		# a GtkToolItemGroup 
	return:		#  the label widget of group.  
GtkToolItem  *gtk_tool_item_group_get_nth_item (GtkToolItemGroup *group, guint index);	# Gets the tool item at index in group.
	group		# a GtkToolItemGroup 
	index		# the index
	return:		#  the GtkToolItem at index.  
GtkReliefStyle gtk_tool_item_group_get_header_relief (GtkToolItemGroup *group);	# Gets the relief mode of the header button of group.
	group		# a GtkToolItemGroup 
	return:		#  the GtkReliefStyle  
void gtk_tool_item_group_insert (GtkToolItemGroup *group, GtkToolItem *item, gint position);	# Inserts item at position in the list of children of group.
	group		# a GtkToolItemGroup 
	item		# the GtkToolItem to insert into group
	position		# the position of itemin group, starting with 0.The position -1 means end of list.
GtkWidget  *gtk_tool_item_group_new (const gchar *label);	#创建对象:tool item group with label label.
	label		# the label of the new group
	return:		#  a new GtkToolItemGroup . 
void gtk_tool_item_group_set_collapsed (GtkToolItemGroup *group, gboolean collapsed);	# Sets whether the group should be collapsed or expanded.
	group		# a GtkToolItemGroup 
	collapsed		# whether the groupshould be collapsed or expanded
void gtk_tool_item_group_set_ellipsize (GtkToolItemGroup *group, PangoEllipsizeMode ellipsize);	# Sets the ellipsization mode which should be used by labels in group.
	group		# a GtkToolItemGroup 
	ellipsize		# the PangoEllipsizeMode labels in groupshould use
void gtk_tool_item_group_set_item_position (GtkToolItemGroup *group, GtkToolItem *item, gint position);	# Sets the position of item in the list of children of group.
	group		# a GtkToolItemGroup 
	item		# the GtkToolItem to move to a new position, shouldbe a child of group.
	position		# the new position of itemin group, starting with 0.The position -1 means end of list.
void gtk_tool_item_group_set_label (GtkToolItemGroup *group, const gchar *label);	# Sets the label of the tool item group. The label is displayed in the headerof the group.
	group		# a GtkToolItemGroup 
	label		# the new human-readable label of of the group
void gtk_tool_item_group_set_label_widget (GtkToolItemGroup *group, GtkWidget *label_widget);	# Sets the label of the tool item group.The label widget is displayed in the header of the group, in placeof the usual label.
	group		# a GtkToolItemGroup 
	label_widget		# the widget to be displayed in place of the usual label
void gtk_tool_item_group_set_header_relief (GtkToolItemGroup *group, GtkReliefStyle style);	# Set the button relief of the group header.See gtk_button_set_relief() for details.
	group		# a GtkToolItemGroup 
	style		# the GtkReliefStyle 
GtkToolItem  *gtk_separator_tool_item_new (void );	# Create a new GtkSeparatorToolItem 
	return:		#  the new GtkSeparatorToolItem  
void gtk_separator_tool_item_set_draw (GtkSeparatorToolItem *item, gboolean draw);	# Whether item is drawn as a vertical line, or just blank.Setting this to FALSE along with gtk_tool_item_set_expand() is usefulto create an item that forces following items to the end of the toolbar.
	item		# a GtkSeparatorToolItem 
	draw		# whether itemis drawn as a vertical line
gboolean gtk_separator_tool_item_get_draw (GtkSeparatorToolItem *item);	# Returns whether item is drawn as a line, or just blank. See gtk_separator_tool_item_set_draw() .
	item		# a GtkSeparatorToolItem 
	return:		#  TRUE if itemis drawn as a line, or just blank. 
GtkToolItem  *gtk_tool_button_new (GtkWidget *icon_widget, const gchar *label);	#创建对象:GtkToolButton using icon_widget as contents and label aslabel.
	label		#  a string that will be used as label, or NULL . 
	return:		#  A new GtkToolButton  
void gtk_tool_button_set_label (GtkToolButton *button, const gchar *label);	# Sets label as the label used for the tool button. The “label” property only has an effect if not overridden by a non-NULL “label-widget” property. If both the “label-widget” and “label” properties are NULL , button will not have a label.
	button		# a GtkToolButton 
	label		#  a string that will be used as label, or NULL . 
gchar  *gtk_tool_button_get_label (GtkToolButton *button);	# Returns the label used by the tool button, or NULL if the tool buttondoesn’t have a label. The returnedstring is owned by GTK+, and must not be modified or freed.
	button		# a GtkToolButton 
	return:		#  The label, or NULL .  
void gtk_tool_button_set_use_underline (GtkToolButton *button, gboolean use_underline);	# If set, an underline in the label property indicates that the next charactershould be used for the mnemonic accelerator key in the overflow menu. Forexample, if the label property is “_Open” and use_underline is TRUE ,the label on the tool button will be “Open” and the item on the overflowmenu will have an underlined “O”.
	button		# a GtkToolButton 
	use_underline		# whether the button label has the form “_Open”
gboolean gtk_tool_button_get_use_underline (GtkToolButton *button);	# Returns whether underscores in the label property are used as mnemonicson menu items on the overflow menu. See gtk_tool_button_set_use_underline() .
	button		# a GtkToolButton 
	return:		#  TRUE if underscores in the label property are used asmnemonics on menu items on the overflow menu. 
void gtk_tool_button_set_icon_name (GtkToolButton *button, const gchar *icon_name);	# Sets the icon for the tool button from a named themed icon.See the docs for GtkIconTheme for more details.The “icon-name” property only has an effect if notoverridden by non-NULL “label-widget” or“icon-widget” properties.
	button		# a GtkToolButton 
	icon_name		#  the name of the themed icon. 
gchar  *gtk_tool_button_get_icon_name (GtkToolButton *button);	# Returns the name of the themed icon for the tool button,see gtk_tool_button_set_icon_name() .
	button		# a GtkToolButton 
	return:		#  the icon name or NULL if the tool button hasno themed icon.  
void gtk_tool_button_set_icon_widget (GtkToolButton *button, GtkWidget *icon_widget);	# Sets icon as the widget used as icon on button.
	button		# a GtkToolButton 
	icon_widget		#  the widget used as icon, or NULL . 
GtkWidget  *gtk_tool_button_get_icon_widget (GtkToolButton *button);	# Return the widget used as icon widget on button.See gtk_tool_button_set_icon_widget() .
	button		# a GtkToolButton 
	return:		#  The widget used as iconon button, or NULL .  
void gtk_tool_button_set_label_widget (GtkToolButton *button, GtkWidget *label_widget);	# Sets label_widget as the widget that will be used as the labelfor button. If label_widget is NULL the “label” property is usedas label. If “label” is also NULL , button does not have a label.
	button		# a GtkToolButton 
	label_widget		#  the widget used as label, or NULL . 
GtkWidget  *gtk_tool_button_get_label_widget (GtkToolButton *button);	# Returns the widget used as label on button.See gtk_tool_button_set_label_widget() .
	button		# a GtkToolButton 
	return:		#  The widget used as labelon button, or NULL .  
GtkToolItem  *gtk_menu_tool_button_new (GtkWidget *icon_widget, const gchar *label);	#创建对象:GtkMenuToolButton using icon_widget as icon andlabel as label.
	icon_widget		#  a widget that will be used as icon widget, or NULL . 
	return:		#  the new GtkMenuToolButton  
void gtk_menu_tool_button_set_menu (GtkMenuToolButton *button, GtkWidget *menu);	# Sets the GtkMenu that is popped up when the user clicks on the arrow.If menu is NULL, the arrow button becomes insensitive.
	button		# a GtkMenuToolButton 
	menu		# the GtkMenu associated with GtkMenuToolButton 
GtkWidget  *gtk_menu_tool_button_get_menu (GtkMenuToolButton *button);	# Gets the GtkMenu associated with GtkMenuToolButton .
	button		# a GtkMenuToolButton 
	return:		#  the GtkMenu associatedwith GtkMenuToolButton .  
void gtk_menu_tool_button_set_arrow_tooltip_text (GtkMenuToolButton *button, const gchar *text);	# Sets the tooltip text to be used as tooltip for the arrow button whichpops up the menu. See gtk_tool_item_set_tooltip_text() for setting a tooltipon the whole GtkMenuToolButton .
	button		# a GtkMenuToolButton 
	text		# text to be used as tooltip text for button’s arrow button
void gtk_menu_tool_button_set_arrow_tooltip_markup (GtkMenuToolButton *button, const gchar *markup);	# Sets the tooltip markup text to be used as tooltip for the arrow buttonwhich pops up the menu. See gtk_tool_item_set_tooltip_text() for settinga tooltip on the whole GtkMenuToolButton .
	button		# a GtkMenuToolButton 
	markup		# markup text to be used as tooltip text for button’s arrow button
GtkToolItem  *gtk_toggle_tool_button_new (void );	# Returns a new GtkToggleToolButton 
	return:		#  a newly created GtkToggleToolButton  
void gtk_toggle_tool_button_set_active (GtkToggleToolButton *button, gboolean is_active);	# Sets the status of the toggle tool button. Set to TRUE if youwant the GtkToggleButton to be “pressed in”, and FALSE to raise it.This action causes the toggled signal to be emitted.
	button		# a GtkToggleToolButton 
	is_active		# whether buttonshould be active
gboolean gtk_toggle_tool_button_get_active (GtkToggleToolButton *button);	# Queries a GtkToggleToolButton and returns its current state.Returns TRUE if the toggle button is pressed in and FALSE if it is raised.
	button		# a GtkToggleToolButton 
	return:		#  TRUE if the toggle tool button is pressed in, FALSE if not 
GtkToolItem  *gtk_radio_tool_button_new (GSList *group);	#创建对象:GtkRadioToolButton , adding it to group.
	group		#  Anexisting radio button group, or NULL if you are creating a new group. 
	return:		#  The new GtkRadioToolButton  
GtkToolItem  *gtk_radio_tool_button_new_from_widget (GtkRadioToolButton *group);	#创建对象:GtkRadioToolButton adding it to the same group as gruup
	group		#  An existing GtkRadioToolButton , or NULL . 
	return:		#  The new GtkRadioToolButton .  
GSList  *gtk_radio_tool_button_get_group (GtkRadioToolButton *button);	# Returns the radio button group button belongs to.
	button		# a GtkRadioToolButton 
	return:		#  The group buttonbelongs to.  
void gtk_radio_tool_button_set_group (GtkRadioToolButton *button, GSList *group);	# Adds button to group, removing it from the group it belonged to before.
	button		# a GtkRadioToolButton 
	group		#  an existing radio button group, or NULL . 
GtkWidget  *gtk_popover_new (GtkWidget *relative_to);	#创建对象:popover to point to relative_to
	relative_to		#  GtkWidget the popover is related to. 
	return:		#  a new GtkPopover  
GtkWidget  *gtk_popover_new_from_model (GtkWidget *relative_to, GMenuModel *model);	# Creates a GtkPopover and populates it according tomodel. The popover is pointed to the relative_to widget.
	relative_to		#  GtkWidget the popover is related to. 
	return:		#  the new GtkPopover  
void gtk_popover_bind_model (GtkPopover *popover, GMenuModel *model, const gchar *action_namespace);	# Establishes a binding between a GtkPopover and a GMenuModel .
	popover		# a GtkPopover 
	model		#  the GMenuModel to bind to or NULL to removebinding. 
void gtk_popover_popup (GtkPopover *popover);	# Pops popover up. This is different than a gtk_widget_show() callin that it shows the popover with a transition. If you want to showthe popover without a transition, use gtk_widget_show() .
	popover		# a GtkPopover 
void gtk_popover_popdown (GtkPopover *popover);	# Pops popover down.This is different than a gtk_widget_hide() callin that it shows the popover with a transition. If you want to hidethe popover without a transition, use gtk_widget_hide() .
	popover		# a GtkPopover 
void gtk_popover_set_relative_to (GtkPopover *popover, GtkWidget *relative_to);	# Sets a new widget to be attached to popover. If popover isvisible, the position will be updated.
	popover		# a GtkPopover 
	relative_to		#  a GtkWidget . 
GtkWidget  *gtk_popover_get_relative_to (GtkPopover *popover);	# Returns the widget popover is currently attached to
	popover		# a GtkPopover 
	return:		#  a GtkWidget .  
void gtk_popover_set_pointing_to (GtkPopover *popover, const GdkRectangle *rect);	# Sets the rectangle that popover will point to, in thecoordinate space of the widget popover is attached to,see gtk_popover_set_relative_to() .
	popover		# a GtkPopover 
	rect		# rectangle to point to
gboolean gtk_popover_get_pointing_to (GtkPopover *popover, GdkRectangle *rect);	# If a rectangle to point to has been set, this function willreturn TRUE and fill in rect with such rectangle, otherwiseit will return FALSE and fill in rect with the attachedwidget coordinates.
	popover		# a GtkPopover 
	rect		#  location to store the rectangle. 
	return:		#  TRUE if a rectangle to point to was set. 
void gtk_popover_set_position (GtkPopover *popover, GtkPositionType position);	# Sets the preferred position for popover to appear. If the popoveris currently visible, it will be immediately updated.
	popover		# a GtkPopover 
	position		# preferred popover position
GtkPositionType gtk_popover_get_position (GtkPopover *popover);	# Returns the preferred position of popover.
	popover		# a GtkPopover 
	return:		#  The preferred position. 
void gtk_popover_set_constrain_to (GtkPopover *popover, GtkPopoverConstraint constraint);	# Sets a constraint for positioning this popover.
	popover		# a GtkPopover 
	constraint		# the new constraint
GtkPopoverConstraint gtk_popover_get_constrain_to (GtkPopover *popover);	# Returns the constraint for placing this popover.See gtk_popover_set_constrain_to() .
	popover		# a GtkPopover 
	return:		#  the constraint for placing this popover. 
void gtk_popover_set_modal (GtkPopover *popover, gboolean modal);	# Sets whether popover is modal, a modal popover will grab all inputwithin the toplevel and grab the keyboard focus on it when beingdisplayed. Clicking outside the popover area or pressing Esc willdismiss the popover and ungrab input.
	popover		# a GtkPopover 
	modal		# TRUE to make popover claim all input within the toplevel
gboolean gtk_popover_get_modal (GtkPopover *popover);	# Returns whether the popover is modal, see gtk_popover_set_modal tosee the implications of this.
	popover		# a GtkPopover 
	return:		#  TRUE if popoveris modal 
void gtk_popover_set_default_widget (GtkPopover *popover, GtkWidget *widget);	# Sets the widget that should be set as default widget whilethe popover is shown (see gtk_window_set_default() ). GtkPopover remembers the previous default widget and reestablishes itwhen the popover is dismissed.
	popover		# a GtkPopover 
	widget		#  the new default widget, or NULL . 
GtkWidget  *gtk_popover_get_default_widget (GtkPopover *popover);	# Gets the widget that should be set as the default whilethe popover is shown.
	popover		# a GtkPopover 
	return:		#  the default widget,or NULL if there is none.  
GtkWidget  *gtk_popover_menu_new (void );	#创建对象:popover menu.
	return:		#  a new GtkPopoverMenu  
void gtk_popover_menu_open_submenu (GtkPopoverMenu *popover, const gchar *name);	# Opens a submenu of the popover. The namemust be one of the names given to the submenusof popover with “submenu” , or"main" to switch back to the main menu.
	popover		# a GtkPopoverMenu 
	name		# the name of the menu to switch to
void gtk_color_chooser_get_rgba (GtkColorChooser *chooser, GdkRGBA *color);	# Gets the currently-selected color.
	chooser		# a GtkColorChooser 
	color		#  a GdkRGBA to fill in with the current color. 
void gtk_color_chooser_set_rgba (GtkColorChooser *chooser, const GdkRGBA *color);	# Sets the color.
	chooser		# a GtkColorChooser 
	color		# the new color
gboolean gtk_color_chooser_get_use_alpha (GtkColorChooser *chooser);	# Returns whether the color chooser shows the alpha channel.
	chooser		# a GtkColorChooser 
	return:		#  TRUE if the color chooser uses the alpha channel,FALSE if not 
void gtk_color_chooser_set_use_alpha (GtkColorChooser *chooser, gboolean use_alpha);	# Sets whether or not the color chooser should use the alpha channel.
	chooser		# a GtkColorChooser 
	use_alpha		# TRUE if color chooser should use alpha channel, FALSE if not
void gtk_color_chooser_add_palette (GtkColorChooser *chooser, GtkOrientation orientation, gint colors_per_line, gint n_colors, GdkRGBA *colors);	# Adds a palette to the color chooser. If orientation is horizontal,the colors are grouped in rows, with colors_per_line colorsin each row. If horizontal is FALSE , the colors are groupedin columns instead.
	chooser		# a GtkColorChooser 
	orientation		# GTK_ORIENTATION_HORIZONTAL if the palette shouldbe displayed in rows, GTK_ORIENTATION_VERTICAL for columns
	colors_per_line		# the number of colors to show in each row/column
	n_colors		# the total number of elements in colors
	colors		#  the colors of the palette, or NULL . 
GtkWidget  *gtk_color_button_new (void );	#创建对象:color button.
	return:		#  a new color button 
GtkWidget  *gtk_color_button_new_with_rgba (const GdkRGBA *rgba);	#创建对象:color button.
	rgba		# A GdkRGBA to set the current color with
	return:		#  a new color button 
void gtk_color_button_set_title (GtkColorButton *button, const gchar *title);	# Sets the title for the color selection dialog.
	button		# a GtkColorButton 
	title		# String containing new window title
gchar  *gtk_color_button_get_title (GtkColorButton *button);	# Gets the title of the color selection dialog.
	button		# a GtkColorButton 
	return:		#  An internal string, do not free the return value 
GtkWidget  *gtk_color_chooser_widget_new (void );	#创建对象:GtkColorChooserWidget .
	return:		#  a new GtkColorChooserWidget  
GtkWidget  *gtk_color_chooser_dialog_new (const gchar *title, GtkWindow *parent);	#创建对象:GtkColorChooserDialog .
	title		#  Title of the dialog, or NULL . 
	return:		#  a new GtkColorChooserDialog  
void gtk_file_chooser_set_action (GtkFileChooser *chooser, GtkFileChooserAction action);	# Sets the type of operation that the chooser is performing; theuser interface is adapted to suit the selected action. For example,an option to create a new folder might be shown if the action isGTK_FILE_CHOOSER_ACTION_SAVE but not if the action isGTK_FILE_CHOOSER_ACTION_OPEN .
	chooser		# a GtkFileChooser 
	action		# the action that the file selector is performing
GtkFileChooserAction gtk_file_chooser_get_action (GtkFileChooser *chooser);	# Gets the type of operation that the file chooser is performing; seegtk_file_chooser_set_action() .
	chooser		# a GtkFileChooser 
	return:		#  the action that the file selector is performing 
void gtk_file_chooser_set_local_only (GtkFileChooser *chooser, gboolean local_only);	# Sets whether only local files can be selected in thefile selector. If local_only is TRUE (the default),then the selected file or files are guaranteed to beaccessible through the operating systems native filesystem and therefore the application onlyneeds to worry about the filename functions inGtkFileChooser , like gtk_file_chooser_get_filename() ,rather than the URI functions likegtk_file_chooser_get_uri() ,
	chooser		# a GtkFileChooser 
	local_only		# TRUE if only local files can be selected
gboolean gtk_file_chooser_get_local_only (GtkFileChooser *chooser);	# Gets whether only local files can be selected in thefile selector. See gtk_file_chooser_set_local_only() 
	chooser		# a GtkFileChooser 
	return:		#  TRUE if only local files can be selected. 
void gtk_file_chooser_set_select_multiple (GtkFileChooser *chooser, gboolean select_multiple);	# Sets whether multiple files can be selected in the file selector. This isonly relevant if the action is set to be GTK_FILE_CHOOSER_ACTION_OPEN orGTK_FILE_CHOOSER_ACTION_SELECT_FOLDER .
	chooser		# a GtkFileChooser 
	select_multiple		# TRUE if multiple files can be selected.
gboolean gtk_file_chooser_get_select_multiple (GtkFileChooser *chooser);	# Gets whether multiple files can be selected in the fileselector. See gtk_file_chooser_set_select_multiple() .
	chooser		# a GtkFileChooser 
	return:		#  TRUE if multiple files can be selected. 
void gtk_file_chooser_set_show_hidden (GtkFileChooser *chooser, gboolean show_hidden);	# Sets whether hidden files and folders are displayed in the file selector.
	chooser		# a GtkFileChooser 
	show_hidden		# TRUE if hidden files and folders should be displayed.
gboolean gtk_file_chooser_get_show_hidden (GtkFileChooser *chooser);	# Gets whether hidden files and folders are displayed in the file selector. See gtk_file_chooser_set_show_hidden() .
	chooser		# a GtkFileChooser 
	return:		#  TRUE if hidden files and folders are displayed. 
void gtk_file_chooser_set_do_overwrite_confirmation (GtkFileChooser *chooser, gboolean do_overwrite_confirmation);	# Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will presenta confirmation dialog if the user types a file name that already exists. Thisis FALSE by default.
	chooser		# a GtkFileChooser 
	do_overwrite_confirmation		# whether to confirm overwriting in save mode
gboolean gtk_file_chooser_get_do_overwrite_confirmation (GtkFileChooser *chooser);	# Queries whether a file chooser is set to confirm for overwriting when the usertypes a file name that already exists.
	chooser		# a GtkFileChooser 
	return:		#  TRUE if the file chooser will present a confirmation dialog;FALSE otherwise. 
void gtk_file_chooser_set_create_folders (GtkFileChooser *chooser, gboolean create_folders);	# Sets whether file choser will offer to create new folders.This is only relevant if the action is not set to be GTK_FILE_CHOOSER_ACTION_OPEN .
	chooser		# a GtkFileChooser 
	create_folders		# TRUE if the Create Folder button should be displayed
gboolean gtk_file_chooser_get_create_folders (GtkFileChooser *chooser);	# Gets whether file choser will offer to create new folders.See gtk_file_chooser_set_create_folders() .
	chooser		# a GtkFileChooser 
	return:		#  TRUE if the Create Folder button should be displayed. 
void gtk_file_chooser_set_current_name (GtkFileChooser *chooser, const gchar *name);	# Sets the current name in the file selector, as if enteredby the user. Note that the name passed in here is a UTF-8string rather than a filename. This function is meant forsuch uses as a suggested name in a “Save As...” dialog. You canpass “Untitled.doc” or a similarly suitable suggestion for the name.
	chooser		# a GtkFileChooser 
	name		#  the filename to use, as a UTF-8 string. 
gchar  *gtk_file_chooser_get_current_name (GtkFileChooser *chooser);	# Gets the current name in the file selector, as entered by the user in thetext entry for “Name”.
	chooser		# a GtkFileChooser 
	return:		#  The raw text from the file chooser’s “Name” entry. Free this withg_free() . Note that this string is not a full pathname or URI; it iswhatever the contents of the entry are. Note also that this string is inUTF-8 encoding, which is not necessarily the system’s encoding for filenames. 
gchar  *gtk_file_chooser_get_filename (GtkFileChooser *chooser);	# Gets the filename for the currently selected file inthe file selector. The filename is returned as an absolute path. Ifmultiple files are selected, one of the filenames will be returned atrandom.
	chooser		# a GtkFileChooser 
	return:		#  The currently selected filename,or NULL if no file is selected, or the selected file can'tbe represented with a local filename. Free with g_free() .  
gboolean gtk_file_chooser_set_filename (GtkFileChooser *chooser, const char *filename);	# Sets filename as the current filename for the file chooser, by changing tothe file’s parent folder and actually selecting the file in list; all otherfiles will be unselected. If the chooser is inGTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base name will also appear inthe dialog’s file name entry.
	chooser		# a GtkFileChooser 
	filename		#  the filename to set as current. 
	return:		#  Not useful. 
gboolean gtk_file_chooser_select_filename (GtkFileChooser *chooser, const char *filename);	# Selects a filename. If the file name isn’t in the currentfolder of chooser, then the current folder of chooser willbe changed to the folder containing filename.
	chooser		# a GtkFileChooser 
	filename		#  the filename to select. 
	return:		#  Not useful. 
void gtk_file_chooser_unselect_filename (GtkFileChooser *chooser, const char *filename);	# Unselects a currently selected filename. If the filenameis not in the current directory, does not exist, oris otherwise not currently selected, does nothing.
	chooser		# a GtkFileChooser 
	filename		#  the filename to unselect. 
void gtk_file_chooser_select_all (GtkFileChooser *chooser);	# Selects all the files in the current folder of a file chooser.
	chooser		# a GtkFileChooser 
void gtk_file_chooser_unselect_all (GtkFileChooser *chooser);	# Unselects all the files in the current folder of a file chooser.
	chooser		# a GtkFileChooser 
GSList  *gtk_file_chooser_get_filenames (GtkFileChooser *chooser);	# Lists all the selected files and subfolders in the current folder ofchooser. The returned names are full absolute paths. If files in the currentfolder cannot be represented as local filenames they will be ignored. (Seegtk_file_chooser_get_uris() )
	chooser		# a GtkFileChooser 
	return:		#  a GSList containing the filenames of all selected files and subfolders inthe current folder. Free the returned list with g_slist_free() ,and the filenames with g_free() .  
gboolean gtk_file_chooser_set_current_folder (GtkFileChooser *chooser, const gchar *filename);	# Sets the current folder for chooser from a local filename.The user will be shown the full contents of the current folder,plus user interface elements for navigating to other folders.
	chooser		# a GtkFileChooser 
	filename		#  the full path of the new current folder. 
	return:		#  Not useful. 
gchar  *gtk_file_chooser_get_current_folder (GtkFileChooser *chooser);	# Gets the current folder of chooser as a local filename.See gtk_file_chooser_set_current_folder() .
	chooser		# a GtkFileChooser 
	return:		#  the full path of the currentfolder, or NULL if the current path cannot be represented as a localfilename. Free with g_free() . This function will also returnNULL if the file chooser was unable to load the last folder thatwas requested from it; for example, as would be for callinggtk_file_chooser_set_current_folder() on a nonexistent folder.  
gchar  *gtk_file_chooser_get_uri (GtkFileChooser *chooser);	# Gets the URI for the currently selected file inthe file selector. If multiple files are selected,one of the filenames will be returned at random.
	chooser		# a GtkFileChooser 
	return:		#  The currently selected URI, or NULL if no file is selected. If gtk_file_chooser_set_local_only() is set toTRUE (the default) a local URI will be returned for any FUSE locations.Free with g_free() .  
gboolean gtk_file_chooser_set_uri (GtkFileChooser *chooser, const char *uri);	# Sets the file referred to by uri as the current file for the file chooser,by changing to the URI’s parent folder and actually selecting the URI in thelist. If the chooser is GTK_FILE_CHOOSER_ACTION_SAVE mode, the URI’s basename will also appear in the dialog’s file name entry.
	chooser		# a GtkFileChooser 
	uri		# the URI to set as current
	return:		#  Not useful. 
gboolean gtk_file_chooser_select_uri (GtkFileChooser *chooser, const char *uri);	# Selects the file to by uri. If the URI doesn’t refer to afile in the current folder of chooser, then the current folder ofchooser will be changed to the folder containing filename.
	chooser		# a GtkFileChooser 
	uri		# the URI to select
	return:		#  Not useful. 
void gtk_file_chooser_unselect_uri (GtkFileChooser *chooser, const char *uri);	# Unselects the file referred to by uri. If the fileis not in the current directory, does not exist, oris otherwise not currently selected, does nothing.
	chooser		# a GtkFileChooser 
	uri		# the URI to unselect
GSList  *gtk_file_chooser_get_uris (GtkFileChooser *chooser);	# Lists all the selected files and subfolders in the current folder ofchooser. The returned names are full absolute URIs.
	chooser		# a GtkFileChooser 
	return:		#  a GSList containing the URIs of all selectedfiles and subfolders in the current folder. Free the returned listwith g_slist_free() , and the filenames with g_free() .  
gboolean gtk_file_chooser_set_current_folder_uri (GtkFileChooser *chooser, const gchar *uri);	# Sets the current folder for chooser from an URI.The user will be shown the full contents of the current folder,plus user interface elements for navigating to other folders.
	chooser		# a GtkFileChooser 
	uri		# the URI for the new current folder
	return:		#  TRUE if the folder could be changed successfully, FALSE otherwise. 
gchar  *gtk_file_chooser_get_current_folder_uri (GtkFileChooser *chooser);	# Gets the current folder of chooser as an URI.See gtk_file_chooser_set_current_folder_uri() .
	chooser		# a GtkFileChooser 
	return:		#  the URI for the current folder.Free with g_free() . This function will also return NULL if the file chooserwas unable to load the last folder that was requested from it; for example,as would be for calling gtk_file_chooser_set_current_folder_uri() on anonexistent folder.  
void gtk_file_chooser_set_preview_widget (GtkFileChooser *chooser, GtkWidget *preview_widget);	# Sets an application-supplied widget to use to display a custom previewof the currently selected file. To implement a preview, after setting thepreview widget, you connect to the “update-preview” signal, and call gtk_file_chooser_get_preview_filename() orgtk_file_chooser_get_preview_uri() on each change. If you candisplay a preview of the new file, update your widget andset the preview active using gtk_file_chooser_set_preview_widget_active() .Otherwise, set the preview inactive.
	chooser		# a GtkFileChooser 
	preview_widget		# widget for displaying preview.
GtkWidget  *gtk_file_chooser_get_preview_widget (GtkFileChooser *chooser);	# Gets the current preview widget; seegtk_file_chooser_set_preview_widget() .
	chooser		# a GtkFileChooser 
	return:		#  the current preview widget, or NULL .  
void gtk_file_chooser_set_preview_widget_active (GtkFileChooser *chooser, gboolean active);	# Sets whether the preview widget set bygtk_file_chooser_set_preview_widget() should be shown for thecurrent filename. When active is set to false, the file choosermay display an internally generated preview of the current fileor it may display no preview at all. Seegtk_file_chooser_set_preview_widget() for more details.
	chooser		# a GtkFileChooser 
	active		# whether to display the user-specified preview widget
gboolean gtk_file_chooser_get_preview_widget_active (GtkFileChooser *chooser);	# Gets whether the preview widget set by gtk_file_chooser_set_preview_widget() should be shown for the current filename. Seegtk_file_chooser_set_preview_widget_active() .
	chooser		# a GtkFileChooser 
	return:		#  TRUE if the preview widget is active for the current filename. 
void gtk_file_chooser_set_use_preview_label (GtkFileChooser *chooser, gboolean use_label);	# Sets whether the file chooser should display a stock label with the name ofthe file that is being previewed; the default is TRUE . Applications thatwant to draw the whole preview area themselves should set this to FALSE anddisplay the name themselves in their preview widget.
	chooser		# a GtkFileChooser 
	use_label		# whether to display a stock label with the name of the previewed file
gboolean gtk_file_chooser_get_use_preview_label (GtkFileChooser *chooser);	# Gets whether a stock label should be drawn with the name of the previewedfile. See gtk_file_chooser_set_use_preview_label() .
	chooser		# a GtkFileChooser 
	return:		#  TRUE if the file chooser is set to display a label with thename of the previewed file, FALSE otherwise. 
char  *gtk_file_chooser_get_preview_filename (GtkFileChooser *chooser);	# Gets the filename that should be previewed in a custom previewwidget. See gtk_file_chooser_set_preview_widget() .
	chooser		# a GtkFileChooser 
	return:		#  the filename to preview, or NULL ifno file is selected, or if the selected file cannot be representedas a local filename. Free with g_free() .  
char  *gtk_file_chooser_get_preview_uri (GtkFileChooser *chooser);	# Gets the URI that should be previewed in a custom previewwidget. See gtk_file_chooser_set_preview_widget() .
	chooser		# a GtkFileChooser 
	return:		#  the URI for the file to preview,or NULL if no file is selected. Free with g_free() .  
void gtk_file_chooser_set_extra_widget (GtkFileChooser *chooser, GtkWidget *extra_widget);	# Sets an application-supplied widget to provide extra options to the user.
	chooser		# a GtkFileChooser 
	extra_widget		# widget for extra options
GtkWidget  *gtk_file_chooser_get_extra_widget (GtkFileChooser *chooser);	# Gets the current extra widget; seegtk_file_chooser_set_extra_widget() .
	chooser		# a GtkFileChooser 
	return:		#  the current extra widget, or NULL .  
void gtk_file_chooser_add_filter (GtkFileChooser *chooser, GtkFileFilter *filter);	# Adds filter to the list of filters that the user can select between.When a filter is selected, only files that are passed by thatfilter are displayed. 
	chooser		# a GtkFileChooser 
	filter		#  a GtkFileFilter . 
void gtk_file_chooser_remove_filter (GtkFileChooser *chooser, GtkFileFilter *filter);	# Removes filter from the list of filters that the user can select between.
	chooser		# a GtkFileChooser 
	filter		# a GtkFileFilter 
GSList  *gtk_file_chooser_list_filters (GtkFileChooser *chooser);	# Lists the current set of user-selectable filters; seegtk_file_chooser_add_filter() , gtk_file_chooser_remove_filter() .
	chooser		# a GtkFileChooser 
	return:		#  aGSList containing the current set of user selectable filters. Thecontents of the list are owned by GTK+, but you must free the listitself with g_slist_free() when you are done with it.  
void gtk_file_chooser_set_filter (GtkFileChooser *chooser, GtkFileFilter *filter);	# Sets the current filter; only the files that pass thefilter will be displayed. If the user-selectable list of filtersis non-empty, then the filter should be one of the filtersin that list. Setting the current filter when the list offilters is empty is useful if you want to restrict the displayedset of files without letting the user change it.
	chooser		# a GtkFileChooser 
	filter		# a GtkFileFilter 
GtkFileFilter  *gtk_file_chooser_get_filter (GtkFileChooser *chooser);	# Gets the current filter; see gtk_file_chooser_set_filter() .
	chooser		# a GtkFileChooser 
	return:		#  the current filter, or NULL .  
gboolean gtk_file_chooser_add_shortcut_folder (GtkFileChooser *chooser, const char *folder, GError **error);	# Adds a folder to be displayed with the shortcut folders in a file chooser.Note that shortcut folders do not get saved, as they are provided by theapplication. For example, you can use this to add a“/usr/share/mydrawprogram/Clipart” folder to the volume list.
	chooser		# a GtkFileChooser 
	folder		#  filename of the folder to add. 
	return:		#  TRUE if the folder could be added successfully, FALSE otherwise. In the latter case, the errorwill be set as appropriate. 
gboolean gtk_file_chooser_remove_shortcut_folder (GtkFileChooser *chooser, const char *folder, GError **error);	# Removes a folder from a file chooser’s list of shortcut folders.
	chooser		# a GtkFileChooser 
	folder		#  filename of the folder to remove. 
	return:		#  TRUE if the operation succeeds, FALSE otherwise.In the latter case, the errorwill be set as appropriate. 
GSList  *gtk_file_chooser_list_shortcut_folders (GtkFileChooser *chooser);	# Queries the list of shortcut folders in the file chooser, as set bygtk_file_chooser_add_shortcut_folder() .
	chooser		# a GtkFileChooser 
	return:		#  A listof folder filenames, or NULL if there are no shortcut folders.Free the returned list with g_slist_free() , and the filenames withg_free() .  
gboolean gtk_file_chooser_add_shortcut_folder_uri (GtkFileChooser *chooser, const char *uri, GError **error);	# Adds a folder URI to be displayed with the shortcut folders in a filechooser. Note that shortcut folders do not get saved, as they are providedby the application. For example, you can use this to add a“file:///usr/share/mydrawprogram/Clipart” folder to the volume list.
	chooser		# a GtkFileChooser 
	uri		# URI of the folder to add
	error		#  location to store error, or NULL . 
	return:		#  TRUE if the folder could be added successfully, FALSE otherwise. In the latter case, the errorwill be set as appropriate. 
gboolean gtk_file_chooser_remove_shortcut_folder_uri (GtkFileChooser *chooser, const char *uri, GError **error);	# Removes a folder URI from a file chooser’s list of shortcut folders.
	chooser		# a GtkFileChooser 
	uri		# URI of the folder to remove
	error		#  location to store error, or NULL . 
	return:		#  TRUE if the operation succeeds, FALSE otherwise.In the latter case, the errorwill be set as appropriate. 
GSList  *gtk_file_chooser_list_shortcut_folder_uris (GtkFileChooser *chooser);	# Queries the list of shortcut folders in the file chooser, as set bygtk_file_chooser_add_shortcut_folder_uri() .
	chooser		# a GtkFileChooser 
	return:		#  A list offolder URIs, or NULL if there are no shortcut folders. Free thereturned list with g_slist_free() , and the URIs with g_free() .  
GFile  *gtk_file_chooser_get_current_folder_file (GtkFileChooser *chooser);	# Gets the current folder of chooser as GFile .See gtk_file_chooser_get_current_folder_uri() .
	chooser		# a GtkFileChooser 
	return:		#  the GFile for the current folder.  
GFile  *gtk_file_chooser_get_file (GtkFileChooser *chooser);	# Gets the GFile for the currently selected file inthe file selector. If multiple files are selected,one of the files will be returned at random.
	chooser		# a GtkFileChooser 
	return:		#  a selected GFile . You own the returned file;use g_object_unref() to release it.  
GSList  *gtk_file_chooser_get_files (GtkFileChooser *chooser);	# Lists all the selected files and subfolders in the current folder of chooseras GFile . An internal function, see gtk_file_chooser_get_uris() .
	chooser		# a GtkFileChooser 
	return:		#  a GSList containing a GFile for each selected file and subfolder in thecurrent folder. Free the returned list with g_slist_free() , andthe files with g_object_unref() .  
GFile  *gtk_file_chooser_get_preview_file (GtkFileChooser *chooser);	# Gets the GFile that should be previewed in a custom previewInternal function, see gtk_file_chooser_get_preview_uri() .
	chooser		# a GtkFileChooser 
	return:		#  the GFile for the file to preview,or NULL if no file is selected. Free with g_object_unref() .  
gboolean gtk_file_chooser_select_file (GtkFileChooser *chooser, GFile *file, GError **error);	# Selects the file referred to by file. An internal function. See_gtk_file_chooser_select_uri() .
	chooser		# a GtkFileChooser 
	file		# the file to select
	error		#  location to store error, or NULL . 
	return:		#  Not useful. 
gboolean gtk_file_chooser_set_current_folder_file (GtkFileChooser *chooser, GFile *file, GError **error);	# Sets the current folder for chooser from a GFile .Internal function, see gtk_file_chooser_set_current_folder_uri() .
	chooser		# a GtkFileChooser 
	file		# the GFile for the new folder
	error		#  location to store error, or NULL . 
	return:		#  TRUE if the folder could be changed successfully, FALSE otherwise. 
gboolean gtk_file_chooser_set_file (GtkFileChooser *chooser, GFile *file, GError **error);	# Sets file as the current filename for the file chooser, by changingto the file’s parent folder and actually selecting the file in list. Ifthe chooser is in GTK_FILE_CHOOSER_ACTION_SAVE mode, the file’s base namewill also appear in the dialog’s file name entry.
	chooser		# a GtkFileChooser 
	file		# the GFile to set as current
	error		#  location to store the error, or NULL to ignore errors. 
	return:		#  Not useful. 
void gtk_file_chooser_unselect_file (GtkFileChooser *chooser, GFile *file);	# Unselects the file referred to by file. If the file is not in the currentdirectory, does not exist, or is otherwise not currently selected, does nothing.
	chooser		# a GtkFileChooser 
	file		# a GFile 
void gtk_file_chooser_add_choice (GtkFileChooser *chooser, const char *id, const char *label, const char **options, const char **option_labels);	# Adds a 'choice' to the file chooser. This is typically implementedas a combobox or, for boolean choices, as a checkbutton. You can selecta value using gtk_file_chooser_set_choice() before the dialog is shown,and you can obtain the user-selected value in the ::response signal handlerusing gtk_file_chooser_get_choice() .
	chooser		# a GtkFileChooser 
	id		# id for the added choice
	label		# user-visible label for the added choice
	options		# ids for the options of the choice, or NULL for a boolean choice
	option_labels		# user-visible labels for the options, must be the same length as options
void gtk_file_chooser_remove_choice (GtkFileChooser *chooser, const char *id);	# Removes a 'choice' that has been added with gtk_file_chooser_add_choice() .
	chooser		# a GtkFileChooser 
	id		# the ID of the choice to remove
void gtk_file_chooser_set_choice (GtkFileChooser *chooser, const char *id, const char *option);	# Selects an option in a 'choice' that has been added withgtk_file_chooser_add_choice() . For a boolean choice, thepossible options are "true" and "false".
	chooser		# a GtkFileChooser 
	id		# the ID of the choice to set
	option		# the ID of the option to select
char  *gtk_file_chooser_get_choice (GtkFileChooser *chooser, const char *id);	# Gets the currently selected option in the 'choice' with the given ID.
	chooser		# a GtkFileChooser 
	id		# the ID of the choice to get
	return:		#  the ID of the currenly selected option 
GtkWidget  *gtk_file_chooser_button_new (const gchar *title, GtkFileChooserAction action);	#创建对象:file-selecting button widget.
	title		# the title of the browse dialog.
	action		# the open mode for the widget.
	return:		#  a new button widget. 
GtkWidget  *gtk_file_chooser_button_new_with_dialog (GtkWidget *dialog);	# Creates a GtkFileChooserButton widget which uses dialog as itsfile-picking window.
	dialog		#  the widget to use as dialog. 
	return:		#  a new button widget. 
gchar  *gtk_file_chooser_button_get_title (GtkFileChooserButton *button);	# Retrieves the title of the browse dialog used by button. The returned valueshould not be modified or freed.
	button		# the button widget to examine.
	return:		#  a pointer to the browse dialog’s title. 
void gtk_file_chooser_button_set_title (GtkFileChooserButton *button, const gchar *title);	# Modifies the title of the browse dialog used by button.
	button		# the button widget to modify.
	title		# the new browse dialog title.
gint gtk_file_chooser_button_get_width_chars (GtkFileChooserButton *button);	# Retrieves the width in characters of the button widget’s entry and/or label.
	button		# the button widget to examine.
	return:		#  an integer width (in characters) that the button will use to size itself. 
void gtk_file_chooser_button_set_width_chars (GtkFileChooserButton *button, gint n_chars);	# Sets the width (in characters) that button will use to n_chars.
	button		# the button widget to examine.
	n_chars		# the new width, in characters.
GtkFileChooserNative  *gtk_file_chooser_native_new (const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *accept_label, const gchar *cancel_label);	#创建对象:GtkFileChooserNative .
	title		#  Title of the native, or NULL . 
	return:		#  a new GtkFileChooserNative  
char  *gtk_file_chooser_native_get_accept_label (GtkFileChooserNative *self);	# Retrieves the custom label text for the accept button.
	self		# a GtFileChooserNative 
	return:		#  The custom label, or NULL for the default. This stringis owned by GTK+ and should not be modified or freed.  
void gtk_file_chooser_native_set_accept_label (GtkFileChooserNative *self, const char *accept_label);	# Sets the custom label text for the accept button.
	self		# a GtFileChooserNative 
	accept_label		#  custom label or NULL for the default. 
char  *gtk_file_chooser_native_get_cancel_label (GtkFileChooserNative *self);	# Retrieves the custom label text for the cancel button.
	self		# a GtFileChooserNative 
	return:		#  The custom label, or NULL for the default. This stringis owned by GTK+ and should not be modified or freed.  
void gtk_file_chooser_native_set_cancel_label (GtkFileChooserNative *self, const char *cancel_label);	# Sets the custom label text for the cancel button.
	self		# a GtFileChooserNative 
	cancel_label		#  custom label or NULL for the default. 
GtkWidget  *gtk_file_chooser_dialog_new (const gchar *title, GtkWindow *parent, GtkFileChooserAction action, const gchar *first_button_text, ...);	#创建对象:GtkFileChooserDialog . This function is analogous togtk_dialog_new_with_buttons() .
	title		#  Title of the dialog, or NULL . 
	return:		#  a new GtkFileChooserDialog  
GtkWidget  *gtk_file_chooser_widget_new (GtkFileChooserAction action);	#创建对象:GtkFileChooserWidget . This is a file chooser widget that canbe embedded in custom windows, and it is the same widget that is used byGtkFileChooserDialog .
	action		# Open or save mode for the widget
	return:		#  a new GtkFileChooserWidget  
gboolean <span class="c_punctuation">( *GtkFileFilterFunc<span class="c_punctuation">) (const GtkFileFilterInfo *filter_info, gpointer data);	# The type of function that is used with custom filters, seegtk_file_filter_add_custom() .
	filter_info		# a GtkFileFilterInfo that is filled accordingto the neededflags passed to 
	data		#  user data passed to 
	return:		#  TRUE if the file should be displayed 
GtkFileFilter  *gtk_file_filter_new (void );	#创建对象:GtkFileFilter with no rules added to it.Such a filter doesn’t accept any files, so is notparticularly useful until you add rules withgtk_file_filter_add_mime_type() , gtk_file_filter_add_pattern() ,or gtk_file_filter_add_custom() . To create a filterthat accepts any file, use:
	return:		#  a new GtkFileFilter  
void gtk_file_filter_set_name (GtkFileFilter *filter, const gchar *name);	# Sets the human-readable name of the filter; this is the stringthat will be displayed in the file selector user interface ifthere is a selectable list of filters.
	filter		# a GtkFileFilter 
	name		#  the human-readable-name for the filter, or NULL to remove any existing name. 
gchar  *gtk_file_filter_get_name (GtkFileFilter *filter);	# Gets the human-readable name for the filter. See gtk_file_filter_set_name() .
	filter		# a GtkFileFilter 
	return:		#  The human-readable name of the filter,or NULL . This value is owned by GTK+ and must notbe modified or freed.  
void gtk_file_filter_add_mime_type (GtkFileFilter *filter, const gchar *mime_type);	# Adds a rule allowing a given mime type to filter.
	filter		# A GtkFileFilter 
	mime_type		# name of a MIME type
void gtk_file_filter_add_pattern (GtkFileFilter *filter, const gchar *pattern);	# Adds a rule allowing a shell style glob to a filter.
	filter		# a GtkFileFilter 
	pattern		# a shell style glob
void gtk_file_filter_add_pixbuf_formats (GtkFileFilter *filter);	# Adds a rule allowing image files in the formats supportedby GdkPixbuf.
	filter		# a GtkFileFilter 
void gtk_file_filter_add_custom (GtkFileFilter *filter, GtkFileFilterFlags needed, GtkFileFilterFunc func, gpointer data, GDestroyNotify notify);	# Adds rule to a filter that allows files based on a custom callbackfunction. The bitfield needed which is passed in provides informationabout what sorts of information that the filter function needs;this allows GTK+ to avoid retrieving expensive information whenit isn’t needed by the filter.
	filter		# a GtkFileFilter 
	needed		# bitfield of flags indicating the information that the customfilter function needs.
	func		# callback function; if the function returns TRUE , thenthe file will be displayed.
	data		# data to pass to func
	notify		# function to call to free datawhen it is no longer needed.
GtkFileFilterFlags gtk_file_filter_get_needed (GtkFileFilter *filter);	# Gets the fields that need to be filled in for the GtkFileFilterInfo passed to gtk_file_filter_filter() 
	filter		# a GtkFileFilter 
	return:		#  bitfield of flags indicating needed fields whencalling gtk_file_filter_filter()  
gboolean gtk_file_filter_filter (GtkFileFilter *filter, const GtkFileFilterInfo *filter_info);	# Tests whether a file should be displayed according to filter.The GtkFileFilterInfo filter_info should includethe fields returned from gtk_file_filter_get_needed() .
	filter		# a GtkFileFilter 
	filter_info		# a GtkFileFilterInfo containing informationabout a file.
	return:		#  TRUE if the file should be displayed 
GtkFileFilter  *gtk_file_filter_new_from_gvariant (GVariant *variant);	# Deserialize a file filter from an a{sv} variant inthe format produced by gtk_file_filter_to_gvariant() .
	variant		# an a{sv} GVariant 
	return:		#  a new GtkFileFilter object.  
GVariant  *gtk_file_filter_to_gvariant (GtkFileFilter *filter);	# Serialize a file filter to an a{sv} variant.
	filter		# a GtkFileFilter 
	return:		#  a new, floating, GVariant .  
PangoFontFamily  *gtk_font_chooser_get_font_family (GtkFontChooser *fontchooser);	# Gets the PangoFontFamily representing the selected font family.Font families are a collection of font faces.
	fontchooser		# a GtkFontChooser 
	return:		#  A PangoFontFamily representing theselected font family, or NULL . The returned object is owned by fontchooserand must not be modified or freed.  
PangoFontFace  *gtk_font_chooser_get_font_face (GtkFontChooser *fontchooser);	# Gets the PangoFontFace representing the selected font groupdetails (i.e. family, slant, weight, width, etc).
	fontchooser		# a GtkFontChooser 
	return:		#  A PangoFontFace representing theselected font group details, or NULL . The returned object is owned byfontchooserand must not be modified or freed.  
gint gtk_font_chooser_get_font_size (GtkFontChooser *fontchooser);	# The selected font size.
	fontchooser		# a GtkFontChooser 
	return:		#  A n integer representing the selected font size,or -1 if no font size is selected. 
gchar  *gtk_font_chooser_get_font (GtkFontChooser *fontchooser);	# Gets the currently-selected font name.
	fontchooser		# a GtkFontChooser 
	return:		#  A string with the nameof the current font, or NULL if no font is selected. You mustfree this string with g_free() .  
void gtk_font_chooser_set_font (GtkFontChooser *fontchooser, const gchar *fontname);	# Sets the currently-selected font.
	fontchooser		# a GtkFontChooser 
	fontname		# a font name like “Helvetica 12” or “Times Bold 18”
PangoFontDescription  *gtk_font_chooser_get_font_desc (GtkFontChooser *fontchooser);	# Gets the currently-selected font.
	fontchooser		# a GtkFontChooser 
	return:		#  A PangoFontDescription for thecurrent font, or NULL if no font is selected.  
void gtk_font_chooser_set_font_desc (GtkFontChooser *fontchooser, const PangoFontDescription *font_desc);	# Sets the currently-selected font from font_desc.
	fontchooser		# a GtkFontChooser 
	font_desc		# a PangoFontDescription 
gchar  *gtk_font_chooser_get_preview_text (GtkFontChooser *fontchooser);	# Gets the text displayed in the preview area.
	fontchooser		# a GtkFontChooser 
	return:		#  the text displayed in thepreview area.  
void gtk_font_chooser_set_preview_text (GtkFontChooser *fontchooser, const gchar *text);	# Sets the text displayed in the preview area.The text is used to show how the selected font looks.
	fontchooser		# a GtkFontChooser 
	text		#  the text to display in the preview area. 
gboolean gtk_font_chooser_get_show_preview_entry (GtkFontChooser *fontchooser);	# Returns whether the preview entry is shown or not.
	fontchooser		# a GtkFontChooser 
	return:		#  TRUE if the preview entry is shownor FALSE if it is hidden. 
void gtk_font_chooser_set_show_preview_entry (GtkFontChooser *fontchooser, gboolean show_preview_entry);	# Shows or hides the editable preview entry.
	fontchooser		# a GtkFontChooser 
	show_preview_entry		# whether to show the editable preview entry or not
gboolean <span class="c_punctuation">( *GtkFontFilterFunc<span class="c_punctuation">) (const PangoFontFamily *family, const PangoFontFace *face, gpointer data);	# The type of function that is used for deciding what fonts getshown in a GtkFontChooser . See gtk_font_chooser_set_filter_func() .
	family		# a PangoFontFamily 
	face		# a PangoFontFace belonging to family
	data		#  user data passed to 
	return:		#  TRUE if the font should be displayed 
void gtk_font_chooser_set_filter_func (GtkFontChooser *fontchooser, GtkFontFilterFunc filter, gpointer user_data, GDestroyNotify destroy);	# Adds a filter function that decides which fonts to displayin the font chooser.
	fontchooser		# a GtkFontChooser 
	filter		#  a GtkFontFilterFunc , or NULL . 
void gtk_font_chooser_set_font_map (GtkFontChooser *fontchooser, PangoFontMap *fontmap);	# Sets a custom font map to use for this font chooser widget.A custom font map can be used to present application-specificfonts instead of or in addition to the normal system fonts.
	fontchooser		# a GtkFontChooser 
	fontmap		#  a PangoFontMap . 
PangoFontMap  *gtk_font_chooser_get_font_map (GtkFontChooser *fontchooser);	# Gets the custom font map of this font chooser widget,or NULL if it does not have one.
	fontchooser		# a GtkFontChooser 
	return:		#  a PangoFontMap , or NULL .  
GtkWidget  *gtk_font_button_new (void );	#创建对象:font picker widget.
	return:		#  a new font picker widget. 
GtkWidget  *gtk_font_button_new_with_font (const gchar *fontname);	#创建对象:font picker widget.
	fontname		# Name of font to display in font chooser dialog
	return:		#  a new font picker widget. 
gboolean gtk_font_button_set_font_name (GtkFontButton *font_button, const gchar *fontname);	# Sets or updates the currently-displayed font in font picker dialog.
	font_button		# a GtkFontButton 
	fontname		# Name of font to display in font chooser dialog
	return:		#  TRUE  
gchar  *gtk_font_button_get_font_name (GtkFontButton *font_button);	# Retrieves the name of the currently selected font. This name includesstyle and size information as well. If you want to render somethingwith the font, use this string with pango_font_description_from_string() .If you’re interested in peeking certain values (family name,style, size, weight) just query these properties from thePangoFontDescription object.
	font_button		# a GtkFontButton 
	return:		#  an internal copy of the font name which must not be freed. 
void gtk_font_button_set_show_style (GtkFontButton *font_button, gboolean show_style);	# If show_style is TRUE , the font style will be displayed along with name of the selected font.
	font_button		# a GtkFontButton 
	show_style		# TRUE if font style should be displayed in label.
gboolean gtk_font_button_get_show_style (GtkFontButton *font_button);	# Returns whether the name of the font style will be shown in the label.
	font_button		# a GtkFontButton 
	return:		#  whether the font style will be shown in the label. 
void gtk_font_button_set_show_size (GtkFontButton *font_button, gboolean show_size);	# If show_size is TRUE , the font size will be displayed along with the name of the selected font.
	font_button		# a GtkFontButton 
	show_size		# TRUE if font size should be displayed in dialog.
gboolean gtk_font_button_get_show_size (GtkFontButton *font_button);	# Returns whether the font size will be shown in the label.
	font_button		# a GtkFontButton 
	return:		#  whether the font size will be shown in the label. 
void gtk_font_button_set_use_font (GtkFontButton *font_button, gboolean use_font);	# If use_font is TRUE , the font name will be written using the selected font.
	font_button		# a GtkFontButton 
	use_font		# If TRUE , font name will be written using font chosen.
gboolean gtk_font_button_get_use_font (GtkFontButton *font_button);	# Returns whether the selected font is used in the label.
	font_button		# a GtkFontButton 
	return:		#  whether the selected font is used in the label. 
void gtk_font_button_set_use_size (GtkFontButton *font_button, gboolean use_size);	# If use_size is TRUE , the font name will be written using the selected size.
	font_button		# a GtkFontButton 
	use_size		# If TRUE , font name will be written using the selected size.
gboolean gtk_font_button_get_use_size (GtkFontButton *font_button);	# Returns whether the selected size is used in the label.
	font_button		# a GtkFontButton 
	return:		#  whether the selected size is used in the label. 
void gtk_font_button_set_title (GtkFontButton *font_button, const gchar *title);	# Sets the title for the font chooser dialog.
	font_button		# a GtkFontButton 
	title		# a string containing the font chooser dialog title
gchar  *gtk_font_button_get_title (GtkFontButton *font_button);	# Retrieves the title of the font chooser dialog.
	font_button		# a GtkFontButton 
	return:		#  an internal copy of the title string which must not be freed. 
GtkWidget  *gtk_font_chooser_widget_new (void );	#创建对象:GtkFontChooserWidget .
	return:		#  a new GtkFontChooserWidget  
GtkWidget  *gtk_font_chooser_dialog_new (const gchar *title, GtkWindow *parent);	#创建对象:GtkFontChooserDialog .
	title		#  Title of the dialog, or NULL . 
	return:		#  a new GtkFontChooserDialog  
GtkWidget  *gtk_places_sidebar_new (void );	#创建对象:GtkPlacesSidebar widget.
	return:		#  a newly created GtkPlacesSidebar  
void gtk_places_sidebar_set_open_flags (GtkPlacesSidebar *sidebar, GtkPlacesOpenFlags flags);	# Sets the way in which the calling application can open new locations fromthe places sidebar. For example, some applications only open locations“directly” into their main view, while others may support opening locationsin a new notebook tab or a new window.
	sidebar		# a places sidebar
	flags		# Bitmask of modes in which the calling application can open locations
GtkPlacesOpenFlags gtk_places_sidebar_get_open_flags (GtkPlacesSidebar *sidebar);	# Gets the open flags.
	sidebar		# a GtkPlacesSidebar 
	return:		#  the GtkPlacesOpenFlags of sidebar 
void gtk_places_sidebar_set_location (GtkPlacesSidebar *sidebar, GFile *location);	# Sets the location that is being shown in the widgets surrounding thesidebar, for example, in a folder view in a file manager. In turn, thesidebar will highlight that location if it is being shown in the list ofplaces, or it will unhighlight everything if the location is not among theplaces in the list.
	sidebar		# a places sidebar
	location		#  location to select, or NULL for no current path. 
GFile  *gtk_places_sidebar_get_location (GtkPlacesSidebar *sidebar);	# Gets the currently-selected location in the sidebar. This can be NULL whennothing is selected, for example, when gtk_places_sidebar_set_location() hasbeen called with a location that is not among the sidebar’s list of places toshow.
	sidebar		# a places sidebar
	return:		#  a GFile with the selected location, orNULL if nothing is visually selected.  
void gtk_places_sidebar_set_show_recent (GtkPlacesSidebar *sidebar, gboolean show_recent);	# Sets whether the sidebar should show an item for recent files.The default value for this option is determined by the desktopenvironment, but this function can be used to override it on aper-application basis.
	sidebar		# a places sidebar
	show_recent		# whether to show an item for recent files
gboolean gtk_places_sidebar_get_show_recent (GtkPlacesSidebar *sidebar);	# Returns the value previously set with gtk_places_sidebar_set_show_recent() 
	sidebar		# a places sidebar
	return:		#  TRUE if the sidebar will display a builtin shortcut for recent files 
void gtk_places_sidebar_set_show_desktop (GtkPlacesSidebar *sidebar, gboolean show_desktop);	# Sets whether the sidebar should show an item for the Desktop folder.The default value for this option is determined by the desktopenvironment and the user’s configuration, but this function can beused to override it on a per-application basis.
	sidebar		# a places sidebar
	show_desktop		# whether to show an item for the Desktop folder
gboolean gtk_places_sidebar_get_show_desktop (GtkPlacesSidebar *sidebar);	# Returns the value previously set with gtk_places_sidebar_set_show_desktop() 
	sidebar		# a places sidebar
	return:		#  TRUE if the sidebar will display a builtin shortcut to the desktop folder. 
void gtk_places_sidebar_add_shortcut (GtkPlacesSidebar *sidebar, GFile *location);	# Applications may want to present some folders in the places sidebar ifthey could be immediately useful to users. For example, a drawingprogram could add a “/usr/share/clipart” location when the sidebar isbeing used in an “Insert Clipart” dialog box.
	sidebar		# a places sidebar
	location		# location to add as an application-specific shortcut
void gtk_places_sidebar_remove_shortcut (GtkPlacesSidebar *sidebar, GFile *location);	# Removes an application-specific shortcut that has been previously beeninserted with gtk_places_sidebar_add_shortcut() . If the location is not ashortcut in the sidebar, then nothing is done.
	sidebar		# a places sidebar
	location		# location to remove
GSList  *gtk_places_sidebar_list_shortcuts (GtkPlacesSidebar *sidebar);	# Gets the list of shortcuts.
	sidebar		# a places sidebar
	return:		#  A GSList of GFile of the locations that have been added asapplication-specific shortcuts with gtk_places_sidebar_add_shortcut() .To free this list, you can use 
GFile  *gtk_places_sidebar_get_nth_bookmark (GtkPlacesSidebar *sidebar, gint n);	# This function queries the bookmarks added by the user to the places sidebar,and returns one of them. This function is used by GtkFileChooser to implementthe “Alt-1”, “Alt-2”, etc. shortcuts, which activate the cooresponding bookmark.
	sidebar		# a places sidebar
	n		# index of the bookmark to query
	return:		#  The bookmark specified by the index n, orNULL if no such index exist. Note that the indices start at 0, even thoughthe file chooser starts them with the keyboard shortcut "Alt-1".  
gboolean gtk_places_sidebar_get_local_only (GtkPlacesSidebar *sidebar);	# Returns the value previously set with gtk_places_sidebar_set_local_only() .
	sidebar		# a places sidebar
	return:		#  TRUE if the sidebar will only show local files. 
void gtk_places_sidebar_set_local_only (GtkPlacesSidebar *sidebar, gboolean local_only);	# Sets whether the sidebar should only show local files.
	sidebar		# a places sidebar
	local_only		# whether to show only local files
gboolean gtk_places_sidebar_get_show_enter_location (GtkPlacesSidebar *sidebar);	# Returns the value previously set with gtk_places_sidebar_set_show_enter_location() 
	sidebar		# a places sidebar
	return:		#  TRUE if the sidebar will display an “Enter Location” item. 
void gtk_places_sidebar_set_show_enter_location (GtkPlacesSidebar *sidebar, gboolean show_enter_location);	# Sets whether the sidebar should show an item for entering a location;this is off by default. An application may want to turn this on if manuallyentering URLs is an expected user action.
	sidebar		# a places sidebar
	show_enter_location		# whether to show an item to enter a location
gboolean gtk_places_sidebar_get_show_trash (GtkPlacesSidebar *sidebar);	# Returns the value previously set with gtk_places_sidebar_set_show_trash() 
	sidebar		# a places sidebar
	return:		#  TRUE if the sidebar will display a “Trash” item. 
void gtk_places_sidebar_set_show_trash (GtkPlacesSidebar *sidebar, gboolean show_trash);	# Sets whether the sidebar should show an item for the Trash location.
	sidebar		# a places sidebar
	show_trash		# whether to show an item for the Trash location
gboolean gtk_places_sidebar_get_show_other_locations (GtkPlacesSidebar *sidebar);	# Returns the value previously set with gtk_places_sidebar_set_show_other_locations() 
	sidebar		# a places sidebar
	return:		#  TRUE if the sidebar will display an “Other Locations” item. 
void gtk_places_sidebar_set_show_other_locations (GtkPlacesSidebar *sidebar, gboolean show_other_locations);	# Sets whether the sidebar should show an item for the application to showan Other Locations view; this is off by default. When set to TRUE , persistentdevices such as hard drives are hidden, otherwise they are shown in the sidebar.An application may want to turn this on if it implements a way for the user tosee and interact with drives and network servers directly.
	sidebar		# a places sidebar
	show_other_locations		# whether to show an item for the Other Locations view
void gtk_places_sidebar_set_drop_targets_visible (GtkPlacesSidebar *sidebar, gboolean visible, GdkDragContext *context);	# Make the GtkPlacesSidebar show drop targets, so it can show the availabledrop targets and a "new bookmark" row. This improves the Drag-and-Dropexperience of the user and allows applications to show all availabledrop targets at once.
	sidebar		# a places sidebar.
	visible		# whether to show the valid targets or not.
	context		# drag context used to ask the source about the action that wants toperform, so hints are more accurate.
GtkWidget  *gtk_frame_new (const gchar *label);	#创建对象:GtkFrame , with optional label label.If label is NULL , the label is omitted.
	label		#  the text to use as the label of the frame. 
	return:		#  a new GtkFrame widget 
void gtk_frame_set_label (GtkFrame *frame, const gchar *label);	# Removes the current “label-widget” . If label is not NULL , creates anew GtkLabel with that text and adds it as the “label-widget” .
	frame		# a GtkFrame 
	label		#  the text to use as the label of the frame. 
void gtk_frame_set_label_widget (GtkFrame *frame, GtkWidget *label_widget);	# Sets the “label-widget” for the frame. This is the widget thatwill appear embedded in the top edge of the frame as a title.
	frame		# a GtkFrame 
	label_widget		#  the new label widget. 
void gtk_frame_set_label_align (GtkFrame *frame, gfloat xalign, gfloat yalign);	# Sets the alignment of the frame widget’s label. Thedefault values for a newly created frame are 0.0 and 0.5.
	frame		# a GtkFrame 
	xalign		# The position of the label along the top edgeof the widget. A value of 0.0 represents left alignment;1.0 represents right alignment.
	yalign		# The y alignment of the label. A value of 0.0 aligns underthe frame; 1.0 aligns above the frame. If the values are exactly0.0 or 1.0 the gap in the frame won’t be painted because the labelwill be completely above or below the frame.
void gtk_frame_set_shadow_type (GtkFrame *frame, GtkShadowType type);	# Sets the “shadow-type” for frame, i.e. whether it is drawn without(GTK_SHADOW_NONE) or with (other values) a visible border. Values other thanGTK_SHADOW_NONE are treated identically by GtkFrame . The chosen type isapplied by removing or adding the .flat class to the main CSS node, frame.
	frame		# a GtkFrame 
	type		# the new GtkShadowType 
gchar  *gtk_frame_get_label (GtkFrame *frame);	# If the frame’s label widget is a GtkLabel , returns thetext in the label widget. (The frame will have a GtkLabel for the label widget if a non-NULL argument was passedto gtk_frame_new() .)
	frame		# a GtkFrame 
	return:		#  the text in the label, or NULL if therewas no label widget or the lable widget was nota GtkLabel . This string is owned by GTK+ andmust not be modified or freed.  
void gtk_frame_get_label_align (GtkFrame *frame, gfloat *xalign, gfloat *yalign);	# Retrieves the X and Y alignment of the frame’s label. Seegtk_frame_set_label_align() .
	frame		# a GtkFrame 
	xalign		#  location to store X alignment offrame’s label, or NULL . 
GtkWidget  *gtk_frame_get_label_widget (GtkFrame *frame);	# Retrieves the label widget for the frame. Seegtk_frame_set_label_widget() .
	frame		# a GtkFrame 
	return:		#  the label widget, or NULL ifthere is none.  
GtkShadowType gtk_frame_get_shadow_type (GtkFrame *frame);	# Retrieves the shadow type of the frame. Seegtk_frame_set_shadow_type() .
	frame		# a GtkFrame 
	return:		#  the current shadow type of the frame. 
GtkWidget  *gtk_separator_new (GtkOrientation orientation);	#创建对象:GtkSeparator with the given orientation.
	orientation		# the separator’s orientation.
	return:		#  a new GtkSeparator . 
GtkWidget  *gtk_scrollbar_new (GtkOrientation orientation, GtkAdjustment *adjustment);	#创建对象:scrollbar with the given orientation.
	orientation		# the scrollbar’s orientation.
	adjustment		#  the GtkAdjustment to use, or NULL to create a new adjustment. 
	return:		#  the new GtkScrollbar . 
GtkWidget  *gtk_scrolled_window_new (GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);	#创建对象:scrolled window.
	hadjustment		#  horizontal adjustment. 
	return:		#  a new scrolled window 
GtkAdjustment  *gtk_scrolled_window_get_hadjustment (GtkScrolledWindow *scrolled_window);	# Returns the horizontal scrollbar’s adjustment, used to connect thehorizontal scrollbar to the child widget’s horizontal scrollfunctionality.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the horizontal GtkAdjustment .  
void gtk_scrolled_window_set_hadjustment (GtkScrolledWindow *scrolled_window, GtkAdjustment *hadjustment);	# Sets the GtkAdjustment for the horizontal scrollbar.
	scrolled_window		# a GtkScrolledWindow 
	hadjustment		# horizontal scroll adjustment
GtkAdjustment  *gtk_scrolled_window_get_vadjustment (GtkScrolledWindow *scrolled_window);	# Returns the vertical scrollbar’s adjustment, used to connect thevertical scrollbar to the child widget’s vertical scroll functionality.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the vertical GtkAdjustment .  
void gtk_scrolled_window_set_vadjustment (GtkScrolledWindow *scrolled_window, GtkAdjustment *vadjustment);	# Sets the GtkAdjustment for the vertical scrollbar.
	scrolled_window		# a GtkScrolledWindow 
	vadjustment		# vertical scroll adjustment
GtkWidget  *gtk_scrolled_window_get_hscrollbar (GtkScrolledWindow *scrolled_window);	# Returns the horizontal scrollbar of scrolled_window.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the horizontal scrollbar of the scrolled window.  
GtkWidget  *gtk_scrolled_window_get_vscrollbar (GtkScrolledWindow *scrolled_window);	# Returns the vertical scrollbar of scrolled_window.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the vertical scrollbar of the scrolled window.  
void gtk_scrolled_window_get_policy (GtkScrolledWindow *scrolled_window, GtkPolicyType *hscrollbar_policy, GtkPolicyType *vscrollbar_policy);	# Retrieves the current policy values for the horizontal and verticalscrollbars. See gtk_scrolled_window_set_policy() .
	scrolled_window		# a GtkScrolledWindow 
	hscrollbar_policy		#  location to store the policyfor the horizontal scrollbar, or NULL . 
void gtk_scrolled_window_set_policy (GtkScrolledWindow *scrolled_window, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy);	# Sets the scrollbar policy for the horizontal and vertical scrollbars.
	scrolled_window		# a GtkScrolledWindow 
	hscrollbar_policy		# policy for horizontal bar
	vscrollbar_policy		# policy for vertical bar
GtkCornerType gtk_scrolled_window_get_placement (GtkScrolledWindow *scrolled_window);	# Gets the placement of the contents with respect to the scrollbarsfor the scrolled window. See gtk_scrolled_window_set_placement() .
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the current placement value. 
void gtk_scrolled_window_set_placement (GtkScrolledWindow *scrolled_window, GtkCornerType window_placement);	# Sets the placement of the contents with respect to the scrollbarsfor the scrolled window.
	scrolled_window		# a GtkScrolledWindow 
	window_placement		# position of the child window
void gtk_scrolled_window_unset_placement (GtkScrolledWindow *scrolled_window);	# Unsets the placement of the contents with respect to the scrollbarsfor the scrolled window. If no window placement is set for a scrolledwindow, it defaults to GTK_CORNER_TOP_LEFT .
	scrolled_window		# a GtkScrolledWindow 
GtkShadowType gtk_scrolled_window_get_shadow_type (GtkScrolledWindow *scrolled_window);	# Gets the shadow type of the scrolled window. See gtk_scrolled_window_set_shadow_type() .
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the current shadow type 
void gtk_scrolled_window_set_shadow_type (GtkScrolledWindow *scrolled_window, GtkShadowType type);	# Changes the type of shadow drawn around the contents ofscrolled_window.
	scrolled_window		# a GtkScrolledWindow 
	type		# kind of shadow to draw around scrolled window contents
gboolean gtk_scrolled_window_get_kinetic_scrolling (GtkScrolledWindow *scrolled_window);	# Returns the specified kinetic scrolling behavior.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the scrolling behavior flags. 
void gtk_scrolled_window_set_kinetic_scrolling (GtkScrolledWindow *scrolled_window, gboolean kinetic_scrolling);	# Turns kinetic scrolling on or off.Kinetic scrolling only applies to devices with sourceGDK_SOURCE_TOUCHSCREEN .
	scrolled_window		# a GtkScrolledWindow 
	kinetic_scrolling		# TRUE to enable kinetic scrolling
gboolean gtk_scrolled_window_get_capture_button_press (GtkScrolledWindow *scrolled_window);	# Return whether button presses are captured during kineticscrolling. See gtk_scrolled_window_set_capture_button_press() .
	scrolled_window		# a GtkScrolledWindow 
	return:		#  TRUE if button presses are captured during kinetic scrolling 
void gtk_scrolled_window_set_capture_button_press (GtkScrolledWindow *scrolled_window, gboolean capture_button_press);	# Changes the behaviour of scrolled_window with regard to the initialevent that possibly starts kinetic scrolling. When capture_button_pressis set to TRUE , the event is captured by the scrolled window, andthen later replayed if it is meant to go to the child widget.
	scrolled_window		# a GtkScrolledWindow 
	capture_button_press		# TRUE to capture button presses
gboolean gtk_scrolled_window_get_overlay_scrolling (GtkScrolledWindow *scrolled_window);	# Returns whether overlay scrolling is enabled for this scrolled window.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  TRUE if overlay scrolling is enabled 
void gtk_scrolled_window_set_overlay_scrolling (GtkScrolledWindow *scrolled_window, gboolean overlay_scrolling);	# Enables or disables overlay scrolling for this scrolled window.
	scrolled_window		# a GtkScrolledWindow 
	overlay_scrolling		# whether to enable overlay scrolling
gint gtk_scrolled_window_get_min_content_width (GtkScrolledWindow *scrolled_window);	# Gets the minimum content width of scrolled_window, or -1 if not set.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the minimum content width 
void gtk_scrolled_window_set_min_content_width (GtkScrolledWindow *scrolled_window, gint width);	# Sets the minimum width that scrolled_window should keep visible.Note that this can and (usually will) be smaller than the minimumsize of the content.
	scrolled_window		# a GtkScrolledWindow 
	width		# the minimal content width
gint gtk_scrolled_window_get_min_content_height (GtkScrolledWindow *scrolled_window);	# Gets the minimal content height of scrolled_window, or -1 if not set.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the minimal content height 
void gtk_scrolled_window_set_min_content_height (GtkScrolledWindow *scrolled_window, gint height);	# Sets the minimum height that scrolled_window should keep visible.Note that this can and (usually will) be smaller than the minimumsize of the content.
	scrolled_window		# a GtkScrolledWindow 
	height		# the minimal content height
gint gtk_scrolled_window_get_max_content_width (GtkScrolledWindow *scrolled_window);	# Returns the maximum content width set.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the maximum content width, or -1 
void gtk_scrolled_window_set_max_content_width (GtkScrolledWindow *scrolled_window, gint width);	# Sets the maximum width that scrolled_window should keep visible. Thescrolled_window will grow up to this width before it starts scrollingthe content.
	scrolled_window		# a GtkScrolledWindow 
	width		# the maximum content width
gint gtk_scrolled_window_get_max_content_height (GtkScrolledWindow *scrolled_window);	# Returns the maximum content height set.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  the maximum content height, or -1 
void gtk_scrolled_window_set_max_content_height (GtkScrolledWindow *scrolled_window, gint height);	# Sets the maximum height that scrolled_window should keep visible. Thescrolled_window will grow up to this height before it starts scrollingthe content.
	scrolled_window		# a GtkScrolledWindow 
	height		# the maximum content height
gboolean gtk_scrolled_window_get_propagate_natural_width (GtkScrolledWindow *scrolled_window);	# Reports whether the natural width of the child will be calculated and propagatedthrough the scrolled windows requested natural width.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  whether natural width propagation is enabled. 
void gtk_scrolled_window_set_propagate_natural_width (GtkScrolledWindow *scrolled_window, gboolean propagate);	# Sets whether the natural width of the child should be calculated and propagatedthrough the scrolled windows requested natural width.
	scrolled_window		# a GtkScrolledWindow 
	propagate		# whether to propagate natural width
gboolean gtk_scrolled_window_get_propagate_natural_height (GtkScrolledWindow *scrolled_window);	# Reports whether the natural height of the child will be calculated and propagatedthrough the scrolled windows requested natural height.
	scrolled_window		# a GtkScrolledWindow 
	return:		#  whether natural height propagation is enabled. 
void gtk_scrolled_window_set_propagate_natural_height (GtkScrolledWindow *scrolled_window, gboolean propagate);	# Sets whether the natural height of the child should be calculated and propagatedthrough the scrolled windows requested natural height.
	scrolled_window		# a GtkScrolledWindow 
	propagate		# whether to propagate natural height
GtkAdjustment  *gtk_scrollable_get_hadjustment (GtkScrollable *scrollable);	# Retrieves the GtkAdjustment used for horizontal scrolling.
	scrollable		# a GtkScrollable 
	return:		#  horizontal GtkAdjustment .  
void gtk_scrollable_set_hadjustment (GtkScrollable *scrollable, GtkAdjustment *hadjustment);	# Sets the horizontal adjustment of the GtkScrollable .
	scrollable		# a GtkScrollable 
	hadjustment		#  a GtkAdjustment . 
GtkAdjustment  *gtk_scrollable_get_vadjustment (GtkScrollable *scrollable);	# Retrieves the GtkAdjustment used for vertical scrolling.
	scrollable		# a GtkScrollable 
	return:		#  vertical GtkAdjustment .  
void gtk_scrollable_set_vadjustment (GtkScrollable *scrollable, GtkAdjustment *vadjustment);	# Sets the vertical adjustment of the GtkScrollable .
	scrollable		# a GtkScrollable 
	vadjustment		#  a GtkAdjustment . 
GtkScrollablePolicy gtk_scrollable_get_hscroll_policy (GtkScrollable *scrollable);	# Gets the horizontal GtkScrollablePolicy .
	scrollable		# a GtkScrollable 
	return:		#  The horizontal GtkScrollablePolicy . 
void gtk_scrollable_set_hscroll_policy (GtkScrollable *scrollable, GtkScrollablePolicy policy);	# Sets the GtkScrollablePolicy to determine whetherhorizontal scrolling should start below the minimum width orbelow the natural width.
	scrollable		# a GtkScrollable 
	policy		# the horizontal GtkScrollablePolicy 
GtkScrollablePolicy gtk_scrollable_get_vscroll_policy (GtkScrollable *scrollable);	# Gets the vertical GtkScrollablePolicy .
	scrollable		# a GtkScrollable 
	return:		#  The vertical GtkScrollablePolicy . 
void gtk_scrollable_set_vscroll_policy (GtkScrollable *scrollable, GtkScrollablePolicy policy);	# Sets the GtkScrollablePolicy to determine whethervertical scrolling should start below the minimum height orbelow the natural height.
	scrollable		# a GtkScrollable 
	policy		# the vertical GtkScrollablePolicy 
gboolean gtk_scrollable_get_border (GtkScrollable *scrollable, GtkBorder *border);	# Returns the size of a non-scrolling border around theoutside of the scrollable. An example for this wouldbe treeview headers. GTK+ can use this information todisplay overlayed graphics, like the overshoot indication,at the right position.
	scrollable		# a GtkScrollable 
	border		#  return location for the results. 
	return:		#  TRUE if borderhas been set 
GtkPrintOperation  *gtk_print_operation_new (void );	#创建对象:GtkPrintOperation .
	return:		#  a new GtkPrintOperation  
void gtk_print_operation_set_allow_async (GtkPrintOperation *op, gboolean allow_async);	# Sets whether the gtk_print_operation_run() may returnbefore the print operation is completed. Note thatsome platforms may not allow asynchronous operation.
	op		# a GtkPrintOperation 
	allow_async		# TRUE to allow asynchronous operation
void gtk_print_operation_get_error (GtkPrintOperation *op, GError **error);	# Call this when the result of a print operation isGTK_PRINT_OPERATION_RESULT_ERROR , either as returned by gtk_print_operation_run() , or in the “done” signal handler. The returned GError will contain more details on what went wrong.
	op		# a GtkPrintOperation 
	error		# return location for the error
void gtk_print_operation_set_default_page_setup (GtkPrintOperation *op, GtkPageSetup *default_page_setup);	# Makes default_page_setup the default page setup for op.
	op		# a GtkPrintOperation 
	default_page_setup		#  a GtkPageSetup , or NULL . 
GtkPageSetup  *gtk_print_operation_get_default_page_setup (GtkPrintOperation *op);	# Returns the default page setup, seegtk_print_operation_set_default_page_setup() .
	op		# a GtkPrintOperation 
	return:		#  the default page setup.  
void gtk_print_operation_set_print_settings (GtkPrintOperation *op, GtkPrintSettings *print_settings);	# Sets the print settings for op. This is typically used tore-establish print settings from a previous print operation,see gtk_print_operation_run() .
	op		# a GtkPrintOperation 
	print_settings		#  GtkPrintSettings . 
GtkPrintSettings  *gtk_print_operation_get_print_settings (GtkPrintOperation *op);	# Returns the current print settings.
	op		# a GtkPrintOperation 
	return:		#  the current print settings of op.  
void gtk_print_operation_set_job_name (GtkPrintOperation *op, const gchar *job_name);	# Sets the name of the print job. The name is used to identify the job (e.g. in monitoring applications like eggcups). 
	op		# a GtkPrintOperation 
	job_name		# a string that identifies the print job
void gtk_print_operation_set_n_pages (GtkPrintOperation *op, gint n_pages);	# Sets the number of pages in the document. 
	op		# a GtkPrintOperation 
	n_pages		# the number of pages
gint gtk_print_operation_get_n_pages_to_print (GtkPrintOperation *op);	# Returns the number of pages that will be printed.
	op		# a GtkPrintOperation 
	return:		#  the number of pages that will be printed 
void gtk_print_operation_set_current_page (GtkPrintOperation *op, gint current_page);	# Sets the current page.
	op		# a GtkPrintOperation 
	current_page		# the current page, 0-based
void gtk_print_operation_set_use_full_page (GtkPrintOperation *op, gboolean full_page);	# If full_page is TRUE , the transformation for the cairo context obtained from GtkPrintContext puts the origin at the top left corner of the page (which may not be the top left corner of the sheet, depending on page orientation and the number of pages per sheet). Otherwise, the origin is at the top left corner of theimageable area (i.e. inside the margins).
	op		# a GtkPrintOperation 
	full_page		# TRUE to set up the GtkPrintContext for the full page
void gtk_print_operation_set_unit (GtkPrintOperation *op, GtkUnit unit);	# Sets up the transformation for the cairo context obtained fromGtkPrintContext in such a way that distances are measured in units of unit.
	op		# a GtkPrintOperation 
	unit		# the unit to use
void gtk_print_operation_set_export_filename (GtkPrintOperation *op, const gchar *filename);	# Sets up the GtkPrintOperation to generate a file insteadof showing the print dialog. The indended use of this functionis for implementing “Export to PDF” actions. Currently, PDFis the only supported format.
	op		# a GtkPrintOperation 
	filename		#  the filename for the exported file. 
void gtk_print_operation_set_show_progress (GtkPrintOperation *op, gboolean show_progress);	# If show_progress is TRUE , the print operation will show a progress dialog during the print operation.
	op		# a GtkPrintOperation 
	show_progress		# TRUE to show a progress dialog
void gtk_print_operation_set_track_print_status (GtkPrintOperation *op, gboolean track_status);	# If track_status is TRUE , the print operation will try to continue reporton the status of the print job in the printer queues and printer. Thiscan allow your application to show things like “out of paper” issues,and when the print job actually reaches the printer.
	op		# a GtkPrintOperation 
	track_status		# TRUE to track status after printing
void gtk_print_operation_set_custom_tab_label (GtkPrintOperation *op, const gchar *label);	# Sets the label for the tab holding custom widgets.
	op		# a GtkPrintOperation 
	label		#  the label to use, or NULL to use the default label. 
GtkPrintOperationResult gtk_print_operation_run (GtkPrintOperation *op, GtkPrintOperationAction action, GtkWindow *parent, GError **error);	# Runs the print operation, by first letting the user modifyprint settings in the print dialog, and then print the document.
	op		# a GtkPrintOperation 
	action		# the action to start
	parent		#  Transient parent of the dialog. 
	return:		#  the result of the print operation. A return value ofGTK_PRINT_OPERATION_RESULT_APPLY indicates that the printing wascompleted successfully. In this case, it is a good idea to obtainthe used print settings with gtk_print_operation_get_print_settings() and store them for reuse with the next print operation. A value ofGTK_PRINT_OPERATION_RESULT_IN_PROGRESS means the operation is runningasynchronously, and will emit the “done” signal whendone. 
void gtk_print_operation_cancel (GtkPrintOperation *op);	# Cancels a running print operation. This function maybe called from a “begin-print” , “paginate” or “draw-page” signal handler to stop the currently running print operation.
	op		# a GtkPrintOperation 
void gtk_print_operation_draw_page_finish (GtkPrintOperation *op);	# Signalize that drawing of particular page is complete.
	op		# a GtkPrintOperation 
void gtk_print_operation_set_defer_drawing (GtkPrintOperation *op);	# Sets up the GtkPrintOperation to wait for calling ofgtk_print_operation_draw_page_finish() from application. It canbe used for drawing page in another thread.
	op		# a GtkPrintOperation 
GtkPrintStatus gtk_print_operation_get_status (GtkPrintOperation *op);	# Returns the status of the print operation. Also see gtk_print_operation_get_status_string() .
	op		# a GtkPrintOperation 
	return:		#  the status of the print operation 
gchar  *gtk_print_operation_get_status_string (GtkPrintOperation *op);	# Returns a string representation of the status of the print operation. The string is translated and suitablefor displaying the print status e.g. in a GtkStatusbar .
	op		# a GtkPrintOperation 
	return:		#  a string representation of the statusof the print operation 
gboolean gtk_print_operation_is_finished (GtkPrintOperation *op);	# A convenience function to find out if the print operationis finished, either successfully (GTK_PRINT_STATUS_FINISHED )or unsuccessfully (GTK_PRINT_STATUS_FINISHED_ABORTED ).
	op		# a GtkPrintOperation 
	return:		#  TRUE , if the print operation is finished. 
void gtk_print_operation_set_support_selection (GtkPrintOperation *op, gboolean support_selection);	# Sets whether selection is supported by GtkPrintOperation .
	op		# a GtkPrintOperation 
	support_selection		# TRUE to support selection
gboolean gtk_print_operation_get_support_selection (GtkPrintOperation *op);	# Gets the value of “support-selection” property.
	op		# a GtkPrintOperation 
	return:		#  whether the application supports print of selection 
void gtk_print_operation_set_has_selection (GtkPrintOperation *op, gboolean has_selection);	# Sets whether there is a selection to print.
	op		# a GtkPrintOperation 
	has_selection		# TRUE indicates that a selection exists
gboolean gtk_print_operation_get_has_selection (GtkPrintOperation *op);	# Gets the value of “has-selection” property.
	op		# a GtkPrintOperation 
	return:		#  whether there is a selection 
void gtk_print_operation_set_embed_page_setup (GtkPrintOperation *op, gboolean embed);	# Embed page size combo box and orientation combo box into page setup page.Selected page setup is stored as default page setup in GtkPrintOperation .
	op		# a GtkPrintOperation 
	embed		# TRUE to embed page setup selection in the GtkPrintUnixDialog 
gboolean gtk_print_operation_get_embed_page_setup (GtkPrintOperation *op);	# Gets the value of “embed-page-setup” property.
	op		# a GtkPrintOperation 
	return:		#  whether page setup selection combos are embedded 
GtkPageSetup  *gtk_print_run_page_setup_dialog (GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings);	# Runs a page setup dialog, letting the user modify the values frompage_setup. If the user cancels the dialog, the returned GtkPageSetup is identical to the passed in page_setup, otherwise it contains the modifications done in the dialog.
	parent		#  transient parent. 
	return:		#  a new GtkPageSetup .  
void <span class="c_punctuation">( *GtkPageSetupDoneFunc<span class="c_punctuation">) (GtkPageSetup *page_setup, gpointer data);	# The type of function that is passed togtk_print_run_page_setup_dialog_async() .
	page_setup		# the GtkPageSetup that has been
	data		#  user data that has been passed to
void gtk_print_run_page_setup_dialog_async (GtkWindow *parent, GtkPageSetup *page_setup, GtkPrintSettings *settings, GtkPageSetupDoneFunc done_cb, gpointer data);	# Runs a page setup dialog, letting the user modify the values from page_setup. 
	parent		#  transient parent, or NULL . 
	done_cb		#  a function to call when the user savesthe modified page setup. 
	data		# user data to pass to done_cb
void gtk_print_operation_preview_end_preview (GtkPrintOperationPreview *preview);	# Ends a preview. 
	preview		# a GtkPrintOperationPreview 
gboolean gtk_print_operation_preview_is_selected (GtkPrintOperationPreview *preview, gint page_nr);	# Returns whether the given page is included in the set of pages thathave been selected for printing.
	preview		# a GtkPrintOperationPreview 
	page_nr		# a page number
	return:		#  TRUE if the page has been selected for printing 
void gtk_print_operation_preview_render_page (GtkPrintOperationPreview *preview, gint page_nr);	# Renders a page to the preview, using the print context thatwas passed to the “preview” handler togetherwith preview.
	preview		# a GtkPrintOperationPreview 
	page_nr		# the page to render
cairo_t  *gtk_print_context_get_cairo_context (GtkPrintContext *context);	# Obtains the cairo context that is associated with theGtkPrintContext .
	context		# a GtkPrintContext 
	return:		#  the cairo context of context.  
void gtk_print_context_set_cairo_context (GtkPrintContext *context, cairo_t *cr, double dpi_x, double dpi_y);	# Sets a new cairo context on a print context. 
	context		# a GtkPrintContext 
	cr		# the cairo context
	dpi_x		# the horizontal resolution to use with cr
	dpi_y		# the vertical resolution to use with cr
GtkPageSetup  *gtk_print_context_get_page_setup (GtkPrintContext *context);	# Obtains the GtkPageSetup that determines the pagedimensions of the GtkPrintContext .
	context		# a GtkPrintContext 
	return:		#  the page setup of context.  
gdouble gtk_print_context_get_width (GtkPrintContext *context);	# Obtains the width of the GtkPrintContext , in pixels.
	context		# a GtkPrintContext 
	return:		#  the width of context 
gdouble gtk_print_context_get_height (GtkPrintContext *context);	# Obtains the height of the GtkPrintContext , in pixels.
	context		# a GtkPrintContext 
	return:		#  the height of context 
gdouble gtk_print_context_get_dpi_x (GtkPrintContext *context);	# Obtains the horizontal resolution of the GtkPrintContext ,in dots per inch.
	context		# a GtkPrintContext 
	return:		#  the horizontal resolution of context 
gdouble gtk_print_context_get_dpi_y (GtkPrintContext *context);	# Obtains the vertical resolution of the GtkPrintContext ,in dots per inch.
	context		# a GtkPrintContext 
	return:		#  the vertical resolution of context 
PangoFontMap  *gtk_print_context_get_pango_fontmap (GtkPrintContext *context);	# Returns a PangoFontMap that is suitable for usewith the GtkPrintContext .
	context		# a GtkPrintContext 
	return:		#  the font map of context.  
PangoContext  *gtk_print_context_create_pango_context (GtkPrintContext *context);	#创建对象:PangoContext that can be used with theGtkPrintContext .
	context		# a GtkPrintContext 
	return:		#  a new Pango context for context.  
PangoLayout  *gtk_print_context_create_pango_layout (GtkPrintContext *context);	#创建对象:PangoLayout that is suitable for usewith the GtkPrintContext .
	context		# a GtkPrintContext 
	return:		#  a new Pango layout for context.  
gboolean gtk_print_context_get_hard_margins (GtkPrintContext *context, gdouble *top, gdouble *bottom, gdouble *left, gdouble *right);	# Obtains the hardware printer margins of the GtkPrintContext , in units.
	context		# a GtkPrintContext 
	top		#  top hardware printer margin. 
	return:		#  TRUE if the hard margins were retrieved 
void <span class="c_punctuation">( *GtkPrintSettingsFunc<span class="c_punctuation">) (const gchar *key, const gchar *value, gpointer user_data);	# void <span class="c_punctuation">( *GtkPrintSettingsFunc<span class="c_punctuation">) (const gchar *key, const gchar *value, gpointer user_data);</pre></div><hr>
GtkPrintSettings  *gtk_print_settings_new (void );	#创建对象:GtkPrintSettings object.
	return:		#  a new GtkPrintSettings object 
GtkPrintSettings  *gtk_print_settings_copy (GtkPrintSettings *other);	# Copies a GtkPrintSettings object.
	other		# a GtkPrintSettings 
	return:		#  a newly allocated copy of other.  
gboolean gtk_print_settings_has_key (GtkPrintSettings *settings, const gchar *key);	# Returns TRUE , if a value is associated with key.
	settings		# a GtkPrintSettings 
	key		# a key
	return:		#  TRUE , if keyhas a value 
gchar  *gtk_print_settings_get (GtkPrintSettings *settings, const gchar *key);	# Looks up the string value associated with key.
	settings		# a GtkPrintSettings 
	key		# a key
	return:		#  the string value for key 
void gtk_print_settings_set (GtkPrintSettings *settings, const gchar *key, const gchar *value);	# Associates value with key.
	settings		# a GtkPrintSettings 
	key		# a key
	value		#  a string value, or NULL . 
void gtk_print_settings_unset (GtkPrintSettings *settings, const gchar *key);	# Removes any value associated with key. This has the same effect as setting the value to NULL .
	settings		# a GtkPrintSettings 
	key		# a key
void gtk_print_settings_foreach (GtkPrintSettings *settings, GtkPrintSettingsFunc func, gpointer user_data);	# Calls func for each key-value pair of settings.
	settings		# a GtkPrintSettings 
	func		#  the function to call. 
	user_data		# user data for func
gboolean gtk_print_settings_get_bool (GtkPrintSettings *settings, const gchar *key);	# Returns the boolean represented by the valuethat is associated with key. 
	settings		# a GtkPrintSettings 
	key		# a key
	return:		#  TRUE , if keymaps to a true value. 
void gtk_print_settings_set_bool (GtkPrintSettings *settings, const gchar *key, gboolean value);	# Sets key to a boolean value.
	settings		# a GtkPrintSettings 
	key		# a key
	value		# a boolean
gdouble gtk_print_settings_get_double (GtkPrintSettings *settings, const gchar *key);	# Returns the double value associated with key, or 0.
	settings		# a GtkPrintSettings 
	key		# a key
	return:		#  the double value of key 
gdouble gtk_print_settings_get_double_with_default (GtkPrintSettings *settings, const gchar *key, gdouble def);	# Returns the floating point number represented by the value that is associated with key, or default_valif the value does not represent a floating point number.
	settings		# a GtkPrintSettings 
	key		# a key
	def		# the default value
	return:		#  the floating point number associated with key 
void gtk_print_settings_set_double (GtkPrintSettings *settings, const gchar *key, gdouble value);	# Sets key to a double value.
	settings		# a GtkPrintSettings 
	key		# a key 
	value		# a double value
gdouble gtk_print_settings_get_length (GtkPrintSettings *settings, const gchar *key, GtkUnit unit);	# Returns the value associated with key, interpretedas a length. The returned value is converted to units.
	settings		# a GtkPrintSettings 
	key		# a key
	unit		# the unit of the return value
	return:		#  the length value of key, converted to unit 
void gtk_print_settings_set_length (GtkPrintSettings *settings, const gchar *key, gdouble value, GtkUnit unit);	# Associates a length in units of unit with key.
	settings		# a GtkPrintSettings 
	key		# a key
	value		# a length
	unit		# the unit of length
gint gtk_print_settings_get_int (GtkPrintSettings *settings, const gchar *key);	# Returns the integer value of key, or 0.
	settings		# a GtkPrintSettings 
	key		# a key
	return:		#  the integer value of key 
gint gtk_print_settings_get_int_with_default (GtkPrintSettings *settings, const gchar *key, gint def);	# Returns the value of key, interpreted asan integer, or the default value.
	settings		# a GtkPrintSettings 
	key		# a key
	def		# the default value
	return:		#  the integer value of key 
void gtk_print_settings_set_int (GtkPrintSettings *settings, const gchar *key, gint value);	# Sets key to an integer value.
	settings		# a GtkPrintSettings 
	key		# a key
	value		# an integer 
gchar  *gtk_print_settings_get_printer (GtkPrintSettings *settings);	# Convenience function to obtain the value of GTK_PRINT_SETTINGS_PRINTER .
	settings		# a GtkPrintSettings 
	return:		#  the printer name 
void gtk_print_settings_set_printer (GtkPrintSettings *settings, const gchar *printer);	# Convenience function to set GTK_PRINT_SETTINGS_PRINTER to printer.
	settings		# a GtkPrintSettings 
	printer		# the printer name
GtkPageOrientation gtk_print_settings_get_orientation (GtkPrintSettings *settings);	# Get the value of GTK_PRINT_SETTINGS_ORIENTATION , converted to a GtkPageOrientation .
	settings		# a GtkPrintSettings 
	return:		#  the orientation 
void gtk_print_settings_set_orientation (GtkPrintSettings *settings, GtkPageOrientation orientation);	# Sets the value of GTK_PRINT_SETTINGS_ORIENTATION .
	settings		# a GtkPrintSettings 
	orientation		# a page orientation
GtkPaperSize  *gtk_print_settings_get_paper_size (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT , converted to a GtkPaperSize .
	settings		# a GtkPrintSettings 
	return:		#  the paper size 
void gtk_print_settings_set_paper_size (GtkPrintSettings *settings, GtkPaperSize *paper_size);	# Sets the value of GTK_PRINT_SETTINGS_PAPER_FORMAT ,GTK_PRINT_SETTINGS_PAPER_WIDTH andGTK_PRINT_SETTINGS_PAPER_HEIGHT .
	settings		# a GtkPrintSettings 
	paper_size		# a paper size
gdouble gtk_print_settings_get_paper_width (GtkPrintSettings *settings, GtkUnit unit);	# Gets the value of GTK_PRINT_SETTINGS_PAPER_WIDTH ,converted to unit.
	settings		# a GtkPrintSettings 
	unit		# the unit for the return value
	return:		#  the paper width, in units of unit 
void gtk_print_settings_set_paper_width (GtkPrintSettings *settings, gdouble width, GtkUnit unit);	# Sets the value of GTK_PRINT_SETTINGS_PAPER_WIDTH .
	settings		# a GtkPrintSettings 
	width		# the paper width
	unit		# the units of width
gdouble gtk_print_settings_get_paper_height (GtkPrintSettings *settings, GtkUnit unit);	# Gets the value of GTK_PRINT_SETTINGS_PAPER_HEIGHT ,converted to unit.
	settings		# a GtkPrintSettings 
	unit		# the unit for the return value
	return:		#  the paper height, in units of unit 
void gtk_print_settings_set_paper_height (GtkPrintSettings *settings, gdouble height, GtkUnit unit);	# Sets the value of GTK_PRINT_SETTINGS_PAPER_HEIGHT .
	settings		# a GtkPrintSettings 
	height		# the paper height
	unit		# the units of height
gboolean gtk_print_settings_get_use_color (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_USE_COLOR .
	settings		# a GtkPrintSettings 
	return:		#  whether to use color 
void gtk_print_settings_set_use_color (GtkPrintSettings *settings, gboolean use_color);	# Sets the value of GTK_PRINT_SETTINGS_USE_COLOR .
	settings		# a GtkPrintSettings 
	use_color		# whether to use color
gboolean gtk_print_settings_get_collate (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_COLLATE .
	settings		# a GtkPrintSettings 
	return:		#  whether to collate the printed pages 
void gtk_print_settings_set_collate (GtkPrintSettings *settings, gboolean collate);	# Sets the value of GTK_PRINT_SETTINGS_COLLATE .
	settings		# a GtkPrintSettings 
	collate		# whether to collate the output
gboolean gtk_print_settings_get_reverse (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_REVERSE .
	settings		# a GtkPrintSettings 
	return:		#  whether to reverse the order of the printed pages 
void gtk_print_settings_set_reverse (GtkPrintSettings *settings, gboolean reverse);	# Sets the value of GTK_PRINT_SETTINGS_REVERSE .
	settings		# a GtkPrintSettings 
	reverse		# whether to reverse the output
GtkPrintDuplex gtk_print_settings_get_duplex (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_DUPLEX .
	settings		# a GtkPrintSettings 
	return:		#  whether to print the output in duplex. 
void gtk_print_settings_set_duplex (GtkPrintSettings *settings, GtkPrintDuplex duplex);	# Sets the value of GTK_PRINT_SETTINGS_DUPLEX .
	settings		# a GtkPrintSettings 
	duplex		# a GtkPrintDuplex value
GtkPrintQuality gtk_print_settings_get_quality (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_QUALITY .
	settings		# a GtkPrintSettings 
	return:		#  the print quality 
void gtk_print_settings_set_quality (GtkPrintSettings *settings, GtkPrintQuality quality);	# Sets the value of GTK_PRINT_SETTINGS_QUALITY .
	settings		# a GtkPrintSettings 
	quality		# a GtkPrintQuality value
gint gtk_print_settings_get_n_copies (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_N_COPIES .
	settings		# a GtkPrintSettings 
	return:		#  the number of copies to print 
void gtk_print_settings_set_n_copies (GtkPrintSettings *settings, gint num_copies);	# Sets the value of GTK_PRINT_SETTINGS_N_COPIES .
	settings		# a GtkPrintSettings 
	num_copies		# the number of copies 
gint gtk_print_settings_get_number_up (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_NUMBER_UP .
	settings		# a GtkPrintSettings 
	return:		#  the number of pages per sheet 
void gtk_print_settings_set_number_up (GtkPrintSettings *settings, gint number_up);	# Sets the value of GTK_PRINT_SETTINGS_NUMBER_UP .
	settings		# a GtkPrintSettings 
	number_up		# the number of pages per sheet 
GtkNumberUpLayout gtk_print_settings_get_number_up_layout (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT .
	settings		# a GtkPrintSettings 
	return:		#  layout of page in number-up mode 
void gtk_print_settings_set_number_up_layout (GtkPrintSettings *settings, GtkNumberUpLayout number_up_layout);	# Sets the value of GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT .
	settings		# a GtkPrintSettings 
	number_up_layout		# a GtkNumberUpLayout value
gint gtk_print_settings_get_resolution (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_RESOLUTION .
	settings		# a GtkPrintSettings 
	return:		#  the resolution in dpi 
void gtk_print_settings_set_resolution (GtkPrintSettings *settings, gint resolution);	# Sets the values of GTK_PRINT_SETTINGS_RESOLUTION ,GTK_PRINT_SETTINGS_RESOLUTION_X and GTK_PRINT_SETTINGS_RESOLUTION_Y .
	settings		# a GtkPrintSettings 
	resolution		# the resolution in dpi
void gtk_print_settings_set_resolution_xy (GtkPrintSettings *settings, gint resolution_x, gint resolution_y);	# Sets the values of GTK_PRINT_SETTINGS_RESOLUTION ,GTK_PRINT_SETTINGS_RESOLUTION_X andGTK_PRINT_SETTINGS_RESOLUTION_Y .
	settings		# a GtkPrintSettings 
	resolution_x		# the horizontal resolution in dpi
	resolution_y		# the vertical resolution in dpi
gint gtk_print_settings_get_resolution_x (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_RESOLUTION_X .
	settings		# a GtkPrintSettings 
	return:		#  the horizontal resolution in dpi 
gint gtk_print_settings_get_resolution_y (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_RESOLUTION_Y .
	settings		# a GtkPrintSettings 
	return:		#  the vertical resolution in dpi 
gdouble gtk_print_settings_get_printer_lpi (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_PRINTER_LPI .
	settings		# a GtkPrintSettings 
	return:		#  the resolution in lpi (lines per inch) 
void gtk_print_settings_set_printer_lpi (GtkPrintSettings *settings, gdouble lpi);	# Sets the value of GTK_PRINT_SETTINGS_PRINTER_LPI .
	settings		# a GtkPrintSettings 
	lpi		# the resolution in lpi (lines per inch)
gdouble gtk_print_settings_get_scale (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_SCALE .
	settings		# a GtkPrintSettings 
	return:		#  the scale in percent 
void gtk_print_settings_set_scale (GtkPrintSettings *settings, gdouble scale);	# Sets the value of GTK_PRINT_SETTINGS_SCALE .
	settings		# a GtkPrintSettings 
	scale		# the scale in percent
GtkPrintPages gtk_print_settings_get_print_pages (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_PRINT_PAGES .
	settings		# a GtkPrintSettings 
	return:		#  which pages to print 
void gtk_print_settings_set_print_pages (GtkPrintSettings *settings, GtkPrintPages pages);	# Sets the value of GTK_PRINT_SETTINGS_PRINT_PAGES .
	settings		# a GtkPrintSettings 
	pages		# a GtkPrintPages value
GtkPageRange  *gtk_print_settings_get_page_ranges (GtkPrintSettings *settings, gint *num_ranges);	# Gets the value of GTK_PRINT_SETTINGS_PAGE_RANGES .
	settings		# a GtkPrintSettings 
	num_ranges		#  return location for the length of the returned array. 
	return:		#  an arrayof GtkPageRanges . Use g_free() to free the array whenit is no longer needed.  
void gtk_print_settings_set_page_ranges (GtkPrintSettings *settings, GtkPageRange *page_ranges, gint num_ranges);	# Sets the value of GTK_PRINT_SETTINGS_PAGE_RANGES .
	settings		# a GtkPrintSettings 
	page_ranges		#  an array of GtkPageRanges . 
	num_ranges		# the length of page_ranges
GtkPageSet gtk_print_settings_get_page_set (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_PAGE_SET .
	settings		# a GtkPrintSettings 
	return:		#  the set of pages to print 
void gtk_print_settings_set_page_set (GtkPrintSettings *settings, GtkPageSet page_set);	# Sets the value of GTK_PRINT_SETTINGS_PAGE_SET .
	settings		# a GtkPrintSettings 
	page_set		# a GtkPageSet value
gchar  *gtk_print_settings_get_default_source (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE .
	settings		# a GtkPrintSettings 
	return:		#  the default source 
void gtk_print_settings_set_default_source (GtkPrintSettings *settings, const gchar *default_source);	# Sets the value of GTK_PRINT_SETTINGS_DEFAULT_SOURCE .
	settings		# a GtkPrintSettings 
	default_source		# the default source
gchar  *gtk_print_settings_get_media_type (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE .
	settings		# a GtkPrintSettings 
	return:		#  the media type 
void gtk_print_settings_set_media_type (GtkPrintSettings *settings, const gchar *media_type);	# Sets the value of GTK_PRINT_SETTINGS_MEDIA_TYPE .
	settings		# a GtkPrintSettings 
	media_type		# the media type
gchar  *gtk_print_settings_get_dither (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_DITHER .
	settings		# a GtkPrintSettings 
	return:		#  the dithering that is used 
void gtk_print_settings_set_dither (GtkPrintSettings *settings, const gchar *dither);	# Sets the value of GTK_PRINT_SETTINGS_DITHER .
	settings		# a GtkPrintSettings 
	dither		# the dithering that is used
gchar  *gtk_print_settings_get_finishings (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_FINISHINGS .
	settings		# a GtkPrintSettings 
	return:		#  the finishings 
void gtk_print_settings_set_finishings (GtkPrintSettings *settings, const gchar *finishings);	# Sets the value of GTK_PRINT_SETTINGS_FINISHINGS .
	settings		# a GtkPrintSettings 
	finishings		# the finishings
gchar  *gtk_print_settings_get_output_bin (GtkPrintSettings *settings);	# Gets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN .
	settings		# a GtkPrintSettings 
	return:		#  the output bin 
void gtk_print_settings_set_output_bin (GtkPrintSettings *settings, const gchar *output_bin);	# Sets the value of GTK_PRINT_SETTINGS_OUTPUT_BIN .
	settings		# a GtkPrintSettings 
	output_bin		# the output bin
GtkPrintSettings  *gtk_print_settings_new_from_file (const gchar *file_name, GError **error);	# Reads the print settings from file_name. Returns a new GtkPrintSettings object with the restored settings, or NULL if an error occurred. If thefile could not be loaded then error is set to either a GFileError orGKeyFileError . See gtk_print_settings_to_file() .
	file_name		#  the filename to read the settings from. 
	return:		#  the restored GtkPrintSettings  
GtkPrintSettings  *gtk_print_settings_new_from_key_file (GKeyFile *key_file, const gchar *group_name, GError **error);	# Reads the print settings from the group group_name in key_file. Returns anew GtkPrintSettings object with the restored settings, or NULL if anerror occurred. If the file could not be loaded then error is set to eithera GFileError or GKeyFileError .
	key_file		# the GKeyFile to retrieve the settings from
	group_name		#  the name of the group to use, or NULL to usethe default “Print Settings”. 
	return:		#  the restored GtkPrintSettings  
GtkPrintSettings  *gtk_print_settings_new_from_gvariant (GVariant *variant);	# Deserialize print settings from an a{sv} variant inthe format produced by gtk_print_settings_to_gvariant() .
	variant		# an a{sv} GVariant 
	return:		#  a new GtkPrintSettings object.  
gboolean gtk_print_settings_load_file (GtkPrintSettings *settings, const gchar *file_name, GError **error);	# Reads the print settings from file_name. If the file could not be loadedthen error is set to either a GFileError or GKeyFileError .See gtk_print_settings_to_file() .
	settings		# a GtkPrintSettings 
	file_name		#  the filename to read the settings from. 
	return:		#  TRUE on success 
gboolean gtk_print_settings_load_key_file (GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name, GError **error);	# Reads the print settings from the group group_name in key_file. If thefile could not be loaded then error is set to either a GFileError orGKeyFileError .
	settings		# a GtkPrintSettings 
	key_file		# the GKeyFile to retrieve the settings from
	group_name		#  the name of the group to use, or NULL to use the default“Print Settings”. 
	return:		#  TRUE on success 
gboolean gtk_print_settings_to_file (GtkPrintSettings *settings, const gchar *file_name, GError **error);	# This function saves the print settings from settings to file_name. If thefile could not be loaded then error is set to either a GFileError orGKeyFileError .
	settings		# a GtkPrintSettings 
	file_name		#  the file to save to. 
	return:		#  TRUE on success 
void gtk_print_settings_to_key_file (GtkPrintSettings *settings, GKeyFile *key_file, const gchar *group_name);	# This function adds the print settings from settings to key_file.
	settings		# a GtkPrintSettings 
	key_file		# the GKeyFile to save the print settings to
	group_name		# the group to add the settings to in key_file, orNULL to use the default “Print Settings”
GVariant  *gtk_print_settings_to_gvariant (GtkPrintSettings *settings);	# Serialize print settings to an a{sv} variant.
	settings		# a GtkPrintSettings 
	return:		#  a new, floating, GVariant .  
GtkPageSetup  *gtk_page_setup_new (void );	#创建对象:GtkPageSetup .
	return:		#  a new GtkPageSetup . 
GtkPageSetup  *gtk_page_setup_copy (GtkPageSetup *other);	# Copies a GtkPageSetup .
	other		# the GtkPageSetup to copy
	return:		#  a copy of other.  
GtkPageOrientation gtk_page_setup_get_orientation (GtkPageSetup *setup);	# Gets the page orientation of the GtkPageSetup .
	setup		# a GtkPageSetup 
	return:		#  the page orientation 
void gtk_page_setup_set_orientation (GtkPageSetup *setup, GtkPageOrientation orientation);	# Sets the page orientation of the GtkPageSetup .
	setup		# a GtkPageSetup 
	orientation		# a GtkPageOrientation value
GtkPaperSize  *gtk_page_setup_get_paper_size (GtkPageSetup *setup);	# Gets the paper size of the GtkPageSetup .
	setup		# a GtkPageSetup 
	return:		#  the paper size.  
void gtk_page_setup_set_paper_size (GtkPageSetup *setup, GtkPaperSize *size);	# Sets the paper size of the GtkPageSetup withoutchanging the margins. See gtk_page_setup_set_paper_size_and_default_margins() .
	setup		# a GtkPageSetup 
	size		# a GtkPaperSize 
gdouble gtk_page_setup_get_top_margin (GtkPageSetup *setup, GtkUnit unit);	# Gets the top margin in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the top margin 
void gtk_page_setup_set_top_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);	# Sets the top margin of the GtkPageSetup .
	setup		# a GtkPageSetup 
	margin		# the new top margin in units of unit
	unit		# the units for margin
gdouble gtk_page_setup_get_bottom_margin (GtkPageSetup *setup, GtkUnit unit);	# Gets the bottom margin in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the bottom margin 
void gtk_page_setup_set_bottom_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);	# Sets the bottom margin of the GtkPageSetup .
	setup		# a GtkPageSetup 
	margin		# the new bottom margin in units of unit
	unit		# the units for margin
gdouble gtk_page_setup_get_left_margin (GtkPageSetup *setup, GtkUnit unit);	# Gets the left margin in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the left margin 
void gtk_page_setup_set_left_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);	# Sets the left margin of the GtkPageSetup .
	setup		# a GtkPageSetup 
	margin		# the new left margin in units of unit
	unit		# the units for margin
gdouble gtk_page_setup_get_right_margin (GtkPageSetup *setup, GtkUnit unit);	# Gets the right margin in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the right margin 
void gtk_page_setup_set_right_margin (GtkPageSetup *setup, gdouble margin, GtkUnit unit);	# Sets the right margin of the GtkPageSetup .
	setup		# a GtkPageSetup 
	margin		# the new right margin in units of unit
	unit		# the units for margin
void gtk_page_setup_set_paper_size_and_default_margins (GtkPageSetup *setup, GtkPaperSize *size);	# Sets the paper size of the GtkPageSetup and modifiesthe margins according to the new paper size.
	setup		# a GtkPageSetup 
	size		# a GtkPaperSize 
gdouble gtk_page_setup_get_paper_width (GtkPageSetup *setup, GtkUnit unit);	# Returns the paper width in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the paper width. 
gdouble gtk_page_setup_get_paper_height (GtkPageSetup *setup, GtkUnit unit);	# Returns the paper height in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the paper height. 
gdouble gtk_page_setup_get_page_width (GtkPageSetup *setup, GtkUnit unit);	# Returns the page width in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the page width. 
gdouble gtk_page_setup_get_page_height (GtkPageSetup *setup, GtkUnit unit);	# Returns the page height in units of unit.
	setup		# a GtkPageSetup 
	unit		# the unit for the return value
	return:		#  the page height. 
GtkPageSetup  *gtk_page_setup_new_from_file (const gchar *file_name, GError **error);	# Reads the page setup from the file file_name. Returns a new GtkPageSetup object with the restored page setup, or NULL if an error occurred. See gtk_page_setup_to_file() .
	file_name		#  the filename to read the page setup from. 
	return:		#  the restored GtkPageSetup  
GtkPageSetup  *gtk_page_setup_new_from_key_file (GKeyFile *key_file, const gchar *group_name, GError **error);	# Reads the page setup from the group group_name in the key filekey_file. Returns a new GtkPageSetup object with the restoredpage setup, or NULL if an error occurred.
	key_file		# the GKeyFile to retrieve the page_setup from
	group_name		#  the name of the group in the key_file to read, or NULL to use the default name “Page Setup”. 
	return:		#  the restored GtkPageSetup  
GtkPageSetup  *gtk_page_setup_new_from_gvariant (GVariant *variant);	# Desrialize a page setup from an a{sv} variant inthe format produced by gtk_page_setup_to_gvariant() .
	variant		# an a{sv} GVariant 
	return:		#  a new GtkPageSetup object.  
gboolean gtk_page_setup_load_file (GtkPageSetup *setup, const char *file_name, GError **error);	# Reads the page setup from the file file_name.See gtk_page_setup_to_file() .
	setup		# a GtkPageSetup 
	file_name		#  the filename to read the page setup from. 
	return:		#  TRUE on success 
gboolean gtk_page_setup_load_key_file (GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name, GError **error);	# Reads the page setup from the group group_name in the key filekey_file.
	setup		# a GtkPageSetup 
	key_file		# the GKeyFile to retrieve the page_setup from
	group_name		#  the name of the group in the key_file to read, or NULL to use the default name “Page Setup”. 
	return:		#  TRUE on success 
gboolean gtk_page_setup_to_file (GtkPageSetup *setup, const char *file_name, GError **error);	# This function saves the information from setup to file_name.
	setup		# a GtkPageSetup 
	file_name		#  the file to save to. 
	return:		#  TRUE on success 
void gtk_page_setup_to_key_file (GtkPageSetup *setup, GKeyFile *key_file, const gchar *group_name);	# This function adds the page setup from setup to key_file.
	setup		# a GtkPageSetup 
	key_file		# the GKeyFile to save the page setup to
	group_name		# the group to add the settings to in key_file,or NULL to use the default name “Page Setup”
GVariant  *gtk_page_setup_to_gvariant (GtkPageSetup *setup);	# Serialize page setup to an a{sv} variant.
	setup		# a GtkPageSetup 
GtkPaperSize  *gtk_paper_size_new (const gchar *name);	#创建对象:GtkPaperSize object by parsing aPWG 5101.1-2002 paper name.
	name		#  a paper size name, or NULL . 
	return:		#  a new GtkPaperSize , use gtk_paper_size_free() to free it 
GtkPaperSize  *gtk_paper_size_new_from_ppd (const gchar *ppd_name, const gchar *ppd_display_name, gdouble width, gdouble height);	#创建对象:GtkPaperSize object by usingPPD information.
	ppd_name		# a PPD paper name
	ppd_display_name		# the corresponding human-readable name
	width		# the paper width, in points
	height		# the paper height in points
	return:		#  a new GtkPaperSize , use gtk_paper_size_free() to free it 
GtkPaperSize  *gtk_paper_size_new_from_ipp (const gchar *ipp_name, gdouble width, gdouble height);	#创建对象:GtkPaperSize object by usingIPP information.
	ipp_name		# an IPP paper name
	width		# the paper width, in points
	height		# the paper height in points
	return:		#  a new GtkPaperSize , use gtk_paper_size_free() to free it 
GtkPaperSize  *gtk_paper_size_new_custom (const gchar *name, const gchar *display_name, gdouble width, gdouble height, GtkUnit unit);	#创建对象:GtkPaperSize object with thegiven parameters.
	name		# the paper name
	display_name		# the human-readable name
	width		# the paper width, in units of unit
	height		# the paper height, in units of unit
	unit		# the unit for widthand height. not GTK_UNIT_NONE .
	return:		#  a new GtkPaperSize object, use gtk_paper_size_free() to free it 
GtkPaperSize  *gtk_paper_size_copy (GtkPaperSize *other);	# Copies an existing GtkPaperSize .
	other		# a GtkPaperSize 
	return:		#  a copy of other 
void gtk_paper_size_free (GtkPaperSize *size);	# Free the given GtkPaperSize object.
	size		# a GtkPaperSize 
gboolean gtk_paper_size_is_equal (GtkPaperSize *size1, GtkPaperSize *size2);	# Compares two GtkPaperSize objects.
	size1		# a GtkPaperSize object
	size2		# another GtkPaperSize object
	return:		#  TRUE , if size1and size2represent the same paper size 
GList  *gtk_paper_size_get_paper_sizes (gboolean include_custom);	# Creates a list of known paper sizes.
	include_custom		# whether to include custom paper sizesas defined in the page setup dialog
	return:		#  a newly allocated list of newlyallocated GtkPaperSize objects.  
gchar  *gtk_paper_size_get_name (GtkPaperSize *size);	# Gets the name of the GtkPaperSize .
	size		# a GtkPaperSize object
	return:		#  the name of size 
gchar  *gtk_paper_size_get_display_name (GtkPaperSize *size);	# Gets the human-readable name of the GtkPaperSize .
	size		# a GtkPaperSize object
	return:		#  the human-readable name of size 
gchar  *gtk_paper_size_get_ppd_name (GtkPaperSize *size);	# Gets the PPD name of the GtkPaperSize , whichmay be NULL .
	size		# a GtkPaperSize object
	return:		#  the PPD name of size 
gdouble gtk_paper_size_get_width (GtkPaperSize *size, GtkUnit unit);	# Gets the paper width of the GtkPaperSize , inunits of unit.
	size		# a GtkPaperSize object
	unit		# the unit for the return value, not GTK_UNIT_NONE 
	return:		#  the paper width 
gdouble gtk_paper_size_get_height (GtkPaperSize *size, GtkUnit unit);	# Gets the paper height of the GtkPaperSize , inunits of unit.
	size		# a GtkPaperSize object
	unit		# the unit for the return value, not GTK_UNIT_NONE 
	return:		#  the paper height 
gboolean gtk_paper_size_is_ipp (GtkPaperSize *size);	# Returns TRUE if size is an IPP standard paper size.
	size		# a GtkPaperSize object
	return:		#  whether sizeis not an IPP custom paper size. 
gboolean gtk_paper_size_is_custom (GtkPaperSize *size);	# Returns TRUE if size is not a standard paper size.
	size		# a GtkPaperSize object
	return:		#  whether sizeis a custom paper size. 
void gtk_paper_size_set_size (GtkPaperSize *size, gdouble width, gdouble height, GtkUnit unit);	# Changes the dimensions of a size to width x height.
	size		# a custom GtkPaperSize object
	width		# the new width in units of unit
	height		# the new height in units of unit
	unit		# the unit for widthand height
gdouble gtk_paper_size_get_default_top_margin (GtkPaperSize *size, GtkUnit unit);	# Gets the default top margin for the GtkPaperSize .
	size		# a GtkPaperSize object
	unit		# the unit for the return value, not GTK_UNIT_NONE 
	return:		#  the default top margin 
gdouble gtk_paper_size_get_default_bottom_margin (GtkPaperSize *size, GtkUnit unit);	# Gets the default bottom margin for the GtkPaperSize .
	size		# a GtkPaperSize object
	unit		# the unit for the return value, not GTK_UNIT_NONE 
	return:		#  the default bottom margin 
gdouble gtk_paper_size_get_default_left_margin (GtkPaperSize *size, GtkUnit unit);	# Gets the default left margin for the GtkPaperSize .
	size		# a GtkPaperSize object
	unit		# the unit for the return value, not GTK_UNIT_NONE 
	return:		#  the default left margin 
gdouble gtk_paper_size_get_default_right_margin (GtkPaperSize *size, GtkUnit unit);	# Gets the default right margin for the GtkPaperSize .
	size		# a GtkPaperSize object
	unit		# the unit for the return value, not GTK_UNIT_NONE 
	return:		#  the default right margin 
gchar  *gtk_paper_size_get_default (void );	# Returns the name of the default paper size, whichdepends on the current locale.
	return:		#  the name of the default paper size. The stringis owned by GTK+ and should not be modified. 
GtkPaperSize  *gtk_paper_size_new_from_key_file (GKeyFile *key_file, const gchar *group_name, GError **error);	# Reads a paper size from the group group_name in the key filekey_file.
	key_file		# the GKeyFile to retrieve the papersize from
	group_name		# the name ofthe group in the key file to read,or NULL to read the first group
	error		#  return location for an error, or NULL . 
	return:		#  a new GtkPaperSize object with the restoredpaper size, or NULL if an error occurred 
GtkPaperSize  *gtk_paper_size_new_from_gvariant (GVariant *variant);	# Deserialize a paper size from an a{sv} variant inthe format produced by gtk_paper_size_to_gvariant() .
	variant		# an a{sv} GVariant 
	return:		#  a new GtkPaperSize object.  
void gtk_paper_size_to_key_file (GtkPaperSize *size, GKeyFile *key_file, const gchar *group_name);	# This function adds the paper size from size to key_file.
	size		# a GtkPaperSize 
	key_file		# the GKeyFile to save the paper size to
	group_name		# the group to add the settings to in key_file
GVariant  *gtk_paper_size_to_gvariant (GtkPaperSize *paper_size);	# Serialize a paper size to an a{sv} variant.
	paper_size		# a GtkPaperSize 
	return:		#  a new, floating, GVariant .  
GtkPrinter  *gtk_printer_new (const gchar *name, GtkPrintBackend *backend, gboolean virtual_);	#创建对象:GtkPrinter .
	name		# the name of the printer
	backend		# a GtkPrintBackend 
	virtual_		# whether the printer is virtual
	return:		#  a new GtkPrinter  
GtkPrintBackend  *gtk_printer_get_backend (GtkPrinter *printer);	# Returns the backend of the printer.
	printer		# a GtkPrinter 
	return:		#  the backend of printer.  
gchar  *gtk_printer_get_name (GtkPrinter *printer);	# Returns the name of the printer.
	printer		# a GtkPrinter 
	return:		#  the name of printer 
gchar  *gtk_printer_get_state_message (GtkPrinter *printer);	# Returns the state message describing the current stateof the printer.
	printer		# a GtkPrinter 
	return:		#  the state message of printer 
gchar  *gtk_printer_get_description (GtkPrinter *printer);	# Gets the description of the printer.
	printer		# a GtkPrinter 
	return:		#  the description of printer 
gchar  *gtk_printer_get_location (GtkPrinter *printer);	# Returns a description of the location of the printer.
	printer		# a GtkPrinter 
	return:		#  the location of printer 
gchar  *gtk_printer_get_icon_name (GtkPrinter *printer);	# Gets the name of the icon to use for the printer.
	printer		# a GtkPrinter 
	return:		#  the icon name for printer 
gint gtk_printer_get_job_count (GtkPrinter *printer);	# Gets the number of jobs currently queued on the printer.
	printer		# a GtkPrinter 
	return:		#  the number of jobs on printer 
gboolean gtk_printer_is_active (GtkPrinter *printer);	# Returns whether the printer is currently active (i.e. accepts new jobs).
	printer		# a GtkPrinter 
	return:		#  TRUE if printeris active 
gboolean gtk_printer_is_paused (GtkPrinter *printer);	# Returns whether the printer is currently paused.A paused printer still accepts jobs, but it is notprinting them.
	printer		# a GtkPrinter 
	return:		#  TRUE if printeris paused 
gboolean gtk_printer_is_accepting_jobs (GtkPrinter *printer);	# Returns whether the printer is accepting jobs
	printer		# a GtkPrinter 
	return:		#  TRUE if printeris accepting jobs 
gboolean gtk_printer_is_virtual (GtkPrinter *printer);	# Returns whether the printer is virtual (i.e. does notrepresent actual printer hardware, but something like a CUPS class).
	printer		# a GtkPrinter 
	return:		#  TRUE if printeris virtual 
gboolean gtk_printer_is_default (GtkPrinter *printer);	# Returns whether the printer is the default printer.
	printer		# a GtkPrinter 
	return:		#  TRUE if printeris the default 
gboolean gtk_printer_accepts_ps (GtkPrinter *printer);	# Returns whether the printer accepts input inPostScript format.
	printer		# a GtkPrinter 
	return:		#  TRUE if printeraccepts PostScript 
gboolean gtk_printer_accepts_pdf (GtkPrinter *printer);	# Returns whether the printer accepts input inPDF format.
	printer		# a GtkPrinter 
	return:		#  TRUE if printeraccepts PDF 
GList  *gtk_printer_list_papers (GtkPrinter *printer);	# Lists all the paper sizes printer supports.This will return and empty list unless the printer’s details are available, see gtk_printer_has_details() and gtk_printer_request_details() .
	printer		# a GtkPrinter 
	return:		#  a newly allocated list of newly allocated GtkPageSetup s.  
gint gtk_printer_compare (GtkPrinter *a, GtkPrinter *b);	# Compares two printers.
	a		# a GtkPrinter 
	b		# another GtkPrinter 
	return:		#  0 if the printer match, a negative value if a&lt; b,or a positive value if a&gt; b 
gboolean gtk_printer_has_details (GtkPrinter *printer);	# Returns whether the printer details are available.
	printer		# a GtkPrinter 
	return:		#  TRUE if printerdetails are available 
void gtk_printer_request_details (GtkPrinter *printer);	# Requests the printer details. When the details are available,the “details-acquired” signal will be emitted on printer.
	printer		# a GtkPrinter 
GtkPrintCapabilities gtk_printer_get_capabilities (GtkPrinter *printer);	# Returns the printer’s capabilities.
	printer		# a GtkPrinter 
	return:		#  the printer’s capabilities 
GtkPageSetup  *gtk_printer_get_default_page_size (GtkPrinter *printer);	# Returns default page size of printer.
	printer		# a GtkPrinter 
	return:		#  a newly allocated GtkPageSetup with default page size of the printer. 
gboolean gtk_printer_get_hard_margins (GtkPrinter *printer, gdouble *top, gdouble *bottom, gdouble *left, gdouble *right);	# Retrieve the hard margins of printer, i.e. the margins that definethe area at the borders of the paper that the printer cannot print to.
	printer		# a GtkPrinter 
	top		#  a location to store the top margin in. 
	return:		#  TRUE iff the hard margins were retrieved 
gboolean <span class="c_punctuation">( *GtkPrinterFunc<span class="c_punctuation">) (GtkPrinter *printer, gpointer data);	# The type of function passed to gtk_enumerate_printers() .Note that you need to ref printer, if you want to keepa reference to it after the function has returned.
	printer		# a GtkPrinter 
	data		#  user data passed to 
	return:		#  TRUE to stop the enumeration, FALSE to continue 
void gtk_enumerate_printers (GtkPrinterFunc func, gpointer data, GDestroyNotify destroy, gboolean wait);	# Calls a function for all GtkPrinters . If func returns TRUE , the enumeration is stopped.
	func		# a function to call for each printer
	data		# user data to pass to func
	destroy		# function to call if datais no longer needed
	wait		# if TRUE , wait in a recursive mainloop untilall printers are enumerated; otherwise return early
void <span class="c_punctuation">( *GtkPrintJobCompleteFunc<span class="c_punctuation">) (GtkPrintJob *print_job, gpointer user_data, const GError *error);	# The type of callback that is passed to gtk_print_job_send() .It is called when the print job has been completely sent.
	print_job		# the GtkPrintJob 
	user_data		# user data that has been passed to 
	error		# a GError that contains error information if the sendingof the print job failed, otherwise NULL 
GtkPrintJob  *gtk_print_job_new (const gchar *title, GtkPrinter *printer, GtkPrintSettings *settings, GtkPageSetup *page_setup);	#创建对象:GtkPrintJob .
	title		# the job title
	printer		# a GtkPrinter 
	settings		# a GtkPrintSettings 
	page_setup		# a GtkPageSetup 
	return:		#  a new GtkPrintJob  
GtkPrintSettings  *gtk_print_job_get_settings (GtkPrintJob *job);	# Gets the GtkPrintSettings of the print job.
	job		# a GtkPrintJob 
	return:		#  the settings of job.  
GtkPrinter  *gtk_print_job_get_printer (GtkPrintJob *job);	# Gets the GtkPrinter of the print job.
	job		# a GtkPrintJob 
	return:		#  the printer of job.  
gchar  *gtk_print_job_get_title (GtkPrintJob *job);	# Gets the job title.
	job		# a GtkPrintJob 
	return:		#  the title of job 
GtkPrintStatus gtk_print_job_get_status (GtkPrintJob *job);	# Gets the status of the print job.
	job		# a GtkPrintJob 
	return:		#  the status of job 
gboolean gtk_print_job_set_source_file (GtkPrintJob *job, const gchar *filename, GError **error);	# Make the GtkPrintJob send an existing document to the printing system. The file can be in any format understoodby the platforms printing system (typically PostScript,but on many platforms PDF may work too). See gtk_printer_accepts_pdf() and gtk_printer_accepts_ps() .
	job		# a GtkPrintJob 
	filename		#  the file to be printed. 
	return:		#  FALSE if an error occurred 
gboolean gtk_print_job_set_source_fd (GtkPrintJob *job, int fd, GError **error);	# Make the GtkPrintJob send an existing document to theprinting system. The file can be in any format understoodby the platforms printing system (typically PostScript,but on many platforms PDF may work too). Seegtk_printer_accepts_pdf() and gtk_printer_accepts_ps() .
	job		# a GtkPrintJob 
	fd		# a file descriptor
	error		# return location for errors
	return:		#  FALSE if an error occurred 
cairo_surface_t  *gtk_print_job_get_surface (GtkPrintJob *job, GError **error);	# Gets a cairo surface onto which the pages ofthe print job should be rendered.
	job		# a GtkPrintJob 
	error		#  return location for errors, or NULL . 
	return:		#  the cairo surface of job.  
void gtk_print_job_send (GtkPrintJob *job, GtkPrintJobCompleteFunc callback, gpointer user_data, GDestroyNotify dnotify);	# Sends the print job off to the printer.
	job		# a GtkPrintJob
	callback		# function to call when the job completes or an error occurs
	user_data		# user data that gets passed to callback
	dnotify		# destroy notify for user_data
void gtk_print_job_set_track_print_status (GtkPrintJob *job, gboolean track_status);	# If track_status is TRUE , the print job will try to continue reporton the status of the print job in the printer queues and printer. Thiscan allow your application to show things like “out of paper” issues,and when the print job actually reaches the printer.
	job		# a GtkPrintJob 
	track_status		# TRUE to track status after printing
gboolean gtk_print_job_get_track_print_status (GtkPrintJob *job);	# Returns wheter jobs will be tracked after printing.For details, see gtk_print_job_set_track_print_status() .
	job		# a GtkPrintJob 
	return:		#  TRUE if print job status will be reported after printing 
GtkPrintPages gtk_print_job_get_pages (GtkPrintJob *job);	# Gets the GtkPrintPages setting for this job.
	job		# a GtkPrintJob 
	return:		#  the GtkPrintPages setting 
void gtk_print_job_set_pages (GtkPrintJob *job, GtkPrintPages pages);	# Sets the GtkPrintPages setting for this job.
	job		# a GtkPrintJob 
	pages		# the GtkPrintPages setting
GtkPageRange  *gtk_print_job_get_page_ranges (GtkPrintJob *job, gint *n_ranges);	# Gets the page ranges for this job.
	job		# a GtkPrintJob 
	n_ranges		#  return location for the number of ranges. 
	return:		#  a pointer to anarray of GtkPageRange structs.  
void gtk_print_job_set_page_ranges (GtkPrintJob *job, GtkPageRange *ranges, gint n_ranges);	# Sets the page ranges for this job.
	job		# a GtkPrintJob 
	ranges		#  pointer to an array ofGtkPageRange structs. 
GtkPageSet gtk_print_job_get_page_set (GtkPrintJob *job);	# Gets the GtkPageSet setting for this job.
	job		# a GtkPrintJob 
	return:		#  the GtkPageSet setting 
void gtk_print_job_set_page_set (GtkPrintJob *job, GtkPageSet page_set);	# Sets the GtkPageSet setting for this job.
	job		# a GtkPrintJob 
	page_set		# a GtkPageSet setting
gint gtk_print_job_get_num_copies (GtkPrintJob *job);	# Gets the number of copies of this job.
	job		# a GtkPrintJob 
	return:		#  the number of copies 
void gtk_print_job_set_num_copies (GtkPrintJob *job, gint num_copies);	# Sets the number of copies for this job.
	job		# a GtkPrintJob 
	num_copies		# the number of copies
gdouble gtk_print_job_get_scale (GtkPrintJob *job);	# Gets the scale for this job (where 1.0 means unscaled).
	job		# a GtkPrintJob 
	return:		#  the scale 
void gtk_print_job_set_scale (GtkPrintJob *job, gdouble scale);	# Sets the scale for this job (where 1.0 means unscaled).
	job		# a GtkPrintJob 
	scale		# the scale
guint gtk_print_job_get_n_up (GtkPrintJob *job);	# Gets the n-up setting for this job.
	job		# a GtkPrintJob 
	return:		#  the n-up setting 
void gtk_print_job_set_n_up (GtkPrintJob *job, guint n_up);	# Sets the n-up setting for this job.
	job		# a GtkPrintJob 
	n_up		# the n-up value
GtkNumberUpLayout gtk_print_job_get_n_up_layout (GtkPrintJob *job);	# Gets the n-up layout setting for this job.
	job		# a GtkPrintJob 
	return:		#  the n-up layout 
void gtk_print_job_set_n_up_layout (GtkPrintJob *job, GtkNumberUpLayout layout);	# Sets the n-up layout setting for this job.
	job		# a GtkPrintJob 
	layout		# the n-up layout setting
gboolean gtk_print_job_get_rotate (GtkPrintJob *job);	# Gets whether the job is printed rotated.
	job		# a GtkPrintJob 
	return:		#  whether the job is printed rotated 
void gtk_print_job_set_rotate (GtkPrintJob *job, gboolean rotate);	# Sets whether this job is printed rotated.
	job		# a GtkPrintJob 
	rotate		# whether to print rotated
gboolean gtk_print_job_get_collate (GtkPrintJob *job);	# Gets whether this job is printed collated.
	job		# a GtkPrintJob 
	return:		#  whether the job is printed collated 
void gtk_print_job_set_collate (GtkPrintJob *job, gboolean collate);	# Sets whether this job is printed collated.
	job		# a GtkPrintJob 
	collate		# whether the job is printed collated
gboolean gtk_print_job_get_reverse (GtkPrintJob *job);	# Gets whether this job is printed reversed.
	job		# a GtkPrintJob 
	return:		#  whether the job is printed reversed. 
void gtk_print_job_set_reverse (GtkPrintJob *job, gboolean reverse);	# Sets whether this job is printed reversed.
	job		# a GtkPrintJob 
	reverse		# whether the job is printed reversed
GtkWidget  *gtk_print_unix_dialog_new (const gchar *title, GtkWindow *parent);	#创建对象:GtkPrintUnixDialog .
	title		#  Title of the dialog, or NULL . 
	return:		#  a new GtkPrintUnixDialog  
void gtk_print_unix_dialog_set_page_setup (GtkPrintUnixDialog *dialog, GtkPageSetup *page_setup);	# Sets the page setup of the GtkPrintUnixDialog .
	dialog		# a GtkPrintUnixDialog 
	page_setup		# a GtkPageSetup 
GtkPageSetup  *gtk_print_unix_dialog_get_page_setup (GtkPrintUnixDialog *dialog);	# Gets the page setup that is used by the GtkPrintUnixDialog .
	dialog		# a GtkPrintUnixDialog 
	return:		#  the page setup of dialog.  
void gtk_print_unix_dialog_set_current_page (GtkPrintUnixDialog *dialog, gint current_page);	# Sets the current page number. If current_page is not -1, this enablesthe current page choice for the range of pages to print.
	dialog		# a GtkPrintUnixDialog 
	current_page		# the current page number.
gint gtk_print_unix_dialog_get_current_page (GtkPrintUnixDialog *dialog);	# Gets the current page of the GtkPrintUnixDialog .
	dialog		# a GtkPrintUnixDialog 
	return:		#  the current page of dialog 
void gtk_print_unix_dialog_set_settings (GtkPrintUnixDialog *dialog, GtkPrintSettings *settings);	# Sets the GtkPrintSettings for the GtkPrintUnixDialog . Typically,this is used to restore saved print settings from a previous printoperation before the print dialog is shown.
	dialog		# a GtkPrintUnixDialog 
	settings		#  a GtkPrintSettings , or NULL . 
GtkPrintSettings  *gtk_print_unix_dialog_get_settings (GtkPrintUnixDialog *dialog);	# Gets a new GtkPrintSettings object that represents thecurrent values in the print dialog. Note that this creates anew object, and you need to unref itif don’t want to keep it.
	dialog		# a GtkPrintUnixDialog 
	return:		#  a new GtkPrintSettings object with the values from dialog 
GtkPrinter  *gtk_print_unix_dialog_get_selected_printer (GtkPrintUnixDialog *dialog);	# Gets the currently selected printer.
	dialog		# a GtkPrintUnixDialog 
	return:		#  the currently selected printer.  
void gtk_print_unix_dialog_add_custom_tab (GtkPrintUnixDialog *dialog, GtkWidget *child, GtkWidget *tab_label);	# Adds a custom tab to the print dialog.
	dialog		# a GtkPrintUnixDialog 
	child		# the widget to put in the custom tab
	tab_label		# the widget to use as tab label
void gtk_print_unix_dialog_set_support_selection (GtkPrintUnixDialog *dialog, gboolean support_selection);	# Sets whether the print dialog allows user to print a selection.
	dialog		# a GtkPrintUnixDialog 
	support_selection		# TRUE to allow print selection
gboolean gtk_print_unix_dialog_get_support_selection (GtkPrintUnixDialog *dialog);	# Gets the value of “support-selection” property.
	dialog		# a GtkPrintUnixDialog 
	return:		#  whether the application supports print of selection 
void gtk_print_unix_dialog_set_has_selection (GtkPrintUnixDialog *dialog, gboolean has_selection);	# Sets whether a selection exists.
	dialog		# a GtkPrintUnixDialog 
	has_selection		# TRUE indicates that a selection exists
gboolean gtk_print_unix_dialog_get_has_selection (GtkPrintUnixDialog *dialog);	# Gets the value of “has-selection” property.
	dialog		# a GtkPrintUnixDialog 
	return:		#  whether there is a selection 
void gtk_print_unix_dialog_set_embed_page_setup (GtkPrintUnixDialog *dialog, gboolean embed);	# Embed page size combo box and orientation combo box into page setup page.
	dialog		# a GtkPrintUnixDialog 
	embed		# embed page setup selection
gboolean gtk_print_unix_dialog_get_embed_page_setup (GtkPrintUnixDialog *dialog);	# Gets the value of “embed-page-setup” property.
	dialog		# a GtkPrintUnixDialog 
	return:		#  whether there is a selection 
gboolean gtk_print_unix_dialog_get_page_setup_set (GtkPrintUnixDialog *dialog);	# Gets the page setup that is used by the GtkPrintUnixDialog .
	dialog		# a GtkPrintUnixDialog 
	return:		#  whether a page setup was set by user. 
void gtk_print_unix_dialog_set_manual_capabilities (GtkPrintUnixDialog *dialog, GtkPrintCapabilities capabilities);	# This lets you specify the printing capabilities your applicationsupports. For instance, if you can handle scaling the output thenyou pass GTK_PRINT_CAPABILITY_SCALE . If you don’t pass that, thenthe dialog will only let you select the scale if the printingsystem automatically handles scaling.
	dialog		# a GtkPrintUnixDialog 
	capabilities		# the printing capabilities of your application
GtkPrintCapabilities gtk_print_unix_dialog_get_manual_capabilities (GtkPrintUnixDialog *dialog);	# Gets the value of “manual-capabilities” property.
	dialog		# a GtkPrintUnixDialog 
	return:		#  the printing capabilities 
GtkWidget  *gtk_page_setup_unix_dialog_new (const gchar *title, GtkWindow *parent);	#创建对象:page setup dialog.
	title		#  the title of the dialog, or NULL . 
	return:		#  the new GtkPageSetupUnixDialog  
void gtk_page_setup_unix_dialog_set_page_setup (GtkPageSetupUnixDialog *dialog, GtkPageSetup *page_setup);	# Sets the GtkPageSetup from which the page setupdialog takes its values.
	dialog		# a GtkPageSetupUnixDialog 
	page_setup		# a GtkPageSetup 
GtkPageSetup  *gtk_page_setup_unix_dialog_get_page_setup (GtkPageSetupUnixDialog *dialog);	# Gets the currently selected page setup from the dialog.
	dialog		# a GtkPageSetupUnixDialog 
	return:		#  the current page setup.  
void gtk_page_setup_unix_dialog_set_print_settings (GtkPageSetupUnixDialog *dialog, GtkPrintSettings *print_settings);	# Sets the GtkPrintSettings from which the page setup dialogtakes its values.
	dialog		# a GtkPageSetupUnixDialog 
	print_settings		# a GtkPrintSettings 
GtkPrintSettings  *gtk_page_setup_unix_dialog_get_print_settings (GtkPageSetupUnixDialog *dialog);	# Gets the current print settings from the dialog.
	dialog		# a GtkPageSetupUnixDialog 
	return:		#  the current print settings.  
GtkAdjustment  *gtk_adjustment_new (gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size);	#创建对象:GtkAdjustment .
	value		# the initial value
	lower		# the minimum value
	upper		# the maximum value
	step_increment		# the step increment
	page_increment		# the page increment
	page_size		# the page size
	return:		#  a new GtkAdjustment  
gdouble gtk_adjustment_get_value (GtkAdjustment *adjustment);	# Gets the current value of the adjustment.See gtk_adjustment_set_value() .
	adjustment		# a GtkAdjustment 
	return:		#  The current value of the adjustment 
void gtk_adjustment_set_value (GtkAdjustment *adjustment, gdouble value);	# Sets the GtkAdjustment value. The value is clamped to lie between“lower” and “upper” .
	adjustment		# a GtkAdjustment 
	value		# the new value
void gtk_adjustment_clamp_page (GtkAdjustment *adjustment, gdouble lower, gdouble upper);	# Updates the “value” property to ensure that the rangebetween lower and upper is in the current page (i.e. between“value” and “value” + “page-size” ).If the range is larger than the page size, then only the start of it willbe in the current page.
	adjustment		# a GtkAdjustment 
	lower		# the lower value
	upper		# the upper value
void gtk_adjustment_configure (GtkAdjustment *adjustment, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size);	# Sets all properties of the adjustment at once.
	adjustment		# a GtkAdjustment 
	value		# the new value
	lower		# the new minimum value
	upper		# the new maximum value
	step_increment		# the new step increment
	page_increment		# the new page increment
	page_size		# the new page size
gdouble gtk_adjustment_get_lower (GtkAdjustment *adjustment);	# Retrieves the minimum value of the adjustment.
	adjustment		# a GtkAdjustment 
	return:		#  The current minimum value of the adjustment 
gdouble gtk_adjustment_get_page_increment (GtkAdjustment *adjustment);	# Retrieves the page increment of the adjustment.
	adjustment		# a GtkAdjustment 
	return:		#  The current page increment of the adjustment 
gdouble gtk_adjustment_get_page_size (GtkAdjustment *adjustment);	# Retrieves the page size of the adjustment.
	adjustment		# a GtkAdjustment 
	return:		#  The current page size of the adjustment 
gdouble gtk_adjustment_get_step_increment (GtkAdjustment *adjustment);	# Retrieves the step increment of the adjustment.
	adjustment		# a GtkAdjustment 
	return:		#  The current step increment of the adjustment. 
gdouble gtk_adjustment_get_minimum_increment (GtkAdjustment *adjustment);	# Gets the smaller of step increment and page increment.
	adjustment		# a GtkAdjustment 
	return:		#  the minimum increment of adjustment 
gdouble gtk_adjustment_get_upper (GtkAdjustment *adjustment);	# Retrieves the maximum value of the adjustment.
	adjustment		# a GtkAdjustment 
	return:		#  The current maximum value of the adjustment 
void gtk_adjustment_set_lower (GtkAdjustment *adjustment, gdouble lower);	# Sets the minimum value of the adjustment.
	adjustment		# a GtkAdjustment 
	lower		# the new minimum value
void gtk_adjustment_set_page_increment (GtkAdjustment *adjustment, gdouble page_increment);	# Sets the page increment of the adjustment.
	adjustment		# a GtkAdjustment 
	page_increment		# the new page increment
void gtk_adjustment_set_page_size (GtkAdjustment *adjustment, gdouble page_size);	# Sets the page size of the adjustment.
	adjustment		# a GtkAdjustment 
	page_size		# the new page size
void gtk_adjustment_set_step_increment (GtkAdjustment *adjustment, gdouble step_increment);	# Sets the step increment of the adjustment.
	adjustment		# a GtkAdjustment 
	step_increment		# the new step increment
void gtk_adjustment_set_upper (GtkAdjustment *adjustment, gdouble upper);	# Sets the maximum value of the adjustment.
	adjustment		# a GtkAdjustment 
	upper		# the new maximum value
gchar  *<span class="c_punctuation">( *GtkCalendarDetailFunc<span class="c_punctuation">) (GtkCalendar *calendar, guint year, guint month, guint day, gpointer user_data);	# This kind of functions provide Pango markup with detail information for thespecified day. Examples for such details are holidays or appointments. Thefunction returns NULL when no information is available.
	calendar		# a GtkCalendar .
	year		# the year for which details are needed.
	month		# the month for which details are needed.
	day		# the day of monthfor which details are needed.
	user_data		# the data passed with 
	return:		#  Newly allocated string with Pango markupwith details for the specified day or NULL .  
GtkWidget  *gtk_calendar_new (void );	#创建对象:calendar, with the current date being selected.
	return:		#  a newly GtkCalendar widget 
void gtk_calendar_select_month (GtkCalendar *calendar, guint month, guint year);	# Shifts the calendar to a different month.
	calendar		# a GtkCalendar 
	month		# a month number between 0 and 11.
	year		# the year the month is in.
void gtk_calendar_select_day (GtkCalendar *calendar, guint day);	# Selects a day from the current month.
	calendar		# a GtkCalendar .
	day		# the day number between 1 and 31, or 0 to unselectthe currently selected day.
void gtk_calendar_mark_day (GtkCalendar *calendar, guint day);	# Places a visual marker on a particular day.
	calendar		# a GtkCalendar 
	day		# the day number to mark between 1 and 31.
void gtk_calendar_unmark_day (GtkCalendar *calendar, guint day);	# Removes the visual marker from a particular day.
	calendar		# a GtkCalendar .
	day		# the day number to unmark between 1 and 31.
gboolean gtk_calendar_get_day_is_marked (GtkCalendar *calendar, guint day);	# Returns if the day of the calendar is already marked.
	calendar		# a GtkCalendar 
	day		# the day number between 1 and 31.
	return:		#  whether the day is marked. 
void gtk_calendar_clear_marks (GtkCalendar *calendar);	# Remove all visual markers.
	calendar		# a GtkCalendar 
GtkCalendarDisplayOptions gtk_calendar_get_display_options (GtkCalendar *calendar);	# Returns the current display options of calendar.
	calendar		# a GtkCalendar 
	return:		#  the display options. 
void gtk_calendar_set_display_options (GtkCalendar *calendar, GtkCalendarDisplayOptions flags);	# Sets display options (whether to display the heading and the monthheadings).
	calendar		# a GtkCalendar 
	flags		# the display options to set
void gtk_calendar_get_date (GtkCalendar *calendar, guint *year, guint *month, guint *day);	# Obtains the selected date from a GtkCalendar .
	calendar		# a GtkCalendar 
	year		#  location to store the year as a decimalnumber (e.g. 2011), or NULL . 
void gtk_calendar_set_detail_func (GtkCalendar *calendar, GtkCalendarDetailFunc func, gpointer data, GDestroyNotify destroy);	# Installs a function which provides Pango markup with detail informationfor each day. Examples for such details are holidays or appointments. Thatinformation is shown below each day when “show-details” is set.A tooltip containing with full detail information is provided, if the entiretext should not fit into the details area, or if “show-details” is not set.
	calendar		# a GtkCalendar .
	func		# a function providing details for each day.
	data		# data to pass to funcinvokations.
	destroy		# a function for releasing data.
gint gtk_calendar_get_detail_width_chars (GtkCalendar *calendar);	# Queries the width of detail cells, in characters.See “detail-width-chars” .
	calendar		# a GtkCalendar .
	return:		#  The width of detail cells, in characters. 
void gtk_calendar_set_detail_width_chars (GtkCalendar *calendar, gint chars);	# Updates the width of detail cells.See “detail-width-chars” .
	calendar		# a GtkCalendar .
	chars		# detail width in characters.
gint gtk_calendar_get_detail_height_rows (GtkCalendar *calendar);	# Queries the height of detail cells, in rows.See “detail-width-chars” .
	calendar		# a GtkCalendar .
	return:		#  The height of detail cells, in rows. 
void gtk_calendar_set_detail_height_rows (GtkCalendar *calendar, gint rows);	# Updates the height of detail cells.See “detail-height-rows” .
	calendar		# a GtkCalendar .
	rows		# detail height in rows.
GtkWidget  *gtk_drawing_area_new (void );	#创建对象:drawing area.
	return:		#  a new GtkDrawingArea  
int gtk_drawing_area_get_content_width (GtkDrawingArea *self);	# Retrieves the value previously set via gtk_drawing_area_set_content_width() .
	self		# a GtkDrawingArea 
	return:		#  The width requested for content of the drawing area 
void gtk_drawing_area_set_content_width (GtkDrawingArea *self, int width);	# Sets the desired width of the contents of the drawing area. Note thatbecause widgets may be allocated larger sizes than they requested, it ispossible that the actual width passed to your draw function is largerthan the width set here. You can use gtk_widget_set_halign() to avoidthat.
	self		# a GtkDrawingArea 
	width		# the width of contents
int gtk_drawing_area_get_content_height (GtkDrawingArea *self);	# Retrieves the value previously set via gtk_drawing_area_set_content_height() .
	self		# a GtkDrawingArea 
	return:		#  The height requested for content of the drawing area 
void gtk_drawing_area_set_content_height (GtkDrawingArea *self, int height);	# Sets the desired height of the contents of the drawing area. Note thatbecause widgets may be allocated larger sizes than they requested, it ispossible that the actual height passed to your draw function is largerthan the height set here. You can use gtk_widget_set_valign() to avoidthat.
	self		# a GtkDrawingArea 
	height		# the height of contents
void <span class="c_punctuation">( *GtkDrawingAreaDrawFunc<span class="c_punctuation">) (GtkDrawingArea *drawing_area, cairo_t *cr, int width, int height, gpointer user_data);	# Whenever drawing_area needs to redraw, this function will be called.
	drawing_area		# the GtkDrawingArea to redraw
	cr		# the context to draw to
	width		# the actual width of the contents. This value will be at leastas wide as GtkDrawingArea:width.
	height		# the actual height of the contents. This value will be at leastas wide as GtkDrawingArea:height.
	user_data		#  user data. 
void gtk_drawing_area_set_draw_func (GtkDrawingArea *self, GtkDrawingAreaDrawFunc draw_func, gpointer user_data, GDestroyNotify destroy);	# Setting a draw function is the main thing you want to do when using a drawingarea. It is called whenever GTK needs to draw the contents of the drawing area to the screen.
	self		# a GtkDrawingArea 
	draw_func		#  callback that lets you drawthe drawing area's contents. 
GtkWidget  *gtk_gl_area_new (void );	#创建对象:GtkGLArea widget.
	return:		#  the newly created GtkGLArea .  
GdkGLContext  *gtk_gl_area_get_context (GtkGLArea *area);	# Retrieves the GdkGLContext used by area.
	area		# a GtkGLArea 
	return:		#  the GdkGLContext .  
void gtk_gl_area_make_current (GtkGLArea *area);	# Ensures that the GdkGLContext used by area is associated withthe GtkGLArea .
	area		# a GtkGLArea 
void gtk_gl_area_queue_render (GtkGLArea *area);	# Marks the currently rendered data (if any) as invalid, and queuesa redraw of the widget, ensuring that the “render” signalis emitted during the draw.
	area		# a GtkGLArea 
void gtk_gl_area_attach_buffers (GtkGLArea *area);	# Ensures that the area framebuffer object is made the current drawand read target, and that all the required buffers for the areaare created and bound to the frambuffer.
	area		# a GtkGLArea 
void gtk_gl_area_set_error (GtkGLArea *area, const GError *error);	# Sets an error on the area which will be shown instead of theGL rendering. This is useful in the “create-context” signal if GL context creation fails.
	area		# a GtkGLArea 
	error		#  a new GError , or NULL to unset the error. 
GError  *gtk_gl_area_get_error (GtkGLArea *area);	# Gets the current error set on the area.
	area		# a GtkGLArea 
	return:		#  the GError or NULL .  
void gtk_gl_area_set_has_alpha (GtkGLArea *area, gboolean has_alpha);	# If has_alpha is TRUE the buffer allocated by the widget will havean alpha channel component, and when rendering to the window theresult will be composited over whatever is below the widget.
	area		# a GtkGLArea 
	has_alpha		# TRUE to add an alpha component
gboolean gtk_gl_area_get_has_alpha (GtkGLArea *area);	# Returns whether the area has an alpha component.
	area		# a GtkGLArea 
	return:		#  TRUE if the areahas an alpha component, FALSE otherwise 
void gtk_gl_area_set_has_depth_buffer (GtkGLArea *area, gboolean has_depth_buffer);	# If has_depth_buffer is TRUE the widget will allocate andenable a depth buffer for the target framebuffer. Otherwisethere will be none.
	area		# a GtkGLArea 
	has_depth_buffer		# TRUE to add a depth buffer
gboolean gtk_gl_area_get_has_depth_buffer (GtkGLArea *area);	# Returns whether the area has a depth buffer.
	area		# a GtkGLArea 
	return:		#  TRUE if the areahas a depth buffer, FALSE otherwise 
void gtk_gl_area_set_has_stencil_buffer (GtkGLArea *area, gboolean has_stencil_buffer);	# If has_stencil_buffer is TRUE the widget will allocate andenable a stencil buffer for the target framebuffer. Otherwisethere will be none.
	area		# a GtkGLArea 
	has_stencil_buffer		# TRUE to add a stencil buffer
gboolean gtk_gl_area_get_has_stencil_buffer (GtkGLArea *area);	# Returns whether the area has a stencil buffer.
	area		# a GtkGLArea 
	return:		#  TRUE if the areahas a stencil buffer, FALSE otherwise 
void gtk_gl_area_set_auto_render (GtkGLArea *area, gboolean auto_render);	# If auto_render is TRUE the “render” signal will beemitted every time the widget draws. This is the default and isuseful if drawing the widget is faster.
	area		# a GtkGLArea 
	auto_render		# a boolean
gboolean gtk_gl_area_get_auto_render (GtkGLArea *area);	# Returns whether the area is in auto render mode or not.
	area		# a GtkGLArea 
	return:		#  TRUE if the areais auto rendering, FALSE otherwise 
void gtk_gl_area_get_required_version (GtkGLArea *area, gint *major, gint *minor);	# Retrieves the required version of OpenGL setusing gtk_gl_area_set_required_version() .
	area		# a GtkGLArea 
	major		#  return location for the required major version. 
void gtk_gl_area_set_required_version (GtkGLArea *area, gint major, gint minor);	# Sets the required version of OpenGL to be used when creating the contextfor the widget.
	area		# a GtkGLArea 
	major		# the major version
	minor		# the minor version
void gtk_gl_area_set_use_es (GtkGLArea *area, gboolean use_es);	# Sets whether the area should create an OpenGL or an OpenGL ES context.
	area		# a GtkGLArea 
	use_es		# whether to use OpenGL or OpenGL ES
gboolean gtk_gl_area_get_use_es (GtkGLArea *area);	# Retrieves the value set by gtk_gl_area_set_use_es() .
	area		# a GtkGLArea 
	return:		#  TRUE if the GtkGLArea should create an OpenGL ES contextand FALSE otherwise 
GtkWidget  *gtk_event_box_new (void );	#创建对象:GtkEventBox .
	return:		#  a new GtkEventBox  
void gtk_event_box_set_above_child (GtkEventBox *event_box, gboolean above_child);	# Set whether the event box window is positioned above the windowsof its child, as opposed to below it. If the window is above, allevents inside the event box will go to the event box. If the windowis below, events in windows of child widgets will first got to thatwidget, and then to its parents.
	event_box		# a GtkEventBox 
	above_child		# TRUE if the event box window is above its child
gboolean gtk_event_box_get_above_child (GtkEventBox *event_box);	# Returns whether the event box window is above or below thewindows of its child. See gtk_event_box_set_above_child() for details.
	event_box		# a GtkEventBox 
	return:		#  TRUE if the event box window is above thewindow of its child 
void gtk_event_box_set_visible_window (GtkEventBox *event_box, gboolean visible_window);	# Set whether the event box uses a visible or invisible childwindow. The default is to use visible windows.
	event_box		# a GtkEventBox 
	visible_window		# TRUE to make the event box have a visible window
gboolean gtk_event_box_get_visible_window (GtkEventBox *event_box);	# Returns whether the event box has a visible window.See gtk_event_box_set_visible_window() for details.
	event_box		# a GtkEventBox 
	return:		#  TRUE if the event box window is visible 
GtkIMContext  *gtk_im_context_simple_new (void );	#创建对象:GtkIMContextSimple .
	return:		#  a new GtkIMContextSimple . 
void gtk_im_context_simple_add_table (GtkIMContextSimple *context_simple, guint16 *data, gint max_seq_len, gint n_seqs);	# Adds an additional table to search to the input context.Each row of the table consists of max_seq_len key symbolsfollowed by two guint16 interpreted as the high and lowwords of a gunicode value. Tables are searched startingfrom the last added.
	context_simple		# A GtkIMContextSimple 
	data		#  the table. 
	n_seqs		# number of sequences in the table
void gtk_im_context_simple_add_compose_file (GtkIMContextSimple *context_simple, const gchar *compose_file);	# void gtk_im_context_simple_add_compose_file (GtkIMContextSimple *context_simple, const gchar *compose_file);</pre></div></div><div class="refsect1"> <h2>Types and Values</h2>
GtkIMContext  *gtk_im_multicontext_new (void );	#创建对象:GtkIMMulticontext .
	return:		#  a new GtkIMMulticontext . 
char  *gtk_im_multicontext_get_context_id (GtkIMMulticontext *context);	# Gets the id of the currently active slave of the context.
	context		# a GtkIMMulticontext 
	return:		#  the id of the currently active slave 
void gtk_im_multicontext_set_context_id (GtkIMMulticontext *context, const char *context_id);	# Sets the context id for context.
	context		# a GtkIMMulticontext 
	context_id		# the id to use 
GtkSizeGroup  *gtk_size_group_new (GtkSizeGroupMode mode);	# Create a new GtkSizeGroup .
	mode		# the mode for the new size group.
	return:		#  a newly created GtkSizeGroup  
void gtk_size_group_set_mode (GtkSizeGroup *size_group, GtkSizeGroupMode mode);	# Sets the GtkSizeGroupMode of the size group. The mode of the sizegroup determines whether the widgets in the size group shouldall have the same horizontal requisition (GTK_SIZE_GROUP_HORIZONTAL )all have the same vertical requisition (GTK_SIZE_GROUP_VERTICAL ),or should all have the same requisition in both directions(GTK_SIZE_GROUP_BOTH ).
	size_group		# a GtkSizeGroup 
	mode		# the mode to set for the size group.
GtkSizeGroupMode gtk_size_group_get_mode (GtkSizeGroup *size_group);	# Gets the current mode of the size group. See gtk_size_group_set_mode() .
	size_group		# a GtkSizeGroup 
	return:		#  the current mode of the size group. 
void gtk_size_group_add_widget (GtkSizeGroup *size_group, GtkWidget *widget);	# Adds a widget to a GtkSizeGroup . In the future, the requisitionof the widget will be determined as the maximum of its requisitionand the requisition of the other widgets in the size group.Whether this applies horizontally, vertically, or in both directionsdepends on the mode of the size group. See gtk_size_group_set_mode() .
	size_group		# a GtkSizeGroup 
	widget		# the GtkWidget to add
void gtk_size_group_remove_widget (GtkSizeGroup *size_group, GtkWidget *widget);	# Removes a widget from a GtkSizeGroup .
	size_group		# a GtkSizeGroup 
	widget		# the GtkWidget to remove
GSList  *gtk_size_group_get_widgets (GtkSizeGroup *size_group);	# Returns the list of widgets associated with size_group.
	size_group		# a GtkSizeGroup 
	return:		#  a GSList ofwidgets. The list is owned by GTK+ and should not be modified.  
void gtk_tooltip_set_markup (GtkTooltip *tooltip, const gchar *markup);	# Sets the text of the tooltip to be markup, which is marked upwith the Pango text markup language.If markup is NULL , the label will be hidden.
	tooltip		# a GtkTooltip 
	markup		#  a markup string (see Pango markup format) or NULL . 
void gtk_tooltip_set_text (GtkTooltip *tooltip, const gchar *text);	# Sets the text of the tooltip to be text. If text is NULL , the labelwill be hidden. See also gtk_tooltip_set_markup() .
	tooltip		# a GtkTooltip 
	text		#  a text string or NULL . 
void gtk_tooltip_set_icon (GtkTooltip *tooltip, GdkPixbuf *pixbuf);	# Sets the icon of the tooltip (which is in front of the text) to bepixbuf. If pixbuf is NULL , the image will be hidden.
	tooltip		# a GtkTooltip 
	pixbuf		#  a GdkPixbuf , or NULL . 
void gtk_tooltip_set_icon_from_icon_name (GtkTooltip *tooltip, const gchar *icon_name, GtkIconSize size);	# Sets the icon of the tooltip (which is in front of the text) to bethe icon indicated by icon_name with the size indicatedby size. If icon_name is NULL , the image will be hidden.
	tooltip		# a GtkTooltip 
	icon_name		#  an icon name, or NULL . 
	size		#  a stock icon size (GtkIconSize ). 
void gtk_tooltip_set_icon_from_gicon (GtkTooltip *tooltip, GIcon *gicon, GtkIconSize size);	# Sets the icon of the tooltip (which is in front of the text)to be the icon indicated by gicon with the size indicatedby size. If gicon is NULL , the image will be hidden.
	tooltip		# a GtkTooltip 
	gicon		#  a GIcon representing the icon, or NULL . 
	size		#  a stock icon size (GtkIconSize ). 
void gtk_tooltip_set_custom (GtkTooltip *tooltip, GtkWidget *custom_widget);	# Replaces the widget packed into the tooltip withcustom_widget. custom_widget does not get destroyed when the tooltip goesaway.By default a box with a GtkImage and GtkLabel is embedded in the tooltip, which can be configured using gtk_tooltip_set_markup() and gtk_tooltip_set_icon() .
	tooltip		# a GtkTooltip 
	custom_widget		#  a GtkWidget , or NULL to unset the old custom widget. 
void gtk_tooltip_trigger_tooltip_query (GdkDisplay *display);	# Triggers a new tooltip query on display, in order to update the currentvisible tooltip, or to show/hide the current tooltip. This function isuseful to call when, for example, the state of the widget changed by akey press.
	display		# a GdkDisplay 
void gtk_tooltip_set_tip_area (GtkTooltip *tooltip, const GdkRectangle *rect);	# Sets the area of the widget, where the contents of this tooltip apply,to be rect (in widget coordinates). This is especially useful forproperly setting tooltips on GtkTreeView rows and cells, GtkIconViews ,etc.
	tooltip		# a GtkTooltip 
	rect		# a GdkRectangle 
GtkWidget  *gtk_viewport_new (GtkAdjustment *hadjustment, GtkAdjustment *vadjustment);	#创建对象:GtkViewport with the given adjustments, or with defaultadjustments if none are given.
	hadjustment		#  horizontal adjustment. 
	return:		#  a new GtkViewport  
void gtk_viewport_set_shadow_type (GtkViewport *viewport, GtkShadowType type);	# Sets the shadow type of the viewport.
	viewport		# a GtkViewport .
	type		# the new shadow type.
GtkShadowType gtk_viewport_get_shadow_type (GtkViewport *viewport);	# Gets the shadow type of the GtkViewport . Seegtk_viewport_set_shadow_type() .
	viewport		# a GtkViewport 
	return:		#  the shadow type  
GtkWidget  *gtk_accessible_get_widget (GtkAccessible *accessible);	# Gets the GtkWidget corresponding to the GtkAccessible .The returned widget does not have a reference added, soyou do not need to unref it.
	accessible		# a GtkAccessible 
	return:		#  pointer to the GtkWidget corresponding to the GtkAccessible , or NULL .  
void gtk_accessible_set_widget (GtkAccessible *accessible, GtkWidget *widget);	# Sets the GtkWidget corresponding to the GtkAccessible .
	accessible		# a GtkAccessible 
	widget		#  a GtkWidget or NULL to unset. 
void gtk_snapshot_push (GtkSnapshot *snapshot, gboolean keep_coordinates, const char *name, ...);	#创建对象:render node, appends it to the current rendernode of snapshot, and makes it the new current render node.
	snapshot		# a GtkSnapshot 
	keep_coordinates		# If TRUE , the current offset and clip will be kept.Otherwise, the clip will be unset and the offset will be reset to(0, 0).
	name		#  a 
void gtk_snapshot_push_transform (GtkSnapshot *snapshot, const graphene_matrix_t *transform, const char *name, ...);	# void gtk_snapshot_push_transform (GtkSnapshot *snapshot, const graphene_matrix_t *transform, const char *name, ...);</pre></div><hr>
void gtk_snapshot_push_opacity (GtkSnapshot *snapshot, double opacity, const char *name, ...);	# void gtk_snapshot_push_opacity (GtkSnapshot *snapshot, double opacity, const char *name, ...);</pre></div><hr>
void gtk_snapshot_push_color_matrix (GtkSnapshot *snapshot, const graphene_matrix_t *color_matrix, const graphene_vec4_t *color_offset, const char *name, ...);	# void gtk_snapshot_push_color_matrix (GtkSnapshot *snapshot, const graphene_matrix_t *color_matrix, const graphene_vec4_t *color_offset, const char *name, ...);</pre></div><hr>
void gtk_snapshot_push_repeat (GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_rect_t *child_bounds, const char *name, ...);	# void gtk_snapshot_push_repeat (GtkSnapshot *snapshot, const graphene_rect_t *bounds, const graphene_rect_t *child_bounds, const char *name, ...);</pre></div><hr>
void gtk_snapshot_push_clip (GtkSnapshot *snapshot, const graphene_rect_t *bounds, const char *name, ...);	# void gtk_snapshot_push_clip (GtkSnapshot *snapshot, const graphene_rect_t *bounds, const char *name, ...);</pre></div><hr>
void gtk_snapshot_push_rounded_clip (GtkSnapshot *snapshot, const GskRoundedRect *bounds, const char *name, ...);	# void gtk_snapshot_push_rounded_clip (GtkSnapshot *snapshot, const GskRoundedRect *bounds, const char *name, ...);</pre></div><hr>
void gtk_snapshot_push_cross_fade (GtkSnapshot *snapshot, double progress, const char *name, ...);	# Snapshots a cross-fade operation between two images with thegiven progress.
	snapshot		# a GtkSnapshot 
	progress		# progress between 0.0 and 1.0
	name		# printf format string for name of the pushed node
	...		# printf-style arguments for the namestring
void gtk_snapshot_push_blend (GtkSnapshot *snapshot, GskBlendMode blend_mode, const char *name, ...);	# Blends together 2 images with the given blend mode.
	snapshot		# a GtkSnapshot 
	blend_mode		# blend mode to use
	name		# printf format string for name of the pushed node
	...		# printf-style arguments for the namestring
void gtk_snapshot_pop (GtkSnapshot *snapshot);	# Removes the top element from the stack of render nodes,and appends it to the node underneath it.
	snapshot		# a GtkSnapshot 
void gtk_snapshot_offset (GtkSnapshot *snapshot, int x, int y);	# Appends a translation by (x, y) to the current transformation.
	snapshot		# a $GtkSnapshot
	x		# horizontal translation
	y		# vertical translation
void gtk_snapshot_get_offset (GtkSnapshot *snapshot, int *x, int *y);	# Queries the offset managed by snapshot. This offset is theaccumulated sum of calls to gtk_snapshot_offset() .
	snapshot		# a GtkSnapshot 
	x		#  return location for x offset. 
	y		#  return location for y offset. 
void gtk_snapshot_append_node (GtkSnapshot *snapshot, GskRenderNode *node);	# Appends node to the current render node of snapshot,without changing the current node. If snapshot doesnot have a current node yet, node will become theinitial node.
	snapshot		# a GtkSnapshot 
	node		# a GskRenderNode 
cairo_t  *gtk_snapshot_append_cairo (GtkSnapshot *snapshot, const graphene_rect_t *bounds, const char *name, ...);	#创建对象:render node and appends it to the current rendernode of snapshot, without changing the current node.
	snapshot		# a GtkSnapshot 
	bounds		# the bounds for the new node
	name		#  a 
	return:		#  a cairo_t suitable for drawing the contents of the newlycreated render node 
void gtk_snapshot_append_texture (GtkSnapshot *snapshot, GskTexture *texture, const graphene_rect_t *bounds, const char *name, ...);	#创建对象:render node drawing the texture into the given bounds and appends itto the current render node of snapshot.
	snapshot		# a GtkSnapshot 
	texture		# the GskTexture to render
	bounds		# the bounds for the new node
	name		#  a 
	...		# arguments to insert into the format string
void gtk_snapshot_append_color (GtkSnapshot *snapshot, const GdkRGBA *color, const graphene_rect_t *bounds, const char *name, ...);	#创建对象:render node drawing the color into the given bounds and appends itto the current render node of snapshot.
	snapshot		# a GtkSnapshot 
	color		# the GdkRGBA to draw
	bounds		# the bounds for the new node
	name		#  a 
	...		# arguments to insert into the format string
gboolean gtk_snapshot_clips_rect (GtkSnapshot *snapshot, const cairo_rectangle_int_t *bounds);	# Tests whether the rectangle is entirely outside the clip region of snapshot.
	snapshot		# a GtkSnapshot 
	bounds		# a rectangle
	return:		#  TRUE is boundsis entirely outside the clip region 
void gtk_snapshot_render_background (GtkSnapshot *snapshot, GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height);	# Creates a render node for the CSS background according to context,and appends it to the current node of snapshot, without changingthe current node.
	snapshot		# a GtkSnapshot 
	context		# the GtkStyleContext to use
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_snapshot_render_frame (GtkSnapshot *snapshot, GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height);	# Creates a render node for the CSS border according to context,and appends it to the current node of snapshot, without changingthe current node.
	snapshot		# a GtkSnapshot 
	context		# the GtkStyleContext to use
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_snapshot_render_focus (GtkSnapshot *snapshot, GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height);	# Creates a render node for the focus outline according to context,and appends it to the current node of snapshot, without changingthe current node.
	snapshot		# a GtkSnapshot 
	context		# the GtkStyleContext to use
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_snapshot_render_layout (GtkSnapshot *snapshot, GtkStyleContext *context, gdouble x, gdouble y, PangoLayout *layout);	# Creates a render node for rendering layout according to the styleinformation in context, and appends it to the current node of snapshot,without changing the current node.
	snapshot		# a GtkSnapshot 
	context		# the GtkStyleContext to use
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	layout		# the PangoLayout to render
void gtk_snapshot_render_insertion_cursor (GtkSnapshot *snapshot, GtkStyleContext *context, gdouble x, gdouble y, PangoLayout *layout, int index, PangoDirection direction);	# Draws a text caret on cr at the specified index of layout.
	snapshot		# snapshot to render to
	context		# a GtkStyleContext 
	x		# X origin
	y		# Y origin
	layout		# the PangoLayout of the text
	index		# the index in the PangoLayout 
	direction		# the PangoDirection of the text
void gtk_snapshot_render_icon (GtkSnapshot *snapshot, GtkStyleContext *context, GdkPixbuf *pixbuf, gdouble x, gdouble y);	# Creates a render node for rendering pixbuf according to the styleinformation in context, and appends it to the current node of snapshot,without changing the current node.
	snapshot		# a GtkSnapshot 
	context		# the GtkStyleContext to use
	pixbuf		# the GdkPixbuf to render
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
void <span class="c_punctuation">( *GtkCallback<span class="c_punctuation">) (GtkWidget *widget, gpointer data);	# The type of the callback functions used for e.g. iterating overthe children of a container, see gtk_container_foreach() .
	widget		# the widget to operate on
	data		#  user-supplied data. 
GtkWidget  *gtk_widget_new (GType type, const gchar *first_property_name, ...);	# This is a convenience function for creating a widget and settingits properties in one go. For example you might write:gtk_widget_new (GTK_TYPE_LABEL, "label", "Hello World", "xalign",0.0, NULL) to create a left-aligned label. Equivalent tog_object_new() , but returns a widget so you don’t have tocast the object yourself.
	type		# type ID of the widget to create
	first_property_name		# name of first property to set
	...		# value of first property, followed by more properties,NULL -terminated
	return:		#  a new GtkWidget of type widget_type 
void gtk_widget_destroy (GtkWidget *widget);	# Destroys a widget.
	widget		# a GtkWidget 
gboolean gtk_widget_in_destruction (GtkWidget *widget);	# Returns whether the widget is currently being destroyed.This information can sometimes be used to avoid doingunnecessary work.
	widget		# a GtkWidget 
	return:		#  TRUE if widgetis being destroyed 
void gtk_widget_destroyed (GtkWidget *widget, GtkWidget **widget_pointer);	# This function sets *widget_pointer to NULL if widget_pointer !=NULL . It’s intended to be used as a callback connected to the“destroy” signal of a widget. You connect gtk_widget_destroyed() as a signal handler, and pass the address of your widget variableas user data. Then when the widget is destroyed, the variable willbe set to NULL . Useful for example to avoid multiple copiesof the same dialog.
	widget		# a GtkWidget 
	widget_pointer		#  address of a variable that contains widget. 
void gtk_widget_unparent (GtkWidget *widget);	# This function is only for use in widget implementations.Should be called by parent widgets to dissociate widgetfrom the parent.
	widget		# a GtkWidget 
void gtk_widget_show (GtkWidget *widget);	# Flags a widget to be displayed. Any widget that isn’t shown willnot appear on the screen.
	widget		# a GtkWidget 
void gtk_widget_show_now (GtkWidget *widget);	# Shows a widget. If the widget is an unmapped toplevel widget(i.e. a GtkWindow that has not yet been shown), enter the mainloop and wait for the window to actually be mapped. Be careful;because the main loop is running, anything can happen duringthis function.
	widget		# a GtkWidget 
void gtk_widget_hide (GtkWidget *widget);	# Reverses the effects of gtk_widget_show() , causing the widget to behidden (invisible to the user).
	widget		# a GtkWidget 
void gtk_widget_map (GtkWidget *widget);	# This function is only for use in widget implementations. Causesa widget to be mapped if it isn’t already.
	widget		# a GtkWidget 
void gtk_widget_unmap (GtkWidget *widget);	# This function is only for use in widget implementations. Causesa widget to be unmapped if it’s currently mapped.
	widget		# a GtkWidget 
void gtk_widget_realize (GtkWidget *widget);	# Creates the GDK (windowing system) resources associated with awidget. For example, widget-&gt;window will be created when a widgetis realized. Normally realization happens implicitly; if you showa widget and all its parent containers, then the widget will berealized and mapped automatically.
	widget		# a GtkWidget 
void gtk_widget_unrealize (GtkWidget *widget);	# This function is only useful in widget implementations.Causes a widget to be unrealized (frees all GDK resourcesassociated with the widget, such as widget-&gt;window).
	widget		# a GtkWidget 
void gtk_widget_draw (GtkWidget *widget, cairo_t *cr);	# Draws widget to cr. The top left corner of the widget will bedrawn to the currently set origin point of cr.
	widget		# the widget to draw. It must be drawable (see
	cr		# a cairo context to draw to
void gtk_widget_queue_draw (GtkWidget *widget);	# Equivalent to calling gtk_widget_queue_draw_area() for theentire area of a widget.
	widget		# a GtkWidget 
void gtk_widget_queue_resize (GtkWidget *widget);	# This function is only for use in widget implementations.Flags a widget to have its size renegotiated; shouldbe called when a widget for some reason has a new size request.For example, when you change the text in a GtkLabel , GtkLabel queues a resize to ensure there’s enough space for the new text.
	widget		# a GtkWidget 
void gtk_widget_queue_resize_no_redraw (GtkWidget *widget);	# This function works like gtk_widget_queue_resize() ,except that the widget is not invalidated.
	widget		# a GtkWidget 
void gtk_widget_queue_allocate (GtkWidget *widget);	# This function is only for use in widget implementations.
	widget		# a GtkWidget 
GdkFrameClock  *gtk_widget_get_frame_clock (GtkWidget *widget);	# Obtains the frame clock for a widget. The frame clock is a global“ticker” that can be used to drive animations and repaints. Themost common reason to get the frame clock is to callgdk_frame_clock_get_frame_time() , in order to get a time to use foranimating. For example you might record the start of the animationwith an initial value from gdk_frame_clock_get_frame_time() , andthen update the animation by callinggdk_frame_clock_get_frame_time() again during each repaint.
	widget		# a GtkWidget 
	return:		#  a GdkFrameClock ,or NULL if widget is unrealized.  
gint gtk_widget_get_scale_factor (GtkWidget *widget);	# Retrieves the internal scale factor that maps from window coordinatesto the actual device pixels. On traditional systems this is 1, onhigh density outputs, it can be a higher value (typically 2).
	widget		# a GtkWidget 
	return:		#  the scale factor for widget 
gboolean <span class="c_punctuation">( *GtkTickCallback<span class="c_punctuation">) (GtkWidget *widget, GdkFrameClock *frame_clock, gpointer user_data);	# Callback type for adding a function to update animations. See gtk_widget_add_tick_callback() .
	widget		# the widget
	frame_clock		# the frame clock for the widget (same as calling 
	user_data		# user data passed to 
	return:		#  G_SOURCE_CONTINUE if the tick callback should continue to be called,G_SOURCE_REMOVE if the tick callback should be removed. 
guint gtk_widget_add_tick_callback (GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify);	# Queues an animation frame update and adds a callback to be calledbefore each frame. Until the tick callback is removed, it will becalled frequently (usually at the frame rate of the output deviceor as quickly as the application can be repainted, whichever isslower). For this reason, is most suitable for handling graphicsthat change every frame or every few frames. The tick callback doesnot automatically imply a relayout or repaint. If you want arepaint or relayout, and aren’t changing widget properties thatwould trigger that (for example, changing the text of a GtkLabel ),then you will have to call gtk_widget_queue_resize() orgtk_widget_queue_draw_area() yourself.
	widget		# a GtkWidget 
	callback		# function to call for updating animations
	user_data		# data to pass to callback
	notify		# function to call to free user_datawhen the callback is removed.
	return:		#  an id for the connection of this callback. Remove the callbackby passing it to gtk_widget_remove_tick_callback()  
void gtk_widget_remove_tick_callback (GtkWidget *widget, guint id);	# Removes a tick callback previously registered withgtk_widget_add_tick_callback() .
	widget		# a GtkWidget 
	id		# an id returned by 
void gtk_widget_size_allocate (GtkWidget *widget, GtkAllocation *allocation);	# This function is only used by GtkContainer subclasses, to assign a sizeand position to their child widgets.
	widget		# a GtkWidget 
	allocation		# position and size to be allocated to widget
void gtk_widget_size_allocate_with_baseline (GtkWidget *widget, GtkAllocation *allocation, gint baseline);	# This function is only used by GtkContainer subclasses, to assign a size,position and (optionally) baseline to their child widgets.
	widget		# a GtkWidget 
	allocation		# position and size to be allocated to widget
	baseline		# The baseline of the child, or -1
void gtk_widget_add_accelerator (GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags);	# Installs an accelerator for this widget in accel_group that causesaccel_signal to be emitted if the accelerator is activated.The accel_group needs to be added to the widget’s toplevel viagtk_window_add_accel_group() , and the signal must be of type G_SIGNAL_ACTION .Accelerators added through this function are not user changeable duringruntime. If you want to support accelerators that can be changed by theuser, use gtk_accel_map_add_entry() and gtk_widget_set_accel_path() orgtk_menu_item_set_accel_path() instead.
	widget		# widget to install an accelerator on
	accel_signal		# widget signal to emit on accelerator activation
	accel_group		# accel group for this widget, added to its toplevel
	accel_key		# GDK keyval of the accelerator
	accel_mods		# modifier key combination of the accelerator
	accel_flags		# flag accelerators, e.g. GTK_ACCEL_VISIBLE 
gboolean gtk_widget_remove_accelerator (GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods);	# Removes an accelerator from widget, previously installed withgtk_widget_add_accelerator() .
	widget		# widget to install an accelerator on
	accel_group		# accel group for this widget
	accel_key		# GDK keyval of the accelerator
	accel_mods		# modifier key combination of the accelerator
	return:		#  whether an accelerator was installed and could be removed 
void gtk_widget_set_accel_path (GtkWidget *widget, const gchar *accel_path, GtkAccelGroup *accel_group);	# Given an accelerator group, accel_group, and an accelerator path,accel_path, sets up an accelerator in accel_group so whenever thekey binding that is defined for accel_path is pressed, widgetwill be activated. This removes any accelerators (for anyaccelerator group) installed by previous calls togtk_widget_set_accel_path() . Associating accelerators withpaths allows them to be modified by the user and the modificationsto be saved for future use. (See gtk_accel_map_save() .)
	widget		# a GtkWidget 
	accel_path		#  path used to look up the accelerator. 
GList  *gtk_widget_list_accel_closures (GtkWidget *widget);	# Lists the closures used by widget for accelerator group connectionswith gtk_accel_group_connect_by_path() or gtk_accel_group_connect() .The closures can be used to monitor accelerator changes on widget,by connecting to the GtkAccelGroup::accel-changed signal of theGtkAccelGroup of a closure which can be found out withgtk_accel_group_from_accel_closure() .
	widget		# widget to list accelerator closures for
	return:		#  a newly allocated GList of closures.  
gboolean gtk_widget_can_activate_accel (GtkWidget *widget, guint signal_id);	# Determines whether an accelerator that activates the signalidentified by signal_id can currently be activated.This is done by emitting the “can-activate-accel” signal on widget; if the signal isn’t overridden by ahandler or in a derived widget, then the default check isthat the widget must be sensitive, and the widget and allits ancestors mapped.
	widget		# a GtkWidget 
	signal_id		# the ID of a signal installed on widget
	return:		#  TRUE if the accelerator can be activated. 
gboolean gtk_widget_event (GtkWidget *widget, GdkEvent *event);	# Rarely-used function. This function is used to emitthe event signals on a widget (those signals should neverbe emitted without using this function to do so).If you want to synthesize an event though, don’t use this function;instead, use gtk_main_do_event() so the event will behave as ifit were in the event queue. Don’t synthesize expose events; instead,use gtk_widget_queue_draw_region() to invalidate a region of thewindow.
	widget		# a GtkWidget 
	event		# a GdkEvent 
	return:		#  return from the event signal emission (TRUE ifthe event was handled) 
gboolean gtk_widget_activate (GtkWidget *widget);	# For widgets that can be “activated” (buttons, menu items, etc.)this function activates them. Activation is what happens when youpress Enter on a widget during key navigation. If widget isn'tactivatable, the function returns FALSE .
	widget		# a GtkWidget that’s activatable
	return:		#  TRUE if the widget was activatable 
gboolean gtk_widget_intersect (GtkWidget *widget, const GdkRectangle *area, GdkRectangle *intersection);	# Computes the intersection of a widget’s area and area, storingthe intersection in intersection, and returns TRUE if there wasan intersection. intersection may be NULL if you’re onlyinterested in whether there was an intersection.
	widget		# a GtkWidget 
	area		# a rectangle
	intersection		#  rectangle to storeintersection of widgetand area. 
	return:		#  TRUE if there was an intersection 
gboolean gtk_widget_is_focus (GtkWidget *widget);	# Determines if the widget is the focus widget within itstoplevel. (This does not mean that the “has-focus” property isnecessarily set; “has-focus” will only be set if thetoplevel widget additionally has the global input focus.)
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is the focus widget. 
void gtk_widget_grab_focus (GtkWidget *widget);	# Causes widget to have the keyboard focus for the GtkWindow it'sinside. widget must be a focusable widget, such as a GtkEntry ;something like GtkFrame won’t work.
	widget		# a GtkWidget 
void gtk_widget_grab_default (GtkWidget *widget);	# Causes widget to become the default widget. widget must be able to bea default widget; typically you would ensure this yourselfby calling gtk_widget_set_can_default() with a TRUE value.The default widget is activated whenthe user presses Enter in a window. Default widgets must beactivatable, that is, gtk_widget_activate() should affect them. Notethat GtkEntry widgets require the “activates-default” propertyset to TRUE before they activate the default widget when Enteris pressed and the GtkEntry is focused.
	widget		# a GtkWidget 
void gtk_widget_set_name (GtkWidget *widget, const gchar *name);	# Widgets can be named, which allows you to refer to them from aCSS file. You can apply a style to widgets with a particular namein the CSS file. See the documentation for the CSS syntax (on thesame page as the docs for GtkStyleContext ).
	widget		# a GtkWidget 
	name		# name for the widget
gchar  *gtk_widget_get_name (GtkWidget *widget);	# Retrieves the name of a widget. See gtk_widget_set_name() for thesignificance of widget names.
	widget		# a GtkWidget 
	return:		#  name of the widget. This string is owned by GTK+ andshould not be modified or freed 
void gtk_widget_set_sensitive (GtkWidget *widget, gboolean sensitive);	# Sets the sensitivity of a widget. A widget is sensitive if the usercan interact with it. Insensitive widgets are “grayed out” and theuser can’t interact with them. Insensitive widgets are known as“inactive”, “disabled”, or “ghosted” in some other toolkits.
	widget		# a GtkWidget 
	sensitive		# TRUE to make the widget sensitive
void gtk_widget_set_parent (GtkWidget *widget, GtkWidget *parent);	# This function is useful only when implementing subclasses ofGtkWidget .Sets parent as the parent widget of widget, and takes care ofsome details such as updating the state and style of the childto reflect its new location and resizing the parent. The oppositefunction is gtk_widget_unparent() .
	widget		# a GtkWidget 
	parent		# parent widget
void gtk_widget_set_parent_window (GtkWidget *widget, GdkWindow *parent_window);	# Sets a non default parent window for widget.
	widget		# a GtkWidget .
	parent_window		# the new parent window.
GdkWindow  *gtk_widget_get_parent_window (GtkWidget *widget);	# Gets widget’s parent window.
	widget		# a GtkWidget .
	return:		#  the parent window of widget.  
void gtk_widget_set_events (GtkWidget *widget, gint events);	# Sets the event mask (see GdkEventMask ) for a widget. The eventmask determines which events a widget will receive. Keep in mindthat different widgets have different default event masks, and bychanging the event mask you may disrupt a widget’s functionality,so be careful. This function must be called while a widget isunrealized. Consider gtk_widget_add_events() for widgets that arealready realized, or if you want to preserve the existing eventmask. This function can’t be used with widgets that have no window.(See gtk_widget_get_has_window() ). To get events on those widgets,place them inside a GtkEventBox and receive events on the eventbox.
	widget		# a GtkWidget 
	events		# event mask
gint gtk_widget_get_events (GtkWidget *widget);	# Returns the event mask (see GdkEventMask ) for the widget. These are theevents that the widget will receive.
	widget		# a GtkWidget 
	return:		#  event mask for widget 
void gtk_widget_add_events (GtkWidget *widget, gint events);	# Adds the events in the bitfield events to the event mask forwidget. See gtk_widget_set_events() and theinput handling overview for details.
	widget		# a GtkWidget 
	events		# an event mask, see GdkEventMask 
void gtk_widget_set_device_events (GtkWidget *widget, GdkDevice *device, GdkEventMask events);	# Sets the device event mask (see GdkEventMask ) for a widget. The eventmask determines which events a widget will receive from device. Keepin mind that different widgets have different default event masks, and bychanging the event mask you may disrupt a widget’s functionality,so be careful. This function must be called while a widget isunrealized. Consider gtk_widget_add_device_events() for widgets that arealready realized, or if you want to preserve the existing eventmask. This function can’t be used with windowless widgets (which returnFALSE from gtk_widget_get_has_window() );to get events on those widgets, place them inside a GtkEventBox and receive events on the event box.
	widget		# a GtkWidget 
	device		# a GdkDevice 
	events		# event mask
GdkEventMask gtk_widget_get_device_events (GtkWidget *widget, GdkDevice *device);	# Returns the events mask for the widget corresponding to an specific device. Theseare the events that the widget will receive when device operates on it.
	widget		# a GtkWidget 
	device		# a GdkDevice 
	return:		#  device event mask for widget 
void gtk_widget_add_device_events (GtkWidget *widget, GdkDevice *device, GdkEventMask events);	# Adds the device events in the bitfield events to the event mask forwidget. See gtk_widget_set_device_events() for details.
	widget		# a GtkWidget 
	device		# a GdkDevice 
	events		# an event mask, see GdkEventMask 
void gtk_widget_set_device_enabled (GtkWidget *widget, GdkDevice *device, gboolean enabled);	# Enables or disables a GdkDevice to interact with widgetand all its children.
	widget		# a GtkWidget 
	device		# a GdkDevice 
	enabled		# whether to enable the device
gboolean gtk_widget_get_device_enabled (GtkWidget *widget, GdkDevice *device);	# Returns whether device can interact with widget and itschildren. See gtk_widget_set_device_enabled() .
	widget		# a GtkWidget 
	device		# a GdkDevice 
	return:		#  TRUE is deviceis enabled for widget 
GtkWidget  *gtk_widget_get_toplevel (GtkWidget *widget);	# This function returns the topmost widget in the container hierarchywidget is a part of. If widget has no parent widgets, it will bereturned as the topmost widget. No reference will be added to thereturned widget; it should not be unreferenced.
	widget		# a GtkWidget 
	return:		#  the topmost ancestor of widget, or widgetitselfif there’s no ancestor.  
GtkWidget  *gtk_widget_get_ancestor (GtkWidget *widget, GType widget_type);	# Gets the first ancestor of widget with type widget_type. For example,gtk_widget_get_ancestor (widget, GTK_TYPE_BOX) getsthe first GtkBox that’s an ancestor of widget. No reference will beadded to the returned widget; it should not be unreferenced. See noteabout checking for a toplevel GtkWindow in the docs forgtk_widget_get_toplevel() .
	widget		# a GtkWidget 
	widget_type		# ancestor type
	return:		#  the ancestor widget, or NULL if not found.  
gboolean gtk_widget_is_ancestor (GtkWidget *widget, GtkWidget *ancestor);	# Determines whether widget is somewhere inside ancestor, possibly withintermediate containers.
	widget		# a GtkWidget 
	ancestor		# another GtkWidget 
	return:		#  TRUE if ancestorcontains widgetas a child,grandchild, great grandchild, etc. 
gboolean gtk_widget_translate_coordinates (GtkWidget *src_widget, GtkWidget *dest_widget, gint src_x, gint src_y, gint *dest_x, gint *dest_y);	# Translate coordinates relative to src_widget’s allocation to coordinatesrelative to dest_widget’s allocations. In order to perform thisoperation, both widgets must be realized, and must share a commontoplevel.
	src_widget		# a GtkWidget 
	dest_widget		# a GtkWidget 
	src_x		# X position relative to src_widget
	src_y		# Y position relative to src_widget
	dest_x		#  location to store X position relative to dest_widget. 
	return:		#  FALSE if either widget was not realized, or therewas no common ancestor. In this case, nothing is stored in*dest_xand *dest_y. Otherwise TRUE . 
gboolean gtk_widget_hide_on_delete (GtkWidget *widget);	# Utility function; intended to be connected to the “delete-event” signal on a GtkWindow . The function calls gtk_widget_hide() on itsargument, then returns TRUE . If connected to ::delete-event, theresult is that clicking the close button for a window (on thewindow frame, top right corner usually) will hide but not destroythe window. By default, GTK+ destroys windows when ::delete-eventis received.
	widget		# a GtkWidget 
	return:		#  TRUE  
void gtk_widget_set_direction (GtkWidget *widget, GtkTextDirection dir);	# Sets the reading direction on a particular widget. This directioncontrols the primary direction for widgets containing text,and also the direction in which the children of a container arepacked. The ability to set the direction is present in orderso that correct localization into languages with right-to-leftreading directions can be done. Generally, applications willlet the default reading direction present, except for containerswhere the containers are arranged in an order that is explicitlyvisual rather than logical (such as buttons for text justification).
	widget		# a GtkWidget 
	dir		# the new direction
GtkTextDirection gtk_widget_get_direction (GtkWidget *widget);	# Gets the reading direction for a particular widget. Seegtk_widget_set_direction() .
	widget		# a GtkWidget 
	return:		#  the reading direction for the widget. 
void gtk_widget_set_default_direction (GtkTextDirection dir);	# Sets the default reading direction for widgets where thedirection has not been explicitly set by gtk_widget_set_direction() .
	dir		# the new default direction. This cannot beGTK_TEXT_DIR_NONE .
GtkTextDirection gtk_widget_get_default_direction (void );	# Obtains the current default reading direction. Seegtk_widget_set_default_direction() .
	return:		#  the current default direction. 
void gtk_widget_shape_combine_region (GtkWidget *widget, cairo_region_t *region);	# Sets a shape for this widget’s GDK window. This allows fortransparent windows etc., see gdk_window_shape_combine_region() for more information.
	widget		# a GtkWidget 
	region		#  shape to be added, or NULL to remove an existing shape. 
void gtk_widget_input_shape_combine_region (GtkWidget *widget, cairo_region_t *region);	# Sets an input shape for this widget’s GDK window. This allows forwindows which react to mouse click in a nonrectangular region, seegdk_window_input_shape_combine_region() for more information.
	widget		# a GtkWidget 
	region		#  shape to be added, or NULL to remove an existing shape. 
PangoContext  *gtk_widget_create_pango_context (GtkWidget *widget);	#创建对象:PangoContext with the appropriate font map,font options, font description, and base direction for drawingtext for this widget. See also gtk_widget_get_pango_context() .
	widget		# a GtkWidget 
	return:		#  the new PangoContext .  
PangoContext  *gtk_widget_get_pango_context (GtkWidget *widget);	# Gets a PangoContext with the appropriate font map, font description,and base direction for this widget. Unlike the context returnedby gtk_widget_create_pango_context() , this context is owned bythe widget (it can be used until the screen for the widget changesor the widget is removed from its toplevel), and will be updated tomatch any changes to the widget’s attributes. This can be trackedby using the “screen-changed” signal on the widget.
	widget		# a GtkWidget 
	return:		#  the PangoContext for the widget.  
void gtk_widget_set_font_options (GtkWidget *widget, const cairo_font_options_t *options);	# Sets the cairo_font_options_t used for Pango rendering in this widget.When not set, the default font options for the GdkScreen will be used.
	widget		# a GtkWidget 
	options		#  a cairo_font_options_t , or NULL to unset anypreviously set default font options. 
cairo_font_options_t  *gtk_widget_get_font_options (GtkWidget *widget);	# Returns the cairo_font_options_t used for Pango rendering. When not set,the defaults font options for the GdkScreen will be used.
	widget		# a GtkWidget 
	return:		#  the cairo_font_options_t or NULL if not set.  
void gtk_widget_set_font_map (GtkWidget *widget, PangoFontMap *font_map);	# Sets the font map to use for Pango rendering. When not set, the widgetwill inherit the font map from its parent.
	widget		# a GtkWidget 
	font_map		#  a PangoFontMap , or NULL to unset any previouslyset font map. 
PangoFontMap  *gtk_widget_get_font_map (GtkWidget *widget);	# Gets the font map that has been set with gtk_widget_set_font_map() .
	widget		# a GtkWidget 
	return:		#  A PangoFontMap , or NULL .  
PangoLayout  *gtk_widget_create_pango_layout (GtkWidget *widget, const gchar *text);	#创建对象:PangoLayout with the appropriate font map,font description, and base direction for drawing text forthis widget.
	widget		# a GtkWidget 
	text		#  text to set on the layout (can be NULL ). 
	return:		#  the new PangoLayout .  
void gtk_widget_queue_draw_area (GtkWidget *widget, gint x, gint y, gint width, gint height);	# Convenience function that calls gtk_widget_queue_draw_region() onthe region created from the given coordinates.
	widget		# a GtkWidget 
	x		# x coordinate of upper-left corner of rectangle to redraw
	y		# y coordinate of upper-left corner of rectangle to redraw
	width		# width of region to draw
	height		# height of region to draw
void gtk_widget_queue_draw_region (GtkWidget *widget, const cairo_region_t *region);	# Invalidates the area of widget defined by region by notifyingthe parent via its GtkWidgetClass::queue_draw_child() function.Once the main loop becomes idle (after the current batch ofevents has been processed, roughly), the window will receiveexpose events for the union of all regions that have beeninvalidated.
	widget		# a GtkWidget 
	region		# region to draw
void gtk_widget_set_redraw_on_allocate (GtkWidget *widget, gboolean redraw_on_allocate);	# Sets whether the entire widget is queued for drawing when its sizeallocation changes. By default, this setting is TRUE andthe entire widget is redrawn on every size change. If your widgetleaves the upper left unchanged when made bigger, turning thissetting off will improve performance.
	widget		# a GtkWidget 
	redraw_on_allocate		# if TRUE , the entire widget will be redrawnwhen it is allocated to a new size. Otherwise, only thenew portion of the widget will be redrawn.
gboolean gtk_widget_mnemonic_activate (GtkWidget *widget, gboolean group_cycling);	# Emits the “mnemonic-activate” signal.
	widget		# a GtkWidget 
	group_cycling		# TRUE if there are other widgets with the same mnemonic
	return:		#  TRUE if the signal has been handled 
void gtk_widget_class_install_style_property (GtkWidgetClass *klass, GParamSpec *pspec);	# Installs a style property on a widget class. The parser for thestyle property is determined by the value type of pspec.
	klass		# a GtkWidgetClass 
	pspec		# the GParamSpec for the property
GParamSpec  *gtk_widget_class_find_style_property (GtkWidgetClass *klass, const gchar *property_name);	# Finds a style property of a widget class by name.
	klass		# a GtkWidgetClass 
	property_name		# the name of the style property to find
	return:		#  the GParamSpec of the style property orNULL if classhas no style property with that name.  
gboolean gtk_widget_send_focus_change (GtkWidget *widget, GdkEvent *event);	# Sends the focus change event to widget
	widget		# a GtkWidget 
	event		# a GdkEvent of type GDK_FOCUS_CHANGE
	return:		#  the return value from the event signal emission: TRUE if the event was handled, and FALSE otherwise 
void gtk_widget_style_get (GtkWidget *widget, const gchar *first_property_name, ...);	# Gets the values of a multiple style properties of widget.
	widget		# a GtkWidget 
	first_property_name		# the name of the first property to get
	...		# pairs of property names and locations to return theproperty values, starting with the location forfirst_property_name, terminated by NULL .
void gtk_widget_style_get_valist (GtkWidget *widget, const gchar *first_property_name, va_list var_args);	# Non-vararg variant of gtk_widget_style_get() . Used primarily by languagebindings.
	widget		# a GtkWidget 
	first_property_name		# the name of the first property to get
	var_args		# a va_list of pairs of property names andlocations to return the property values, starting with the locationfor first_property_name.
void gtk_widget_class_set_accessible_type (GtkWidgetClass *widget_class, GType type);	# Sets the type to be used for creating accessibles for widgets ofwidget_class. The given type must be a subtype of the type used foraccessibles of the parent class.
	widget_class		# class to set the accessible type for
	type		# The object type that implements the accessible for widget_class
void gtk_widget_class_set_accessible_role (GtkWidgetClass *widget_class, AtkRole role);	# Sets the default AtkRole to be set on accessibles created forwidgets of widget_class. Accessibles may decide to not honor thissetting if their role reporting is more refined. Calls to gtk_widget_class_set_accessible_type() will reset this value.
	widget_class		# class to set the accessible role for
	role		# The role to use for accessibles created for widget_class
AtkObject  *gtk_widget_get_accessible (GtkWidget *widget);	# Returns the accessible object that describes the widget to anassistive technology.
	widget		# a GtkWidget 
	return:		#  the AtkObject associated with widget.  
gboolean gtk_widget_child_focus (GtkWidget *widget, GtkDirectionType direction);	# This function is used by custom widget implementations; if you'rewriting an app, you’d use gtk_widget_grab_focus() to move the focusto a particular widget, and gtk_container_set_focus_chain() tochange the focus tab order. So you may want to investigate thosefunctions instead.
	widget		# a GtkWidget 
	direction		# direction of focus movement
	return:		#  TRUE if focus ended up inside widget 
void gtk_widget_child_notify (GtkWidget *widget, const gchar *child_property);	# Emits a “child-notify” signal for thechild property child_propertyon widget.
	widget		# a GtkWidget 
	child_property		# the name of a child property installed on theclass of widget’s parent
void gtk_widget_freeze_child_notify (GtkWidget *widget);	# Stops emission of “child-notify” signals on widget. Thesignals are queued until gtk_widget_thaw_child_notify() is calledon widget.
	widget		# a GtkWidget 
gboolean gtk_widget_get_child_visible (GtkWidget *widget);	# Gets the value set with gtk_widget_set_child_visible() .If you feel a need to use this function, your code probablyneeds reorganization.
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is mapped with the parent. 
GtkWidget  *gtk_widget_get_parent (GtkWidget *widget);	# Returns the parent widget of widget.
	widget		# a GtkWidget 
	return:		#  the parent widget of widget, or NULL .  
GtkSettings  *gtk_widget_get_settings (GtkWidget *widget);	# Gets the settings object holding the settings used for this widget.
	widget		# a GtkWidget 
	return:		#  the relevant GtkSettings object.  
GtkClipboard  *gtk_widget_get_clipboard (GtkWidget *widget, GdkAtom selection);	# Returns the clipboard object for the given selection tobe used with widget. widget must have a GdkDisplay associated with it, so must be attached to a toplevelwindow.
	widget		# a GtkWidget 
	selection		# a GdkAtom which identifies the clipboardto use. GDK_SELECTION_CLIPBOARD gives thedefault clipboard. Another common valueis GDK_SELECTION_PRIMARY , which givesthe primary X selection.
	return:		#  the appropriate clipboard object. If noclipboard already exists, a new one willbe created. Once a clipboard object hasbeen created, it is persistent for all time.  
GdkDisplay  *gtk_widget_get_display (GtkWidget *widget);	# Get the GdkDisplay for the toplevel window associated withthis widget. This function can only be called after the widgethas been added to a widget hierarchy with a GtkWindow at the top.
	widget		# a GtkWidget 
	return:		#  the GdkDisplay for the toplevel for this widget.  
GdkScreen  *gtk_widget_get_screen (GtkWidget *widget);	# Get the GdkScreen from the toplevel window associated withthis widget. This function can only be called after the widgethas been added to a widget hierarchy with a GtkWindow at the top.
	widget		# a GtkWidget 
	return:		#  the GdkScreen for the toplevel for this widget.  
gboolean gtk_widget_has_screen (GtkWidget *widget);	# Checks whether there is a GdkScreen is associated withthis widget. All toplevel widgets have an associatedscreen, and all widgets added into a hierarchy with a toplevelwindow at the top.
	widget		# a GtkWidget 
	return:		#  TRUE if there is a GdkScreen associatedwith the widget. 
void gtk_widget_get_size_request (GtkWidget *widget, gint *width, gint *height);	# Gets the size request that was explicitly set for the widget usinggtk_widget_set_size_request() . A value of -1 stored in width orheight indicates that that dimension has not been set explicitlyand the natural requisition of the widget will be used instead. Seegtk_widget_set_size_request() . To get the size a widget willactually request, call gtk_widget_measure() instead ofthis function.
	widget		# a GtkWidget 
	width		#  return location for width, or NULL . 
void gtk_widget_set_child_visible (GtkWidget *widget, gboolean is_visible);	# Sets whether widget should be mapped along with its when its parentis mapped and widget has been shown with gtk_widget_show() .
	widget		# a GtkWidget 
	is_visible		# if TRUE , widgetshould be mapped along with its parent.
void gtk_widget_set_size_request (GtkWidget *widget, gint width, gint height);	# Sets the minimum size of a widget; that is, the widget’s sizerequest will be at least width by height. You can use this function to force a widget to be larger than it normally would be.
	widget		# a GtkWidget 
	width		# width widgetshould request, or -1 to unset
	height		# height widgetshould request, or -1 to unset
void gtk_widget_thaw_child_notify (GtkWidget *widget);	# Reverts the effect of a previous call to gtk_widget_freeze_child_notify() .This causes all queued “child-notify” signals on widget to beemitted.
	widget		# a GtkWidget 
GList  *gtk_widget_list_mnemonic_labels (GtkWidget *widget);	# Returns a newly allocated list of the widgets, normally labels, forwhich this widget is the target of a mnemonic (see for example,gtk_label_set_mnemonic_widget() ).
	widget		# a GtkWidget 
	return:		#  the list ofmnemonic labels; free this listwith g_list_free() when you are done with it.  
void gtk_widget_add_mnemonic_label (GtkWidget *widget, GtkWidget *label);	# Adds a widget to the list of mnemonic labels forthis widget. (See gtk_widget_list_mnemonic_labels() ). Note thelist of mnemonic labels for the widget is cleared when thewidget is destroyed, so the caller must make sure to updateits internal state at this point as well, by using a connectionto the “destroy” signal or a weak notifier.
	widget		# a GtkWidget 
	label		# a GtkWidget that acts as a mnemonic label for widget
void gtk_widget_remove_mnemonic_label (GtkWidget *widget, GtkWidget *label);	# Removes a widget from the list of mnemonic labels forthis widget. (See gtk_widget_list_mnemonic_labels() ). The widgetmust have previously been added to the list withgtk_widget_add_mnemonic_label() .
	widget		# a GtkWidget 
	label		# a GtkWidget that was previously set as a mnemonic label forwidgetwith 
void gtk_widget_error_bell (GtkWidget *widget);	# Notifies the user about an input-related error on this widget.If the “gtk-error-bell” setting is TRUE , it callsgdk_window_beep() , otherwise it does nothing.
	widget		# a GtkWidget 
gboolean gtk_widget_keynav_failed (GtkWidget *widget, GtkDirectionType direction);	# This function should be called whenever keyboard navigation withina single widget hits a boundary. The function emits the“keynav-failed” signal on the widget and its returnvalue should be interpreted in a way similar to the return value ofgtk_widget_child_focus() :
	widget		# a GtkWidget 
	direction		# direction of focus movement
	return:		#  TRUE if stopping keyboard navigation is fine, FALSE if the emitting widget should try to handle the keyboardnavigation attempt in its parent container(s). 
gchar  *gtk_widget_get_tooltip_markup (GtkWidget *widget);	# Gets the contents of the tooltip for widget.
	widget		# a GtkWidget 
	return:		#  the tooltip text, or NULL . You should free thereturned string with g_free() when done.  
void gtk_widget_set_tooltip_markup (GtkWidget *widget, const gchar *markup);	# Sets markup as the contents of the tooltip, which is marked up with the Pango text markup language.
	widget		# a GtkWidget 
	markup		#  the contents of the tooltip for widget, or NULL . 
gchar  *gtk_widget_get_tooltip_text (GtkWidget *widget);	# Gets the contents of the tooltip for widget.
	widget		# a GtkWidget 
	return:		#  the tooltip text, or NULL . You should free thereturned string with g_free() when done.  
void gtk_widget_set_tooltip_text (GtkWidget *widget, const gchar *text);	# Sets text as the contents of the tooltip. This function will takecare of setting “has-tooltip” to TRUE and of the defaulthandler for the “query-tooltip” signal.
	widget		# a GtkWidget 
	text		#  the contents of the tooltip for widget. 
GtkWindow  *gtk_widget_get_tooltip_window (GtkWidget *widget);	# Returns the GtkWindow of the current tooltip. This can be theGtkWindow created by default, or the custom tooltip window setusing gtk_widget_set_tooltip_window() .
	widget		# a GtkWidget 
	return:		#  The GtkWindow of the current tooltip.  
void gtk_widget_set_tooltip_window (GtkWidget *widget, GtkWindow *custom_window);	# Replaces the default, usually yellow, window used for displayingtooltips with custom_window. GTK+ will take care of showing andhiding custom_window at the right moment, to behave likewise asthe default tooltip window. If custom_window is NULL , the defaulttooltip window will be used.
	widget		# a GtkWidget 
	custom_window		#  a GtkWindow , or NULL . 
gboolean gtk_widget_get_has_tooltip (GtkWidget *widget);	# Returns the current value of the has-tooltip property. See“has-tooltip” for more information.
	widget		# a GtkWidget 
	return:		#  current value of has-tooltip on widget. 
void gtk_widget_set_has_tooltip (GtkWidget *widget, gboolean has_tooltip);	# Sets the has-tooltip property on widget to has_tooltip. See“has-tooltip” for more information.
	widget		# a GtkWidget 
	has_tooltip		# whether or not widgethas a tooltip.
void gtk_widget_trigger_tooltip_query (GtkWidget *widget);	# Triggers a tooltip query on the display where the toplevel of widgetis located. See gtk_tooltip_trigger_tooltip_query() for moreinformation.
	widget		# a GtkWidget 
GdkWindow  *gtk_widget_get_window (GtkWidget *widget);	# Returns the widget’s window if it is realized, NULL otherwise
	widget		# a GtkWidget 
	return:		#  widget’s window.  
void gtk_widget_register_window (GtkWidget *widget, GdkWindow *window);	# Registers a GdkWindow with the widget and sets it up so thatthe widget receives events for it. Call gtk_widget_unregister_window() when destroying the window.
	widget		# a GtkWidget 
	window		# a GdkWindow 
void gtk_widget_unregister_window (GtkWidget *widget, GdkWindow *window);	# Unregisters a GdkWindow from the widget that was previously set up withgtk_widget_register_window() . You need to call this when the window isno longer used by the widget, such as when you destroy it.
	widget		# a GtkWidget 
	window		# a GdkWindow 
void gtk_cairo_transform_to_window (cairo_t *cr, GtkWidget *widget, GdkWindow *window);	# Transforms the given cairo context cr that from widget-relativecoordinates to window-relative coordinates.If the widget’s window is not an ancestor of window, nomodification will be applied.
	cr		# the cairo context to transform
	widget		# the widget the context is currently centered for
	window		# the window to transform the context to
int gtk_widget_get_allocated_width (GtkWidget *widget);	# Returns the width that has currently been allocated to widget.This function is intended to be used when implementing handlersfor the “draw” function.
	widget		# the widget to query
	return:		#  the width of the widget 
int gtk_widget_get_allocated_height (GtkWidget *widget);	# Returns the height that has currently been allocated to widget.This function is intended to be used when implementing handlersfor the “draw” function.
	widget		# the widget to query
	return:		#  the height of the widget 
void gtk_widget_get_allocation (GtkWidget *widget, GtkAllocation *allocation);	# Retrieves the widget’s allocation.
	widget		# a GtkWidget 
	allocation		#  a pointer to a GtkAllocation to copy to. 
void gtk_widget_set_allocation (GtkWidget *widget, const GtkAllocation *allocation);	# Sets the widget’s allocation. This should not be useddirectly, but from within a widget’s size_allocate method.
	widget		# a GtkWidget 
	allocation		# a pointer to a GtkAllocation to copy from
int gtk_widget_get_allocated_baseline (GtkWidget *widget);	# Returns the baseline that has currently been allocated to widget.This function is intended to be used when implementing handlersfor the “draw” function, and when allocating childwidgets in “size_allocate” .
	widget		# the widget to query
	return:		#  the baseline of the widget, or -1 if none 
void gtk_widget_get_allocated_size (GtkWidget *widget, GtkAllocation *allocation, int *baseline);	# Retrieves the widget’s allocated size.
	widget		# a GtkWidget 
	allocation		#  a pointer to a GtkAllocation to copy to. 
void gtk_widget_get_clip (GtkWidget *widget, GtkAllocation *clip);	# Retrieves the widget’s clip area.
	widget		# a GtkWidget 
	clip		#  a pointer to a GtkAllocation to copy to. 
void gtk_widget_set_clip (GtkWidget *widget, const GtkAllocation *clip);	# Sets the widget’s clip. This must not be used directly,but from within a widget’s size_allocate method.It must be called after gtk_widget_set_allocation() (or after chaining upto the parent class), because that function resets the clip.
	widget		# a GtkWidget 
	clip		# a pointer to a GtkAllocation to copy from
gboolean gtk_widget_get_can_default (GtkWidget *widget);	# Determines whether widget can be a default widget. Seegtk_widget_set_can_default() .
	widget		# a GtkWidget 
	return:		#  TRUE if widgetcan be a default widget, FALSE otherwise 
void gtk_widget_set_can_default (GtkWidget *widget, gboolean can_default);	# Specifies whether widget can be a default widget. Seegtk_widget_grab_default() for details about the meaning of“default”.
	widget		# a GtkWidget 
	can_default		# whether or not widgetcan be a default widget.
gboolean gtk_widget_get_can_focus (GtkWidget *widget);	# Determines whether widget can own the input focus. Seegtk_widget_set_can_focus() .
	widget		# a GtkWidget 
	return:		#  TRUE if widgetcan own the input focus, FALSE otherwise 
void gtk_widget_set_can_focus (GtkWidget *widget, gboolean can_focus);	# Specifies whether widget can own the input focus. Seegtk_widget_grab_focus() for actually setting the input focus on awidget.
	widget		# a GtkWidget 
	can_focus		# whether or not widgetcan own the input focus.
gboolean gtk_widget_get_focus_on_click (GtkWidget *widget);	# Returns whether the widget should grab focus when it is clicked with the mouse.See gtk_widget_set_focus_on_click() .
	widget		# a GtkWidget 
	return:		#  TRUE if the widget should grab focus when it is clicked withthe mouse. 
void gtk_widget_set_focus_on_click (GtkWidget *widget, gboolean focus_on_click);	# Sets whether the widget should grab focus when it is clicked with the mouse.Making mouse clicks not grab focus is useful in places like toolbars whereyou don’t want the keyboard focus removed from the main area of theapplication.
	widget		# a GtkWidget 
	focus_on_click		# whether the widget should grab focus when clicked with the mouse
gboolean gtk_widget_get_has_window (GtkWidget *widget);	# Determines whether widget has a GdkWindow of its own. Seegtk_widget_set_has_window() .
	widget		# a GtkWidget 
	return:		#  TRUE if widgethas a window, FALSE otherwise 
void gtk_widget_set_has_window (GtkWidget *widget, gboolean has_window);	# Specifies whether widget has a GdkWindow of its own. Note thatall realized widgets have a non-NULL “window” pointer(gtk_widget_get_window() never returns a NULL window when a widgetis realized), but for many of them it’s actually the GdkWindow ofone of its parent widgets. Widgets that do not create a window forthemselves in “realize” must announce this bycalling this function with has_window = FALSE .
	widget		# a GtkWidget 
	has_window		# whether or not widgethas a window.
gboolean gtk_widget_get_sensitive (GtkWidget *widget);	# Returns the widget’s sensitivity (in the sense of returningthe value that has been set using gtk_widget_set_sensitive() ).
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is sensitive 
gboolean gtk_widget_is_sensitive (GtkWidget *widget);	# Returns the widget’s effective sensitivity, which meansit is sensitive itself and also its parent widget is sensitive
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is effectively sensitive 
gboolean gtk_widget_get_visible (GtkWidget *widget);	# Determines whether the widget is visible. If you want totake into account whether the widget’s parent is also marked asvisible, use gtk_widget_is_visible() instead.
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is visible 
gboolean gtk_widget_is_visible (GtkWidget *widget);	# Determines whether the widget and all its parents are marked asvisible.
	widget		# a GtkWidget 
	return:		#  TRUE if the widget and all its parents are visible 
void gtk_widget_set_visible (GtkWidget *widget, gboolean visible);	# Sets the visibility state of widget. Note that setting this toTRUE doesn’t mean the widget is actually viewable, seegtk_widget_get_visible() .
	widget		# a GtkWidget 
	visible		# whether the widget should be shown or not
void gtk_widget_set_state_flags (GtkWidget *widget, GtkStateFlags flags, gboolean clear);	# This function is for use in widget implementations. Turns on flagvalues in the current widget state (insensitive, prelighted, etc.).
	widget		# a GtkWidget 
	flags		# State flags to turn on
	clear		# Whether to clear state before turning on flags
void gtk_widget_unset_state_flags (GtkWidget *widget, GtkStateFlags flags);	# This function is for use in widget implementations. Turns off flagvalues for the current widget state (insensitive, prelighted, etc.).See gtk_widget_set_state_flags() .
	widget		# a GtkWidget 
	flags		# State flags to turn off
GtkStateFlags gtk_widget_get_state_flags (GtkWidget *widget);	# Returns the widget state as a flag set. It is worth mentioningthat the effective GTK_STATE_FLAG_INSENSITIVE state will bereturned, that is, also based on parent insensitivity, even ifwidget itself is sensitive.
	widget		# a GtkWidget 
	return:		#  The state flags for widget 
gboolean gtk_widget_has_default (GtkWidget *widget);	# Determines whether widget is the current default widget within itstoplevel. See gtk_widget_set_can_default() .
	widget		# a GtkWidget 
	return:		#  TRUE if widgetis the current default widget withinits toplevel, FALSE otherwise 
gboolean gtk_widget_has_focus (GtkWidget *widget);	# Determines if the widget has the global input focus. Seegtk_widget_is_focus() for the difference between having the globalinput focus, and only having the focus within a toplevel.
	widget		# a GtkWidget 
	return:		#  TRUE if the widget has the global input focus. 
gboolean gtk_widget_has_visible_focus (GtkWidget *widget);	# Determines if the widget should show a visible indication thatit has the global input focus. This is a convenience function foruse in ::draw handlers that takes into account whether focusindication should currently be shown in the toplevel window ofwidget. See gtk_window_get_focus_visible() for more informationabout focus indication.
	widget		# a GtkWidget 
	return:		#  TRUE if the widget should display a “focus rectangle” 
gboolean gtk_widget_has_grab (GtkWidget *widget);	# Determines whether the widget is currently grabbing events, so itis the only widget receiving input events (keyboard and mouse).
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is in the grab_widgets stack 
gboolean gtk_widget_is_drawable (GtkWidget *widget);	# Determines whether widget can be drawn to. A widget can be drawnto if it is mapped and visible.
	widget		# a GtkWidget 
	return:		#  TRUE if widgetis drawable, FALSE otherwise 
gboolean gtk_widget_is_toplevel (GtkWidget *widget);	# Determines whether widget is a toplevel widget.
	widget		# a GtkWidget 
	return:		#  TRUE if widgetis a toplevel, FALSE otherwise 
void gtk_widget_set_window (GtkWidget *widget, GdkWindow *window);	# Sets a widget’s window. This function should only be used in awidget’s “realize” implementation. The window passed isusually either new window created with gdk_window_new(), or thewindow of its parent widget as returned bygtk_widget_get_parent_window() .
	widget		# a GtkWidget 
	window		#  a GdkWindow . 
void gtk_widget_set_receives_default (GtkWidget *widget, gboolean receives_default);	# Specifies whether widget will be treated as the default widgetwithin its toplevel when it has the focus, even if another widgetis the default.
	widget		# a GtkWidget 
	receives_default		# whether or not widgetcan be a default widget.
gboolean gtk_widget_get_receives_default (GtkWidget *widget);	# Determines whether widget is always treated as the default widgetwithin its toplevel when it has the focus, even if another widgetis the default.
	widget		# a GtkWidget 
	return:		#  TRUE if widgetacts as the default widget when focused,FALSE otherwise 
void gtk_widget_set_support_multidevice (GtkWidget *widget, gboolean support_multidevice);	# Enables or disables multiple pointer awareness. If this setting is TRUE ,widget will start receiving multiple, per device enter/leave events. Notethat if custom GdkWindows are created in “realize” ,gdk_window_set_support_multidevice() will have to be called manually on them.
	widget		# a GtkWidget 
	support_multidevice		# TRUE to support input from multiple devices.
gboolean gtk_widget_get_support_multidevice (GtkWidget *widget);	# Returns TRUE if widget is multiple pointer aware. Seegtk_widget_set_support_multidevice() for more information.
	widget		# a GtkWidget 
	return:		#  TRUE if widgetis multidevice aware. 
void gtk_widget_set_realized (GtkWidget *widget, gboolean realized);	# Marks the widget as being realized. This function must only be called after all GdkWindows for the widget have been created and registered.
	widget		# a GtkWidget 
	realized		# TRUE to mark the widget as realized
gboolean gtk_widget_get_realized (GtkWidget *widget);	# Determines whether widget is realized.
	widget		# a GtkWidget 
	return:		#  TRUE if widgetis realized, FALSE otherwise 
gboolean gtk_widget_get_mapped (GtkWidget *widget);	# Whether the widget is mapped.
	widget		# a GtkWidget 
	return:		#  TRUE if the widget is mapped, FALSE otherwise. 
gboolean gtk_widget_device_is_shadowed (GtkWidget *widget, GdkDevice *device);	# Returns TRUE if device has been shadowed by a GTK+device grab on another widget, so it would stop sendingevents to widget. This may be used in the“grab-notify” signal to check for specificdevices. See gtk_device_grab_add() .
	widget		# a GtkWidget 
	device		# a GdkDevice 
	return:		#  TRUE if there is an ongoing grab on deviceby another GtkWidget than widget. 
GdkModifierType gtk_widget_get_modifier_mask (GtkWidget *widget, GdkModifierIntent intent);	# Returns the modifier mask the widget’s windowing system backenduses for a particular purpose.
	widget		# a GtkWidget 
	intent		# the use case for the modifier mask
	return:		#  the modifier mask used for intent. 
void gtk_widget_insert_action_group (GtkWidget *widget, const gchar *name, GActionGroup *group);	# Inserts group into widget. Children of widget that implementGtkActionable can then be associated with actions in group bysetting their “action-name” toprefix.action-name.
	widget		# a GtkWidget 
	name		# the prefix for actions in group
	group		#  a GActionGroup , or NULL . 
double gtk_widget_get_opacity (GtkWidget *widget);	# Fetches the requested opacity for this widget.See gtk_widget_set_opacity() .
	widget		# a GtkWidget 
	return:		#  the requested opacity for this widget. 
void gtk_widget_set_opacity (GtkWidget *widget, double opacity);	# Request the widget to be rendered partially transparent,with opacity 0 being fully transparent and 1 fully opaque. (Opacity valuesare clamped to the [0,1] range.).This works on both toplevel widget, and child widgets, although thereare some limitations:
	widget		# a GtkWidget 
	opacity		# desired opacity, between 0 and 1
gchar  **gtk_widget_list_action_prefixes (GtkWidget *widget);	# Retrieves a NULL -terminated array of strings containing the prefixes ofGActionGroup 's available to widget.
	widget		# A GtkWidget 
	return:		#  a NULL -terminated array of strings.  
GActionGroup  *gtk_widget_get_action_group (GtkWidget *widget, const gchar *prefix);	# Retrieves the GActionGroup that was registered using prefix. The resultingGActionGroup may have been registered to widget or any GtkWidget in itsancestry.
	widget		# A GtkWidget 
	prefix		# The “prefix” of the action group.
	return:		#  A GActionGroup or NULL .  
void gtk_widget_measure (GtkWidget *widget, GtkOrientation orientation, int for_size, int *minimum, int *natural, int *minimum_baseline, int *natural_baseline);	# Measures widget in the orientation orientation and for the given for_size.As an example, if orientation is GTK_ORIENTATION_HORIZONTAL and for_size is 300,this functions will compute the minimum and natural width of widget ifit is allocated at a height of 300 pixels.
	widget		# A GtkWidget instance
	orientation		# the orientation to measure
	for_size		# Size for the opposite of orientation, i.e.if orientationis GTK_ORIENTATION_HORIZONTAL , this isthe height the widget should be measured with. The GTK_ORIENTATION_VERTICAL case is analogous. This way, both height-for-width and width-for-heightrequests can be implemented. If no size is known, -1 can be passed.
	minimum		#  location to store the minimum size, or NULL . 
void gtk_widget_snapshot_child (GtkWidget *widget, GtkWidget *child, GtkSnapshot *snapshot);	# When a widget receives a call to the snapshot function, it must sendsynthetic “snapshot” calls to all children. This functionprovides a convenient way of doing this. A widget, when it receivesa call to its “snapshot” function, callsgtk_widget_snapshot_child() once for each child, passing inthe snapshot the widget received.
	widget		# a GtkWidget 
	child		# a child of widget
	snapshot		# GtkSnapshot as passed to the container. In particular, nocalls to 
GtkWidget  *gtk_widget_get_next_sibling (GtkWidget *widget);	# widget
	return:		#  The widget's next sibling.  
GtkWidget  *gtk_widget_get_prev_sibling (GtkWidget *widget);	# widget
	return:		#  The widget's previous sibling.  
GtkWidget  *gtk_widget_get_first_child (GtkWidget *widget);	# widget
	return:		#  The widget's first child.  
GtkWidget  *gtk_widget_get_last_child (GtkWidget *widget);	# widget
	return:		#  The widget's last child.  
void gtk_widget_insert_before (GtkWidget *widget, GtkWidget *parent, GtkWidget *next_sibling);	# void gtk_widget_insert_before (GtkWidget *widget, GtkWidget *parent, GtkWidget *next_sibling);</pre></div><hr>
void gtk_widget_insert_after (GtkWidget *widget, GtkWidget *parent, GtkWidget *previous_sibling);	# void gtk_widget_insert_after (GtkWidget *widget, GtkWidget *parent, GtkWidget *previous_sibling);</pre></div><hr>
GtkWidgetPath  *gtk_widget_get_path (GtkWidget *widget);	# Returns the GtkWidgetPath representing widget, if the widgetis not connected to a toplevel widget, a partial path will becreated.
	widget		# a GtkWidget 
	return:		#  The GtkWidgetPath representing widget.  
GtkStyleContext  *gtk_widget_get_style_context (GtkWidget *widget);	# Returns the style context associated to widget. The returned object isguaranteed to be the same for the lifetime of widget.
	widget		# a GtkWidget 
	return:		#  a GtkStyleContext . This memory is owned by widgetandmust not be freed.  
void gtk_widget_reset_style (GtkWidget *widget);	# Updates the style context of widget and all descendantsby updating its widget path. GtkContainers may wantto use this on a child when reordering it in a way that a differentstyle might apply to it. See also gtk_container_get_path_for_child() .
	widget		# a GtkWidget 
char  *gtk_widget_class_get_css_name (GtkWidgetClass *widget_class);	# Gets the name used by this class for matching in CSS code. Seegtk_widget_class_set_css_name() for details.
	widget_class		# class to set the name on
	return:		#  the CSS name of the given class 
void gtk_widget_class_set_css_name (GtkWidgetClass *widget_class, const char *name);	# Sets the name to be used for CSS matching of widgets.
	widget_class		# class to set the name on
	name		# name to use
GtkRequisition  *gtk_requisition_new (void );	# Allocates a new GtkRequisition and initializes its elements to zero.
	return:		#  a new empty GtkRequisition . The newly allocated GtkRequisition shouldbe freed with gtk_requisition_free() . 
GtkRequisition  *gtk_requisition_copy (const GtkRequisition *requisition);	# Copies a GtkRequisition .
	requisition		# a GtkRequisition 
	return:		#  a copy of requisition 
void gtk_requisition_free (GtkRequisition *requisition);	# Frees a GtkRequisition .
	requisition		# a GtkRequisition 
GtkSizeRequestMode gtk_widget_get_request_mode (GtkWidget *widget);	# Gets whether the widget prefers a height-for-width layoutor a width-for-height layout.
	widget		# a GtkWidget instance
	return:		#  The GtkSizeRequestMode preferred by widget. 
void gtk_widget_get_preferred_size (GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size);	# Retrieves the minimum and natural size of a widget, takinginto account the widget’s preference for height-for-width management.
	widget		# a GtkWidget instance
	minimum_size		#  location for storing the minimum size, or NULL . 
gint gtk_distribute_natural_allocation (gint extra_space, guint n_requested_sizes, GtkRequestedSize *sizes);	# Distributes extra_space to child sizes by bringing smallerchildren up to natural size first.
	extra_space		# Extra space to redistribute among children after subtractingminimum sizes and any child padding from the overall allocation
	n_requested_sizes		# Number of requests to fit into the allocation
	sizes		# An array of structs with a client pointer and a minimum/natural sizein the orientation of the allocation.
	return:		#  The remainder of extra_spaceafter redistributing spaceto sizes. 
GtkAlign gtk_widget_get_halign (GtkWidget *widget);	# Gets the value of the “halign” property.
	widget		# a GtkWidget 
	return:		#  the horizontal alignment of widget 
void gtk_widget_set_halign (GtkWidget *widget, GtkAlign align);	# Sets the horizontal alignment of widget.See the “halign” property.
	widget		# a GtkWidget 
	align		# the horizontal alignment
GtkAlign gtk_widget_get_valign (GtkWidget *widget);	# Gets the value of the “valign” property.
	widget		# a GtkWidget 
	return:		#  the vertical alignment of widget 
void gtk_widget_set_valign (GtkWidget *widget, GtkAlign align);	# Sets the vertical alignment of widget.See the “valign” property.
	widget		# a GtkWidget 
	align		# the vertical alignment
gint gtk_widget_get_margin_start (GtkWidget *widget);	# Gets the value of the “margin-start” property.
	widget		# a GtkWidget 
	return:		#  The start margin of widget 
void gtk_widget_set_margin_start (GtkWidget *widget, gint margin);	# Sets the start margin of widget.See the “margin-start” property.
	widget		# a GtkWidget 
	margin		# the start margin
gint gtk_widget_get_margin_end (GtkWidget *widget);	# Gets the value of the “margin-end” property.
	widget		# a GtkWidget 
	return:		#  The end margin of widget 
void gtk_widget_set_margin_end (GtkWidget *widget, gint margin);	# Sets the end margin of widget.See the “margin-end” property.
	widget		# a GtkWidget 
	margin		# the end margin
gint gtk_widget_get_margin_top (GtkWidget *widget);	# Gets the value of the “margin-top” property.
	widget		# a GtkWidget 
	return:		#  The top margin of widget 
void gtk_widget_set_margin_top (GtkWidget *widget, gint margin);	# Sets the top margin of widget.See the “margin-top” property.
	widget		# a GtkWidget 
	margin		# the top margin
gint gtk_widget_get_margin_bottom (GtkWidget *widget);	# Gets the value of the “margin-bottom” property.
	widget		# a GtkWidget 
	return:		#  The bottom margin of widget 
void gtk_widget_set_margin_bottom (GtkWidget *widget, gint margin);	# Sets the bottom margin of widget.See the “margin-bottom” property.
	widget		# a GtkWidget 
	margin		# the bottom margin
gboolean gtk_widget_get_hexpand (GtkWidget *widget);	# Gets whether the widget would like any available extra horizontalspace. When a user resizes a GtkWindow , widgets with expand=TRUEgenerally receive the extra space. For example, a list orscrollable area or document in your window would often be set toexpand.
	widget		# the widget
	return:		#  whether hexpand flag is set 
void gtk_widget_set_hexpand (GtkWidget *widget, gboolean expand);	# Sets whether the widget would like any available extra horizontalspace. When a user resizes a GtkWindow , widgets with expand=TRUEgenerally receive the extra space. For example, a list orscrollable area or document in your window would often be set toexpand.
	widget		# the widget
	expand		# whether to expand
gboolean gtk_widget_get_hexpand_set (GtkWidget *widget);	# Gets whether gtk_widget_set_hexpand() has been used toexplicitly set the expand flag on this widget.
	widget		# the widget
	return:		#  whether hexpand has been explicitly set 
void gtk_widget_set_hexpand_set (GtkWidget *widget, gboolean set);	# Sets whether the hexpand flag (see gtk_widget_get_hexpand() ) willbe used.
	widget		# the widget
	set		# value for hexpand-set property
gboolean gtk_widget_get_vexpand (GtkWidget *widget);	# Gets whether the widget would like any available extra verticalspace.
	widget		# the widget
	return:		#  whether vexpand flag is set 
void gtk_widget_set_vexpand (GtkWidget *widget, gboolean expand);	# Sets whether the widget would like any available extra verticalspace.
	widget		# the widget
	expand		# whether to expand
gboolean gtk_widget_get_vexpand_set (GtkWidget *widget);	# Gets whether gtk_widget_set_vexpand() has been used toexplicitly set the expand flag on this widget.
	widget		# the widget
	return:		#  whether vexpand has been explicitly set 
void gtk_widget_set_vexpand_set (GtkWidget *widget, gboolean set);	# Sets whether the vexpand flag (see gtk_widget_get_vexpand() ) willbe used.
	widget		# the widget
	set		# value for vexpand-set property
void gtk_widget_queue_compute_expand (GtkWidget *widget);	# Mark widget as needing to recompute its expand flags. Callthis function when setting legacy expand child propertieson the child of a container.
	widget		# a GtkWidget 
gboolean gtk_widget_compute_expand (GtkWidget *widget, GtkOrientation orientation);	# Computes whether a container should give this widget extra spacewhen possible. Containers should check this, rather thanlooking at gtk_widget_get_hexpand() or gtk_widget_get_vexpand() .
	widget		# the widget
	orientation		# expand direction
	return:		#  whether widget tree rooted here should be expanded 
void gtk_widget_init_template (GtkWidget *widget);	# Creates and initializes child widgets defined in templates. Thisfunction must be called in the instance initializer for anyclass which assigned itself a template using gtk_widget_class_set_template() 
	widget		# a GtkWidget 
void gtk_widget_class_set_template (GtkWidgetClass *widget_class, GBytes *template_bytes);	# This should be called at class initialization time to specifythe GtkBuilder XML to be used to extend a widget.
	widget_class		# A GtkWidgetClass 
	template_bytes		# A GBytes holding the GtkBuilder XML 
void gtk_widget_class_set_template_from_resource (GtkWidgetClass *widget_class, const gchar *resource_name);	# A convenience function to call gtk_widget_class_set_template() .
	widget_class		# A GtkWidgetClass 
	resource_name		# The name of the resource to load the template from
GObject  *gtk_widget_get_template_child (GtkWidget *widget, GType widget_type, const gchar *name);	# Fetch an object build from the template XML for widget_type in this widget instance.
	widget		# A GtkWidget 
	widget_type		# The GType to get a template child for
	name		# The “id” of the child defined in the template XML
	return:		#  The object built in the template XML with the id name.  
void gtk_widget_class_bind_template_child_full (GtkWidgetClass *widget_class, const gchar *name, gboolean internal_child, gssize struct_offset);	# Automatically assign an object declared in the class template XML to be set to a locationon a freshly built instance’s private data, or alternatively accessible via gtk_widget_get_template_child() .
	widget_class		# A GtkWidgetClass 
	name		# The “id” of the child defined in the template XML
	internal_child		# Whether the child should be accessible as an “internal-child”when this class is used in GtkBuilder XML
	struct_offset		# The structure offset into the composite widget’s instance public or private structurewhere the automated child pointer should be set, or 0 to not assign the pointer.
void gtk_widget_class_bind_template_callback_full (GtkWidgetClass *widget_class, const gchar *callback_name, GCallback callback_symbol);	# Declares a callback_symbol to handle callback_name from the template XMLdefined for widget_type. See gtk_builder_add_callback_symbol() .
	widget_class		# A GtkWidgetClass 
	callback_name		# The name of the callback as expected in the template XML
	callback_symbol		#  The callback symbol. 
void gtk_widget_class_set_connect_func (GtkWidgetClass *widget_class, GtkBuilderConnectFunc connect_func, gpointer connect_data, GDestroyNotify connect_data_destroy);	# For use in language bindings, this will override the default GtkBuilderConnectFunc to beused when parsing GtkBuilder XML from this class’s template data.
	widget_class		# A GtkWidgetClass 
	connect_func		# The GtkBuilderConnectFunc to use when connecting signals in the class template
	connect_data		# The data to pass to connect_func
	connect_data_destroy		# The GDestroyNotify to free connect_data, this will only be used atclass finalization time, when no classes of type widget_typeare in use anymore.
void gtk_container_add (GtkContainer *container, GtkWidget *widget);	# Adds widget to container. Typically used for simple containerssuch as GtkWindow , GtkFrame , or GtkButton ; for more complicatedlayout containers such as GtkBox or GtkGrid , this function willpick default packing parameters that may not be correct. Soconsider functions such as gtk_box_pack_start() andgtk_grid_attach() as an alternative to gtk_container_add() inthose cases. A widget may be added to only one container at a time;you can’t place the same widget inside two different containers.
	container		# a GtkContainer 
	widget		# a widget to be placed inside container
void gtk_container_remove (GtkContainer *container, GtkWidget *widget);	# Removes widget from container. widget must be inside container.Note that container will own a reference to widget, and that thismay be the last reference held; so removing a widget from itscontainer can destroy that widget. If you want to use widgetagain, you need to add a reference to it before removing it froma container, using g_object_ref() . If you don’t want to use widgetagain it’s usually more efficient to simply destroy it directlyusing gtk_widget_destroy() since this will remove it from thecontainer and help break any circular reference count cycles.
	container		# a GtkContainer 
	widget		# a current child of container
void gtk_container_add_with_properties (GtkContainer *container, GtkWidget *widget, const gchar *first_prop_name, ...);	# Adds widget to container, setting child properties at the same time.See gtk_container_add() and gtk_container_child_set() for more details.
	container		# a GtkContainer 
	widget		# a widget to be placed inside container
	first_prop_name		# the name of the first child property to set
	...		# a NULL -terminated list of property names and values, startingwith first_prop_name
void gtk_container_check_resize (GtkContainer *container);	# void gtk_container_check_resize (GtkContainer *container);</pre></div><hr>
void gtk_container_foreach (GtkContainer *container, GtkCallback callback, gpointer callback_data);	# Invokes callback on each non-internal child of container.See gtk_container_forall() for details on what constitutesan “internal” child. For all practical purposes, this functionshould iterate over precisely those child widgets that wereadded to the container by the application with explicit add()calls.
	container		# a GtkContainer 
	callback		#  a callback. 
	callback_data		# callback user data
GList  *gtk_container_get_children (GtkContainer *container);	# Returns the container’s non-internal children. Seegtk_container_forall() for details on what constitutes an "internal" child.
	container		# a GtkContainer 
	return:		#  a newly-allocated list of the container’s non-internal children.  
GtkWidgetPath  *gtk_container_get_path_for_child (GtkContainer *container, GtkWidget *child);	# Returns a newly created widget path representing all the widget hierarchyfrom the toplevel down to and including child.
	container		# a GtkContainer 
	child		# a child of container
	return:		#  A newly created GtkWidgetPath  
GtkAdjustment  *gtk_container_get_focus_vadjustment (GtkContainer *container);	# Retrieves the vertical focus adjustment for the container. Seegtk_container_set_focus_vadjustment() .
	container		# a GtkContainer 
	return:		#  the vertical focus adjustment, orNULL if none has been set.  
void gtk_container_set_focus_vadjustment (GtkContainer *container, GtkAdjustment *adjustment);	# Hooks up an adjustment to focus handling in a container, so when achild of the container is focused, the adjustment is scrolled toshow that widget. This function sets the vertical alignment. Seegtk_scrolled_window_get_vadjustment() for a typical way of obtainingthe adjustment and gtk_container_set_focus_hadjustment() for settingthe horizontal adjustment.
	container		# a GtkContainer 
	adjustment		# an adjustment which should be adjusted when the focusis moved among the descendents of container
GtkAdjustment  *gtk_container_get_focus_hadjustment (GtkContainer *container);	# Retrieves the horizontal focus adjustment for the container. Seegtk_container_set_focus_hadjustment() .
	container		# a GtkContainer 
	return:		#  the horizontal focus adjustment, or NULL ifnone has been set.  
void gtk_container_set_focus_hadjustment (GtkContainer *container, GtkAdjustment *adjustment);	# Hooks up an adjustment to focus handling in a container, so when a childof the container is focused, the adjustment is scrolled to show thatwidget. This function sets the horizontal alignment.See gtk_scrolled_window_get_hadjustment() for a typical way of obtainingthe adjustment and gtk_container_set_focus_vadjustment() for settingthe vertical adjustment.
	container		# a GtkContainer 
	adjustment		# an adjustment which should be adjusted when the focus ismoved among the descendents of container
GType gtk_container_child_type (GtkContainer *container);	# Returns the type of the children supported by the container.
	container		# a GtkContainer 
	return:		#  a GType . 
void gtk_container_child_get (GtkContainer *container, GtkWidget *child, const gchar *first_prop_name, ...);	# Gets the values of one or more child properties for child and container.
	container		# a GtkContainer 
	child		# a widget which is a child of container
	first_prop_name		# the name of the first property to get
	...		# return location for the first property, followedoptionally by more name/return location pairs, followed by NULL 
void gtk_container_child_set (GtkContainer *container, GtkWidget *child, const gchar *first_prop_name, ...);	# Sets one or more child properties for child and container.
	container		# a GtkContainer 
	child		# a widget which is a child of container
	first_prop_name		# the name of the first property to set
	...		# a NULL -terminated list of property names and values, startingwith first_prop_name
void gtk_container_child_get_property (GtkContainer *container, GtkWidget *child, const gchar *property_name, GValue *value);	# Gets the value of a child property for child and container.
	container		# a GtkContainer 
	child		# a widget which is a child of container
	property_name		# the name of the property to get
	value		# a location to return the value
void gtk_container_child_set_property (GtkContainer *container, GtkWidget *child, const gchar *property_name, const GValue *value);	# Sets a child property for child and container.
	container		# a GtkContainer 
	child		# a widget which is a child of container
	property_name		# the name of the property to set
	value		# the value to set the property to
void gtk_container_child_get_valist (GtkContainer *container, GtkWidget *child, const gchar *first_property_name, va_list var_args);	# Gets the values of one or more child properties for child and container.
	container		# a GtkContainer 
	child		# a widget which is a child of container
	first_property_name		# the name of the first property to get
	var_args		# return location for the first property, followedoptionally by more name/return location pairs, followed by NULL 
void gtk_container_child_set_valist (GtkContainer *container, GtkWidget *child, const gchar *first_property_name, va_list var_args);	# Sets one or more child properties for child and container.
	container		# a GtkContainer 
	child		# a widget which is a child of container
	first_property_name		# the name of the first property to set
	var_args		# a NULL -terminated list of property names and values, startingwith first_prop_name
void gtk_container_child_notify (GtkContainer *container, GtkWidget *child, const gchar *child_property);	# Emits a “child-notify” signal for thechild propertychild_property on the child.
	container		# the GtkContainer 
	child		# the child widget
	child_property		# the name of a child property installed onthe class of container
void gtk_container_child_notify_by_pspec (GtkContainer *container, GtkWidget *child, GParamSpec *pspec);	# Emits a “child-notify” signal for thechild property specified bypspec on the child.
	container		# the GtkContainer 
	child		# the child widget
	pspec		# the GParamSpec of a child property instealled onthe class of container
void gtk_container_forall (GtkContainer *container, GtkCallback callback, gpointer callback_data);	# Invokes callback on each direct child of container, includingchildren that are considered “internal” (implementation detailsof the container). “Internal” children generally weren’t addedby the user of the container, but were added by the containerimplementation itself.
	container		# a GtkContainer 
	callback		#  a callback. 
	callback_data		# callback user data
void gtk_container_propagate_draw (GtkContainer *container, GtkWidget *child, cairo_t *cr);	# When a container receives a call to the draw function, it must sendsynthetic “draw” calls to all children that don’t have theirown GdkWindows . This function provides a convenient way of doing this.A container, when it receives a call to its “draw” function,calls gtk_container_propagate_draw() once for each child, passing inthe cr the container received.
	container		# a GtkContainer 
	child		# a child of container
	cr		# Cairo context as passed to the container. If you want to use crin container’s draw function, consider using 
gboolean gtk_container_get_focus_chain (GtkContainer *container, GList **focusable_widgets);	# Retrieves the focus chain of the container, if one has beenset explicitly. If no focus chain has been explicitlyset, GTK+ computes the focus chain based on the positionsof the children. In that case, GTK+ stores NULL infocusable_widgets and returns FALSE .
	container		# a GtkContainer 
	focusable_widgets		#  locationto store the focus chain of thecontainer, or NULL . You should free this listusing 
	return:		#  TRUE if the focus chain of the containerhas been set explicitly. 
void gtk_container_set_focus_chain (GtkContainer *container, GList *focusable_widgets);	# Sets a focus chain, overriding the one computed automatically by GTK+.
	container		# a GtkContainer 
	focusable_widgets		#  the new focus chain. 
void gtk_container_unset_focus_chain (GtkContainer *container);	# Removes a focus chain explicitly set with gtk_container_set_focus_chain() .
	container		# a GtkContainer 
GParamSpec  *gtk_container_class_find_child_property (GObjectClass *cclass, const gchar *property_name);	# Finds a child property of a container class by name.
	cclass		#  a GtkContainerClass . 
	return:		#  the GParamSpec of the childproperty or NULL if classhas no child property with thatname.  
void gtk_container_class_install_child_property (GtkContainerClass *cclass, guint property_id, GParamSpec *pspec);	# Installs a child property on a container class.
	cclass		# a GtkContainerClass 
	property_id		# the id for the property
	pspec		# the GParamSpec for the property
void gtk_container_class_install_child_properties (GtkContainerClass *cclass, guint n_pspecs, GParamSpec **pspecs);	# Installs child properties on a container class.
	cclass		# a GtkContainerClass 
	n_pspecs		# the length of the GParamSpec array
	pspecs		#  the GParamSpec array defining the newchild properties. 
GParamSpec  **gtk_container_class_list_child_properties (GObjectClass *cclass, guint *n_properties);	# Returns all child properties of a container class.
	cclass		#  a GtkContainerClass . 
	return:		#  a newly allocated NULL -terminated array of GParamSpec *.The array must be freed with g_free() .  
GtkWidget  *gtk_bin_get_child (GtkBin *bin);	# Gets the child of the GtkBin , or NULL if the bin containsno child widget. The returned widget does not have a referenceadded, so you do not need to unref it.
	bin		# a GtkBin 
	return:		#  pointer to child of the GtkBin .  
void gtk_menu_shell_append (GtkMenuShell *menu_shell, GtkWidget *child);	# Adds a new GtkMenuItem to the end of the menu shell'sitem list.
	menu_shell		# a GtkMenuShell 
	child		#  The GtkMenuItem to add. 
void gtk_menu_shell_prepend (GtkMenuShell *menu_shell, GtkWidget *child);	# Adds a new GtkMenuItem to the beginning of the menu shell'sitem list.
	menu_shell		# a GtkMenuShell 
	child		# The GtkMenuItem to add
void gtk_menu_shell_insert (GtkMenuShell *menu_shell, GtkWidget *child, gint position);	# Adds a new GtkMenuItem to the menu shell’s item listat the position indicated by position.
	menu_shell		# a GtkMenuShell 
	child		# The GtkMenuItem to add
	position		# The position in the item list where childis added. Positions are numbered from 0 to n-1
void gtk_menu_shell_deactivate (GtkMenuShell *menu_shell);	# Deactivates the menu shell.
	menu_shell		# a GtkMenuShell 
void gtk_menu_shell_select_item (GtkMenuShell *menu_shell, GtkWidget *menu_item);	# Selects the menu item from the menu shell.
	menu_shell		# a GtkMenuShell 
	menu_item		# The GtkMenuItem to select
void gtk_menu_shell_select_first (GtkMenuShell *menu_shell, gboolean search_sensitive);	# Select the first visible or selectable child of the menu shell.
	menu_shell		# a GtkMenuShell 
	search_sensitive		# if TRUE , search for the first selectablemenu item, otherwise select nothing ifthe first item isn’t sensitive. Thisshould be FALSE if the menu is beingpopped up initially.
void gtk_menu_shell_deselect (GtkMenuShell *menu_shell);	# Deselects the currently selected item from the menu shell,if any.
	menu_shell		# a GtkMenuShell 
void gtk_menu_shell_activate_item (GtkMenuShell *menu_shell, GtkWidget *menu_item, gboolean force_deactivate);	# Activates the menu item within the menu shell.
	menu_shell		# a GtkMenuShell 
	menu_item		# the GtkMenuItem to activate
	force_deactivate		# if TRUE , force the deactivation of themenu shell after the menu item is activated
void gtk_menu_shell_cancel (GtkMenuShell *menu_shell);	# Cancels the selection within the menu shell.
	menu_shell		# a GtkMenuShell 
void gtk_menu_shell_set_take_focus (GtkMenuShell *menu_shell, gboolean take_focus);	# If take_focus is TRUE (the default) the menu shell will takethe keyboard focus so that it will receive all keyboard eventswhich is needed to enable keyboard navigation in menus.
	menu_shell		# a GtkMenuShell 
	take_focus		# TRUE if the menu shell should take the keyboardfocus on popup
gboolean gtk_menu_shell_get_take_focus (GtkMenuShell *menu_shell);	# Returns TRUE if the menu shell will take the keyboard focus on popup.
	menu_shell		# a GtkMenuShell 
	return:		#  TRUE if the menu shell will take the keyboard focus on popup. 
GtkWidget  *gtk_menu_shell_get_selected_item (GtkMenuShell *menu_shell);	# Gets the currently selected item.
	menu_shell		# a GtkMenuShell 
	return:		#  the currently selected item.  
GtkWidget  *gtk_menu_shell_get_parent_shell (GtkMenuShell *menu_shell);	# Gets the parent menu shell.
	menu_shell		# a GtkMenuShell 
	return:		#  the parent GtkMenuShell .  
void gtk_menu_shell_bind_model (GtkMenuShell *menu_shell, GMenuModel *model, const gchar *action_namespace, gboolean with_separators);	# Establishes a binding between a GtkMenuShell and a GMenuModel .
	menu_shell		# a GtkMenuShell 
	model		#  the GMenuModel to bind to or NULL to removebinding. 
gdouble gtk_range_get_fill_level (GtkRange *range);	# Gets the current position of the fill level indicator.
	range		# A GtkRange 
	return:		#  The current fill level 
gboolean gtk_range_get_restrict_to_fill_level (GtkRange *range);	# Gets whether the range is restricted to the fill level.
	range		# A GtkRange 
	return:		#  TRUE if rangeis restricted to the fill level. 
gboolean gtk_range_get_show_fill_level (GtkRange *range);	# Gets whether the range displays the fill level graphically.
	range		# A GtkRange 
	return:		#  TRUE if rangeshows the fill level. 
void gtk_range_set_fill_level (GtkRange *range, gdouble fill_level);	# Set the new position of the fill level indicator.
	range		# a GtkRange 
	fill_level		# the new position of the fill level indicator
void gtk_range_set_restrict_to_fill_level (GtkRange *range, gboolean restrict_to_fill_level);	# Sets whether the slider is restricted to the fill level. Seegtk_range_set_fill_level() for a general description of the filllevel concept.
	range		# A GtkRange 
	restrict_to_fill_level		# Whether the fill level restricts slider movement.
void gtk_range_set_show_fill_level (GtkRange *range, gboolean show_fill_level);	# Sets whether a graphical fill level is show on the trough. Seegtk_range_set_fill_level() for a general description of the filllevel concept.
	range		# A GtkRange 
	show_fill_level		# Whether a fill level indicator graphics is shown.
GtkAdjustment  *gtk_range_get_adjustment (GtkRange *range);	# Get the GtkAdjustment which is the “model” object for GtkRange .See gtk_range_set_adjustment() for details.The return value does not have a reference added, so should notbe unreferenced.
	range		# a GtkRange 
	return:		#  a GtkAdjustment .  
void gtk_range_set_adjustment (GtkRange *range, GtkAdjustment *adjustment);	# Sets the adjustment to be used as the “model” object for this rangewidget. The adjustment indicates the current range value, theminimum and maximum range values, the step/page increments usedfor keybindings and scrolling, and the page size. The page sizeis normally 0 for GtkScale and nonzero for GtkScrollbar , andindicates the size of the visible area of the widget being scrolled.The page size affects the size of the scrollbar slider.
	range		# a GtkRange 
	adjustment		# a GtkAdjustment 
gboolean gtk_range_get_inverted (GtkRange *range);	# Gets the value set by gtk_range_set_inverted() .
	range		# a GtkRange 
	return:		#  TRUE if the range is inverted 
void gtk_range_set_inverted (GtkRange *range, gboolean setting);	# Ranges normally move from lower to higher values as theslider moves from top to bottom or left to right. Invertedranges have higher values at the top or on the right rather thanon the bottom or left.
	range		# a GtkRange 
	setting		# TRUE to invert the range
gdouble gtk_range_get_value (GtkRange *range);	# Gets the current value of the range.
	range		# a GtkRange 
	return:		#  current value of the range. 
void gtk_range_set_value (GtkRange *range, gdouble value);	# Sets the current value of the range; if the value is outside theminimum or maximum range values, it will be clamped to fit insidethem. The range emits the “value-changed” signal if the value changes.
	range		# a GtkRange 
	value		# new value of the range
void gtk_range_set_increments (GtkRange *range, gdouble step, gdouble page);	# Sets the step and page sizes for the range.The step size is used when the user clicks the GtkScrollbar arrows or moves GtkScale via arrow keys. The page sizeis used for example when moving via Page Up or Page Down keys.
	range		# a GtkRange 
	step		# step size
	page		# page size
void gtk_range_set_range (GtkRange *range, gdouble min, gdouble max);	# Sets the allowable values in the GtkRange , and clamps the rangevalue to be between min and max. (If the range has a non-zeropage size, it is clamped between min and max - page-size.)
	range		# a GtkRange 
	min		# minimum range value
	max		# maximum range value
gint gtk_range_get_round_digits (GtkRange *range);	# Gets the number of digits to round the value to whenit changes. See “change-value” .
	range		# a GtkRange 
	return:		#  the number of digits to round to 
void gtk_range_set_round_digits (GtkRange *range, gint round_digits);	# Sets the number of digits to round the value to whenit changes. See “change-value” .
	range		# a GtkRange 
	round_digits		# the precision in digits, or -1
void gtk_range_set_lower_stepper_sensitivity (GtkRange *range, GtkSensitivityType sensitivity);	# Sets the sensitivity policy for the stepper that points to the'lower' end of the GtkRange’s adjustment.
	range		# a GtkRange 
	sensitivity		# the lower stepper’s sensitivity policy.
GtkSensitivityType gtk_range_get_lower_stepper_sensitivity (GtkRange *range);	# Gets the sensitivity policy for the stepper that points to the'lower' end of the GtkRange’s adjustment.
	range		# a GtkRange 
	return:		#  The lower stepper’s sensitivity policy. 
void gtk_range_set_upper_stepper_sensitivity (GtkRange *range, GtkSensitivityType sensitivity);	# Sets the sensitivity policy for the stepper that points to the'upper' end of the GtkRange’s adjustment.
	range		# a GtkRange 
	sensitivity		# the upper stepper’s sensitivity policy.
GtkSensitivityType gtk_range_get_upper_stepper_sensitivity (GtkRange *range);	# Gets the sensitivity policy for the stepper that points to the'upper' end of the GtkRange’s adjustment.
	range		# a GtkRange 
	return:		#  The upper stepper’s sensitivity policy. 
gboolean gtk_range_get_flippable (GtkRange *range);	# Gets the value set by gtk_range_set_flippable() .
	range		# a GtkRange 
	return:		#  TRUE if the range is flippable 
void gtk_range_set_flippable (GtkRange *range, gboolean flippable);	# If a range is flippable, it will switch its direction if it ishorizontal and its direction is GTK_TEXT_DIR_RTL .
	range		# a GtkRange 
	flippable		# TRUE to make the range flippable
void gtk_range_get_range_rect (GtkRange *range, GdkRectangle *range_rect);	# This function returns the area that contains the range’s troughand its steppers, in widget-&gt;window coordinates.
	range		# a GtkRange 
	range_rect		#  return location for the range rectangle. 
void gtk_range_get_slider_range (GtkRange *range, gint *slider_start, gint *slider_end);	# This function returns sliders range along the long dimension,in widget-&gt;window coordinates.
	range		# a GtkRange 
	slider_start		#  return location for the slider'sstart, or NULL . 
gboolean gtk_range_get_slider_size_fixed (GtkRange *range);	# This function is useful mainly for GtkRange subclasses.
	range		# a GtkRange 
	return:		#  whether the range’s slider has a fixed size. 
void gtk_range_set_slider_size_fixed (GtkRange *range, gboolean size_fixed);	# Sets whether the range’s slider has a fixed size, or a size thatdepends on its adjustment’s page size.
	range		# a GtkRange 
	size_fixed		# TRUE to make the slider size constant
void gtk_im_context_set_client_window (GtkIMContext *context, GdkWindow *window);	# Set the client window for the input context; this is theGdkWindow in which the input appears. This window isused in order to correctly position status windows, and mayalso be used for purposes internal to the input method.
	context		# a GtkIMContext 
	window		#  the client window. This may be NULL to indicatethat the previous client window no longer exists. 
void gtk_im_context_get_preedit_string (GtkIMContext *context, gchar **str, PangoAttrList **attrs, gint *cursor_pos);	# Retrieve the current preedit string for the input context,and a list of attributes to apply to the string.This string should be displayed inserted at the insertionpoint.
	context		# a GtkIMContext 
	str		#  location to store the retrievedstring. The string retrieved must be freed with 
	cursor_pos		#  location to store position of cursor (in characters)within the preedit string. 
gboolean gtk_im_context_filter_keypress (GtkIMContext *context, GdkEventKey *event);	# Allow an input method to internally handle key press and release events. If this function returns TRUE , then no further processingshould be done for this key event.
	context		# a GtkIMContext 
	event		# the key event
	return:		#  TRUE if the input method handled the key event. 
void gtk_im_context_focus_in (GtkIMContext *context);	# Notify the input method that the widget to which thisinput context corresponds has gained focus. The input methodmay, for example, change the displayed feedback to reflectthis change.
	context		# a GtkIMContext 
void gtk_im_context_focus_out (GtkIMContext *context);	# Notify the input method that the widget to which thisinput context corresponds has lost focus. The input methodmay, for example, change the displayed feedback or reset the contextsstate to reflect this change.
	context		# a GtkIMContext 
void gtk_im_context_reset (GtkIMContext *context);	# Notify the input method that a change such as a change in cursorposition has been made. This will typically cause the inputmethod to clear the preedit state.
	context		# a GtkIMContext 
void gtk_im_context_set_cursor_location (GtkIMContext *context, const GdkRectangle *area);	# Notify the input method that a change in cursor position has been made. The location is relative to the clientwindow.
	context		# a GtkIMContext 
	area		# new location
void gtk_im_context_set_use_preedit (GtkIMContext *context, gboolean use_preedit);	# Sets whether the IM context should use the preedit stringto display feedback. If use_preedit is FALSE (defaultis TRUE), then the IM context may use some other method to displayfeedback, such as displaying it in a child of the root window.
	context		# a GtkIMContext 
	use_preedit		# whether the IM context should use the preedit string.
void gtk_im_context_set_surrounding (GtkIMContext *context, const gchar *text, gint len, gint cursor_index);	# Sets surrounding context around the insertion point and preeditstring. This function is expected to be called in response to theGtkIMContext::retrieve_surrounding signal, and will likely have noeffect if called at other times.
	context		# a GtkIMContext 
	text		# text surrounding the insertion point, as UTF-8.the preedit string should not be included withintext.
	len		# the length of text, or -1 if textis nul-terminated
	cursor_index		# the byte index of the insertion cursor within text.
gboolean gtk_im_context_get_surrounding (GtkIMContext *context, gchar **text, gint *cursor_index);	# Retrieves context around the insertion point. Input methodstypically want context in order to constrain input text based onexisting text; this is important for languages such as Thai whereonly some sequences of characters are allowed.
	context		# a GtkIMContext 
	text		#  location to store a UTF-8 encodedstring of text holding context around the insertion point.If the function returns TRUE , then you must free the resultstored in this location with 
	return:		#  TRUE if surrounding text was provided; in this caseyou must free the result stored in *text. 
gboolean gtk_im_context_delete_surrounding (GtkIMContext *context, gint offset, gint n_chars);	# Asks the widget that the input context is attached to to deletecharacters around the cursor position by emitting theGtkIMContext::delete_surrounding signal. Note that offset and n_charsare in characters not in bytes which differs from the usage otherplaces in GtkIMContext .
	context		# a GtkIMContext 
	offset		# offset from cursor position in chars;a negative value means start before the cursor.
	n_chars		# number of characters to delete.
	return:		#  TRUE if the signal was handled. 
void gtk_native_dialog_show (GtkNativeDialog *self);	# Shows the dialog on the display, allowing the user to interact withit. When the user accepts the state of the dialog the dialog willbe automatically hidden and the “response” signalwill be emitted.
	self		# a GtkNativeDialog 
void gtk_native_dialog_hide (GtkNativeDialog *self);	# Hides the dialog if it is visilbe, aborting any interaction. Once thisis called the “response” signal will not be emitteduntil after the next call to gtk_native_dialog_show() .
	self		# a GtkNativeDialog 
void gtk_native_dialog_destroy (GtkNativeDialog *self);	# Destroys a dialog.
	self		# a GtkNativeDialog 
gboolean gtk_native_dialog_get_visible (GtkNativeDialog *self);	# Determines whether the dialog is visible.
	self		# a GtkNativeDialog 
	return:		#  TRUE if the dialog is visible 
void gtk_native_dialog_set_modal (GtkNativeDialog *self, gboolean modal);	# Sets a dialog modal or non-modal. Modal dialogs prevent interactionwith other windows in the same application. To keep modal dialogson top of main application windows, usegtk_native_dialog_set_transient_for() to make the dialog transient for theparent; most window managers will then disallow lowering the dialog below the parent.
	self		# a GtkNativeDialog 
	modal		# whether the window is modal
gboolean gtk_native_dialog_get_modal (GtkNativeDialog *self);	# Returns whether the dialog is modal. See gtk_native_dialog_set_modal() .
	self		# a GtkNativeDialog 
	return:		#  TRUE if the dialog is set to be modal 
void gtk_native_dialog_set_title (GtkNativeDialog *self, const char *title);	# Sets the title of the GtkNativeDialog .
	self		# a GtkNativeDialog 
	title		# title of the dialog
char  *gtk_native_dialog_get_title (GtkNativeDialog *self);	# Gets the title of the GtkNativeDialog .
	self		# a GtkNativeDialog 
	return:		#  the title of the dialog, or NULL if none hasbeen set explicitly. The returned string is owned by the widgetand must not be modified or freed.  
void gtk_native_dialog_set_transient_for (GtkNativeDialog *self, GtkWindow *parent);	# Dialog windows should be set transient for the main applicationwindow they were spawned from. This allowswindow managers to e.g. keep thedialog on top of the main window, or center the dialog over themain window.
	self		# a GtkNativeDialog 
	parent		#  parent window, or NULL . 
GtkWindow  *gtk_native_dialog_get_transient_for (GtkNativeDialog *self);	# Fetches the transient parent for this window. Seegtk_native_dialog_set_transient_for() .
	self		# a GtkNativeDialog 
	return:		#  the transient parent for this window,or NULL if no transient parent has been set.  
gint gtk_native_dialog_run (GtkNativeDialog *self);	# Blocks in a recursive main loop until self emits the“response” signal. It then returns the response IDfrom the ::response signal emission.
	self		# a GtkNativeDialog 
	return:		#  response ID 
GtkRecentManager  *gtk_recent_manager_new (void );	#创建对象:recent manager object. Recent manager objects are used tohandle the list of recently used resources. A GtkRecentManager objectmonitors the recently used resources list, and emits the “changed” signaleach time something inside the list changes.
	return:		#  A newly created GtkRecentManager object 
GtkRecentManager  *gtk_recent_manager_get_default (void );	# Gets a unique instance of GtkRecentManager , that you can sharein your application without caring about memory management.
	return:		#  A unique GtkRecentManager . Do not ref orunref it.  
gboolean gtk_recent_manager_add_item (GtkRecentManager *manager, const gchar *uri);	# Adds a new resource, pointed by uri, into the recently usedresources list.
	manager		# a GtkRecentManager 
	uri		# a valid URI
	return:		#  TRUE if the new item was successfully addedto the recently used resources list 
gboolean gtk_recent_manager_add_full (GtkRecentManager *manager, const gchar *uri, const GtkRecentData *recent_data);	# Adds a new resource, pointed by uri, into the recently usedresources list, using the metadata specified inside theGtkRecentData passed in recent_data.
	manager		# a GtkRecentManager 
	uri		# a valid URI
	recent_data		# metadata of the resource
	return:		#  TRUE if the new item was successfully added to therecently used resources list, FALSE otherwise 
gboolean gtk_recent_manager_remove_item (GtkRecentManager *manager, const gchar *uri, GError **error);	# Removes a resource pointed by uri from the recently used resourceslist handled by a recent manager.
	manager		# a GtkRecentManager 
	uri		# the URI of the item you wish to remove
	error		#  return location for a GError , or NULL . 
	return:		#  TRUE if the item pointed by urihas been successfullyremoved by the recently used resources list, and FALSE otherwise 
GtkRecentInfo  *gtk_recent_manager_lookup_item (GtkRecentManager *manager, const gchar *uri, GError **error);	# Searches for a URI inside the recently used resources list, andreturns a GtkRecentInfo containing informations about the resourcelike its MIME type, or its display name.
	manager		# a GtkRecentManager 
	uri		# a URI
	error		#  a return location for a GError , or NULL . 
	return:		#  a GtkRecentInfo containing informationabout the resource pointed by uri, or NULL if the URI wasnot registered in the recently used resources list. Free withgtk_recent_info_unref() .  
gboolean gtk_recent_manager_has_item (GtkRecentManager *manager, const gchar *uri);	# Checks whether there is a recently used resource registeredwith uri inside the recent manager.
	manager		# a GtkRecentManager 
	uri		# a URI
	return:		#  TRUE if the resource was found, FALSE otherwise 
gboolean gtk_recent_manager_move_item (GtkRecentManager *manager, const gchar *uri, const gchar *new_uri, GError **error);	# Changes the location of a recently used resource from uri to new_uri.
	manager		# a GtkRecentManager 
	uri		# the URI of a recently used resource
	new_uri		#  the new URI of the recently used resource, orNULL to remove the item pointed by uriin the list. 
	return:		#  TRUE on success 
GList  *gtk_recent_manager_get_items (GtkRecentManager *manager);	# Gets the list of recently used resources.
	manager		# a GtkRecentManager 
	return:		#  a list ofnewly allocated GtkRecentInfo objects. Usegtk_recent_info_unref() on each item inside the list, and thenfree the list itself using g_list_free() .  
gint gtk_recent_manager_purge_items (GtkRecentManager *manager, GError **error);	# Purges every item from the recently used resources list.
	manager		# a GtkRecentManager 
	error		#  a return location for a GError , or NULL . 
	return:		#  the number of items that have been removed from therecently used resources list 
GtkRecentInfo  *gtk_recent_info_ref (GtkRecentInfo *info);	# Increases the reference count of recent_info by one.
	info		# a GtkRecentInfo 
	return:		#  the recent info object with its reference countincreased by one 
void gtk_recent_info_unref (GtkRecentInfo *info);	# Decreases the reference count of info by one. If the referencecount reaches zero, info is deallocated, and the memory freed.
	info		# a GtkRecentInfo 
gchar  *gtk_recent_info_get_uri (GtkRecentInfo *info);	# Gets the URI of the resource.
	info		# a GtkRecentInfo 
	return:		#  the URI of the resource. The returned string isowned by the recent manager, and should not be freed. 
gchar  *gtk_recent_info_get_display_name (GtkRecentInfo *info);	# Gets the name of the resource. If none has been defined, the basenameof the resource is obtained.
	info		# a GtkRecentInfo 
	return:		#  the display name of the resource. The returned stringis owned by the recent manager, and should not be freed. 
gchar  *gtk_recent_info_get_description (GtkRecentInfo *info);	# Gets the (short) description of the resource.
	info		# a GtkRecentInfo 
	return:		#  the description of the resource. The returned stringis owned by the recent manager, and should not be freed. 
gchar  *gtk_recent_info_get_mime_type (GtkRecentInfo *info);	# Gets the MIME type of the resource.
	info		# a GtkRecentInfo 
	return:		#  the MIME type of the resource. The returned stringis owned by the recent manager, and should not be freed. 
time_t gtk_recent_info_get_added (GtkRecentInfo *info);	# Gets the timestamp (seconds from system’s Epoch) when the resourcewas added to the recently used resources list.
	info		# a GtkRecentInfo 
	return:		#  the number of seconds elapsed from system’s Epoch whenthe resource was added to the list, or -1 on failure. 
time_t gtk_recent_info_get_modified (GtkRecentInfo *info);	# Gets the timestamp (seconds from system’s Epoch) when the meta-datafor the resource was last modified.
	info		# a GtkRecentInfo 
	return:		#  the number of seconds elapsed from system’s Epoch whenthe resource was last modified, or -1 on failure. 
time_t gtk_recent_info_get_visited (GtkRecentInfo *info);	# Gets the timestamp (seconds from system’s Epoch) when the meta-datafor the resource was last visited.
	info		# a GtkRecentInfo 
	return:		#  the number of seconds elapsed from system’s Epoch whenthe resource was last visited, or -1 on failure. 
gboolean gtk_recent_info_get_private_hint (GtkRecentInfo *info);	# Gets the value of the “private” flag. Resources in the recently usedlist that have this flag set to TRUE should only be displayed by theapplications that have registered them.
	info		# a GtkRecentInfo 
	return:		#  TRUE if the private flag was found, FALSE otherwise 
gboolean gtk_recent_info_get_application_info (GtkRecentInfo *info, const gchar *app_name, const gchar **app_exec, guint *count, time_t *time_);	# Gets the data regarding the application that has registered the resourcepointed by info.
	info		# a GtkRecentInfo 
	app_name		# the name of the application that has registered this item
	app_exec		#  return location for the string containingthe command line. 
	return:		#  TRUE if an application with app_namehas registered thisresource inside the recently used list, or FALSE otherwise. Theapp_execstring is owned by the GtkRecentInfo and should not bemodified or freed 
gchar  **gtk_recent_info_get_applications (GtkRecentInfo *info, gsize *length);	# Retrieves the list of applications that have registered this resource.
	info		# a GtkRecentInfo 
	length		#  return location for the length of the returned list. 
	return:		#  a newly allocated NULL -terminated array of strings.Use g_strfreev() to free it.  
gchar  *gtk_recent_info_last_application (GtkRecentInfo *info);	# Gets the name of the last application that have registered therecently used resource represented by info.
	info		# a GtkRecentInfo 
	return:		#  an application name. Use g_free() to free it. 
gboolean gtk_recent_info_has_application (GtkRecentInfo *info, const gchar *app_name);	# Checks whether an application registered this resource using app_name.
	info		# a GtkRecentInfo 
	app_name		# a string containing an application name
	return:		#  TRUE if an application with name app_namewas found,FALSE otherwise 
GAppInfo  *gtk_recent_info_create_app_info (GtkRecentInfo *info, const gchar *app_name, GError **error);	# Creates a GAppInfo for the specified GtkRecentInfo 
	info		# a GtkRecentInfo 
	app_name		#  the name of the application that shouldbe mapped to a GAppInfo ; if NULL is used then the defaultapplication for the MIME type is used. 
	return:		#  the newly created GAppInfo , or NULL .In case of error, errorwill be set either with aGTK_RECENT_MANAGER_ERROR or a G_IO_ERROR .  
gchar  **gtk_recent_info_get_groups (GtkRecentInfo *info, gsize *length);	# Returns all groups registered for the recently used item info.The array of returned group names will be NULL terminated, solength might optionally be NULL .
	info		# a GtkRecentInfo 
	length		#  return location for the number of groups returned. 
	return:		#  a newly allocated NULL terminated array of strings.Use g_strfreev() to free it.  
gboolean gtk_recent_info_has_group (GtkRecentInfo *info, const gchar *group_name);	# Checks whether group_name appears inside the groupsregistered for the recently used item info.
	info		# a GtkRecentInfo 
	group_name		# name of a group
	return:		#  TRUE if the group was found 
GdkPixbuf  *gtk_recent_info_get_icon (GtkRecentInfo *info, gint size);	# Retrieves the icon of size size associated to the resource MIME type.
	info		# a GtkRecentInfo 
	size		# the size of the icon in pixels
	return:		#  a GdkPixbuf containing the icon,or NULL . Use g_object_unref() when finished using the icon.  
GIcon  *gtk_recent_info_get_gicon (GtkRecentInfo *info);	# Retrieves the icon associated to the resource MIME type.
	info		# a GtkRecentInfo 
	return:		#  a GIcon containing the icon, or NULL .Use g_object_unref() when finished using the icon.  
gchar  *gtk_recent_info_get_short_name (GtkRecentInfo *info);	# Computes a valid UTF-8 string that can be used as thename of the item in a menu or list. For example, callingthis function on an item that refers to“file:///foo/bar.txt” will yield “bar.txt”.
	info		# an GtkRecentInfo 
	return:		#  A newly-allocated string in UTF-8 encodingfree it with g_free()  
gchar  *gtk_recent_info_get_uri_display (GtkRecentInfo *info);	# Gets a displayable version of the resource’s URI. If the resourceis local, it returns a local path; if the resource is not local,it returns the UTF-8 encoded content of gtk_recent_info_get_uri() .
	info		# a GtkRecentInfo 
	return:		#  a newly allocated UTF-8 string containing theresource’s URI or NULL . Use g_free() when done using it.  
gint gtk_recent_info_get_age (GtkRecentInfo *info);	# Gets the number of days elapsed since the last updateof the resource pointed by info.
	info		# a GtkRecentInfo 
	return:		#  a positive integer containing the number of dayselapsed since the time this resource was last modified 
gboolean gtk_recent_info_is_local (GtkRecentInfo *info);	# Checks whether the resource is local or not by looking at thescheme of its URI.
	info		# a GtkRecentInfo 
	return:		#  TRUE if the resource is local 
gboolean gtk_recent_info_exists (GtkRecentInfo *info);	# Checks whether the resource pointed by info still exists.At the moment this check is done only on resources pointingto local files.
	info		# a GtkRecentInfo 
	return:		#  TRUE if the resource exists 
gboolean gtk_recent_info_match (GtkRecentInfo *info_a, GtkRecentInfo *info_b);	# Checks whether two GtkRecentInfo point to the sameresource.
	info_a		# a GtkRecentInfo 
	info_b		# a GtkRecentInfo 
	return:		#  TRUE if both GtkRecentInfo point to the sameresource, FALSE otherwise 
void gtk_recent_chooser_set_show_private (GtkRecentChooser *chooser, gboolean show_private);	# Whether to show recently used resources marked registered as private.
	chooser		# a GtkRecentChooser 
	show_private		# TRUE to show private items, FALSE otherwise
gboolean gtk_recent_chooser_get_show_private (GtkRecentChooser *chooser);	# Returns whether chooser should display recently used resourcesregistered as private.
	chooser		# a GtkRecentChooser 
	return:		#  TRUE if the recent chooser should show private items,FALSE otherwise. 
void gtk_recent_chooser_set_show_not_found (GtkRecentChooser *chooser, gboolean show_not_found);	# Sets whether chooser should display the recently used resources thatit didn’t find. This only applies to local resources.
	chooser		# a GtkRecentChooser 
	show_not_found		# whether to show the local items we didn’t find
gboolean gtk_recent_chooser_get_show_not_found (GtkRecentChooser *chooser);	# Retrieves whether chooser should show the recently used resources thatwere not found.
	chooser		# a GtkRecentChooser 
	return:		#  TRUE if the resources not found should be displayed, andFALSE otheriwse. 
void gtk_recent_chooser_set_show_icons (GtkRecentChooser *chooser, gboolean show_icons);	# Sets whether chooser should show an icon near the resource whendisplaying it.
	chooser		# a GtkRecentChooser 
	show_icons		# whether to show an icon near the resource
gboolean gtk_recent_chooser_get_show_icons (GtkRecentChooser *chooser);	# Retrieves whether chooser should show an icon near the resource.
	chooser		# a GtkRecentChooser 
	return:		#  TRUE if the icons should be displayed, FALSE otherwise. 
void gtk_recent_chooser_set_select_multiple (GtkRecentChooser *chooser, gboolean select_multiple);	# Sets whether chooser can select multiple items.
	chooser		# a GtkRecentChooser 
	select_multiple		# TRUE if choosercan select more than one item
gboolean gtk_recent_chooser_get_select_multiple (GtkRecentChooser *chooser);	# Gets whether chooser can select multiple items.
	chooser		# a GtkRecentChooser 
	return:		#  TRUE if choosercan select more than one item. 
void gtk_recent_chooser_set_local_only (GtkRecentChooser *chooser, gboolean local_only);	# Sets whether only local resources, that is resources using the file:// URIscheme, should be shown in the recently used resources selector. Iflocal_only is TRUE (the default) then the shown resources are guaranteedto be accessible through the operating system native file system.
	chooser		# a GtkRecentChooser 
	local_only		# TRUE if only local files can be shown
gboolean gtk_recent_chooser_get_local_only (GtkRecentChooser *chooser);	# Gets whether only local resources should be shown in the recently usedresources selector. See gtk_recent_chooser_set_local_only() 
	chooser		# a GtkRecentChooser 
	return:		#  TRUE if only local resources should be shown. 
void gtk_recent_chooser_set_limit (GtkRecentChooser *chooser, gint limit);	# Sets the number of items that should be returned bygtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris() .
	chooser		# a GtkRecentChooser 
	limit		# a positive integer, or -1 for all items
gint gtk_recent_chooser_get_limit (GtkRecentChooser *chooser);	# Gets the number of items returned by gtk_recent_chooser_get_items() and gtk_recent_chooser_get_uris() .
	chooser		# a GtkRecentChooser 
	return:		#  A positive integer, or -1 meaning that all items arereturned. 
void gtk_recent_chooser_set_show_tips (GtkRecentChooser *chooser, gboolean show_tips);	# Sets whether to show a tooltips containing the full path of eachrecently used resource in a GtkRecentChooser widget.
	chooser		# a GtkRecentChooser 
	show_tips		# TRUE if tooltips should be shown
gboolean gtk_recent_chooser_get_show_tips (GtkRecentChooser *chooser);	# Gets whether chooser should display tooltips containing the full pathof a recently user resource.
	chooser		# a GtkRecentChooser 
	return:		#  TRUE if the recent chooser should show tooltips,FALSE otherwise. 
void gtk_recent_chooser_set_sort_type (GtkRecentChooser *chooser, GtkRecentSortType sort_type);	# Changes the sorting order of the recently used resources list displayed bychooser.
	chooser		# a GtkRecentChooser 
	sort_type		# sort order that the chooser should use
GtkRecentSortType gtk_recent_chooser_get_sort_type (GtkRecentChooser *chooser);	# Gets the value set by gtk_recent_chooser_set_sort_type() .
	chooser		# a GtkRecentChooser 
	return:		#  the sorting order of the chooser. 
gint <span class="c_punctuation">( *GtkRecentSortFunc<span class="c_punctuation">) (GtkRecentInfo *a, GtkRecentInfo *b, gpointer user_data);	# gint <span class="c_punctuation">( *GtkRecentSortFunc<span class="c_punctuation">) (GtkRecentInfo *a, GtkRecentInfo *b, gpointer user_data);</pre></div><hr>
void gtk_recent_chooser_set_sort_func (GtkRecentChooser *chooser, GtkRecentSortFunc sort_func, gpointer sort_data, GDestroyNotify data_destroy);	# Sets the comparison function used when sorting to be sort_func. Ifthe chooser has the sort type set to GTK_RECENT_SORT_CUSTOM thenthe chooser will sort using this function.
	chooser		# a GtkRecentChooser 
	sort_func		# the comparison function
	sort_data		#  user data to pass to sort_func, or NULL . 
gboolean gtk_recent_chooser_set_current_uri (GtkRecentChooser *chooser, const gchar *uri, GError **error);	# Sets uri as the current URI for chooser.
	chooser		# a GtkRecentChooser 
	uri		# a URI
	error		#  return location for a GError , or NULL . 
	return:		#  TRUE if the URI was found. 
gchar  *gtk_recent_chooser_get_current_uri (GtkRecentChooser *chooser);	# Gets the URI currently selected by chooser.
	chooser		# a GtkRecentChooser 
	return:		#  a newly allocated string holding a URI. 
GtkRecentInfo  *gtk_recent_chooser_get_current_item (GtkRecentChooser *chooser);	# Gets the GtkRecentInfo currently selected by chooser.
	chooser		# a GtkRecentChooser 
	return:		#  a GtkRecentInfo . Use gtk_recent_info_unref() whenwhen you have finished using it. 
gboolean gtk_recent_chooser_select_uri (GtkRecentChooser *chooser, const gchar *uri, GError **error);	# Selects uri inside chooser.
	chooser		# a GtkRecentChooser 
	uri		# a URI
	error		#  return location for a GError , or NULL . 
	return:		#  TRUE if uriwas found. 
void gtk_recent_chooser_unselect_uri (GtkRecentChooser *chooser, const gchar *uri);	# Unselects uri inside chooser.
	chooser		# a GtkRecentChooser 
	uri		# a URI
void gtk_recent_chooser_select_all (GtkRecentChooser *chooser);	# Selects all the items inside chooser, if the chooser supportsmultiple selection.
	chooser		# a GtkRecentChooser 
void gtk_recent_chooser_unselect_all (GtkRecentChooser *chooser);	# Unselects all the items inside chooser.
	chooser		# a GtkRecentChooser 
GList  *gtk_recent_chooser_get_items (GtkRecentChooser *chooser);	# Gets the list of recently used resources in form of GtkRecentInfo objects.
	chooser		# a GtkRecentChooser 
	return:		#  A newly allocatedlist of GtkRecentInfo objects. You shoulduse gtk_recent_info_unref() on every item of the list, and then freethe list itself using g_list_free() .  
gchar  **gtk_recent_chooser_get_uris (GtkRecentChooser *chooser, gsize *length);	# Gets the URI of the recently used resources.
	chooser		# a GtkRecentChooser 
	length		#  return location for a the length of theURI list, or NULL . 
	return:		#  A newly allocated, NULL -terminated array of strings. Useg_strfreev() to free it.  
void gtk_recent_chooser_add_filter (GtkRecentChooser *chooser, GtkRecentFilter *filter);	# Adds filter to the list of GtkRecentFilter objects held by chooser.
	chooser		# a GtkRecentChooser 
	filter		# a GtkRecentFilter 
void gtk_recent_chooser_remove_filter (GtkRecentChooser *chooser, GtkRecentFilter *filter);	# Removes filter from the list of GtkRecentFilter objects held by chooser.
	chooser		# a GtkRecentChooser 
	filter		# a GtkRecentFilter 
GSList  *gtk_recent_chooser_list_filters (GtkRecentChooser *chooser);	# Gets the GtkRecentFilter objects held by chooser.
	chooser		# a GtkRecentChooser 
	return:		#  A singly linked listof GtkRecentFilter objects. Youshould just free the returned list using g_slist_free() .  
void gtk_recent_chooser_set_filter (GtkRecentChooser *chooser, GtkRecentFilter *filter);	# Sets filter as the current GtkRecentFilter object used by chooserto affect the displayed recently used resources.
	chooser		# a GtkRecentChooser 
	filter		#  a GtkRecentFilter . 
GtkRecentFilter  *gtk_recent_chooser_get_filter (GtkRecentChooser *chooser);	# Gets the GtkRecentFilter object currently used by chooser to affectthe display of the recently used resources.
	chooser		# a GtkRecentChooser 
	return:		#  a GtkRecentFilter object.  
GtkWidget  *gtk_recent_chooser_dialog_new (const gchar *title, GtkWindow *parent, const gchar *first_button_text, ...);	#创建对象:GtkRecentChooserDialog . This function is analogous togtk_dialog_new_with_buttons() .
	title		#  Title of the dialog, or NULL . 
	return:		#  a new GtkRecentChooserDialog  
GtkWidget  *gtk_recent_chooser_dialog_new_for_manager (const gchar *title, GtkWindow *parent, GtkRecentManager *manager, const gchar *first_button_text, ...);	#创建对象:GtkRecentChooserDialog with a specified recent manager.
	title		#  Title of the dialog, or NULL . 
	first_button_text		#  stock ID or text to go in the first button, or NULL . 
	return:		#  a new GtkRecentChooserDialog  
GtkWidget  *gtk_recent_chooser_menu_new (void );	#创建对象:GtkRecentChooserMenu widget.
	return:		#  a new GtkRecentChooserMenu  
GtkWidget  *gtk_recent_chooser_menu_new_for_manager (GtkRecentManager *manager);	#创建对象:GtkRecentChooserMenu widget using manager asthe underlying recently used resources manager.
	manager		# a GtkRecentManager 
	return:		#  a new GtkRecentChooserMenu , bound to manager. 
gboolean gtk_recent_chooser_menu_get_show_numbers (GtkRecentChooserMenu *menu);	# Returns the value set by gtk_recent_chooser_menu_set_show_numbers() .
	menu		# a GtkRecentChooserMenu 
	return:		#  TRUE if numbers should be shown. 
void gtk_recent_chooser_menu_set_show_numbers (GtkRecentChooserMenu *menu, gboolean show_numbers);	# Sets whether a number should be added to the items of menu. Thenumbers are shown to provide a unique character for a mnemonic tobe used inside ten menu item’s label. Only the first the itemsget a number to avoid clashes.
	menu		# a GtkRecentChooserMenu 
	show_numbers		# whether to show numbers
GtkWidget  *gtk_recent_chooser_widget_new (void );	#创建对象:GtkRecentChooserWidget object. This is an embeddable widgetused to access the recently used resources list.
	return:		#  a new GtkRecentChooserWidget  
GtkWidget  *gtk_recent_chooser_widget_new_for_manager (GtkRecentManager *manager);	#创建对象:GtkRecentChooserWidget with a specified recent manager.
	manager		# a GtkRecentManager 
	return:		#  a new GtkRecentChooserWidget  
gboolean <span class="c_punctuation">( *GtkRecentFilterFunc<span class="c_punctuation">) (const GtkRecentFilterInfo *filter_info, gpointer user_data);	# The type of function that is used with custom filters,see gtk_recent_filter_add_custom() .
	filter_info		# a GtkRecentFilterInfo that is filled accordingto the neededflags passed to 
	user_data		# user data passed to 
	return:		#  TRUE if the file should be displayed 
GtkRecentFilter  *gtk_recent_filter_new (void );	#创建对象:GtkRecentFilter with no rules added to it.Such filter does not accept any recently used resources, so is notparticularly useful until you add rules withgtk_recent_filter_add_pattern() , gtk_recent_filter_add_mime_type() ,gtk_recent_filter_add_application() , gtk_recent_filter_add_age() .To create a filter that accepts any recently used resource, use:
	return:		#  a new GtkRecentFilter  
gchar  *gtk_recent_filter_get_name (GtkRecentFilter *filter);	# Gets the human-readable name for the filter.See gtk_recent_filter_set_name() .
	filter		# a GtkRecentFilter 
	return:		#  the name of the filter, or NULL . The returned stringis owned by the filter object and should not be freed.  
void gtk_recent_filter_set_name (GtkRecentFilter *filter, const gchar *name);	# Sets the human-readable name of the filter; this is the stringthat will be displayed in the recently used resources selectoruser interface if there is a selectable list of filters.
	filter		# a GtkRecentFilter 
	name		# then human readable name of filter
void gtk_recent_filter_add_mime_type (GtkRecentFilter *filter, const gchar *mime_type);	# Adds a rule that allows resources based on their registered MIME type.
	filter		# a GtkRecentFilter 
	mime_type		# a MIME type
void gtk_recent_filter_add_pattern (GtkRecentFilter *filter, const gchar *pattern);	# Adds a rule that allows resources based on a pattern matching theirdisplay name.
	filter		# a GtkRecentFilter 
	pattern		# a file pattern
void gtk_recent_filter_add_pixbuf_formats (GtkRecentFilter *filter);	# Adds a rule allowing image files in the formats supportedby GdkPixbuf.
	filter		# a GtkRecentFilter 
void gtk_recent_filter_add_application (GtkRecentFilter *filter, const gchar *application);	# Adds a rule that allows resources based on the name of the applicationthat has registered them.
	filter		# a GtkRecentFilter 
	application		# an application name
void gtk_recent_filter_add_group (GtkRecentFilter *filter, const gchar *group);	# Adds a rule that allows resources based on the name of the groupto which they belong
	filter		# a GtkRecentFilter 
	group		# a group name
void gtk_recent_filter_add_age (GtkRecentFilter *filter, gint days);	# Adds a rule that allows resources based on their age - that is, the numberof days elapsed since they were last modified.
	filter		# a GtkRecentFilter 
	days		# number of days
void gtk_recent_filter_add_custom (GtkRecentFilter *filter, GtkRecentFilterFlags needed, GtkRecentFilterFunc func, gpointer data, GDestroyNotify data_destroy);	# Adds a rule to a filter that allows resources based on a custom callbackfunction. The bitfield needed which is passed in provides informationabout what sorts of information that the filter function needs;this allows GTK+ to avoid retrieving expensive information whenit isn’t needed by the filter.
	filter		# a GtkRecentFilter 
	needed		# bitfield of flags indicating the information that the customfilter function needs.
	func		# callback function; if the function returns TRUE , thenthe file will be displayed.
	data		# data to pass to func
	data_destroy		# function to call to free datawhen it is no longer needed.
GtkRecentFilterFlags gtk_recent_filter_get_needed (GtkRecentFilter *filter);	# Gets the fields that need to be filled in for the GtkRecentFilterInfo passed to gtk_recent_filter_filter() 
	filter		# a GtkRecentFilter 
	return:		#  bitfield of flags indicating needed fields whencalling gtk_recent_filter_filter()  
gboolean gtk_recent_filter_filter (GtkRecentFilter *filter, const GtkRecentFilterInfo *filter_info);	# Tests whether a file should be displayed according to filter.The GtkRecentFilterInfo filter_info should includethe fields returned from gtk_recent_filter_get_needed() , andmust set the GtkRecentFilterInfo.contains field of filter_infoto indicate which fields have been set.
	filter		# a GtkRecentFilter 
	filter_info		# a GtkRecentFilterInfo containing informationabout a recently used resource
	return:		#  TRUE if the file should be displayed 
GAppInfo  *gtk_app_chooser_get_app_info (GtkAppChooser *self);	# Returns the currently selected application.
	self		# a GtkAppChooser 
	return:		#  a GAppInfo for the currently selectedapplication, or NULL if none is selected. Free with g_object_unref() .  
gchar  *gtk_app_chooser_get_content_type (GtkAppChooser *self);	# Returns the current value of the “content-type” property.
	self		# a GtkAppChooser 
	return:		#  the content type of self. Free with g_free()  
void gtk_app_chooser_refresh (GtkAppChooser *self);	# Reloads the list of applications.
	self		# a GtkAppChooser 
GtkWidget  *gtk_app_chooser_button_new (const gchar *content_type);	#创建对象:GtkAppChooserButton for applicationsthat can handle content of the given type.
	content_type		# the content type to show applications for
	return:		#  a newly created GtkAppChooserButton  
void gtk_app_chooser_button_append_custom_item (GtkAppChooserButton *self, const gchar *name, const gchar *label, GIcon *icon);	# Appends a custom item to the list of applications that is shownin the popup; the item name must be unique per-widget.Clients can use the provided name as a detail for the“custom-item-activated” signal, to add acallback for the activation of a particular custom item in the list.See also gtk_app_chooser_button_append_separator() .
	self		# a GtkAppChooserButton 
	name		# the name of the custom item
	label		# the label for the custom item
	icon		# the icon for the custom item
void gtk_app_chooser_button_append_separator (GtkAppChooserButton *self);	# Appends a separator to the list of applications that is shownin the popup.
	self		# a GtkAppChooserButton 
void gtk_app_chooser_button_set_active_custom_item (GtkAppChooserButton *self, const gchar *name);	# Selects a custom item previously added withgtk_app_chooser_button_append_custom_item() .
	self		# a GtkAppChooserButton 
	name		# the name of the custom item
gboolean gtk_app_chooser_button_get_show_default_item (GtkAppChooserButton *self);	# Returns the current value of the “show-default-item” property.
	self		# a GtkAppChooserButton 
	return:		#  the value of “show-default-item”  
void gtk_app_chooser_button_set_show_default_item (GtkAppChooserButton *self, gboolean setting);	# Sets whether the dropdown menu of this button should show thedefault application for the given content type at top.
	self		# a GtkAppChooserButton 
	setting		# the new value for “show-default-item” 
gboolean gtk_app_chooser_button_get_show_dialog_item (GtkAppChooserButton *self);	# Returns the current value of the “show-dialog-item” property.
	self		# a GtkAppChooserButton 
	return:		#  the value of “show-dialog-item”  
void gtk_app_chooser_button_set_show_dialog_item (GtkAppChooserButton *self, gboolean setting);	# Sets whether the dropdown menu of this button should show anentry to trigger a GtkAppChooserDialog .
	self		# a GtkAppChooserButton 
	setting		# the new value for “show-dialog-item” 
gchar  *gtk_app_chooser_button_get_heading (GtkAppChooserButton *self);	# Returns the text to display at the top of the dialog.
	self		# a GtkAppChooserButton 
	return:		#  the text to display at the top of the dialog,or NULL , in which case a default text is displayed.  
void gtk_app_chooser_button_set_heading (GtkAppChooserButton *self, const gchar *heading);	# Sets the text to display at the top of the dialog.If the heading is not set, the dialog displays a default text.
	self		# a GtkAppChooserButton 
	heading		# a string containing Pango markup
GtkWidget  *gtk_app_chooser_dialog_new (GtkWindow *parent, GtkDialogFlags flags, GFile *file);	#创建对象:GtkAppChooserDialog for the provided GFile ,to allow the user to select an application for it.
	parent		#  a GtkWindow , or NULL . 
	return:		#  a newly created GtkAppChooserDialog  
GtkWidget  *gtk_app_chooser_dialog_new_for_content_type (GtkWindow *parent, GtkDialogFlags flags, const gchar *content_type);	#创建对象:GtkAppChooserDialog for the provided content type,to allow the user to select an application for it.
	parent		#  a GtkWindow , or NULL . 
	return:		#  a newly created GtkAppChooserDialog  
GtkWidget  *gtk_app_chooser_dialog_get_widget (GtkAppChooserDialog *self);	# Returns the GtkAppChooserWidget of this dialog.
	self		# a GtkAppChooserDialog 
	return:		#  the GtkAppChooserWidget of self.  
void gtk_app_chooser_dialog_set_heading (GtkAppChooserDialog *self, const gchar *heading);	# Sets the text to display at the top of the dialog.If the heading is not set, the dialog displays a default text.
	self		# a GtkAppChooserDialog 
	heading		# a string containing Pango markup
gchar  *gtk_app_chooser_dialog_get_heading (GtkAppChooserDialog *self);	# Returns the text to display at the top of the dialog.
	self		# a GtkAppChooserDialog 
	return:		#  the text to display at the top of the dialog, or NULL , in whichcase a default text is displayed.  
GtkWidget  *gtk_app_chooser_widget_new (const gchar *content_type);	#创建对象:GtkAppChooserWidget for applicationsthat can handle content of the given type.
	content_type		# the content type to show applications for
	return:		#  a newly created GtkAppChooserWidget  
void gtk_app_chooser_widget_set_show_default (GtkAppChooserWidget *self, gboolean setting);	# Sets whether the app chooser should show the default handlerfor the content type in a separate section.
	self		# a GtkAppChooserWidget 
	setting		# the new value for “show-default” 
gboolean gtk_app_chooser_widget_get_show_default (GtkAppChooserWidget *self);	# Returns the current value of the “show-default” property.
	self		# a GtkAppChooserWidget 
	return:		#  the value of “show-default”  
void gtk_app_chooser_widget_set_show_recommended (GtkAppChooserWidget *self, gboolean setting);	# Sets whether the app chooser should show recommended applicationsfor the content type in a separate section.
	self		# a GtkAppChooserWidget 
	setting		# the new value for “show-recommended” 
gboolean gtk_app_chooser_widget_get_show_recommended (GtkAppChooserWidget *self);	# Returns the current value of the “show-recommended” property.
	self		# a GtkAppChooserWidget 
	return:		#  the value of “show-recommended”  
void gtk_app_chooser_widget_set_show_fallback (GtkAppChooserWidget *self, gboolean setting);	# Sets whether the app chooser should show related applicationsfor the content type in a separate section.
	self		# a GtkAppChooserWidget 
	setting		# the new value for “show-fallback” 
gboolean gtk_app_chooser_widget_get_show_fallback (GtkAppChooserWidget *self);	# Returns the current value of the “show-fallback” property.
	self		# a GtkAppChooserWidget 
	return:		#  the value of “show-fallback”  
void gtk_app_chooser_widget_set_show_other (GtkAppChooserWidget *self, gboolean setting);	# Sets whether the app chooser should show applicationswhich are unrelated to the content type.
	self		# a GtkAppChooserWidget 
	setting		# the new value for “show-other” 
gboolean gtk_app_chooser_widget_get_show_other (GtkAppChooserWidget *self);	# Returns the current value of the “show-other” property.
	self		# a GtkAppChooserWidget 
	return:		#  the value of “show-other”  
void gtk_app_chooser_widget_set_show_all (GtkAppChooserWidget *self, gboolean setting);	# Sets whether the app chooser should show all applicationsin a flat list.
	self		# a GtkAppChooserWidget 
	setting		# the new value for “show-all” 
gboolean gtk_app_chooser_widget_get_show_all (GtkAppChooserWidget *self);	# Returns the current value of the “show-all” property.
	self		# a GtkAppChooserWidget 
	return:		#  the value of “show-all”  
void gtk_app_chooser_widget_set_default_text (GtkAppChooserWidget *self, const gchar *text);	# Sets the text that is shown if there are not applicationsthat can handle the content type.
	self		# a GtkAppChooserWidget 
	text		# the new value for “default-text” 
gchar  *gtk_app_chooser_widget_get_default_text (GtkAppChooserWidget *self);	# Returns the text that is shown if there are not applicationsthat can handle the content type.
	self		# a GtkAppChooserWidget 
	return:		#  the value of “default-text”  
GtkPropagationPhase gtk_event_controller_get_propagation_phase (GtkEventController *controller);	# Gets the propagation phase at which controller handles events.
	controller		# a GtkEventController 
	return:		#  the propagation phase 
void gtk_event_controller_set_propagation_phase (GtkEventController *controller, GtkPropagationPhase phase);	# Sets the propagation phase at which a controller handles events.
	controller		# a GtkEventController 
	phase		# a propagation phase
gboolean gtk_event_controller_handle_event (GtkEventController *controller, const GdkEvent *event);	# Feeds an events into controller, so it can be interpretedand the controller actions triggered.
	controller		# a GtkEventController 
	event		# a GdkEvent 
	return:		#  TRUE if the event was potentially useful to trigger thecontroller action 
GtkWidget  *gtk_event_controller_get_widget (GtkEventController *controller);	# Returns the GtkWidget this controller relates to.
	controller		# a GtkEventController 
	return:		#  a GtkWidget .  
void gtk_event_controller_reset (GtkEventController *controller);	# Resets the controller to a clean state. Every interactionthe controller did through “handle-event” will be dropped at this point.
	controller		# a GtkEventController 
GdkDevice  *gtk_gesture_get_device (GtkGesture *gesture);	# Returns the master GdkDevice that is currently operatingon gesture, or NULL if the gesture is not being interacted.
	gesture		# a GtkGesture 
	return:		#  a GdkDevice , or NULL .  
GdkWindow  *gtk_gesture_get_window (GtkGesture *gesture);	# Returns the user-defined window that receives the eventshandled by gesture. See gtk_gesture_set_window() for moreinformation.
	gesture		# a GtkGesture 
	return:		#  the user defined window, or NULL if none.  
void gtk_gesture_set_window (GtkGesture *gesture, GdkWindow *window);	# Sets a specific window to receive events about, so gesturewill effectively handle only events targeting window, ora child of it. window must pertain to gtk_event_controller_get_widget() .
	gesture		# a GtkGesture 
	window		#  a GdkWindow , or NULL . 
gboolean gtk_gesture_is_active (GtkGesture *gesture);	# Returns TRUE if the gesture is currently active.A gesture is active meanwhile there are touch sequencesinteracting with it.
	gesture		# a GtkGesture 
	return:		#  TRUE if gesture is active 
gboolean gtk_gesture_is_recognized (GtkGesture *gesture);	# Returns TRUE if the gesture is currently recognized.A gesture is recognized if there are as many interactingtouch sequences as required by gesture, and “check” returned TRUE for the sequences being currently interpreted.
	gesture		# a GtkGesture 
	return:		#  TRUE if gesture is recognized 
GtkEventSequenceState gtk_gesture_get_sequence_state (GtkGesture *gesture, GdkEventSequence *sequence);	# Returns the sequence state, as seen by gesture.
	gesture		# a GtkGesture 
	sequence		# a GdkEventSequence 
	return:		#  The sequence state in gesture 
gboolean gtk_gesture_set_sequence_state (GtkGesture *gesture, GdkEventSequence *sequence, GtkEventSequenceState state);	# Sets the state of sequence in gesture. Sequences startin state GTK_EVENT_SEQUENCE_NONE , and whenever they changestate, they can never go back to that state. Likewise,sequences in state GTK_EVENT_SEQUENCE_DENIED cannot turnback to a not denied state. With these rules, the lifetimeof an event sequence is constrained to the next four:
	gesture		# a GtkGesture 
	sequence		# a GdkEventSequence 
	state		# the sequence state
	return:		#  TRUE if sequenceis handled by gesture,and the state is changed successfully 
gboolean gtk_gesture_set_state (GtkGesture *gesture, GtkEventSequenceState state);	# Sets the state of all sequences that gesture is currentlyinteracting with. See gtk_gesture_set_sequence_state() for more details on sequence states.
	gesture		# a GtkGesture 
	state		# the sequence state
	return:		#  TRUE if the state of at least one sequencewas changed successfully 
GList  *gtk_gesture_get_sequences (GtkGesture *gesture);	# Returns the list of GdkEventSequences currently being interpretedby gesture.
	gesture		# a GtkGesture 
	return:		#  A listof GdkEventSequences , the list elements are owned by GTK+and must not be freed or modified, the list itself must be deletedthrough g_list_free() .  
gboolean gtk_gesture_handles_sequence (GtkGesture *gesture, GdkEventSequence *sequence);	# Returns TRUE if gesture is currently handling events corresponding tosequence.
	gesture		# a GtkGesture 
	sequence		#  a GdkEventSequence or NULL . 
	return:		#  TRUE if gestureis handling sequence, FALSE otherwise 
GdkEventSequence  *gtk_gesture_get_last_updated_sequence (GtkGesture *gesture);	# Returns the GdkEventSequence that was last updated on gesture.
	gesture		# a GtkGesture 
	return:		#  The last updated sequence.  
GdkEvent  *gtk_gesture_get_last_event (GtkGesture *gesture, GdkEventSequence *sequence);	# Returns the last event that was processed for sequence.
	gesture		# a GtkGesture 
	sequence		# a GdkEventSequence 
	return:		#  The last event from sequence.  
gboolean gtk_gesture_get_point (GtkGesture *gesture, GdkEventSequence *sequence, gdouble *x, gdouble *y);	# If sequence is currently being interpreted by gesture, thisfunction returns TRUE and fills in x and y with the last coordinatesstored for that event sequence. The coordinates are always relative to thewidget allocation.
	gesture		# a GtkGesture 
	sequence		#  a GdkEventSequence , or NULL for pointer events. 
	return:		#  TRUE if sequenceis currently interpreted 
gboolean gtk_gesture_get_bounding_box (GtkGesture *gesture, GdkRectangle *rect);	# If there are touch sequences being currently handled by gesture,this function returns TRUE and fills in rect with the boundingbox containing all active touches. Otherwise, FALSE will bereturned.
	gesture		# a GtkGesture 
	rect		#  bounding box containing all active touches. 
	return:		#  TRUE if there are active touches, FALSE otherwise 
gboolean gtk_gesture_get_bounding_box_center (GtkGesture *gesture, gdouble *x, gdouble *y);	# If there are touch sequences being currently handled by gesture,this function returns TRUE and fills in x and y with the centerof the bounding box containing all active touches. Otherwise, FALSE will be returned.
	gesture		# a GtkGesture 
	x		#  X coordinate for the bounding box center. 
	return:		#  FALSE if no active touches are present, TRUE otherwise 
void gtk_gesture_group (GtkGesture *group_gesture, GtkGesture *gesture);	# Adds gesture to the same group than group_gesture. Gesturesare by default isolated in their own groups.
	gesture		# a GtkGesture 
	group_gesture		# GtkGesture to group gesturewith
void gtk_gesture_ungroup (GtkGesture *gesture);	# Separates gesture into an isolated group.
	gesture		# a GtkGesture 
GList  *gtk_gesture_get_group (GtkGesture *gesture);	# Returns all gestures in the group of gesture
	gesture		# a GtkGesture 
	return:		#  The listof GtkGestures , free with g_list_free() .  
gboolean gtk_gesture_is_grouped_with (GtkGesture *gesture, GtkGesture *other);	# Returns TRUE if both gestures pertain to the same group.
	gesture		# a GtkGesture 
	other		# another GtkGesture 
	return:		#  whether the gestures are grouped 
gboolean gtk_gesture_single_get_exclusive (GtkGestureSingle *gesture);	# Gets whether a gesture is exclusive. For more information, seegtk_gesture_single_set_exclusive() .
	gesture		# a GtkGestureSingle 
	return:		#  Whether the gesture is exclusive 
void gtk_gesture_single_set_exclusive (GtkGestureSingle *gesture, gboolean exclusive);	# Sets whether gesture is exclusive. An exclusive gesture willonly handle pointer and "pointer emulated" touch events, so atany given time, there is only one sequence able to interact withthose.
	gesture		# a GtkGestureSingle 
	exclusive		# TRUE to make gestureexclusive
gboolean gtk_gesture_single_get_touch_only (GtkGestureSingle *gesture);	# Returns TRUE if the gesture is only triggered by touch events.
	gesture		# a GtkGestureSingle 
	return:		#  TRUE if the gesture only handles touch events 
void gtk_gesture_single_set_touch_only (GtkGestureSingle *gesture, gboolean touch_only);	# If touch_only is TRUE , gesture will only handle events of typeGDK_TOUCH_BEGIN , GDK_TOUCH_UPDATE or GDK_TOUCH_END . If FALSE ,mouse events will be handled too.
	gesture		# a GtkGestureSingle 
	touch_only		# whether gesturehandles only touch events
guint gtk_gesture_single_get_button (GtkGestureSingle *gesture);	# Returns the button number gesture listens for, or 0 if gesturereacts to any button press.
	gesture		# a GtkGestureSingle 
	return:		#  The button number, or 0 for any button 
void gtk_gesture_single_set_button (GtkGestureSingle *gesture, guint button);	# Sets the button number gesture listens to. If non-0, everybutton press from a different button number will be ignored.Touch events implicitly match with button 1.
	gesture		# a GtkGestureSingle 
	button		# button number to listen to, or 0 for any button
guint gtk_gesture_single_get_current_button (GtkGestureSingle *gesture);	# Returns the button number currently interacting with gesture, or 0 if thereis none.
	gesture		# a GtkGestureSingle 
	return:		#  The current button number 
GdkEventSequence  *gtk_gesture_single_get_current_sequence (GtkGestureSingle *gesture);	# Returns the event sequence currently interacting with gesture.This is only meaningful if gtk_gesture_is_active() returns TRUE .
	gesture		# a GtkGestureSingle 
	return:		#  the current sequence.  
GtkGesture  *gtk_gesture_drag_new (GtkWidget *widget);	# Returns a newly created GtkGesture that recognizes drags.
	widget		# a GtkWidget 
	return:		#  a newly created GtkGestureDrag  
gboolean gtk_gesture_drag_get_start_point (GtkGestureDrag *gesture, gdouble *x, gdouble *y);	# If the gesture is active, this function returns TRUE and fills in x and y with the drag start coordinates,in window-relative coordinates.
	gesture		# a GtkGesture 
	x		#  X coordinate for the drag start point. 
	return:		#  TRUE if the gesture is active 
gboolean gtk_gesture_drag_get_offset (GtkGestureDrag *gesture, gdouble *x, gdouble *y);	# If the gesture is active, this function returns TRUE andfills in x and y with the coordinates of the current point,as an offset to the starting drag point.
	gesture		# a GtkGesture 
	x		#  X offset for the current point. 
	return:		#  TRUE if the gesture is active 
GtkGesture  *gtk_gesture_long_press_new (GtkWidget *widget);	# Returns a newly created GtkGesture that recognizes long presses.
	widget		# a GtkWidget 
	return:		#  a newly created GtkGestureLongPress  
GtkGesture  *gtk_gesture_multi_press_new (GtkWidget *widget);	# Returns a newly created GtkGesture that recognizes single and multiplepresses.
	widget		# a GtkWidget 
	return:		#  a newly created GtkGestureMultiPress  
void gtk_gesture_multi_press_set_area (GtkGestureMultiPress *gesture, const GdkRectangle *rect);	# If rect is non-NULL , the press area will be checked to beconfined within the rectangle, otherwise the button countwill be reset so the press is seen as being the first one.If rect is NULL , the area will be reset to an unrestrictedstate.
	gesture		# a GtkGestureMultiPress 
	rect		#  rectangle to receive coordinates on. 
gboolean gtk_gesture_multi_press_get_area (GtkGestureMultiPress *gesture, GdkRectangle *rect);	# If an area was set through gtk_gesture_multi_press_set_area() ,this function will return TRUE and fill in rect with thepress area. See gtk_gesture_multi_press_set_area() for moredetails on what the press area represents.
	gesture		# a GtkGestureMultiPress 
	rect		#  return location for the press area. 
	return:		#  TRUE if rectwas filled with the press area 
GtkGesture  *gtk_gesture_pan_new (GtkWidget *widget, GtkOrientation orientation);	# Returns a newly created GtkGesture that recognizes pan gestures.
	widget		# a GtkWidget 
	orientation		# expected orientation
	return:		#  a newly created GtkGesturePan  
GtkOrientation gtk_gesture_pan_get_orientation (GtkGesturePan *gesture);	# Returns the orientation of the pan gestures that this gesture expects.
	gesture		# A GtkGesturePan 
	return:		#  the expected orientation for pan gestures 
void gtk_gesture_pan_set_orientation (GtkGesturePan *gesture, GtkOrientation orientation);	# Sets the orientation to be expected on pan gestures.
	gesture		# A GtkGesturePan 
	orientation		# expected orientation
GtkGesture  *gtk_gesture_swipe_new (GtkWidget *widget);	# Returns a newly created GtkGesture that recognizes swipes.
	widget		# a GtkWidget 
	return:		#  a newly created GtkGestureSwipe  
gboolean gtk_gesture_swipe_get_velocity (GtkGestureSwipe *gesture, gdouble *velocity_x, gdouble *velocity_y);	# If the gesture is recognized, this function returns TRUE and fill invelocity_x and velocity_y with the recorded velocity, as per thelast event(s) processed.
	gesture		# a GtkGestureSwipe 
	velocity_x		#  return value for the velocity in the X axis, in pixels/sec. 
	return:		#  whether velocity could be calculated 
GtkGesture  *gtk_gesture_rotate_new (GtkWidget *widget);	# Returns a newly created GtkGesture that recognizes 2-touchrotation gestures.
	widget		# a GtkWidget 
	return:		#  a newly created GtkGestureRotate  
gdouble gtk_gesture_rotate_get_angle_delta (GtkGestureRotate *gesture);	# If gesture is active, this function returns the angle differencein radians since the gesture was first recognized. If gesture isnot active, 0 is returned.
	gesture		# a GtkGestureRotate 
	return:		#  the angle delta in radians 
GtkGesture  *gtk_gesture_zoom_new (GtkWidget *widget);	# Returns a newly created GtkGesture that recognizes zoomin/out gestures (usually known as pinch/zoom).
	widget		# a GtkWidget 
	return:		#  a newly created GtkGestureZoom  
gdouble gtk_gesture_zoom_get_scale_delta (GtkGestureZoom *gesture);	# If gesture is active, this function returns the zooming differencesince the gesture was recognized (hence the starting point isconsidered 1:1). If gesture is not active, 1 is returned.
	gesture		# a GtkGestureZoom 
	return:		#  the scale delta 
GtkPadController  *gtk_pad_controller_new (GtkWindow *window, GActionGroup *group, GdkDevice *pad);	#创建对象:GtkPadController that will associate events from pad toactions. A NULL pad may be provided so the controller manages all pad devicesgenerically, it is discouraged to mix GtkPadController objects with NULL and non-NULL pad argument on the same window, as execution order is notguaranteed.
	window		# a GtkWindow 
	group		# GActionGroup to trigger actions from
	pad		#  A GDK_SOURCE_TABLET_PAD device, or NULL to handle all pads. 
	return:		#  A newly created GtkPadController  
void gtk_pad_controller_set_action_entries (GtkPadController *controller, const GtkPadActionEntry *entries, gint n_entries);	# This is a convenience function to add a group of action entries oncontroller. See GtkPadActionEntry and gtk_pad_controller_set_action() .
	controller		# a GtkPadController 
	entries		#  the action entries to set on controller. 
void gtk_pad_controller_set_action (GtkPadController *controller, GtkPadActionType type, gint index, gint mode, const gchar *label, const gchar *action_name);	# Adds an individual action to controller. This action will only be activatedif the given button/ring/strip number in index is interacted whilethe current mode is mode. -1 may be used for simple cases, so the actionis triggered on all modes.
	controller		# a GtkPadController 
	type		# the type of pad feature that will trigger this action
	index		# the 0-indexed button/ring/strip number that will trigger this action
	mode		# the mode that will trigger this action, or -1 for all modes.
	label		# Human readable description of this action, this string shouldbe deemed user-visible.
	action_name		# action name that will be activated in the GActionGroup 
void gtk_disable_setlocale (void );	# Prevents gtk_init() , gtk_init_check() andgtk_parse_args() from automaticallycalling setlocale (LC_ALL, ""). You wouldwant to use this function if you wanted to set the locale foryour program to something other than the user’s locale, or ifyou wanted to set different values for different locale categories.
PangoLanguage  *gtk_get_default_language (void );	# Returns the PangoLanguage for the default language currently ineffect. (Note that this can change over the life of anapplication.) The default language is derived from the currentlocale. It determines, for example, whether GTK+ uses theright-to-left or left-to-right text direction.
	return:		#  the default language as a PangoLanguage ,must not be freed.  
GtkTextDirection gtk_get_locale_direction (void );	# Get the direction of the current locale. This is the expectedreading direction for text and UI.
	return:		#  the GtkTextDirection of the current locale 
void gtk_init (void );	# Call this function before using any other GTK+ functions in your GUIapplications. It will initialize everything needed to operate thetoolkit and parses some standard command line options.
gboolean gtk_init_check (void );	# This function does the same work as gtk_init() with only a singlechange: It does not terminate the program if the windowing systemcan’t be initialized. Instead it returns FALSE on failure.
	return:		#  TRUE if the windowing system has been successfullyinitialized, FALSE otherwise 
gboolean gtk_events_pending (void );	# Checks if any events are pending.
	return:		#  TRUE if any events are pending, FALSE otherwise 
void gtk_main (void );	# Runs the main loop until gtk_main_quit() is called.
guint gtk_main_level (void );	# Asks for the current nesting level of the main loop.
	return:		#  the nesting level of the current invocationof the main loop 
void gtk_main_quit (void );	# Makes the innermost invocation of the main loop returnwhen it regains control.
gboolean gtk_main_iteration (void );	# Runs a single iteration of the mainloop.
	return:		#  TRUE if gtk_main_quit() has been called for theinnermost mainloop 
gboolean gtk_main_iteration_do (gboolean blocking);	# Runs a single iteration of the mainloop.If no events are available either return or block depending onthe value of blocking.
	blocking		# TRUE if you want GTK+ to block if no events are pending
	return:		#  TRUE if gtk_main_quit() has been called for theinnermost mainloop 
void gtk_main_do_event (GdkEvent *event);	# Processes a single GDK event.
	event		# An event to process (normally passed by GDK)
void <span class="c_punctuation">( *GtkModuleInitFunc<span class="c_punctuation">) (gint *argc, gchar ***argv);	# Each GTK+ module must have a function gtk_module_init() with this prototype.This function is called after loading the module.
	argc		#  GTK+ always passes NULL for this argument. 
void <span class="c_punctuation">( *GtkModuleDisplayInitFunc<span class="c_punctuation">) (GdkDisplay *display);	# A multihead-aware GTK+ module may have a gtk_module_display_init() functionwith this prototype. GTK+ calls this function for each opened display.
	display		# an open GdkDisplay 
gboolean gtk_true (void );	# All this function does it to return TRUE .
	return:		#  TRUE  
gboolean gtk_false (void );	# Analogical to gtk_true() , this function does nothingbut always returns FALSE .
	return:		#  FALSE  
void gtk_grab_add (GtkWidget *widget);	# Makes widget the current grabbed widget.
	widget		# The widget that grabs keyboard and pointer events
GtkWidget  *gtk_grab_get_current (void );	# Queries the current grab of the default window group.
	return:		#  The widget which currentlyhas the grab or NULL if no grab is active.  
void gtk_grab_remove (GtkWidget *widget);	# Removes the grab from the given widget.
	widget		# The widget which gives up the grab
void gtk_device_grab_add (GtkWidget *widget, GdkDevice *device, gboolean block_others);	# Adds a GTK+ grab on device, so all the events on device and itsassociated pointer or keyboard (if any) are delivered to widget.If the block_others parameter is TRUE , any other devices will beunable to interact with widget during the grab.
	widget		# a GtkWidget 
	device		# a GdkDevice to grab on.
	block_others		# TRUE to prevent other devices to interact with widget.
void gtk_device_grab_remove (GtkWidget *widget, GdkDevice *device);	# Removes a device grab from the given widget.
	widget		# a GtkWidget 
	device		# a GdkDevice 
GdkEvent  *gtk_get_current_event (void );	# Obtains a copy of the event currently being processed by GTK+.
	return:		#  a copy of the current event, orNULL if there is no current event. The returned event must befreed with gdk_event_free() .  
guint32 gtk_get_current_event_time (void );	# If there is a current event and it has a timestamp,return that timestamp, otherwise return GDK_CURRENT_TIME .
	return:		#  the timestamp from the current event,or GDK_CURRENT_TIME . 
gboolean gtk_get_current_event_state (GdkModifierType *state);	# If there is a current event and it has a state field, placethat state field in state and return TRUE , otherwise returnFALSE .
	state		#  a location to store the state of the current event. 
	return:		#  TRUE if there was a current event and ithad a state field 
GdkDevice  *gtk_get_current_event_device (void );	# If there is a current event and it has a device, return thatdevice, otherwise return NULL .
	return:		#  a GdkDevice , or NULL .  
GtkWidget  *gtk_get_event_widget (GdkEvent *event);	# If event is NULL or the event was not associated with any widget,returns NULL , otherwise returns the widget that received the eventoriginally.
	event		# a GdkEvent 
	return:		#  the widget that originallyreceived event, or NULL .  
void gtk_propagate_event (GtkWidget *widget, GdkEvent *event);	# Sends an event to a widget, propagating the event to parent widgetsif the event remains unhandled.
	widget		# a GtkWidget 
	event		# an event
guint gtk_get_major_version (void );	# Returns the major version number of the GTK+ library.(e.g. in GTK+ version 3.1.5 this is 3.)
	return:		#  the major version number of the GTK+ library 
guint gtk_get_minor_version (void );	# Returns the minor version number of the GTK+ library.(e.g. in GTK+ version 3.1.5 this is 1.)
	return:		#  the minor version number of the GTK+ library 
guint gtk_get_micro_version (void );	# Returns the micro version number of the GTK+ library.(e.g. in GTK+ version 3.1.5 this is 5.)
	return:		#  the micro version number of the GTK+ library 
guint gtk_get_binary_age (void );	# Returns the binary age as passed to libtoolwhen building the GTK+ library the process is running against.If libtool means nothing to you, don'tworry about it.
	return:		#  the binary age of the GTK+ library 
guint gtk_get_interface_age (void );	# Returns the interface age as passed to libtoolwhen building the GTK+ library the process is running against.If libtool means nothing to you, don'tworry about it.
	return:		#  the interface age of the GTK+ library 
gchar  *gtk_check_version (guint required_major, guint required_minor, guint required_micro);	# Checks that the GTK+ library in use is compatible with thegiven version. Generally you would pass in the constantsGTK_MAJOR_VERSION , GTK_MINOR_VERSION , GTK_MICRO_VERSION as the three arguments to this function; that producesa check that the library in use is compatible withthe version of GTK+ the application or module was compiledagainst.
	required_major		# the required major version
	required_minor		# the required minor version
	required_micro		# the required micro version
	return:		#  NULL if the GTK+ library is compatible with thegiven version, or a string describing the version mismatch.The returned string is owned by GTK+ and should not be modifiedor freed.  
GtkAccelGroup  *gtk_accel_group_new (void );	#创建对象:GtkAccelGroup .
	return:		#  a new GtkAccelGroup object 
void gtk_accel_group_connect (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GClosure *closure);	# Installs an accelerator in this group. When accel_group is beingactivated in response to a call to gtk_accel_groups_activate() ,closure will be invoked if the accel_key and accel_mods fromgtk_accel_groups_activate() match those of this connection.
	accel_group		# the accelerator group to install an accelerator in
	accel_key		# key value of the accelerator
	accel_mods		# modifier combination of the accelerator
	accel_flags		# a flag mask to configure this accelerator
	closure		# closure to be executed upon accelerator activation
void gtk_accel_group_connect_by_path (GtkAccelGroup *accel_group, const gchar *accel_path, GClosure *closure);	# Installs an accelerator in this group, using an accelerator pathto look up the appropriate key and modifiers (seegtk_accel_map_add_entry() ). When accel_group is being activatedin response to a call to gtk_accel_groups_activate() , closure willbe invoked if the accel_key and accel_mods fromgtk_accel_groups_activate() match the key and modifiers for the path.
	accel_group		# the accelerator group to install an accelerator in
	accel_path		# path used for determining key and modifiers
	closure		# closure to be executed upon accelerator activation
gboolean <span class="c_punctuation">( *GtkAccelGroupActivate<span class="c_punctuation">) (GtkAccelGroup *accel_group, GObject *acceleratable, guint keyval, GdkModifierType modifier);	# gboolean <span class="c_punctuation">( *GtkAccelGroupActivate<span class="c_punctuation">) (GtkAccelGroup *accel_group, GObject *acceleratable, guint keyval, GdkModifierType modifier);</pre></div><hr>
gboolean <span class="c_punctuation">( *GtkAccelGroupFindFunc<span class="c_punctuation">) (GtkAccelKey *key, GClosure *closure, gpointer data);	# data
gboolean gtk_accel_group_disconnect (GtkAccelGroup *accel_group, GClosure *closure);	# Removes an accelerator previously installed throughgtk_accel_group_connect() .
	accel_group		# the accelerator group to remove an accelerator from
	closure		#  the closure to remove from this acceleratorgroup, or NULL to remove all closures. 
	return:		#  TRUE if the closure was found and got disconnected 
gboolean gtk_accel_group_disconnect_key (GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods);	# Removes an accelerator previously installed throughgtk_accel_group_connect() .
	accel_group		# the accelerator group to install an accelerator in
	accel_key		# key value of the accelerator
	accel_mods		# modifier combination of the accelerator
	return:		#  TRUE if there was an accelerator which could beremoved, FALSE otherwise 
gboolean gtk_accel_group_activate (GtkAccelGroup *accel_group, GQuark accel_quark, GObject *acceleratable, guint accel_key, GdkModifierType accel_mods);	# Finds the first accelerator in accel_group that matchesaccel_key and accel_mods, and activates it.
	accel_group		# a GtkAccelGroup 
	accel_quark		# the quark for the accelerator name
	acceleratable		# the GObject , usually a GtkWindow , on whichto activate the accelerator
	accel_key		# accelerator keyval from a key event
	accel_mods		# keyboard state mask from a key event
	return:		#  TRUE if an accelerator was activated and handledthis keypress 
void gtk_accel_group_lock (GtkAccelGroup *accel_group);	# Locks the given accelerator group.
	accel_group		# a GtkAccelGroup 
void gtk_accel_group_unlock (GtkAccelGroup *accel_group);	# Undoes the last call to gtk_accel_group_lock() on this accel_group.
	accel_group		# a GtkAccelGroup 
gboolean gtk_accel_group_get_is_locked (GtkAccelGroup *accel_group);	# Locks are added and removed using gtk_accel_group_lock() andgtk_accel_group_unlock() .
	accel_group		# a GtkAccelGroup 
	return:		#  TRUE if there are 1 or more locks on the accel_group,FALSE otherwise. 
GtkAccelGroup  *gtk_accel_group_from_accel_closure (GClosure *closure);	# Finds the GtkAccelGroup to which closure is connected;see gtk_accel_group_connect() .
	closure		# a GClosure 
	return:		#  the GtkAccelGroup to which closureis connected, or NULL .  
GdkModifierType gtk_accel_group_get_modifier_mask (GtkAccelGroup *accel_group);	# Gets a GdkModifierType representing the mask for thisaccel_group. For example, GDK_CONTROL_MASK , GDK_SHIFT_MASK , etc.
	accel_group		# a GtkAccelGroup 
	return:		#  the modifier mask for this accel group. 
gboolean gtk_accel_groups_activate (GObject *object, guint accel_key, GdkModifierType accel_mods);	# Finds the first accelerator in any GtkAccelGroup attachedto object that matches accel_key and accel_mods, andactivates that accelerator.
	object		# the GObject , usually a GtkWindow , on whichto activate the accelerator
	accel_key		# accelerator keyval from a key event
	accel_mods		# keyboard state mask from a key event
	return:		#  TRUE if an accelerator was activated and handledthis keypress 
GSList  *gtk_accel_groups_from_object (GObject *object);	# Gets a list of all accel groups which are attached to object.
	object		# a GObject , usually a GtkWindow 
	return:		#  a list ofall accel groups which are attached to object.  
GtkAccelKey  *gtk_accel_group_find (GtkAccelGroup *accel_group, GtkAccelGroupFindFunc find_func, gpointer data);	# Finds the first entry in an accelerator group for whichfind_func returns TRUE and returns its GtkAccelKey .
	accel_group		# a GtkAccelGroup 
	find_func		#  a function to filter the entriesof accel_groupwith. 
	return:		#  the key of the first entry passingfind_func. The key is owned by GTK+ and must not be freed.  
gboolean gtk_accelerator_valid (guint keyval, GdkModifierType modifiers);	# Determines whether a given keyval and modifier mask constitutea valid keyboard accelerator. For example, the GDK_KEY_a keyvalplus GDK_CONTROL_MASK is valid - this is a “Ctrl+a” accelerator.But, you can't, for instance, use the GDK_KEY_Control_L keyvalas an accelerator.
	keyval		# a GDK keyval
	modifiers		# modifier mask
	return:		#  TRUE if the accelerator is valid 
void gtk_accelerator_parse (const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods);	# Parses a string representing an accelerator. The format looks like“&lt;Control&gt;a” or “&lt;Shift&gt;&lt;Alt&gt;F1” or “&lt;Release&gt;z” (the last one isfor key release).
	accelerator		# string representing an accelerator
	accelerator_key		#  return location for acceleratorkeyval, or NULL . 
gchar  *gtk_accelerator_name (guint accelerator_key, GdkModifierType accelerator_mods);	# Converts an accelerator keyval and modifier mask into a stringparseable by gtk_accelerator_parse() . For example, if you pass inGDK_KEY_q and GDK_CONTROL_MASK , this function returns “&lt;Control&gt;q”.
	accelerator_key		# accelerator keyval
	accelerator_mods		# accelerator modifier mask
	return:		#  a newly-allocated accelerator name 
gchar  *gtk_accelerator_get_label (guint accelerator_key, GdkModifierType accelerator_mods);	# Converts an accelerator keyval and modifier mask into a stringwhich can be used to represent the accelerator to the user.
	accelerator_key		# accelerator keyval
	accelerator_mods		# accelerator modifier mask
	return:		#  a newly-allocated string representing the accelerator. 
void gtk_accelerator_parse_with_keycode (const gchar *accelerator, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods);	# Parses a string representing an accelerator, similarly togtk_accelerator_parse() but handles keycodes as well. This is onlyuseful for system-level components, applications should usegtk_accelerator_parse() instead.
	accelerator		# string representing an accelerator
	accelerator_key		#  return location for acceleratorkeyval, or NULL . 
gchar  *gtk_accelerator_name_with_keycode (GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);	# Converts an accelerator keyval and modifier maskinto a string parseable by gtk_accelerator_parse_with_keycode() ,similarly to gtk_accelerator_name() but handling keycodes.This is only useful for system-level components, applicationsshould use gtk_accelerator_parse() instead.
	display		#  a GdkDisplay or NULL to use the default display. 
	return:		#  a newly allocated accelerator name. 
gchar  *gtk_accelerator_get_label_with_keycode (GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods);	# Converts an accelerator keyval and modifier maskinto a (possibly translated) string that can be displayed toa user, similarly to gtk_accelerator_get_label() , but handlingkeycodes.
	display		#  a GdkDisplay or NULL to use the default display. 
	return:		#  a newly-allocated string representing the accelerator. 
void gtk_accelerator_set_default_mod_mask (GdkModifierType default_mod_mask);	# Sets the modifiers that will be considered significant for keyboardaccelerators. The default mod mask depends on the GDK backend in use,but will typically include GDK_CONTROL_MASK | GDK_SHIFT_MASK |GDK_MOD1_MASK | GDK_SUPER_MASK | GDK_HYPER_MASK | GDK_META_MASK .In other words, Control, Shift, Alt, Super, Hyper and Meta. Othermodifiers will by default be ignored by GtkAccelGroup .
	default_mod_mask		# accelerator modifier mask
GdkModifierType gtk_accelerator_get_default_mod_mask (void );	# Gets the modifier mask.
	return:		#  the default accelerator modifier mask 
void <span class="c_punctuation">( *GtkAccelMapForeach<span class="c_punctuation">) (gpointer data, const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean changed);	# data
	accel_path		# Accel path of the current accelerator
	accel_key		# Key of the current accelerator
	accel_mods		# Modifiers of the current accelerator
	changed		# Changed flag of the accelerator (if TRUE , accelerator has changedduring runtime and would need to be saved during an accelerator dump)
void gtk_accel_map_add_entry (const gchar *accel_path, guint accel_key, GdkModifierType accel_mods);	# Registers a new accelerator with the global accelerator map.This function should only be called once per accel_pathwith the canonical accel_key and accel_mods for this path.To change the accelerator during runtime programatically, usegtk_accel_map_change_entry() .
	accel_path		# valid accelerator path
	accel_key		# the accelerator key
	accel_mods		# the accelerator modifiers
gboolean gtk_accel_map_lookup_entry (const gchar *accel_path, GtkAccelKey *key);	# Looks up the accelerator entry for accel_path and fills in key.
	accel_path		# a valid accelerator path
	key		#  the accelerator key to be filled in (optional). 
	return:		#  TRUE if accel_pathis known, FALSE otherwise 
gboolean gtk_accel_map_change_entry (const gchar *accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace);	# Changes the accel_key and accel_mods currently associated with accel_path.Due to conflicts with other accelerators, a change may not always be possible,replace indicates whether other accelerators may be deleted to resolve suchconflicts. A change will only occur if all conflicts could be resolved (whichmight not be the case if conflicting accelerators are locked). Successfulchanges are indicated by a TRUE return value.
	accel_path		# a valid accelerator path
	accel_key		# the new accelerator key
	accel_mods		# the new accelerator modifiers
	replace		# TRUE if other accelerators may be deleted upon conflicts
	return:		#  TRUE if the accelerator could be changed, FALSE otherwise 
void gtk_accel_map_load (const gchar *file_name);	# Parses a file previously saved with gtk_accel_map_save() foraccelerator specifications, and propagates them accordingly.
	file_name		#  a file containing accelerator specifications,in the GLib file name encoding. 
void gtk_accel_map_save (const gchar *file_name);	# Saves current accelerator specifications (accelerator path, keyand modifiers) to file_name.The file is written in a format suitable to be read back in bygtk_accel_map_load() .
	file_name		#  the name of the file to containaccelerator specifications, in the GLib file name encoding. 
void gtk_accel_map_foreach (gpointer data, GtkAccelMapForeach foreach_func);	# Loops over the entries in the accelerator map whose accel path doesn’t match any of the filters added with gtk_accel_map_add_filter() , and execute foreach_func on each. The signature of foreach_func is that of GtkAccelMapForeach , the changed parameter indicates whetherthis accelerator was changed during runtime (thus, would needsaving during an accelerator map dump).
	data		#  data to be passed into foreach_func. 
	foreach_func		#  function to be executed for each accelmap entry which is not filtered out. 
void gtk_accel_map_load_fd (gint fd);	# Filedescriptor variant of gtk_accel_map_load() .
	fd		# a valid readable file descriptor
void gtk_accel_map_save_fd (gint fd);	# Filedescriptor variant of gtk_accel_map_save() .
	fd		# a valid writable file descriptor
void gtk_accel_map_load_scanner (GScanner *scanner);	# GScanner variant of gtk_accel_map_load() .
	scanner		# a GScanner which has already been provided with an input file
void gtk_accel_map_add_filter (const gchar *filter_pattern);	# Adds a filter to the global list of accel path filters.
	filter_pattern		# a pattern (see GPatternSpec )
void gtk_accel_map_foreach_unfiltered (gpointer data, GtkAccelMapForeach foreach_func);	# Loops over all entries in the accelerator map, and executeforeach_func on each. The signature of foreach_func is that ofGtkAccelMapForeach , the changed parameter indicates whetherthis accelerator was changed during runtime (thus, would needsaving during an accelerator map dump).
	data		# data to be passed into foreach_func
	foreach_func		#  function to be executed for each accelmap entry. 
GtkAccelMap  *gtk_accel_map_get (void );	# Gets the singleton global GtkAccelMap object. This objectis useful only for notification of changes to the acceleratormap via the ::changed signal; it isn’t a parameter to theother accelerator map functions.
	return:		#  the global GtkAccelMap object.  
void gtk_accel_map_lock_path (const gchar *accel_path);	# Locks the given accelerator path. If the accelerator map doesn’t yet containan entry for accel_path, a new one is created.
	accel_path		# a valid accelerator path
void gtk_accel_map_unlock_path (const gchar *accel_path);	# Undoes the last call to gtk_accel_map_lock_path() on this accel_path.Refer to gtk_accel_map_lock_path() for information about accelerator path locking.
	accel_path		# a valid accelerator path
void <span class="c_punctuation">( *GtkClipboardReceivedFunc<span class="c_punctuation">) (GtkClipboard *clipboard, GtkSelectionData *selection_data, gpointer data);	# A function to be called when the results of gtk_clipboard_request_contents() are received, or when the request fails.
	clipboard		# the GtkClipboard 
	selection_data		# a GtkSelectionData containing the data was received.If retrieving the data failed, then then length fieldof selection_datawill be negative.
	data		#  the user_datasupplied to
void <span class="c_punctuation">( *GtkClipboardTextReceivedFunc<span class="c_punctuation">) (GtkClipboard *clipboard, const gchar *text, gpointer data);	# A function to be called when the results of gtk_clipboard_request_text() are received, or when the request fails.
	clipboard		# the GtkClipboard 
	text		#  the text received, as a UTF-8 encoded string, orNULL if retrieving the data failed. 
void <span class="c_punctuation">( *GtkClipboardImageReceivedFunc<span class="c_punctuation">) (GtkClipboard *clipboard, GdkPixbuf *pixbuf, gpointer data);	# A function to be called when the results of gtk_clipboard_request_image() are received, or when the request fails.
	clipboard		# the GtkClipboard 
	pixbuf		# the received image
	data		#  the user_datasupplied to
void <span class="c_punctuation">( *GtkClipboardTargetsReceivedFunc<span class="c_punctuation">) (GtkClipboard *clipboard, GdkAtom *atoms, gint n_atoms, gpointer data);	# A function to be called when the results of gtk_clipboard_request_targets() are received, or when the request fails.
	clipboard		# the GtkClipboard 
	atoms		#  the supported targets,as array of GdkAtom , or NULL if retrieving the data failed. 
void <span class="c_punctuation">( *GtkClipboardRichTextReceivedFunc<span class="c_punctuation">) (GtkClipboard *clipboard, GdkAtom format, const guint8 *text, gsize length, gpointer data);	# A function to be called when the results ofgtk_clipboard_request_rich_text() are received, or when the requestfails.
	clipboard		# the GtkClipboard 
	format		# The format of the rich text
	text		#  the rich text received, asa UTF-8 encoded string, or NULL if retrieving the data failed. 
void <span class="c_punctuation">( *GtkClipboardURIReceivedFunc<span class="c_punctuation">) (GtkClipboard *clipboard, gchar **uris, gpointer data);	# A function to be called when the results ofgtk_clipboard_request_uris() are received, or when the requestfails.
	clipboard		# the GtkClipboard 
	uris		#  the received URIs. 
void <span class="c_punctuation">( *GtkClipboardGetFunc<span class="c_punctuation">) (GtkClipboard *clipboard, GtkSelectionData *selection_data, guint info, gpointer user_data_or_owner);	# A function that will be called to provide the contents of the selection.If multiple types of data were advertised, the requested type canbe determined from the info parameter or by checking the target fieldof selection_data. If the data could successfully be converted intothen it should be stored into the selection_data object bycalling gtk_selection_data_set() (or related functions suchas gtk_selection_data_set_text() ). If no data is set, the requestorwill be informed that the attempt to get the data failed.
	clipboard		# the GtkClipboard 
	selection_data		# a GtkSelectionData argument in which the requesteddata should be stored.
	info		# the info field corresponding to the requested target from theGtkTargetEntry array passed to 
	user_data_or_owner		# the user_dataargument passed to
void <span class="c_punctuation">( *GtkClipboardClearFunc<span class="c_punctuation">) (GtkClipboard *clipboard, gpointer user_data_or_owner);	# A function that will be called when the contents of the clipboard are changedor cleared. Once this has called, the user_data_or_owner argumentwill not be used again.
	clipboard		# the GtkClipboard 
	user_data_or_owner		# the user_dataargument passed to 
GtkClipboard  *gtk_clipboard_get (GdkAtom selection);	# Returns the clipboard object for the given selection.See gtk_clipboard_get_for_display() for complete details.
	selection		# a GdkAtom which identifies the clipboard to use
	return:		#  the appropriate clipboard object. If no clipboardalready exists, a new one will be created. Once a clipboardobject has been created, it is persistent and, since it isowned by GTK+, must not be freed or unreffed.  
GtkClipboard  *gtk_clipboard_get_for_display (GdkDisplay *display, GdkAtom selection);	# Returns the clipboard object for the given selection.Cut/copy/paste menu items and keyboard shortcuts should usethe default clipboard, returned by passing GDK_SELECTION_CLIPBOARD for selection.(GDK_NONE is supported as a synonym for GDK_SELECTION_CLIPBOARDfor backwards compatibility reasons.)The currently-selected object or text should be provided on the clipboardidentified by GDK_SELECTION_PRIMARY . Cut/copy/paste menu itemsconceptually copy the contents of the GDK_SELECTION_PRIMARY clipboardto the default clipboard, i.e. they copy the selection to what theuser sees as the clipboard.
	display		# the GdkDisplay for which the clipboard is to be retrieved or created.
	selection		# a GdkAtom which identifies the clipboard to use.
	return:		#  the appropriate clipboard object. If noclipboard already exists, a new one will be created. Once a clipboardobject has been created, it is persistent and, since it is owned byGTK+, must not be freed or unrefd.  
GdkDisplay  *gtk_clipboard_get_display (GtkClipboard *clipboard);	# Gets the GdkDisplay associated with clipboard
	clipboard		# a GtkClipboard 
	return:		#  the GdkDisplay associated with clipboard.  
GtkClipboard  *gtk_clipboard_get_default (GdkDisplay *display);	# Returns the default clipboard object for use with cut/copy/paste menu itemsand keyboard shortcuts.
	display		# the GdkDisplay for which the clipboard is to be retrieved.
	return:		#  the default clipboard object.  
gboolean gtk_clipboard_set_with_data (GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data);	# Virtually sets the contents of the specified clipboard by providinga list of supported formats for the clipboard data and a functionto call to get the actual data when it is requested.
	clipboard		# a GtkClipboard 
	targets		#  array containing informationabout the available forms for the clipboard data. 
	return:		#  TRUE if setting the clipboard data succeeded.If setting the clipboard data failed the provided callbackfunctions will be ignored. 
gboolean gtk_clipboard_set_with_owner (GtkClipboard *clipboard, const GtkTargetEntry *targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject *owner);	# Virtually sets the contents of the specified clipboard by providinga list of supported formats for the clipboard data and a functionto call to get the actual data when it is requested.
	clipboard		# a GtkClipboard 
	targets		#  array containing informationabout the available forms for the clipboard data. 
	return:		#  TRUE if setting the clipboard data succeeded.If setting the clipboard data failed the provided callbackfunctions will be ignored. 
GObject  *gtk_clipboard_get_owner (GtkClipboard *clipboard);	# If the clipboard contents callbacks were set withgtk_clipboard_set_with_owner() , and the gtk_clipboard_set_with_data() orgtk_clipboard_clear() has not subsequently called, returns the owner setby gtk_clipboard_set_with_owner() .
	clipboard		# a GtkClipboard 
	return:		#  the owner of the clipboard, if any;otherwise NULL .  
void gtk_clipboard_clear (GtkClipboard *clipboard);	# Clears the contents of the clipboard. Generally this should onlybe called between the time you call gtk_clipboard_set_with_owner() or gtk_clipboard_set_with_data() ,and when the clear_func you supplied is called. Otherwise, theclipboard may be owned by someone else.
	clipboard		# a GtkClipboard 
void gtk_clipboard_set_text (GtkClipboard *clipboard, const gchar *text, gint len);	# Sets the contents of the clipboard to the given UTF-8 string. GTK+ willmake a copy of the text and take responsibility for respondingfor requests for the text, and for converting the text intothe requested format.
	clipboard		# a GtkClipboard object
	text		# a UTF-8 string.
	len		# length of text, in bytes, or -1, in which casethe length will be determined with 
void gtk_clipboard_set_image (GtkClipboard *clipboard, GdkPixbuf *pixbuf);	# Sets the contents of the clipboard to the given GdkPixbuf . GTK+ will take responsibility for responding for requests for the image, and for converting the image into the requested format.
	clipboard		# a GtkClipboard object
	pixbuf		# a GdkPixbuf 
void gtk_clipboard_request_contents (GtkClipboard *clipboard, GdkAtom target, GtkClipboardReceivedFunc callback, gpointer user_data);	# Requests the contents of clipboard as the given target.When the results of the result are later received the supplied callbackwill be called.
	clipboard		# a GtkClipboard 
	target		# an atom representing the form into which the clipboardowner should convert the selection.
	callback		#  A function to call when the results are received(or the retrieval fails). If the retrieval fails the length field ofselection_datawill be negative. 
	user_data		# user data to pass to callback
void gtk_clipboard_request_text (GtkClipboard *clipboard, GtkClipboardTextReceivedFunc callback, gpointer user_data);	# Requests the contents of the clipboard as text. When the text islater received, it will be converted to UTF-8 if necessary, andcallback will be called.
	clipboard		# a GtkClipboard 
	callback		#  a function to call when the text is received,or the retrieval fails. (It will always be called one way or the other.). 
	user_data		# user data to pass to callback.
void gtk_clipboard_request_image (GtkClipboard *clipboard, GtkClipboardImageReceivedFunc callback, gpointer user_data);	# Requests the contents of the clipboard as image. When the image islater received, it will be converted to a GdkPixbuf , andcallback will be called.
	clipboard		# a GtkClipboard 
	callback		#  a function to call when the image is received,or the retrieval fails. (It will always be called one way or the other.). 
	user_data		# user data to pass to callback.
void gtk_clipboard_request_targets (GtkClipboard *clipboard, GtkClipboardTargetsReceivedFunc callback, gpointer user_data);	# Requests the contents of the clipboard as list of supported targets.When the list is later received, callback will be called.
	clipboard		# a GtkClipboard 
	callback		#  a function to call when the targets arereceived, or the retrieval fails. (It will always be calledone way or the other.). 
	user_data		# user data to pass to callback.
void gtk_clipboard_request_rich_text (GtkClipboard *clipboard, GtkTextBuffer *buffer, GtkClipboardRichTextReceivedFunc callback, gpointer user_data);	# Requests the contents of the clipboard as rich text. When the richtext is later received, callback will be called.
	clipboard		# a GtkClipboard 
	buffer		# a GtkTextBuffer 
	callback		#  a function to call when the text is received,or the retrieval fails. (It will always be called one way or the other.). 
	user_data		# user data to pass to callback.
void gtk_clipboard_request_uris (GtkClipboard *clipboard, GtkClipboardURIReceivedFunc callback, gpointer user_data);	# Requests the contents of the clipboard as URIs. When the URIs arelater received callback will be called.
	clipboard		# a GtkClipboard 
	callback		#  a function to call when the URIs are received,or the retrieval fails. (It will always be called one way or the other.). 
	user_data		# user data to pass to callback.
GtkSelectionData  *gtk_clipboard_wait_for_contents (GtkClipboard *clipboard, GdkAtom target);	# Requests the contents of the clipboard using the given target.This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	target		# an atom representing the form into which the clipboardowner should convert the selection.
	return:		#  a newly-allocated GtkSelectionData object or NULL if retrieving the given target failed. If non-NULL ,this value must be freed with gtk_selection_data_free() when you are finished with it.  
gchar  *gtk_clipboard_wait_for_text (GtkClipboard *clipboard);	# Requests the contents of the clipboard as text and convertsthe result to UTF-8 if necessary. This function waits forthe data to be received using the main loop, so events,timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	return:		#  a newly-allocated UTF-8 string which mustbe freed with g_free() , or NULL if retrievingthe selection data failed. (This could happenfor various reasons, in particular if theclipboard was empty or if the contents of theclipboard could not be converted into text form.).  
GdkPixbuf  *gtk_clipboard_wait_for_image (GtkClipboard *clipboard);	# Requests the contents of the clipboard as image and convertsthe result to a GdkPixbuf . This function waits forthe data to be received using the main loop, so events,timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	return:		#  a newly-allocated GdkPixbuf object which must be disposed with g_object_unref() , orNULL if retrieving the selection data failed. (This couldhappen for various reasons, in particular if the clipboardwas empty or if the contents of the clipboard could not beconverted into an image.).  
guint8  *gtk_clipboard_wait_for_rich_text (GtkClipboard *clipboard, GtkTextBuffer *buffer, GdkAtom *format, gsize *length);	# Requests the contents of the clipboard as rich text. This functionwaits for the data to be received using the main loop, so events,timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	buffer		# a GtkTextBuffer 
	format		#  return location for the format of the returned data. 
	return:		#  anewly-allocated binary block of data which must befreed with g_free() , or NULL if retrieving theselection data failed. (This could happen for variousreasons, in particular if the clipboard was empty orif the contents of the clipboard could not beconverted into text form.).  
gchar  **gtk_clipboard_wait_for_uris (GtkClipboard *clipboard);	# Requests the contents of the clipboard as URIs. This function waitsfor the data to be received using the main loop, so events,timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	return:		#  a newly-allocated NULL -terminated array of strings which mustbe freed with g_strfreev() , or NULL if retrieving theselection data failed. (This could happen for various reasons,in particular if the clipboard was empty or if the contents ofthe clipboard could not be converted into URI form.).  
gboolean gtk_clipboard_wait_is_text_available (GtkClipboard *clipboard);	# Test to see if there is text available to be pastedThis is done by requesting the TARGETS atom and checkingif it contains any of the supported text targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	return:		#  TRUE is there is text available, FALSE otherwise. 
gboolean gtk_clipboard_wait_is_image_available (GtkClipboard *clipboard);	# Test to see if there is an image available to be pastedThis is done by requesting the TARGETS atom and checkingif it contains any of the supported image targets. This function waits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	return:		#  TRUE is there is an image available, FALSE otherwise. 
gboolean gtk_clipboard_wait_is_rich_text_available (GtkClipboard *clipboard, GtkTextBuffer *buffer);	# Test to see if there is rich text available to be pastedThis is done by requesting the TARGETS atom and checkingif it contains any of the supported rich text targets. This functionwaits for the data to be received using the main loop, so events,timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	buffer		# a GtkTextBuffer 
	return:		#  TRUE is there is rich text available, FALSE otherwise. 
gboolean gtk_clipboard_wait_is_uris_available (GtkClipboard *clipboard);	# Test to see if there is a list of URIs available to be pastedThis is done by requesting the TARGETS atom and checkingif it contains the URI targets. This functionwaits for the data to be received using the main loop, so events, timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	return:		#  TRUE is there is an URI list available, FALSE otherwise. 
gboolean gtk_clipboard_wait_for_targets (GtkClipboard *clipboard, GdkAtom **targets, gint *n_targets);	# Returns a list of targets that are present on the clipboard, or NULL if there aren’t any targets available. The returned list must befreed with g_free() .This function waits for the data to be received using the mainloop, so events, timeouts, etc, may be dispatched during the wait.
	clipboard		# a GtkClipboard 
	targets		#  locationto store an array of targets. The result stored here mustbe freed with 
	return:		#  TRUE if any targets are present on the clipboard,otherwise FALSE . 
gboolean gtk_clipboard_wait_is_target_available (GtkClipboard *clipboard, GdkAtom target);	# Checks if a clipboard supports pasting data of a given type. Thisfunction can be used to determine if a “Paste” menu item should beinsensitive or not.
	clipboard		# a GtkClipboard 
	target		# A GdkAtom indicating which target to look for.
	return:		#  TRUE if the target is available, FALSE otherwise. 
void gtk_clipboard_set_can_store (GtkClipboard *clipboard, const GtkTargetEntry *targets, gint n_targets);	# Hints that the clipboard data should be stored somewhere when theapplication exits or when gtk_clipboard_store() is called.
	clipboard		# a GtkClipboard 
	targets		#  array containinginformation about which forms should be stored or NULL to indicate that all forms should be stored. 
	n_targets		# number of elements in targets
void gtk_clipboard_store (GtkClipboard *clipboard);	# Stores the current clipboard data somewhere so that it will stayaround after the application has quit.
	clipboard		# a GtkClipboard 
GdkAtom gtk_clipboard_get_selection (GtkClipboard *clipboard);	# Gets the selection that this clipboard is for.
	clipboard		# a GtkClipboard 
	return:		#  the selection 
void gtk_drag_dest_set (GtkWidget *widget, GtkDestDefaults flags, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);	# Sets a widget as a potential drop destination, and adds default behaviors.
	widget		# a GtkWidget 
	flags		# which types of default drag behavior to use
	targets		#  a pointer to an array ofGtkTargetEntrys indicating the drop types that this widgetwillaccept, or NULL . Later you can access the list with
	n_targets		# the number of entries in targets
	actions		# a bitmask of possible actions for a drop onto this widget.
void gtk_drag_dest_unset (GtkWidget *widget);	# Clears information about a drop destination set withgtk_drag_dest_set() . The widget will no longer receivenotification of drags.
	widget		# a GtkWidget 
GdkAtom gtk_drag_dest_find_target (GtkWidget *widget, GdkDragContext *context, GtkTargetList *target_list);	# Looks for a match between the supported targets of context and thedest_target_list, returning the first matching target, otherwisereturning GDK_NONE . dest_target_list should usually be the returnvalue from gtk_drag_dest_get_target_list() , but some widgets mayhave different valid targets for different parts of the widget; inthat case, they will have to implement a drag_motion handler thatpasses the correct target list to this function.
	widget		# drag destination widget
	context		# drag context
	target_list		#  list of droppable targets, or NULL to usegtk_drag_dest_get_target_list (widget). 
	return:		#  first target that the source offersand the dest can accept, or GDK_NONE .  
GtkTargetList  *gtk_drag_dest_get_target_list (GtkWidget *widget);	# Returns the list of targets this widget can accept fromdrag-and-drop.
	widget		# a GtkWidget 
	return:		#  the GtkTargetList , or NULL if none.  
void gtk_drag_dest_set_target_list (GtkWidget *widget, GtkTargetList *target_list);	# Sets the target types that this widget can accept from drag-and-drop.The widget must first be made into a drag destination withgtk_drag_dest_set() .
	widget		# a GtkWidget that’s a drag destination
	target_list		#  list of droppable targets, or NULL for none. 
void gtk_drag_dest_add_text_targets (GtkWidget *widget);	# Add the text targets supported by GtkSelectionData tothe target list of the drag destination. The targetsare added with info = 0. If you need another value,use gtk_target_list_add_text_targets() andgtk_drag_dest_set_target_list() .
	widget		# a GtkWidget that’s a drag destination
void gtk_drag_dest_add_image_targets (GtkWidget *widget);	# Add the image targets supported by GtkSelectionData tothe target list of the drag destination. The targetsare added with info = 0. If you need another value,use gtk_target_list_add_image_targets() andgtk_drag_dest_set_target_list() .
	widget		# a GtkWidget that’s a drag destination
void gtk_drag_dest_add_uri_targets (GtkWidget *widget);	# Add the URI targets supported by GtkSelectionData tothe target list of the drag destination. The targetsare added with info = 0. If you need another value,use gtk_target_list_add_uri_targets() andgtk_drag_dest_set_target_list() .
	widget		# a GtkWidget that’s a drag destination
void gtk_drag_dest_set_track_motion (GtkWidget *widget, gboolean track_motion);	# Tells the widget to emit “drag-motion” and“drag-leave” events regardless of the targets and theGTK_DEST_DEFAULT_MOTION flag.
	widget		# a GtkWidget that’s a drag destination
	track_motion		# whether to accept all targets
gboolean gtk_drag_dest_get_track_motion (GtkWidget *widget);	# Returns whether the widget has been configured to alwaysemit “drag-motion” signals.
	widget		# a GtkWidget that’s a drag destination
	return:		#  TRUE if the widget always emits“drag-motion” events 
void gtk_drag_finish (GdkDragContext *context, gboolean success, gboolean del, guint32 time_);	# Informs the drag source that the drop is finished, andthat the data of the drag will no longer be required.
	context		# the drag context
	success		# a flag indicating whether the drop was successful
	del		# a flag indicating whether the source should delete theoriginal data. (This should be TRUE for a move)
	time_		# the timestamp from the “drag-drop” signal
void gtk_drag_get_data (GtkWidget *widget, GdkDragContext *context, GdkAtom target, guint32 time_);	# Gets the data associated with a drag. When the datais received or the retrieval fails, GTK+ will emit a“drag-data-received” signal. Failure of the retrievalis indicated by the length field of the selection_datasignal parameter being negative. However, when gtk_drag_get_data() is called implicitely because the GTK_DEST_DEFAULT_DROP was set,then the widget will not receive notification of faileddrops.
	widget		# the widget that will receive the“drag-data-received” signal
	context		# the drag context
	target		# the target (form of the data) to retrieve
	time_		# a timestamp for retrieving the data. This willgenerally be the time received in a “drag-motion” or “drag-drop” signal
GtkWidget  *gtk_drag_get_source_widget (GdkDragContext *context);	# Determines the source widget for a drag.
	context		# a (destination side) drag context
	return:		#  if the drag is occurringwithin a single application, a pointer to the source widget.Otherwise, NULL .  
void gtk_drag_highlight (GtkWidget *widget);	# Highlights a widget as a currently hovered drop target.To end the highlight, call gtk_drag_unhighlight() .GTK+ calls this automatically if GTK_DEST_DEFAULT_HIGHLIGHT is set.
	widget		# a widget to highlight
void gtk_drag_unhighlight (GtkWidget *widget);	# Removes a highlight set by gtk_drag_highlight() froma widget.
	widget		# a widget to remove the highlight from
GdkDragContext  *gtk_drag_begin_with_coordinates (GtkWidget *widget, GtkTargetList *targets, GdkDragAction actions, gint button, GdkEvent *event, gint x, gint y);	# Initiates a drag on the source side. The function only needs to be usedwhen the application is starting drags itself, and is not needed whengtk_drag_source_set() is used.
	widget		# the source widget
	targets		# The targets (data formats) in which thesource can provide the data
	actions		# A bitmask of the allowed drag actions for this drag
	button		# The button the user clicked to start the drag
	event		#  The event that triggered the start of the drag,or NULL if none can be obtained. 
	return:		#  the context for this drag.  
void gtk_drag_cancel (GdkDragContext *context);	# Cancels an ongoing drag operation on the source side.
	context		# a GdkDragContext , as e.g. returned by 
void gtk_drag_set_icon_widget (GdkDragContext *context, GtkWidget *widget, gint hot_x, gint hot_y);	# Changes the icon for drag operation to a given widget.GTK+ will not destroy the widget, so if you don’t wantit to persist, you should connect to the “drag-end” signal and destroy it yourself.
	context		# the context for a drag. (This must be calledwith a context for the source side of a drag)
	widget		# a widget to use as an icon
	hot_x		# the X offset within widgetof the hotspot
	hot_y		# the Y offset within widgetof the hotspot
void gtk_drag_set_icon_pixbuf (GdkDragContext *context, GdkPixbuf *pixbuf, gint hot_x, gint hot_y);	# Sets pixbuf as the icon for a given drag.
	context		# the context for a drag (This must be calledwith a context for the source side of a drag)
	pixbuf		# the GdkPixbuf to use as the drag icon
	hot_x		# the X offset within widgetof the hotspot
	hot_y		# the Y offset within widgetof the hotspot
void gtk_drag_set_icon_surface (GdkDragContext *context, cairo_surface_t *surface);	# Sets surface as the icon for a given drag. GTK+ retainsreferences for the arguments, and will release them whenthey are no longer needed.
	context		# the context for a drag (This must be calledwith a context for the source side of a drag)
	surface		# the surface to use as icon
void gtk_drag_set_icon_name (GdkDragContext *context, const gchar *icon_name, gint hot_x, gint hot_y);	# Sets the icon for a given drag from a named themed icon. Seethe docs for GtkIconTheme for more details. Note that thesize of the icon depends on the icon theme (the icon isloaded at the symbolic size GTK_ICON_SIZE_DND ), thus hot_x and hot_y have to be used with care.
	context		# the context for a drag (This must be calledwith a context for the source side of a drag)
	icon_name		# name of icon to use
	hot_x		# the X offset of the hotspot within the icon
	hot_y		# the Y offset of the hotspot within the icon
void gtk_drag_set_icon_gicon (GdkDragContext *context, GIcon *icon, gint hot_x, gint hot_y);	# Sets the icon for a given drag from the given icon.See the documentation for gtk_drag_set_icon_name() for more details about using icons in drag and drop.
	context		# the context for a drag (This must be calledwith a context for the source side of a drag)
	icon		# a GIcon 
	hot_x		# the X offset of the hotspot within the icon
	hot_y		# the Y offset of the hotspot within the icon
void gtk_drag_set_icon_default (GdkDragContext *context);	# Sets the icon for a particular drag to the defaulticon.
	context		# the context for a drag (This must be calledwith a context for the source side of a drag)
gboolean gtk_drag_check_threshold (GtkWidget *widget, gint start_x, gint start_y, gint current_x, gint current_y);	# Checks to see if a mouse drag starting at (start_x, start_y) and endingat (current_x, current_y) has passed the GTK+ drag threshold, and thusshould trigger the beginning of a drag-and-drop operation.
	widget		# a GtkWidget 
	start_x		# X coordinate of start of drag
	start_y		# Y coordinate of start of drag
	current_x		# current X coordinate
	current_y		# current Y coordinate
	return:		#  TRUE if the drag threshold has been passed. 
void gtk_drag_source_set (GtkWidget *widget, GdkModifierType start_button_mask, const GtkTargetEntry *targets, gint n_targets, GdkDragAction actions);	# Sets up a widget so that GTK+ will start a drag operation when the userclicks and drags on the widget. The widget must have a window.
	widget		# a GtkWidget 
	start_button_mask		# the bitmask of buttons that can start the drag
	targets		#  the table of targetsthat the drag will support, may be NULL . 
	n_targets		# the number of items in targets
	actions		# the bitmask of possible actions for a drag from this widget
void gtk_drag_source_set_icon_pixbuf (GtkWidget *widget, GdkPixbuf *pixbuf);	# Sets the icon that will be used for drags from a particular widgetfrom a GdkPixbuf . GTK+ retains a reference for pixbuf and will release it when it is no longer needed.
	widget		# a GtkWidget 
	pixbuf		# the GdkPixbuf for the drag icon
void gtk_drag_source_set_icon_name (GtkWidget *widget, const gchar *icon_name);	# Sets the icon that will be used for drags from a particular sourceto a themed icon. See the docs for GtkIconTheme for more details.
	widget		# a GtkWidget 
	icon_name		# name of icon to use
void gtk_drag_source_set_icon_gicon (GtkWidget *widget, GIcon *icon);	# Sets the icon that will be used for drags from a particular sourceto icon. See the docs for GtkIconTheme for more details.
	widget		# a GtkWidget 
	icon		# A GIcon 
void gtk_drag_source_unset (GtkWidget *widget);	# Undoes the effects of gtk_drag_source_set() .
	widget		# a GtkWidget 
void gtk_drag_source_set_target_list (GtkWidget *widget, GtkTargetList *target_list);	# Changes the target types that this widget offers for drag-and-drop.The widget must first be made into a drag source withgtk_drag_source_set() .
	widget		# a GtkWidget that’s a drag source
	target_list		#  list of draggable targets, or NULL for none. 
GtkTargetList  *gtk_drag_source_get_target_list (GtkWidget *widget);	# Gets the list of targets this widget can provide fordrag-and-drop.
	widget		# a GtkWidget 
	return:		#  the GtkTargetList , or NULL if none.  
void gtk_drag_source_add_text_targets (GtkWidget *widget);	# Add the text targets supported by GtkSelectionData tothe target list of the drag source. The targetsare added with info = 0. If you need another value, use gtk_target_list_add_text_targets() andgtk_drag_source_set_target_list() .
	widget		# a GtkWidget that’s is a drag source
void gtk_drag_source_add_image_targets (GtkWidget *widget);	# Add the writable image targets supported by GtkSelectionData tothe target list of the drag source. The targetsare added with info = 0. If you need another value, use gtk_target_list_add_image_targets() andgtk_drag_source_set_target_list() .
	widget		# a GtkWidget that’s is a drag source
void gtk_drag_source_add_uri_targets (GtkWidget *widget);	# Add the URI targets supported by GtkSelectionData tothe target list of the drag source. The targetsare added with info = 0. If you need another value, use gtk_target_list_add_uri_targets() andgtk_drag_source_set_target_list() .
	widget		# a GtkWidget that’s is a drag source
GtkSettings  *gtk_settings_get_default (void );	# Gets the GtkSettings object for the default GDK screen, creatingit if necessary. See gtk_settings_get_for_screen() .
	return:		#  a GtkSettings object. If there isno default screen, then returns NULL .  
GtkSettings  *gtk_settings_get_for_screen (GdkScreen *screen);	# Gets the GtkSettings object for screen, creating it if necessary.
	screen		# a GdkScreen .
	return:		#  a GtkSettings object.  
gboolean gtk_rc_property_parse_color (const GParamSpec *pspec, const GString *gstring, GValue *property_value);	# gboolean gtk_rc_property_parse_color (const GParamSpec *pspec, const GString *gstring, GValue *property_value);</pre></div><hr>
gboolean gtk_rc_property_parse_enum (const GParamSpec *pspec, const GString *gstring, GValue *property_value);	# A GtkRcPropertyParser for use with gtk_settings_install_property_parser()or gtk_widget_class_install_style_property_parser() which parses a singleenumeration value.
	pspec		# a GParamSpec 
	gstring		# the GString to be parsed
	property_value		# a GValue which must hold enum values.
	return:		#  TRUE if gstringcould be parsed and property_valuehas been set to the resulting GEnumValue . 
gboolean gtk_rc_property_parse_flags (const GParamSpec *pspec, const GString *gstring, GValue *property_value);	# A GtkRcPropertyParser for use with gtk_settings_install_property_parser()or gtk_widget_class_install_style_property_parser() which parses flags.
	pspec		# a GParamSpec 
	gstring		# the GString to be parsed
	property_value		# a GValue which must hold flags values.
	return:		#  TRUE if gstringcould be parsed and property_valuehas been set to the resulting flags value. 
gboolean gtk_rc_property_parse_requisition (const GParamSpec *pspec, const GString *gstring, GValue *property_value);	# A GtkRcPropertyParser for use with gtk_settings_install_property_parser()or gtk_widget_class_install_style_property_parser() which parses arequisition in the form"{ width, height }" for integers width and height.
	pspec		# a GParamSpec 
	gstring		# the GString to be parsed
	property_value		# a GValue which must hold boxed values.
	return:		#  TRUE if gstringcould be parsed and property_valuehas been set to the resulting GtkRequisition . 
gboolean gtk_rc_property_parse_border (const GParamSpec *pspec, const GString *gstring, GValue *property_value);	# A GtkRcPropertyParser for use with gtk_settings_install_property_parser()or gtk_widget_class_install_style_property_parser() which parsesborders in the form"{ left, right, top, bottom }" for integersleft, right, top and bottom.
	pspec		# a GParamSpec 
	gstring		# the GString to be parsed
	property_value		# a GValue which must hold boxed values.
	return:		#  TRUE if gstringcould be parsed and property_valuehas been set to the resulting GtkBorder . 
void gtk_settings_reset_property (GtkSettings *settings, const gchar *name);	# Undoes the effect of calling g_object_set() to install anapplication-specific value for a setting. After this call,the setting will again follow the session-wide value forthis setting.
	settings		# a GtkSettings object
	name		# the name of the setting to reset
void gtk_binding_entry_add_signall (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, GSList *binding_args);	# Override or install a new key binding for keyval with modifiers onbinding_set.
	binding_set		# a GtkBindingSet to add a signal to
	keyval		# key value
	modifiers		# key modifier
	signal_name		# signal name to be bound
	binding_args		#  list of GtkBindingArg signal arguments. 
GtkBindingSet  *gtk_binding_set_new (const gchar *set_name);	# GTK+ maintains a global list of binding sets. Each binding set hasa unique name which needs to be specified upon creation.
	set_name		# unique name of this binding set
	return:		#  new binding set.  
GtkBindingSet  *gtk_binding_set_by_class (gpointer object_class);	# This function returns the binding set named after the type name ofthe passed in class structure. New binding sets are created ondemand by this function.
	object_class		# a valid GObject class
	return:		#  the binding set corresponding toobject_class.  
GtkBindingSet  *gtk_binding_set_find (const gchar *set_name);	# Find a binding set by its globally unique name.
	set_name		# unique binding set name
	return:		#  NULL or the specified binding set.  
gboolean gtk_bindings_activate (GObject *object, guint keyval, GdkModifierType modifiers);	# Find a key binding matching keyval and modifiers and activate thebinding on object.
	object		# object to activate when binding found
	keyval		# key value of the binding
	modifiers		# key modifier of the binding
	return:		#  TRUE if a binding was found and activated 
gboolean gtk_bindings_activate_event (GObject *object, GdkEventKey *event);	# Looks up key bindings for object to find one matchingevent, and if one was found, activate it.
	object		# a GObject (generally must be a widget)
	event		# a GdkEventKey 
	return:		#  TRUE if a matching key binding was found 
gboolean gtk_binding_set_activate (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, GObject *object);	# Find a key binding matching keyval and modifiers withinbinding_set and activate the binding on object.
	binding_set		# a GtkBindingSet set to activate
	keyval		# key value of the binding
	modifiers		# key modifier of the binding
	object		# object to activate when binding found
	return:		#  TRUE if a binding was found and activated 
void gtk_binding_entry_add_signal (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers, const gchar *signal_name, guint n_args, ...);	# Override or install a new key binding for keyval with modifiers onbinding_set. When the binding is activated, signal_name will beemitted on the target widget, with n_args Varargs used asarguments.
	binding_set		# a GtkBindingSet to install an entry for
	keyval		# key value of binding to install
	modifiers		# key modifier of binding to install
	signal_name		# signal to execute upon activation
	n_args		# number of arguments to signal_name
	...		# arguments to signal_name
GTokenType gtk_binding_entry_add_signal_from_string (GtkBindingSet *binding_set, const gchar *signal_desc);	# Parses a signal description from signal_desc and incorporatesit into binding_set.
	binding_set		# a GtkBindingSet 
	signal_desc		# a signal description
	return:		#  G_TOKEN_NONE if the signal was successfully parsed and added,the expected token otherwise 
void gtk_binding_entry_skip (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers);	# Install a binding on binding_set which causes key lookupsto be aborted, to prevent bindings from lower priority setsto be activated.
	binding_set		# a GtkBindingSet to skip an entry of
	keyval		# key value of binding to skip
	modifiers		# key modifier of binding to skip
void gtk_binding_entry_remove (GtkBindingSet *binding_set, guint keyval, GdkModifierType modifiers);	# Remove a binding previously installed viagtk_binding_entry_add_signal() on binding_set.
	binding_set		# a GtkBindingSet to remove an entry of
	keyval		# key value of binding to remove
	modifiers		# key modifier of binding to remove
GtkTargetEntry  *gtk_target_entry_new (const gchar *target, guint flags, guint info);	# Makes a new GtkTargetEntry .
	target		# String identifier for target
	flags		# Set of flags, see GtkTargetFlags 
	info		# an ID that will be passed back to the application
	return:		#  a pointer to a new GtkTargetEntry .Free with gtk_target_entry_free()  
GtkTargetEntry  *gtk_target_entry_copy (GtkTargetEntry *data);	# Makes a copy of a GtkTargetEntry and its data.
	data		# a pointer to a GtkTargetEntry 
	return:		#  a pointer to a copy of data.Free with gtk_target_entry_free()  
void gtk_target_entry_free (GtkTargetEntry *data);	# Frees a GtkTargetEntry returned fromgtk_target_entry_new() or gtk_target_entry_copy() .
	data		# a pointer to a GtkTargetEntry .
GtkTargetList  *gtk_target_list_new (const GtkTargetEntry *targets, guint ntargets);	#创建对象:GtkTargetList from an array of GtkTargetEntry .
	targets		#  Pointer to an arrayof GtkTargetEntry . 
	return:		#  the new GtkTargetList .  
GtkTargetList  *gtk_target_list_ref (GtkTargetList *list);	# Increases the reference count of a GtkTargetList by one.
	list		# a GtkTargetList 
	return:		#  the passed in GtkTargetList . 
void gtk_target_list_unref (GtkTargetList *list);	# Decreases the reference count of a GtkTargetList by one.If the resulting reference count is zero, frees the list.
	list		# a GtkTargetList 
void gtk_target_list_add (GtkTargetList *list, GdkAtom target, guint flags, guint info);	# Appends another target to a GtkTargetList .
	list		# a GtkTargetList 
	target		# the interned atom representing the target
	flags		# the flags for this target
	info		# an ID that will be passed back to the application
void gtk_target_list_add_table (GtkTargetList *list, const GtkTargetEntry *targets, guint ntargets);	# Prepends a table of GtkTargetEntry to a target list.
	list		# a GtkTargetList 
	targets		#  the table of GtkTargetEntry . 
	ntargets		# number of targets in the table
void gtk_target_list_add_text_targets (GtkTargetList *list, guint info);	# Appends the text targets supported by GtkSelectionData tothe target list. All targets are added with the same info.
	list		# a GtkTargetList 
	info		# an ID that will be passed back to the application
void gtk_target_list_add_image_targets (GtkTargetList *list, guint info, gboolean writable);	# Appends the image targets supported by GtkSelectionData tothe target list. All targets are added with the same info.
	list		# a GtkTargetList 
	info		# an ID that will be passed back to the application
	writable		# whether to add only targets for which GTK+ knowshow to convert a pixbuf into the format
void gtk_target_list_add_uri_targets (GtkTargetList *list, guint info);	# Appends the URI targets supported by GtkSelectionData tothe target list. All targets are added with the same info.
	list		# a GtkTargetList 
	info		# an ID that will be passed back to the application
void gtk_target_list_add_rich_text_targets (GtkTargetList *list, guint info, gboolean deserializable, GtkTextBuffer *buffer);	# Appends the rich text targets registered withgtk_text_buffer_register_serialize_format() orgtk_text_buffer_register_deserialize_format() to the target list. Alltargets are added with the same info.
	list		# a GtkTargetList 
	info		# an ID that will be passed back to the application
	deserializable		# if TRUE , then deserializable rich text formatswill be added, serializable formats otherwise.
	buffer		# a GtkTextBuffer .
void gtk_target_list_remove (GtkTargetList *list, GdkAtom target);	# Removes a target from a target list.
	list		# a GtkTargetList 
	target		# the interned atom representing the target
gboolean gtk_target_list_find (GtkTargetList *list, GdkAtom target, guint *info);	# Looks up a given target in a GtkTargetList .
	list		# a GtkTargetList 
	target		# an interned atom representing the target to search for
	info		#  a pointer to the location to storeapplication info for target, or NULL . 
	return:		#  TRUE if the target was found, otherwise FALSE  
void gtk_target_table_free (GtkTargetEntry *targets, gint n_targets);	# This function frees a target table as returned bygtk_target_table_new_from_list() 
	targets		#  a GtkTargetEntry array. 
	n_targets		# the number of entries in the array
GtkTargetEntry  *gtk_target_table_new_from_list (GtkTargetList *list, gint *n_targets);	# This function creates an GtkTargetEntry array that contains thesame targets as the passed list. The returned table is newlyallocated and should be freed using gtk_target_table_free() when nolonger needed.
	list		# a GtkTargetList 
	n_targets		#  return location for the number ot targets in the table. 
	return:		#  the new table.  
gboolean gtk_selection_owner_set (GtkWidget *widget, GdkAtom selection, guint32 time_);	# Claims ownership of a given selection for a particular widget,or, if widget is NULL , release ownership of the selection.
	widget		#  a GtkWidget , or NULL . 
	return:		#  TRUE if the operation succeeded 
gboolean gtk_selection_owner_set_for_display (GdkDisplay *display, GtkWidget *widget, GdkAtom selection, guint32 time_);	# Claim ownership of a given selection for a particular widget, or,if widget is NULL , release ownership of the selection.
	display		# the GdkDisplay where the selection is set
	widget		#  new selection owner (a GtkWidget ), or NULL . 
	return:		#  TRUE if the operation succeeded  
void gtk_selection_add_target (GtkWidget *widget, GdkAtom selection, GdkAtom target, guint info);	# Appends a specified target to the list of supported targets for a given widget and selection.
	widget		# a GtkWidget 
	selection		# the selection
	target		# target to add.
	info		# A unsigned integer which will be passed back to the application.
void gtk_selection_add_targets (GtkWidget *widget, GdkAtom selection, const GtkTargetEntry *targets, guint ntargets);	# Prepends a table of targets to the list of supported targetsfor a given widget and selection.
	widget		# a GtkWidget 
	selection		# the selection
	targets		#  a table of targets to add. 
	ntargets		# number of entries in targets
void gtk_selection_clear_targets (GtkWidget *widget, GdkAtom selection);	# Remove all targets registered for the given selection for thewidget.
	widget		# a GtkWidget 
	selection		# an atom representing a selection
gboolean gtk_selection_convert (GtkWidget *widget, GdkAtom selection, GdkAtom target, guint32 time_);	# Requests the contents of a selection. When received, a “selection-received” signal will be generated.
	widget		# The widget which acts as requestor
	selection		# Which selection to get
	target		# Form of information desired (e.g., STRING)
	time_		# Time of request (usually of triggering event)In emergency, you could use GDK_CURRENT_TIME 
	return:		#  TRUE if requested succeeded. FALSE if we could not processrequest. (e.g., there was already a request in process forthis widget). 
void gtk_selection_data_set (GtkSelectionData *selection_data, GdkAtom type, gint format, const guchar *data, gint length);	# Stores new data into a GtkSelectionData object. Shouldonly be called from a selection handler callback.Zero-terminates the stored data.
	selection_data		# a pointer to a GtkSelectionData .
	type		# the type of selection data
	format		# format (number of bits in a unit)
	data		#  pointer to the data (will be copied). 
	length		# length of the data
gboolean gtk_selection_data_set_text (GtkSelectionData *selection_data, const gchar *str, gint len);	# Sets the contents of the selection from a UTF-8 encoded string.The string is converted to the form determined byselection_data-&gt;target.
	selection_data		# a GtkSelectionData 
	str		# a UTF-8 string
	len		# the length of str, or -1 if stris nul-terminated.
	return:		#  TRUE if the selection was successfully set,otherwise FALSE . 
guchar  *gtk_selection_data_get_text (const GtkSelectionData *selection_data);	# Gets the contents of the selection data as a UTF-8 string.
	selection_data		# a GtkSelectionData 
	return:		#  if the selection data contained arecognized text type and it could be converted to UTF-8, a newlyallocated string containing the converted text, otherwise NULL .If the result is non-NULL it must be freed with g_free() .  
gboolean gtk_selection_data_set_pixbuf (GtkSelectionData *selection_data, GdkPixbuf *pixbuf);	# Sets the contents of the selection from a GdkPixbuf The pixbuf is converted to the form determined byselection_data-&gt;target.
	selection_data		# a GtkSelectionData 
	pixbuf		# a GdkPixbuf 
	return:		#  TRUE if the selection was successfully set,otherwise FALSE . 
GdkPixbuf  *gtk_selection_data_get_pixbuf (const GtkSelectionData *selection_data);	# Gets the contents of the selection data as a GdkPixbuf .
	selection_data		# a GtkSelectionData 
	return:		#  if the selection datacontained a recognized image type and it could be converted to aGdkPixbuf , a newly allocated pixbuf is returned, otherwiseNULL . If the result is non-NULL it must be freed withg_object_unref() .  
gboolean gtk_selection_data_set_uris (GtkSelectionData *selection_data, gchar **uris);	# Sets the contents of the selection from a list of URIs.The string is converted to the form determined byselection_data-&gt;target.
	selection_data		# a GtkSelectionData 
	uris		#  a NULL -terminated array ofstrings holding URIs. 
	return:		#  TRUE if the selection was successfully set,otherwise FALSE . 
gchar  **gtk_selection_data_get_uris (const GtkSelectionData *selection_data);	# Gets the contents of the selection data as array of URIs.
	selection_data		# a GtkSelectionData 
	return:		#  ifthe selection data contains a list ofURIs, a newly allocated NULL -terminated string arraycontaining the URIs, otherwise NULL . If the result isnon-NULL it must be freed with g_strfreev() .  
gboolean gtk_selection_data_get_targets (const GtkSelectionData *selection_data, GdkAtom **targets, gint *n_atoms);	# Gets the contents of selection_data as an array of targets.This can be used to interpret the results of gettingthe standard TARGETS target that is always supplied forany selection.
	selection_data		# a GtkSelectionData object
	targets		#  location to store an array of targets. The result storedhere must be freed with 
	return:		#  TRUE if selection_datacontains a validarray of targets, otherwise FALSE . 
gboolean gtk_selection_data_targets_include_image (const GtkSelectionData *selection_data, gboolean writable);	# Given a GtkSelectionData object holding a list of targets,determines if any of the targets in targets can be used toprovide a GdkPixbuf .
	selection_data		# a GtkSelectionData object
	writable		# whether to accept only targets for which GTK+ knowshow to convert a pixbuf into the format
	return:		#  TRUE if selection_dataholds a list of targets,and a suitable target for images is included, otherwise FALSE . 
gboolean gtk_selection_data_targets_include_text (const GtkSelectionData *selection_data);	# Given a GtkSelectionData object holding a list of targets,determines if any of the targets in targets can be used toprovide text.
	selection_data		# a GtkSelectionData object
	return:		#  TRUE if selection_dataholds a list of targets,and a suitable target for text is included, otherwise FALSE . 
gboolean gtk_selection_data_targets_include_uri (const GtkSelectionData *selection_data);	# Given a GtkSelectionData object holding a list of targets,determines if any of the targets in targets can be used toprovide a list or URIs.
	selection_data		# a GtkSelectionData object
	return:		#  TRUE if selection_dataholds a list of targets,and a suitable target for URI lists is included, otherwise FALSE . 
gboolean gtk_selection_data_targets_include_rich_text (const GtkSelectionData *selection_data, GtkTextBuffer *buffer);	# Given a GtkSelectionData object holding a list of targets,determines if any of the targets in targets can be used toprovide rich text.
	selection_data		# a GtkSelectionData object
	buffer		# a GtkTextBuffer 
	return:		#  TRUE if selection_dataholds a list of targets,and a suitable target for rich text is included,otherwise FALSE . 
GdkAtom gtk_selection_data_get_selection (const GtkSelectionData *selection_data);	# Retrieves the selection GdkAtom of the selection data.
	selection_data		# a pointer to a GtkSelectionData .
	return:		#  the selection GdkAtom of the selection data.  
guchar  *gtk_selection_data_get_data (const GtkSelectionData *selection_data);	# Retrieves the raw data of the selection.
	selection_data		# a pointer to aGtkSelectionData .
	return:		#  the raw data of the selection.  
gint gtk_selection_data_get_length (const GtkSelectionData *selection_data);	# Retrieves the length of the raw data of the selection.
	selection_data		# a pointer to a GtkSelectionData .
	return:		#  the length of the data of the selection. 
guchar  *gtk_selection_data_get_data_with_length (const GtkSelectionData *selection_data, gint *length);	# Retrieves the raw data of the selection along with its length.
	selection_data		# a pointer to a GtkSelectionData .
	length		#  return location for length of the data segment. 
	return:		#  the raw data of the selection.  
GdkAtom gtk_selection_data_get_data_type (const GtkSelectionData *selection_data);	# Retrieves the data type of the selection.
	selection_data		# a pointer to a GtkSelectionData .
	return:		#  the data type of the selection.  
GdkDisplay  *gtk_selection_data_get_display (const GtkSelectionData *selection_data);	# Retrieves the display of the selection.
	selection_data		# a pointer to a GtkSelectionData .
	return:		#  the display of the selection.  
gint gtk_selection_data_get_format (const GtkSelectionData *selection_data);	# Retrieves the format of the selection.
	selection_data		# a pointer to a GtkSelectionData .
	return:		#  the format of the selection. 
GdkAtom gtk_selection_data_get_target (const GtkSelectionData *selection_data);	# Retrieves the target of the selection.
	selection_data		# a pointer to a GtkSelectionData .
	return:		#  the target of the selection.  
gboolean gtk_targets_include_image (GdkAtom *targets, gint n_targets, gboolean writable);	# Determines if any of the targets in targets can be used toprovide a GdkPixbuf .
	targets		#  an array of GdkAtoms . 
	return:		#  TRUE if targetsinclude a suitable target for images,otherwise FALSE . 
gboolean gtk_targets_include_text (GdkAtom *targets, gint n_targets);	# Determines if any of the targets in targets can be used toprovide text.
	targets		#  an array of GdkAtoms . 
	return:		#  TRUE if targetsinclude a suitable target for text,otherwise FALSE . 
gboolean gtk_targets_include_uri (GdkAtom *targets, gint n_targets);	# Determines if any of the targets in targets can be used toprovide an uri list.
	targets		#  an array of GdkAtoms . 
	return:		#  TRUE if targetsinclude a suitable target for uri lists,otherwise FALSE . 
gboolean gtk_targets_include_rich_text (GdkAtom *targets, gint n_targets, GtkTextBuffer *buffer);	# Determines if any of the targets in targets can be used toprovide rich text.
	targets		#  an array of GdkAtoms . 
	return:		#  TRUE if targetsinclude a suitable target for rich text,otherwise FALSE . 
void gtk_selection_remove_all (GtkWidget *widget);	# Removes all handlers and unsets ownership of all selections for a widget. Called when widget is beingdestroyed. This function will not generally becalled by applications.
	widget		# a GtkWidget 
GtkSelectionData  *gtk_selection_data_copy (const GtkSelectionData *data);	# Makes a copy of a GtkSelectionData and its data.
	data		# a pointer to a GtkSelectionData .
	return:		#  a pointer to a copy of data. 
void gtk_selection_data_free (GtkSelectionData *data);	# Frees a GtkSelectionData returned fromgtk_selection_data_copy() .
	data		# a pointer to a GtkSelectionData .
void gtk_test_init (int *argcp, char ***argvp, ...);	# This function is used to initialize a GTK+ test program.
	argcp		# Address of the argc parameter of the
	argvp		#  Address of theargv parameter of 
	...		# currently unused
GType  *gtk_test_list_all_types (guint *n_types);	# Return the type ids that have been registered aftercalling gtk_test_register_all_types() .
	n_types		# location to store number of types
	return:		#  0-terminated array of type ids.  
void gtk_test_register_all_types (void );	# Force registration of all core Gtk+ and Gdk object types.This allowes to refer to any of those object types viag_type_from_name() after calling this function.
void gtk_test_widget_wait_for_draw (GtkWidget *widget);	# Enters the main loop and waits for widget to be “drawn”. In thiscontext that means it waits for the frame clock of widget to haverun a full styling, layout and drawing cycle.
	widget		# the widget to wait for
GMountOperation  *gtk_mount_operation_new (GtkWindow *parent);	#创建对象:GtkMountOperation 
	parent		#  transient parent of the window, or NULL . 
	return:		#  a new GtkMountOperation  
gboolean gtk_mount_operation_is_showing (GtkMountOperation *op);	# Returns whether the GtkMountOperation is currently displayinga window.
	op		# a GtkMountOperation 
	return:		#  TRUE if opis currently displaying a window 
void gtk_mount_operation_set_parent (GtkMountOperation *op, GtkWindow *parent);	# Sets the transient parent for windows shown by theGtkMountOperation .
	op		# a GtkMountOperation 
	parent		#  transient parent of the window, or NULL . 
GtkWindow  *gtk_mount_operation_get_parent (GtkMountOperation *op);	# Gets the transient parent used by the GtkMountOperation 
	op		# a GtkMountOperation 
	return:		#  the transient parent for windows shown by op.  
void gtk_mount_operation_set_screen (GtkMountOperation *op, GdkScreen *screen);	# Sets the screen to show windows of the GtkMountOperation on.
	op		# a GtkMountOperation 
	screen		# a GdkScreen 
GdkScreen  *gtk_mount_operation_get_screen (GtkMountOperation *op);	# Gets the screen on which windows of the GtkMountOperation will be shown.
	op		# a GtkMountOperation 
	return:		#  the screen on which windows of opare shown.  
gboolean gtk_show_uri (GdkScreen *screen, const gchar *uri, guint32 timestamp, GError **error);	# gtk_show_uri is deprecated and should not be used in newly-written code.
	screen		#  screen to show the uri onor NULL for the default screen. 
	return:		#  TRUE on success, FALSE on error 
gboolean gtk_show_uri_on_window (GtkWindow *parent, const char *uri, guint32 timestamp, GError **error);	# This is a convenience function for launching the default applicationto show the uri. The uri must be of a form understood by GIO (i.e. youneed to install gvfs to get support for uri schemes such as http://or ftp://, as only local files are handled by GIO itself).Typical examples are
	parent		#  parent window. 
	return:		#  TRUE on success, FALSE on error 
GtkStyleContext  *gtk_style_context_new (void );	# Creates a standalone GtkStyleContext , this style contextwon’t be attached to any widget, so you may wantto call gtk_style_context_set_path() yourself.
	return:		#  A newly created GtkStyleContext . 
void gtk_style_context_add_provider (GtkStyleContext *context, GtkStyleProvider *provider, guint priority);	# Adds a style provider to context, to be used in style construction.Note that a style provider added by this function only affectsthe style of the widget to which context belongs. If you wantto affect the style of all widgets, usegtk_style_context_add_provider_for_screen() .
	context		# a GtkStyleContext 
	provider		# a GtkStyleProvider 
	priority		# the priority of the style provider. The lowerit is, the earlier it will be used in the styleconstruction. Typically this will be in the rangebetween GTK_STYLE_PROVIDER_PRIORITY_FALLBACK andGTK_STYLE_PROVIDER_PRIORITY_USER 
void gtk_style_context_add_provider_for_screen (GdkScreen *screen, GtkStyleProvider *provider, guint priority);	# Adds a global style provider to screen, which will be usedin style construction for all GtkStyleContexts under screen.
	screen		# a GdkScreen 
	provider		# a GtkStyleProvider 
	priority		# the priority of the style provider. The lowerit is, the earlier it will be used in the styleconstruction. Typically this will be in the rangebetween GTK_STYLE_PROVIDER_PRIORITY_FALLBACK andGTK_STYLE_PROVIDER_PRIORITY_USER 
void gtk_style_context_get (GtkStyleContext *context, ...);	# Retrieves several style property values from context for agiven state.
	context		# a GtkStyleContext 
	...		# property name /return value pairs, followed by NULL 
GtkStyleContext  *gtk_style_context_get_parent (GtkStyleContext *context);	# Gets the parent context set via gtk_style_context_set_parent() .See that function for details.
	context		# a GtkStyleContext 
	return:		#  the parent context or NULL .  
GtkWidgetPath  *gtk_style_context_get_path (GtkStyleContext *context);	# Returns the widget path used for style matching.
	context		# a GtkStyleContext 
	return:		#  A GtkWidgetPath .  
void gtk_style_context_get_property (GtkStyleContext *context, const gchar *property, GValue *value);	# Gets a style property from context for the current state.
	context		# a GtkStyleContext 
	property		# style property name
	value		#  return location for the style property value. 
GdkScreen  *gtk_style_context_get_screen (GtkStyleContext *context);	# Returns the GdkScreen to which context is attached.
	context		# a GtkStyleContext 
	return:		#  a GdkScreen .  
GdkFrameClock  *gtk_style_context_get_frame_clock (GtkStyleContext *context);	# Returns the GdkFrameClock to which context is attached.
	context		# a GtkStyleContext 
	return:		#  a GdkFrameClock , or NULL if contextdoes not have an attached frame clock.  
GtkStateFlags gtk_style_context_get_state (GtkStyleContext *context);	# Returns the state used for style matching.
	context		# a GtkStyleContext 
	return:		#  the state flags 
void gtk_style_context_get_style (GtkStyleContext *context, ...);	# Retrieves several widget style properties from context according to thecurrent style.
	context		# a GtkStyleContext 
	...		# property name /return value pairs, followed by NULL 
void gtk_style_context_get_style_property (GtkStyleContext *context, const gchar *property_name, GValue *value);	# Gets the value for a widget style property.
	context		# a GtkStyleContext 
	property_name		# the name of the widget style property
	value		# Return location for the property value
void gtk_style_context_get_style_valist (GtkStyleContext *context, va_list args);	# Retrieves several widget style properties from context according to thecurrent style.
	context		# a GtkStyleContext 
	args		# va_list of property name/return location pairs, followed by NULL 
void gtk_style_context_get_valist (GtkStyleContext *context, va_list args);	# Retrieves several style property values from context for a given state.
	context		# a GtkStyleContext 
	args		# va_list of property name/return location pairs, followed by NULL 
GtkCssSection  *gtk_style_context_get_section (GtkStyleContext *context, const gchar *property);	# Queries the location in the CSS where property was defined for thecurrent context. Note that the state to be queried is taken fromgtk_style_context_get_state() .
	context		# a GtkStyleContext 
	property		# style property name
	return:		#  NULL or the section where a valuefor propertywas defined.  
void gtk_style_context_get_color (GtkStyleContext *context, GdkRGBA *color);	# Gets the foreground color for a given state.
	context		# a GtkStyleContext 
	color		#  return value for the foreground color. 
void gtk_style_context_get_background_color (GtkStyleContext *context, GdkRGBA *color);	# gtk_style_context_get_background_color has been deprecated since version 3.16 and should not be used in newly-written code.
	context		# a GtkStyleContext 
	color		#  return value for the background color. 
void gtk_style_context_get_border_color (GtkStyleContext *context, GdkRGBA *color);	# gtk_style_context_get_border_color has been deprecated since version 3.16 and should not be used in newly-written code.
	context		# a GtkStyleContext 
	color		#  return value for the border color. 
void gtk_style_context_get_border (GtkStyleContext *context, GtkBorder *border);	# Gets the border for a given state as a GtkBorder .
	context		# a GtkStyleContext 
	border		#  return value for the border settings. 
void gtk_style_context_get_padding (GtkStyleContext *context, GtkBorder *padding);	# Gets the padding for a given state as a GtkBorder .See gtk_style_context_get() and GTK_STYLE_PROPERTY_PADDING for details.
	context		# a GtkStyleContext 
	padding		#  return value for the padding settings. 
void gtk_style_context_get_margin (GtkStyleContext *context, GtkBorder *margin);	# Gets the margin for a given state as a GtkBorder .See gtk_style_property_get() and GTK_STYLE_PROPERTY_MARGIN for details.
	context		# a GtkStyleContext 
	margin		#  return value for the margin settings. 
gboolean gtk_style_context_lookup_color (GtkStyleContext *context, const gchar *color_name, GdkRGBA *color);	# Looks up and resolves a color name in the context color map.
	context		# a GtkStyleContext 
	color_name		# color name to lookup
	color		#  Return location for the looked up color. 
	return:		#  TRUE if color_namewas found and resolved, FALSE otherwise 
void gtk_style_context_remove_provider (GtkStyleContext *context, GtkStyleProvider *provider);	# Removes provider from the style providers list in context.
	context		# a GtkStyleContext 
	provider		# a GtkStyleProvider 
void gtk_style_context_remove_provider_for_screen (GdkScreen *screen, GtkStyleProvider *provider);	# Removes provider from the global style providers list in screen.
	screen		# a GdkScreen 
	provider		# a GtkStyleProvider 
void gtk_style_context_reset_widgets (GdkScreen *screen);	# This function recomputes the styles for all widgets under a particularGdkScreen . This is useful when some global parameter has changed thataffects the appearance of all widgets, because when a widget gets a newstyle, it will both redraw and recompute any cached information aboutits appearance. As an example, it is used when the color scheme changesin the related GtkSettings object.
	screen		# a GdkScreen 
void gtk_style_context_restore (GtkStyleContext *context);	# Restores context state to a previous stage.See gtk_style_context_save() .
	context		# a GtkStyleContext 
void gtk_style_context_save (GtkStyleContext *context);	# Saves the context state, so temporary modifications done throughgtk_style_context_add_class() , gtk_style_context_remove_class() ,gtk_style_context_set_state() , etc. can quickly be revertedin one go through gtk_style_context_restore() .
	context		# a GtkStyleContext 
void gtk_style_context_set_parent (GtkStyleContext *context, GtkStyleContext *parent);	# Sets the parent style context for context. The parent stylecontext is used to implementinheritance of properties.
	context		# a GtkStyleContext 
	parent		#  the new parent or NULL . 
void gtk_style_context_set_path (GtkStyleContext *context, GtkWidgetPath *path);	# Sets the GtkWidgetPath used for style matching. As aconsequence, the style will be regenerated to matchthe new given path.
	context		# a GtkStyleContext 
	path		# a GtkWidgetPath 
void gtk_style_context_add_class (GtkStyleContext *context, const gchar *class_name);	# Adds a style class to context, so posterior calls togtk_style_context_get() or any of the gtk_render_*()functions will make use of this new class for styling.
	context		# a GtkStyleContext 
	class_name		# class name to use in styling
void gtk_style_context_remove_class (GtkStyleContext *context, const gchar *class_name);	# Removes class_name from context.
	context		# a GtkStyleContext 
	class_name		# class name to remove
gboolean gtk_style_context_has_class (GtkStyleContext *context, const gchar *class_name);	# Returns TRUE if context currently has defined thegiven class name.
	context		# a GtkStyleContext 
	class_name		# a class name
	return:		#  TRUE if contexthas class_namedefined 
GList  *gtk_style_context_list_classes (GtkStyleContext *context);	# Returns the list of classes currently defined in context.
	context		# a GtkStyleContext 
	return:		#  a GList ofstrings with the currently defined classes. The contentsof the list are owned by GTK+, but you must free the listitself with g_list_free() when you are done with it.  
void gtk_style_context_set_screen (GtkStyleContext *context, GdkScreen *screen);	# Attaches context to the given screen.
	context		# a GtkStyleContext 
	screen		# a GdkScreen 
void gtk_style_context_set_frame_clock (GtkStyleContext *context, GdkFrameClock *frame_clock);	# Attaches context to the given frame clock.
	context		# a GdkFrameClock 
	frame_clock		# a GdkFrameClock 
void gtk_style_context_set_state (GtkStyleContext *context, GtkStateFlags flags);	# Sets the state to be used for style matching.
	context		# a GtkStyleContext 
	flags		# state to represent
void gtk_style_context_set_scale (GtkStyleContext *context, gint scale);	# Sets the scale to use when getting image assets for the style.
	context		# a GtkStyleContext 
	scale		# scale
gint gtk_style_context_get_scale (GtkStyleContext *context);	# Returns the scale used for assets.
	context		# a GtkStyleContext 
	return:		#  the scale 
char  *gtk_style_context_to_string (GtkStyleContext *context, GtkStyleContextPrintFlags flags);	# Converts the style context into a string representation.
	context		# a GtkStyleContext 
	flags		# Flags that determine what to print
	return:		#  a newly allocated string representing context 
GtkBorder  *gtk_border_new (void );	# Allocates a new GtkBorder and initializes its elements to zero.
	return:		#  a newly allocated GtkBorder .Free with gtk_border_free() .  
GtkBorder  *gtk_border_copy (const GtkBorder *border_);	# Copies a GtkBorder .
	border_		# a GtkBorder 
	return:		#  a copy of border_.  
void gtk_border_free (GtkBorder *border_);	# Frees a GtkBorder .
	border_		# a GtkBorder 
void gtk_render_arrow (GtkStyleContext *context, cairo_t *cr, gdouble angle, gdouble x, gdouble y, gdouble size);	# Renders an arrow pointing to angle.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	angle		# arrow angle from 0 to 2 * G_PI , being 0 the arrow pointing to the north
	x		# X origin of the render area
	y		# Y origin of the render area
	size		# square side for render area
void gtk_render_background (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders the background of an element.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_background_get_clip (GtkStyleContext *context, gdouble x, gdouble y, gdouble width, gdouble height, GdkRectangle *out_clip);	# Returns the area that will be affected (i.e. drawn to) whencalling gtk_render_background() for the given context andrectangle.
	context		# a GtkStyleContext 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
	out_clip		#  return location for the clip. 
void gtk_render_check (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders a checkmark (as in a GtkCheckButton ).
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_expander (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders an expander (as used in GtkTreeView and GtkExpander ) in the areadefined by x, y, width, height. The state GTK_STATE_FLAG_CHECKED determines whether the expander is collapsed or expanded.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_focus (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders a focus indicator on the rectangle determined by x, y, width, height.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_frame (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders a frame around the rectangle defined by x, y, width, height.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_frame_gap (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkPositionType gap_side, gdouble xy0_gap, gdouble xy1_gap);	# Renders a frame around the rectangle defined by (x, y, width, height),leaving a gap on one side. xy0_gap and xy1_gap will mean X coordinatesfor GTK_POS_TOP and GTK_POS_BOTTOM gap sides, and Y coordinates forGTK_POS_LEFT and GTK_POS_RIGHT .
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
	gap_side		# side where the gap is
	xy0_gap		# initial coordinate (X or Y depending on gap_side) for the gap
	xy1_gap		# end coordinate (X or Y depending on gap_side) for the gap
void gtk_render_handle (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders a handle (as in GtkHandleBox , GtkPaned andGtkWindow ’s resize grip), in the rectangledetermined by x, y, width, height.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_layout (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout);	# Renders layout on the coordinates x, y
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin
	y		# Y origin
	layout		# the PangoLayout to render
void gtk_render_line (GtkStyleContext *context, cairo_t *cr, gdouble x0, gdouble y0, gdouble x1, gdouble y1);	# Renders a line from (x0, y0) to (x1, y1).
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x0		# X coordinate for the origin of the line
	y0		# Y coordinate for the origin of the line
	x1		# X coordinate for the end of the line
	y1		# Y coordinate for the end of the line
void gtk_render_option (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders an option mark (as in a GtkRadioButton ), the GTK_STATE_FLAG_CHECKED state will determine whether the option is on or off, andGTK_STATE_FLAG_INCONSISTENT whether it should be marked as undefined.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_slider (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height, GtkOrientation orientation);	# Renders a slider (as in GtkScale ) in the rectangle defined by x, y,width, height. orientation defines whether the slider is verticalor horizontal.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
	orientation		# orientation of the slider
void gtk_render_activity (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, gdouble width, gdouble height);	# Renders an activity indicator (such as in GtkSpinner ).The state GTK_STATE_FLAG_CHECKED determines whether there isactivity going on.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin of the rectangle
	y		# Y origin of the rectangle
	width		# rectangle width
	height		# rectangle height
void gtk_render_icon_surface (GtkStyleContext *context, cairo_t *cr, cairo_surface_t *surface, gdouble x, gdouble y);	# Renders the icon in surface at the specified x and y coordinates.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	surface		# a cairo_surface_t containing the icon to draw
	x		# X position for the icon
	y		# Y position for the incon
void gtk_render_icon (GtkStyleContext *context, cairo_t *cr, GdkPixbuf *pixbuf, gdouble x, gdouble y);	# Renders the icon in pixbuf at the specified x and y coordinates.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	pixbuf		# a GdkPixbuf containing the icon to draw
	x		# X position for the pixbuf
	y		# Y position for the pixbuf
void gtk_render_insertion_cursor (GtkStyleContext *context, cairo_t *cr, gdouble x, gdouble y, PangoLayout *layout, int index, PangoDirection direction);	# Draws a text caret on cr at the specified index of layout.
	context		# a GtkStyleContext 
	cr		# a cairo_t 
	x		# X origin
	y		# Y origin
	layout		# the PangoLayout of the text
	index		# the index in the PangoLayout 
	direction		# the PangoDirection of the text
GtkCssProvider  *gtk_css_provider_get_default (void );	# Returns the provider containing the style settings used as afallback for all widgets.
	return:		#  The provider used for fallback styling.This memory is owned by GTK+, and you must not free it.  
GtkCssProvider  *gtk_css_provider_get_named (const gchar *name, const gchar *variant);	# Loads a theme from the usual theme paths
	name		# A theme name
	variant		#  variant to load, for example, "dark", orNULL for the default. 
	return:		#  a GtkCssProvider with the theme loaded.This memory is owned by GTK+, and you must not free it.  
void gtk_css_provider_load_from_data (GtkCssProvider *css_provider, const gchar *data, gssize length);	# Loads data into css_provider, and by doing so clears any previously loadedinformation.
	css_provider		# a GtkCssProvider 
	data		#  CSS data loaded in memory. 
	length		# the length of datain bytes, or -1 for NUL terminated strings. Iflengthis not -1, the code will assume it is not NUL terminated and willpotentially do a copy.
void gtk_css_provider_load_from_file (GtkCssProvider *css_provider, GFile *file);	# Loads the data contained in file into css_provider, making itclear any previously loaded information.
	css_provider		# a GtkCssProvider 
	file		# GFile pointing to a file to load
void gtk_css_provider_load_from_path (GtkCssProvider *css_provider, const gchar *path);	# Loads the data contained in path into css_provider, making it clearany previously loaded information.
	css_provider		# a GtkCssProvider 
	path		# the path of a filename to load, in the GLib filename encoding
void gtk_css_provider_load_from_resource (GtkCssProvider *css_provider, const gchar *resource_path);	# Loads the data contained in the resource at resource_path intothe GtkCssProvider , clearing any previously loaded information.
	css_provider		# a GtkCssProvider 
	resource_path		# a GResource resource path
GtkCssProvider  *gtk_css_provider_new (void );	# Returns a newly created GtkCssProvider .
	return:		#  A new GtkCssProvider  
char  *gtk_css_provider_to_string (GtkCssProvider *provider);	# Converts the provider into a string representation in CSSformat.
	provider		# the provider to write to a string
	return:		#  a new string representing the provider. 
guint gtk_css_section_get_end_line (const GtkCssSection *section);	# Returns the line in the CSS document where this section end.The line number is 0-indexed, so the first line of the documentwill return 0.This value may change in future invocations of this function ifsection is not yet parsed completely. This will for example happen in the GtkCssProvider::parsing-error signal.The end position and line may be identical to the startposition and line for sections which failed to parse anythingsuccessfully.
	section		# the section
	return:		#  the line number 
guint gtk_css_section_get_end_position (const GtkCssSection *section);	# Returns the offset in bytes from the start of the current linereturned via gtk_css_section_get_end_line() .This value may change in future invocations of this function ifsection is not yet parsed completely. This will for examplehappen in the GtkCssProvider::parsing-error signal.The end position and line may be identical to the startposition and line for sections which failed to parse anythingsuccessfully.
	section		# the section
	return:		#  the offset in bytes from the start of the line. 
GFile  *gtk_css_section_get_file (const GtkCssSection *section);	# Gets the file that section was parsed from. If no such file exists,for example because the CSS was loaded viagtk_css_provider_load_from_data() , then NULL is returned.
	section		# the section
	return:		#  the GFile that sectionwas parsed fromor NULL if sectionwas parsed from other data.  
GtkCssSection  *gtk_css_section_get_parent (const GtkCssSection *section);	# Gets the parent section for the given section. The parent section isthe section that contains this section. A special case are sections oftype GTK_CSS_SECTION_DOCUMENT . Their parent will either be NULL if they are the original CSS document that was loaded bygtk_css_provider_load_from_file() or a section of typeGTK_CSS_SECTION_IMPORT if it was loaded with an import rule froma different file.
	section		# the section
	return:		#  the parent section or NULL if none.  
GtkCssSectionType gtk_css_section_get_section_type (const GtkCssSection *section);	# Gets the type of information that section describes.
	section		# the section
	return:		#  the type of section 
guint gtk_css_section_get_start_line (const GtkCssSection *section);	# Returns the line in the CSS document where this section starts.The line number is 0-indexed, so the first line of the documentwill return 0.
	section		# the section
	return:		#  the line number 
guint gtk_css_section_get_start_position (const GtkCssSection *section);	# Returns the offset in bytes from the start of the current linereturned via gtk_css_section_get_start_line() .
	section		# the section
	return:		#  the offset in bytes from the start of the line. 
GtkCssSection  *gtk_css_section_ref (GtkCssSection *section);	# Increments the reference count on section.
	section		# a GtkCssSection 
	return:		#  sectionitself. 
void gtk_css_section_unref (GtkCssSection *section);	# Decrements the reference count on section, freeing thestructure if the reference count reaches 0.
	section		# a GtkCssSection 
gboolean gtk_style_provider_get_style_property (GtkStyleProvider *provider, GtkWidgetPath *path, GtkStateFlags state, GParamSpec *pspec, GValue *value);	# Looks up a widget style property as defined by provider forthe widget represented by path.
	provider		# a GtkStyleProvider 
	path		# GtkWidgetPath to query
	state		# state to query the style property for
	pspec		# The GParamSpec to query
	value		#  return location for the property value. 
	return:		#  TRUE if the property was found and has a value, FALSE otherwise 
gint gtk_widget_path_append_type (GtkWidgetPath *path, GType type);	# Appends a widget type to the widget hierarchy represented by path.
	path		# a GtkWidgetPath 
	type		# widget type to append
	return:		#  the position where the element was inserted 
gint gtk_widget_path_append_with_siblings (GtkWidgetPath *path, GtkWidgetPath *siblings, guint sibling_index);	# Appends a widget type with all its siblings to the widget hierarchyrepresented by path. Using this function instead ofgtk_widget_path_append_type() will allow the CSS theming to usesibling matches in selectors and apply :nth-child() pseudo classes.In turn, it requires a lot more care in widget implementations aswidgets need to make sure to call gtk_widget_reset_style() on allinvolved widgets when the siblings path changes.
	path		# the widget path to append to
	siblings		# a widget path describing a list of siblings. This pathmay not contain any siblings itself and it must not be modifiedafterwards.
	sibling_index		# index into siblingsfor where the added element ispositioned.
	return:		#  the position where the element was inserted. 
gint gtk_widget_path_append_for_widget (GtkWidgetPath *path, GtkWidget *widget);	# Appends the data from widget to the widget hierarchy representedby path. This function is a shortcut for adding information fromwidget to the given path. This includes setting the name oradding the style classes from widget.
	path		# a widget path
	widget		# the widget to append to the widget path
	return:		#  the position where the data was inserted 
GtkWidgetPath  *gtk_widget_path_copy (const GtkWidgetPath *path);	# Returns a copy of path
	path		# a GtkWidgetPath 
	return:		#  a copy of path.  
GtkWidgetPath  *gtk_widget_path_ref (GtkWidgetPath *path);	# Increments the reference count on path.
	path		# a GtkWidgetPath 
	return:		#  pathitself. 
void gtk_widget_path_unref (GtkWidgetPath *path);	# Decrements the reference count on path, freeing the structureif the reference count reaches 0.
	path		# a GtkWidgetPath 
void gtk_widget_path_free (GtkWidgetPath *path);	# Decrements the reference count on path, freeing the structureif the reference count reaches 0.
	path		# a GtkWidgetPath 
GType gtk_widget_path_get_object_type (const GtkWidgetPath *path);	# Returns the topmost object type, that is, the object type this pathis representing.
	path		# a GtkWidget 
	return:		#  The object type 
gboolean gtk_widget_path_has_parent (const GtkWidgetPath *path, GType type);	# Returns TRUE if any of the parents of the widget representedin path is of type type, or any subtype of it.
	path		# a GtkWidgetPath 
	type		# widget type to check in parents
	return:		#  TRUE if any parent is of type type 
gboolean gtk_widget_path_is_type (const GtkWidgetPath *path, GType type);	# Returns TRUE if the widget type represented by this pathis type, or a subtype of it.
	path		# a GtkWidgetPath 
	type		# widget type to match
	return:		#  TRUE if the widget represented by pathis of type type 
void gtk_widget_path_iter_add_class (GtkWidgetPath *path, gint pos, const gchar *name);	# Adds the class name to the widget at position pos inthe hierarchy defined in path. Seegtk_style_context_add_class() .
	path		# a GtkWidget 
	pos		# position to modify, -1 for the path head
	name		# a class name
void gtk_widget_path_iter_clear_classes (GtkWidgetPath *path, gint pos);	# Removes all classes from the widget at position pos in thehierarchy defined in path.
	path		# a GtkWidget 
	pos		# position to modify, -1 for the path head
gchar  *gtk_widget_path_iter_get_name (const GtkWidgetPath *path, gint pos);	# Returns the name corresponding to the widget found atthe position pos in the widget hierarchy defined bypath
	path		# a GtkWidgetPath 
	pos		# position to get the widget name for, -1 for the path head
	return:		#  The widget name, or NULL if none was set.  
char  *gtk_widget_path_iter_get_object_name (const GtkWidgetPath *path, gint pos);	# Returns the object name that is at position pos in the widgethierarchy defined in path.
	path		# a GtkWidgetPath 
	pos		# position to get the object name for, -1 for the path head
	return:		#  the name or NULL .  
GType gtk_widget_path_iter_get_object_type (const GtkWidgetPath *path, gint pos);	# Returns the object GType that is at position pos in the widgethierarchy defined in path.
	path		# a GtkWidgetPath 
	pos		# position to get the object type for, -1 for the path head
	return:		#  a widget type 
GtkWidgetPath  *gtk_widget_path_iter_get_siblings (const GtkWidgetPath *path, gint pos);	# Returns the list of siblings for the element at pos. If the elementwas not added with siblings, NULL is returned.
	path		# a GtkWidgetPath 
	pos		# position to get the siblings for, -1 for the path head
	return:		#  NULL or the list of siblings for the element at pos. 
guint gtk_widget_path_iter_get_sibling_index (const GtkWidgetPath *path, gint pos);	# Returns the index into the list of siblings for the element at pos asreturned by gtk_widget_path_iter_get_siblings() . If that function wouldreturn NULL because the element at pos has no siblings, this functionwill return 0.
	path		# a GtkWidgetPath 
	pos		# position to get the sibling index for, -1 for the path head
	return:		#  0 or the index into the list of siblings for the element at pos. 
GtkStateFlags gtk_widget_path_iter_get_state (const GtkWidgetPath *path, gint pos);	# Returns the state flags corresponding to the widget found atthe position pos in the widget hierarchy defined bypath
	path		# a GtkWidgetPath 
	pos		# position to get the state for, -1 for the path head
	return:		#  The state flags 
gboolean gtk_widget_path_iter_has_class (const GtkWidgetPath *path, gint pos, const gchar *name);	# Returns TRUE if the widget at position pos has the class namedefined, FALSE otherwise.
	path		# a GtkWidgetPath 
	pos		# position to query, -1 for the path head
	name		# class name
	return:		#  TRUE if the class nameis defined for the widget at pos 
gboolean gtk_widget_path_iter_has_name (const GtkWidgetPath *path, gint pos, const gchar *name);	# Returns TRUE if the widget at position pos has the name name,FALSE otherwise.
	path		# a GtkWidgetPath 
	pos		# position to query, -1 for the path head
	name		# a widget name
	return:		#  TRUE if the widget at poshas this name 
gboolean gtk_widget_path_iter_has_qclass (const GtkWidgetPath *path, gint pos, GQuark qname);	# See gtk_widget_path_iter_has_class() . This is a version that operateswith GQuarks.
	path		# a GtkWidgetPath 
	pos		# position to query, -1 for the path head
	qname		# class name as a GQuark 
	return:		#  TRUE if the widget at poshas the class defined. 
gboolean gtk_widget_path_iter_has_qname (const GtkWidgetPath *path, gint pos, GQuark qname);	# See gtk_widget_path_iter_has_name() . This is a versionthat operates on GQuarks .
	path		# a GtkWidgetPath 
	pos		# position to query, -1 for the path head
	qname		# widget name as a GQuark 
	return:		#  TRUE if the widget at poshas this name 
GSList  *gtk_widget_path_iter_list_classes (const GtkWidgetPath *path, gint pos);	# Returns a list with all the class names defined for the widgetat position pos in the hierarchy defined in path.
	path		# a GtkWidgetPath 
	pos		# position to query, -1 for the path head
	return:		#  The list ofclasses, This is a list of strings, the GSList contentsare owned by GTK+, but you should use g_slist_free() tofree the list itself.  
void gtk_widget_path_iter_remove_class (GtkWidgetPath *path, gint pos, const gchar *name);	# Removes the class name from the widget at position pos inthe hierarchy defined in path.
	path		# a GtkWidgetPath 
	pos		# position to modify, -1 for the path head
	name		# class name
void gtk_widget_path_iter_set_name (GtkWidgetPath *path, gint pos, const gchar *name);	# Sets the widget name for the widget found at position posin the widget hierarchy defined by path.
	path		# a GtkWidgetPath 
	pos		# position to modify, -1 for the path head
	name		# widget name
void gtk_widget_path_iter_set_object_name (GtkWidgetPath *path, gint pos, const char *name);	# Sets the object name for a given position in the widget hierarchydefined by path.
	path		# a GtkWidgetPath 
	pos		# position to modify, -1 for the path head
	name		#  object name to set or NULL to unset. 
void gtk_widget_path_iter_set_object_type (GtkWidgetPath *path, gint pos, GType type);	# Sets the object type for a given position in the widget hierarchydefined by path.
	path		# a GtkWidgetPath 
	pos		# position to modify, -1 for the path head
	type		# object type to set
void gtk_widget_path_iter_set_state (GtkWidgetPath *path, gint pos, GtkStateFlags state);	# Sets the widget name for the widget found at position posin the widget hierarchy defined by path.
	path		# a GtkWidgetPath 
	pos		# position to modify, -1 for the path head
	state		# state flags
gint gtk_widget_path_length (const GtkWidgetPath *path);	# Returns the number of GtkWidget GTypes between the representedwidget and its topmost container.
	path		# a GtkWidgetPath 
	return:		#  the number of elements in the path 
GtkWidgetPath  *gtk_widget_path_new (void );	# Returns an empty widget path.
	return:		#  A newly created, empty, GtkWidgetPath .  
void gtk_widget_path_prepend_type (GtkWidgetPath *path, GType type);	# Prepends a widget type to the widget hierachy represented by path.
	path		# a GtkWidgetPath 
	type		# widget type to prepend
char  *gtk_widget_path_to_string (const GtkWidgetPath *path);	# Dumps the widget path into a string representation. It tries to matchthe CSS style as closely as possible (Note that there might be pathsthat cannot be represented in CSS).
	path		# the path
	return:		#  A new string describing path. 
GtkIconTheme  *gtk_icon_theme_new (void );	#创建对象:icon theme object. Icon theme objects are usedto lookup up an icon by name in a particular icon theme.Usually, you’ll want to use gtk_icon_theme_get_default() or gtk_icon_theme_get_for_screen() rather than creatinga new icon theme object for scratch.
	return:		#  the newly created GtkIconTheme object. 
GtkIconTheme  *gtk_icon_theme_get_default (void );	# Gets the icon theme for the default screen. Seegtk_icon_theme_get_for_screen() .
	return:		#  A unique GtkIconTheme associated withthe default screen. This icon theme is associated withthe screen and can be used as long as the screenis open. Do not ref or unref it.  
GtkIconTheme  *gtk_icon_theme_get_for_screen (GdkScreen *screen);	# Gets the icon theme object associated with screen; if thisfunction has not previously been called for the givenscreen, a new icon theme object will be created andassociated with the screen. Icon theme objects arefairly expensive to create, so using this functionis usually a better choice than calling than gtk_icon_theme_new() and setting the screen yourself; by using this functiona single icon theme object will be shared between users.
	screen		# a GdkScreen 
	return:		#  A unique GtkIconTheme associated withthe given screen. This icon theme is associated withthe screen and can be used as long as the screenis open. Do not ref or unref it.  
void gtk_icon_theme_set_screen (GtkIconTheme *icon_theme, GdkScreen *screen);	# Sets the screen for an icon theme; the screen is usedto track the user’s currently configured icon theme,which might be different for different screens.
	icon_theme		# a GtkIconTheme 
	screen		# a GdkScreen 
void gtk_icon_theme_set_search_path (GtkIconTheme *icon_theme, const gchar *path[], gint n_elements);	# Sets the search path for the icon theme object. When lookingfor an icon theme, GTK+ will search for a subdirectory ofone or more of the directories in path with the same nameas the icon theme containing an index.theme file. (Themes frommultiple of the path elements are combined to allow themes to beextended by adding icons in the user’s home directory.)
	icon_theme		# a GtkIconTheme 
	path		#  array ofdirectories that are searched for icon themes. 
	n_elements		# number of elements in path.
void gtk_icon_theme_get_search_path (GtkIconTheme *icon_theme, gchar **path[], gint *n_elements);	# Gets the current search path. See gtk_icon_theme_set_search_path() .
	icon_theme		# a GtkIconTheme 
	path		#  location to store a list of icon theme path directories or NULL .The stored value should be freed with 
void gtk_icon_theme_append_search_path (GtkIconTheme *icon_theme, const gchar *path);	# Appends a directory to the search path. See gtk_icon_theme_set_search_path() .
	icon_theme		# a GtkIconTheme 
	path		#  directory name to append to the icon path. 
void gtk_icon_theme_prepend_search_path (GtkIconTheme *icon_theme, const gchar *path);	# Prepends a directory to the search path. See gtk_icon_theme_set_search_path() .
	icon_theme		# a GtkIconTheme 
	path		#  directory name to prepend to the icon path. 
void gtk_icon_theme_add_resource_path (GtkIconTheme *icon_theme, const gchar *path);	# Adds a resource path that will be looked at when lookingfor icons, similar to search paths.
	icon_theme		# a GtkIconTheme 
	path		# a resource path
void gtk_icon_theme_set_custom_theme (GtkIconTheme *icon_theme, const gchar *theme_name);	# Sets the name of the icon theme that the GtkIconTheme object usesoverriding system configuration. This function cannot be calledon the icon theme objects returned from gtk_icon_theme_get_default() and gtk_icon_theme_get_for_screen() .
	icon_theme		# a GtkIconTheme 
	theme_name		#  name of icon theme to use instead ofconfigured theme, or NULL to unset a previously set custom theme. 
gboolean gtk_icon_theme_has_icon (GtkIconTheme *icon_theme, const gchar *icon_name);	# Checks whether an icon theme includes an iconfor a particular name.
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of an icon
	return:		#  TRUE if icon_themeincludes anicon for icon_name. 
GtkIconInfo  *gtk_icon_theme_lookup_icon (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags);	# Looks up a named icon and returns a GtkIconInfo containinginformation such as the filename of the icon. The iconcan then be rendered into a pixbuf usinggtk_icon_info_load_icon() . (gtk_icon_theme_load_icon() combines these two steps if all you need is the pixbuf.)
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of the icon to lookup
	size		# desired icon size
	flags		# flags modifying the behavior of the icon lookup
	return:		#  a GtkIconInfo objectcontaining information about the icon, or NULL if theicon wasn’t found.  
GtkIconInfo  *gtk_icon_theme_lookup_icon_for_scale (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags);	# Looks up a named icon for a particular window scale and returns aGtkIconInfo containing information such as the filename of theicon. The icon can then be rendered into a pixbuf usinggtk_icon_info_load_icon() . (gtk_icon_theme_load_icon() combinesthese two steps if all you need is the pixbuf.)
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of the icon to lookup
	size		# desired icon size
	scale		# the desired scale
	flags		# flags modifying the behavior of the icon lookup
	return:		#  a GtkIconInfo objectcontaining information about the icon, or NULL if theicon wasn’t found.  
GtkIconInfo  *gtk_icon_theme_choose_icon (GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, GtkIconLookupFlags flags);	# Looks up a named icon and returns a GtkIconInfo containinginformation such as the filename of the icon. The iconcan then be rendered into a pixbuf usinggtk_icon_info_load_icon() . (gtk_icon_theme_load_icon() combines these two steps if all you need is the pixbuf.)
	icon_theme		# a GtkIconTheme 
	icon_names		#  NULL -terminated array oficon names to lookup. 
	return:		#  a GtkIconInfo objectcontaining information about the icon, or NULL if the icon wasn’tfound.  
GtkIconInfo  *gtk_icon_theme_choose_icon_for_scale (GtkIconTheme *icon_theme, const gchar *icon_names[], gint size, gint scale, GtkIconLookupFlags flags);	# Looks up a named icon for a particular window scale and returnsa GtkIconInfo containing information such as the filename of theicon. The icon can then be rendered into a pixbuf usinggtk_icon_info_load_icon() . (gtk_icon_theme_load_icon() combines these two steps if all you need is the pixbuf.)
	icon_theme		# a GtkIconTheme 
	icon_names		#  NULL -terminatedarray of icon names to lookup. 
	return:		#  a GtkIconInfo objectcontaining information about the icon, or NULL if theicon wasn’t found.  
GtkIconInfo  *gtk_icon_theme_lookup_by_gicon (GtkIconTheme *icon_theme, GIcon *icon, gint size, GtkIconLookupFlags flags);	# Looks up an icon and returns a GtkIconInfo containing informationsuch as the filename of the icon. The icon can then be renderedinto a pixbuf using gtk_icon_info_load_icon() .
	icon_theme		# a GtkIconTheme 
	icon		# the GIcon to look up
	size		# desired icon size
	flags		# flags modifying the behavior of the icon lookup
	return:		#  a GtkIconInfo containinginformation about the icon, or NULL if the icon wasn’tfound. Unref with g_object_unref() .  
GtkIconInfo  *gtk_icon_theme_lookup_by_gicon_for_scale (GtkIconTheme *icon_theme, GIcon *icon, gint size, gint scale, GtkIconLookupFlags flags);	# Looks up an icon and returns a GtkIconInfo containing informationsuch as the filename of the icon. The icon can then be rendered intoa pixbuf using gtk_icon_info_load_icon() .
	icon_theme		# a GtkIconTheme 
	icon		# the GIcon to look up
	size		# desired icon size
	scale		# the desired scale
	flags		# flags modifying the behavior of the icon lookup
	return:		#  a GtkIconInfo containinginformation about the icon, or NULL if the icon wasn’tfound. Unref with g_object_unref() .  
GdkPixbuf  *gtk_icon_theme_load_icon (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, GtkIconLookupFlags flags, GError **error);	# Looks up an icon in an icon theme, scales it to the given sizeand renders it into a pixbuf. This is a convenience function;if more details about the icon are needed, usegtk_icon_theme_lookup_icon() followed by gtk_icon_info_load_icon() .
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of the icon to lookup
	size		# the desired icon size. The resulting icon may not beexactly this size; see 
	flags		# flags modifying the behavior of the icon lookup
	error		#  Location to store error information on failure,or NULL . 
	return:		#  the rendered icon; this may bea newly created icon or a new reference to an internal icon, soyou must not modify the icon. Use g_object_unref() to releaseyour reference to the icon. NULL if the icon isn’t found.  
GdkPixbuf  *gtk_icon_theme_load_icon_for_scale (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GtkIconLookupFlags flags, GError **error);	# Looks up an icon in an icon theme for a particular window scale,scales it to the given size and renders it into a pixbuf. This is aconvenience function; if more details about the icon are needed,use gtk_icon_theme_lookup_icon() followed bygtk_icon_info_load_icon() .
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of the icon to lookup
	size		# the desired icon size. The resulting icon may not beexactly this size; see 
	scale		# desired scale
	flags		# flags modifying the behavior of the icon lookup
	error		#  Location to store error information on failure,or NULL . 
	return:		#  the rendered icon; this may bea newly created icon or a new reference to an internal icon, soyou must not modify the icon. Use g_object_unref() to releaseyour reference to the icon. NULL if the icon isn’t found.  
cairo_surface_t  *gtk_icon_theme_load_surface (GtkIconTheme *icon_theme, const gchar *icon_name, gint size, gint scale, GdkWindow *for_window, GtkIconLookupFlags flags, GError **error);	# Looks up an icon in an icon theme for a particular window scale,scales it to the given size and renders it into a cairo surface. This is aconvenience function; if more details about the icon are needed,use gtk_icon_theme_lookup_icon() followed bygtk_icon_info_load_surface() .
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of the icon to lookup
	size		# the desired icon size. The resulting icon may not beexactly this size; see 
	scale		# desired scale
	for_window		#  GdkWindow to optimize drawing for, or NULL . 
	return:		#  the rendered icon; this may bea newly created icon or a new reference to an internal icon, soyou must not modify the icon. Use cairo_surface_destroy() torelease your reference to the icon. NULL if the icon isn’tfound.  
GList  *gtk_icon_theme_list_contexts (GtkIconTheme *icon_theme);	# Gets the list of contexts available within the currenthierarchy of icon themes.See gtk_icon_theme_list_icons() for details about contexts.
	icon_theme		# a GtkIconTheme 
	return:		#  a GList listholding the names of all the contexts in the theme. You must firstfree each element in the list with g_free() , then free the listitself with g_list_free() .  
GList  *gtk_icon_theme_list_icons (GtkIconTheme *icon_theme, const gchar *context);	# Lists the icons in the current icon theme. Only a subsetof the icons can be listed by providing a context string.The set of values for the context string is system dependent,but will typically include such values as “Applications” and“MimeTypes”. Contexts are explained in theIcon Theme Specification .The standard contexts are listed in theIcon Naming Specification .Also see gtk_icon_theme_list_contexts() .
	icon_theme		# a GtkIconTheme 
	context		#  a string identifying a particular type oficon, or NULL to list all icons. 
	return:		#  a GList listholding the names of all the icons in the theme. You mustfirst free each element in the list with g_free() , thenfree the list itself with g_list_free() .  
gint  *gtk_icon_theme_get_icon_sizes (GtkIconTheme *icon_theme, const gchar *icon_name);	# Returns an array of integers describing the sizes at whichthe icon is available without scaling. A size of -1 means that the icon is available in a scalable format. The array is zero-terminated.
	icon_theme		# a GtkIconTheme 
	icon_name		# the name of an icon
	return:		#  An newlyallocated array describing the sizes at which the icon isavailable. The array should be freed with g_free() when it is nolonger needed.  
char  *gtk_icon_theme_get_example_icon_name (GtkIconTheme *icon_theme);	# Gets the name of an icon that is representative of thecurrent theme (for instance, to use when presentinga list of themes to the user.)
	icon_theme		# a GtkIconTheme 
	return:		#  the name of an example icon or NULL .Free with g_free() .  
gboolean gtk_icon_theme_rescan_if_needed (GtkIconTheme *icon_theme);	# Checks to see if the icon theme has changed; if it has, anycurrently cached information is discarded and will be reloadednext time icon_theme is accessed.
	icon_theme		# a GtkIconTheme 
	return:		#  TRUE if the icon theme has changed and neededto be reloaded. 
GtkIconInfo  *gtk_icon_info_new_for_pixbuf (GtkIconTheme *icon_theme, GdkPixbuf *pixbuf);	# Creates a GtkIconInfo for a GdkPixbuf .
	icon_theme		# a GtkIconTheme 
	pixbuf		# the pixbuf to wrap in a GtkIconInfo 
	return:		#  a GtkIconInfo .  
gint gtk_icon_info_get_base_size (GtkIconInfo *icon_info);	# Gets the base size for the icon. The base sizeis a size for the icon that was specified bythe icon theme creator. This may be differentthan the actual size of image; an example ofthis is small emblem icons that can be attachedto a larger icon. These icons will be giventhe same base size as the larger icons to whichthey are attached.
	icon_info		# a GtkIconInfo 
	return:		#  the base size, or 0, if no basesize is known for the icon. 
gint gtk_icon_info_get_base_scale (GtkIconInfo *icon_info);	# Gets the base scale for the icon. The base scale is a scalefor the icon that was specified by the icon theme creator.For instance an icon drawn for a high-dpi screen with windowscale 2 for a base size of 32 will be 64 pixels tall and havea base scale of 2.
	icon_info		# a GtkIconInfo 
	return:		#  the base scale 
gchar  *gtk_icon_info_get_filename (GtkIconInfo *icon_info);	# Gets the filename for the icon. If the GTK_ICON_LOOKUP_USE_BUILTIN flag was passed to gtk_icon_theme_lookup_icon() , there may be nofilename if a builtin icon is returned; in this case, you shoulduse gtk_icon_info_get_builtin_pixbuf().
	icon_info		# a GtkIconInfo 
	return:		#  the filename for the icon, or NULL if gtk_icon_info_get_builtin_pixbuf() should be used instead.The return value is owned by GTK+ and should not be modifiedor freed.  
GdkPixbuf  *gtk_icon_info_load_icon (GtkIconInfo *icon_info, GError **error);	# Renders an icon previously looked up in an icon theme usinggtk_icon_theme_lookup_icon() ; the size will be based on the sizepassed to gtk_icon_theme_lookup_icon() . Note that the resultingpixbuf may not be exactly this size; an icon theme may have iconsthat differ slightly from their nominal sizes, and in addition GTK+will avoid scaling icons that it considers sufficiently close to therequested size or for which the source image would have to be scaledup too far. (This maintains sharpness.). This behaviour can be changedby passing the GTK_ICON_LOOKUP_FORCE_SIZE flag when obtainingthe GtkIconInfo . If this flag has been specified, the pixbufreturned by this function will be scaled to the exact size.
	icon_info		# a GtkIconInfo from 
	error		#  location to store error information on failure,or NULL . 
	return:		#  the rendered icon; this may be a newlycreated icon or a new reference to an internal icon, so you mustnot modify the icon. Use g_object_unref() to release your referenceto the icon.  
cairo_surface_t  *gtk_icon_info_load_surface (GtkIconInfo *icon_info, GdkWindow *for_window, GError **error);	# Renders an icon previously looked up in an icon theme usinggtk_icon_theme_lookup_icon() ; the size will be based on the sizepassed to gtk_icon_theme_lookup_icon() . Note that the resultingsurface may not be exactly this size; an icon theme may have iconsthat differ slightly from their nominal sizes, and in addition GTK+will avoid scaling icons that it considers sufficiently close to therequested size or for which the source image would have to be scaledup too far. (This maintains sharpness.). This behaviour can be changedby passing the GTK_ICON_LOOKUP_FORCE_SIZE flag when obtainingthe GtkIconInfo . If this flag has been specified, the pixbufreturned by this function will be scaled to the exact size.
	icon_info		# a GtkIconInfo from 
	for_window		#  GdkWindow to optimize drawing for, or NULL . 
	return:		#  the rendered icon; this may be a newlycreated icon or a new reference to an internal icon, so you mustnot modify the icon. Use cairo_surface_destroy() to release yourreference to the icon.  
void gtk_icon_info_load_icon_async (GtkIconInfo *icon_info, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously load, render and scale an icon previously looked upfrom the icon theme using gtk_icon_theme_lookup_icon() .
	icon_info		# a GtkIconInfo from 
	cancellable		#  optional GCancellable object, NULL to ignore. 
GdkPixbuf  *gtk_icon_info_load_icon_finish (GtkIconInfo *icon_info, GAsyncResult *res, GError **error);	# Finishes an async icon load, see gtk_icon_info_load_icon_async() .
	icon_info		# a GtkIconInfo from 
	res		# a GAsyncResult 
	error		#  location to store error information on failure,or NULL . 
	return:		#  the rendered icon; this may be a newlycreated icon or a new reference to an internal icon, so you mustnot modify the icon. Use g_object_unref() to release your referenceto the icon.  
GdkPixbuf  *gtk_icon_info_load_symbolic (GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, gboolean *was_symbolic, GError **error);	# Loads an icon, modifying it to match the system colours for the foreground,success, warning and error colors provided. If the icon is not a symbolicone, the function will return the result from gtk_icon_info_load_icon() .
	icon_info		# a GtkIconInfo 
	fg		# a GdkRGBA representing the foreground color of the icon
	success_color		#  a GdkRGBA representing the warning colorof the icon or NULL to use the default color. 
	return:		#  a GdkPixbuf representing the loaded icon.  
void gtk_icon_info_load_symbolic_async (GtkIconInfo *icon_info, const GdkRGBA *fg, const GdkRGBA *success_color, const GdkRGBA *warning_color, const GdkRGBA *error_color, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously load, render and scale a symbolic icon previously looked upfrom the icon theme using gtk_icon_theme_lookup_icon() .
	icon_info		# a GtkIconInfo from 
	fg		# a GdkRGBA representing the foreground color of the icon
	success_color		#  a GdkRGBA representing the warning colorof the icon or NULL to use the default color. 
GdkPixbuf  *gtk_icon_info_load_symbolic_finish (GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error);	# Finishes an async icon load, see gtk_icon_info_load_symbolic_async() .
	icon_info		# a GtkIconInfo from 
	res		# a GAsyncResult 
	was_symbolic		#  a gboolean , returns whether theloaded icon was a symbolic one and whether the fgcolor wasapplied to it. 
	return:		#  the rendered icon; this may be a newlycreated icon or a new reference to an internal icon, so you mustnot modify the icon. Use g_object_unref() to release your referenceto the icon.  
GdkPixbuf  *gtk_icon_info_load_symbolic_for_context (GtkIconInfo *icon_info, GtkStyleContext *context, gboolean *was_symbolic, GError **error);	# Loads an icon, modifying it to match the system colors for the foreground,success, warning and error colors provided. If the icon is not a symbolicone, the function will return the result from gtk_icon_info_load_icon() .This function uses the regular foreground color and the symbolic colorswith the names “success_color”, “warning_color” and “error_color” fromthe context.
	icon_info		# a GtkIconInfo 
	context		# a GtkStyleContext 
	was_symbolic		#  a gboolean , returns whether theloaded icon was a symbolic one and whether the fgcolor wasapplied to it. 
	return:		#  a GdkPixbuf representing the loaded icon.  
void gtk_icon_info_load_symbolic_for_context_async (GtkIconInfo *icon_info, GtkStyleContext *context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously load, render and scale a symbolic icon previouslylooked up from the icon theme using gtk_icon_theme_lookup_icon() .
	icon_info		# a GtkIconInfo from 
	context		# a GtkStyleContext 
	cancellable		#  optional GCancellable object,NULL to ignore. 
GdkPixbuf  *gtk_icon_info_load_symbolic_for_context_finish (GtkIconInfo *icon_info, GAsyncResult *res, gboolean *was_symbolic, GError **error);	# Finishes an async icon load, see gtk_icon_info_load_symbolic_for_context_async() .
	icon_info		# a GtkIconInfo from 
	res		# a GAsyncResult 
	was_symbolic		#  a gboolean , returns whether theloaded icon was a symbolic one and whether the fgcolor wasapplied to it. 
	return:		#  the rendered icon; this may be a newlycreated icon or a new reference to an internal icon, so you mustnot modify the icon. Use g_object_unref() to release your referenceto the icon.  
gboolean gtk_icon_info_is_symbolic (GtkIconInfo *icon_info);	# Checks if the icon is symbolic or not. This currently uses onlythe file name and not the file contents for determining this.This behaviour may change in the future.
	icon_info		# a GtkIconInfo 
	return:		#  TRUE if the icon is symbolic, FALSE otherwise 

#.# gio
void <span class="c_punctuation">( *GFileProgressCallback<span class="c_punctuation">) (goffset current_num_bytes, goffset total_num_bytes, gpointer user_data);	# When doing file operations that may take a while, such as movinga file or copying a file, a progress callback is used to pass howfar along that operation is to the application.
	current_num_bytes		# the current number of bytes in the operation.
	total_num_bytes		# the total number of bytes in the operation.
	user_data		# user data passed to the callback.
gboolean <span class="c_punctuation">( *GFileReadMoreCallback<span class="c_punctuation">) (const char *file_contents, goffset file_size, gpointer callback_data);	# When loading the partial contents of a file with g_file_load_partial_contents_async() ,it may become necessary to determine if any more data from the file should be loaded.A GFileReadMoreCallback function facilitates this by returning TRUE if more datashould be read, or FALSE otherwise.
	file_contents		# the data as currently read.
	file_size		# the size of the data currently read.
	callback_data		# data passed to the callback.
	return:		#  TRUE if more data should be read back. FALSE otherwise. 
void <span class="c_punctuation">( *GFileMeasureProgressCallback<span class="c_punctuation">) (gboolean reporting, guint64 current_size, guint64 num_dirs, guint64 num_files, gpointer user_data);	# This callback type is used by g_file_measure_disk_usage() to makeperiodic progress reports when measuring the amount of disk spacedused by a directory.
	reporting		# TRUE if more reports will come
	current_size		# the current cumulative size measurement
	num_dirs		# the number of directories visited so far
	num_files		# the number of non-directory files encountered
	user_data		# the data passed to the original request for this callback
GFile  *g_file_new_for_path (const char *path);	# Constructs a GFile for a given path. This operation neverfails, but the returned object might not support any I/Ooperation if path is malformed.
	path		#  a string containing a relative or absolute path.The string must be encoded in the glib filename encoding. 
	return:		#  a new GFile for the given path.Free the returned object with g_object_unref() .  
GFile  *g_file_new_for_uri (const char *uri);	# Constructs a GFile for a given URI. This operation neverfails, but the returned object might not support any I/Ooperation if uri is malformed or if the uri type isnot supported.
	uri		# a UTF-8 string containing a URI
	return:		#  a new GFile for the given uri.Free the returned object with g_object_unref() .  
GFile  *g_file_new_for_commandline_arg (const char *arg);	# Creates a GFile with the given argument from the command line.The value of arg can be either a URI, an absolute path or arelative path resolved relative to the current working directory.This operation never fails, but the returned object might notsupport any I/O operation if arg points to a malformed path.
	arg		# a command line string
	return:		#  a new GFile .Free the returned object with g_object_unref() .  
GFile  *g_file_new_for_commandline_arg_and_cwd (const gchar *arg, const gchar *cwd);	# Creates a GFile with the given argument from the command line.
	arg		# a command line string
	cwd		#  the current working directory of the commandline. 
	return:		#  a new GFile .  
GFile  *g_file_new_tmp (const char *tmpl, GFileIOStream **iostream, GError **error);	# Opens a file in the preferred directory for temporary files (asreturned by g_get_tmp_dir() ) and returns a GFile andGFileIOStream pointing to it.
	tmpl		#  Template for the filename, as in 
	return:		#  a new GFile .Free the returned object with g_object_unref() .  
GFile  *g_file_parse_name (const char *parse_name);	# Constructs a GFile with the given parse_name (i.e. somethinggiven by g_file_get_parse_name() ). This operation never fails,but the returned object might not support any I/O operation ifthe parse_name cannot be parsed.
	parse_name		# a file name or path to be parsed
	return:		#  a new GFile .  
GFile  *g_file_dup (GFile *file);	# Duplicates a GFile handle. This operation does not duplicatethe actual file or directory represented by the GFile ; seeg_file_copy() if attempting to copy a file.
	file		# input GFile 
	return:		#  a new GFile that is a duplicateof the given GFile .  
guint g_file_hash (gconstpointer file);	# Creates a hash value for a GFile .
	file		#  gconstpointer to a GFile . 
	return:		#  0 if fileis not a valid GFile , otherwise aninteger that can be used as hash value for the GFile .This function is intended for easily hashing a GFile toadd to a GHashTable or similar data structure. 
gboolean g_file_equal (GFile *file1, GFile *file2);	# Checks if the two given GFiles refer to the same file.
	file1		# the first GFile 
	file2		# the second GFile 
	return:		#  TRUE if file1and file2are equal. 
char  *g_file_get_basename (GFile *file);	# Gets the base name (the last component of the path) for a given GFile .
	file		# input GFile 
	return:		#  string containing the GFile 'sbase name, or NULL if given GFile is invalid. The returned stringshould be freed with g_free() when no longer needed.  
char  *g_file_get_path (GFile *file);	# Gets the local pathname for GFile , if one exists. If non-NULL , this isguaranteed to be an absolute, canonical path. It might contain symlinks.
	file		# input GFile 
	return:		#  string containing the GFile 's path,or NULL if no such path exists. The returned string should be freedwith g_free() when no longer needed.  
char  *g_file_get_uri (GFile *file);	# Gets the URI for the file.
	file		# input GFile 
	return:		#  a string containing the GFile 's URI.The returned string should be freed with g_free() when no longer needed. 
char  *g_file_get_parse_name (GFile *file);	# Gets the parse name of the file.A parse name is a UTF-8 string that describes thefile such that one can get the GFile back usingg_file_parse_name() .
	file		# input GFile 
	return:		#  a string containing the GFile 's parse name.The returned string should be freed with g_free() when no longer needed. 
GFile  *g_file_get_parent (GFile *file);	# Gets the parent directory for the file.If the file represents the root directory of thefile system, then NULL will be returned.
	file		# input GFile 
	return:		#  a GFile structure to theparent of the given GFile or NULL if there is no parent. Freethe returned object with g_object_unref() .  
gboolean g_file_has_parent (GFile *file, GFile *parent);	# Checks if file has a parent, and optionally, if it is parent.
	file		# input GFile 
	parent		#  the parent to check for, or NULL . 
	return:		#  TRUE if fileis an immediate child of parent(or any parent inthe case that parentis NULL ). 
GFile  *g_file_get_child (GFile *file, const char *name);	# Gets a child of file with basename equal to name.
	file		# input GFile 
	name		#  string containing the child's basename. 
	return:		#  a GFile to a child specified by name.Free the returned object with g_object_unref() .  
GFile  *g_file_get_child_for_display_name (GFile *file, const char *display_name, GError **error);	# Gets the child of file for a given display_name (i.e. a UTF-8version of the name). If this function fails, it returns NULL and error will be set. This is very useful when constructing aGFile for a new file and the user entered the filename in theuser interface, for instance when you select a directory andtype a filename in the file selector.
	file		# input GFile 
	display_name		# string to a possible child
	error		# return location for an error
	return:		#  a GFile to the specified child, orNULL if the display name couldn't be converted.Free the returned object with g_object_unref() .  
gboolean g_file_has_prefix (GFile *file, GFile *prefix);	# Checks whether file has the prefix specified by prefix.
	file		# input GFile 
	prefix		# input GFile 
	return:		#  TRUE if the files's parent, grandparent, etc is prefix,FALSE otherwise. 
char  *g_file_get_relative_path (GFile *parent, GFile *descendant);	# Gets the path for descendant relative to parent.
	parent		# input GFile 
	descendant		# input GFile 
	return:		#  string with the relative path fromdescendantto parent, or NULL if descendantdoesn't have parentasprefix. The returned string should be freed with g_free() whenno longer needed.  
GFile  *g_file_resolve_relative_path (GFile *file, const char *relative_path);	# Resolves a relative path for file to an absolute path.
	file		# input GFile 
	relative_path		#  a given relative path string. 
	return:		#  GFile to the resolved path.NULL if relative_pathis NULL or if fileis invalid.Free the returned object with g_object_unref() .  
gboolean g_file_is_native (GFile *file);	# Checks to see if a file is native to the platform.
	file		# input GFile 
	return:		#  TRUE if fileis native 
gboolean g_file_has_uri_scheme (GFile *file, const char *uri_scheme);	# Checks to see if a GFile has a given URI scheme.
	file		# input GFile 
	uri_scheme		# a string containing a URI scheme
	return:		#  TRUE if GFile 's backend supports thegiven URI scheme, FALSE if URI scheme is NULL ,not supported, or GFile is invalid. 
char  *g_file_get_uri_scheme (GFile *file);	# Gets the URI scheme for a GFile .RFC 3986 decodes the scheme as:
	file		# input GFile 
	return:		#  a string containing the URI scheme for the givenGFile . The returned string should be freed with g_free() when no longer needed. 
GFileInputStream  *g_file_read (GFile *file, GCancellable *cancellable, GError **error);	# Opens a file for reading. The result is a GFileInputStream thatcan be used to read the contents of the file.
	file		# GFile to read
	cancellable		#  a GCancellable . 
	return:		#  GFileInputStream or NULL on error.Free the returned object with g_object_unref() .  
void g_file_read_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously opens file for reading.
	file		# input GFile 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileInputStream  *g_file_read_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file read operation started withg_file_read_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFileInputStream or NULL on error.Free the returned object with g_object_unref() .  
GFileOutputStream  *g_file_append_to (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);	# Gets an output stream for appending data to the file.If the file doesn't already exist it is created.
	file		# input GFile 
	flags		# a set of GFileCreateFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileOutputStream , or NULL on error.Free the returned object with g_object_unref() .  
GFileOutputStream  *g_file_create (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);	#创建对象:file and returns an output stream for writing to it.The file must not already exist.
	file		# input GFile 
	flags		# a set of GFileCreateFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileOutputStream for the newly createdfile, or NULL on error.Free the returned object with g_object_unref() .  
GFileOutputStream  *g_file_replace (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);	# Returns an output stream for overwriting the file, possiblycreating a backup copy of the file first. If the file doesn't exist,it will be created.
	file		# input GFile 
	etag		#  an optional entity tag for the current GFile , or NULL to ignore. 
	flags		# a set of GFileCreateFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileOutputStream or NULL on error.Free the returned object with g_object_unref() .  
void g_file_append_to_async (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously opens file for appending.
	file		# input GFile 
	flags		# a set of GFileCreateFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileOutputStream  *g_file_append_to_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file append operation started withg_file_append_to_async() .
	file		# input GFile 
	res		# GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a valid GFileOutputStream or NULL on error.Free the returned object with g_object_unref() .  
void g_file_create_async (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously创建对象:file and returns an output streamfor writing to it. The file must not already exist.
	file		# input GFile 
	flags		# a set of GFileCreateFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileOutputStream  *g_file_create_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file create operation started withg_file_create_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFileOutputStream or NULL on error.Free the returned object with g_object_unref() .  
void g_file_replace_async (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously overwrites the file, replacing the contents,possibly creating a backup copy of the file first.
	file		# input GFile 
	etag		#  an entity tag for the current GFile ,or NULL to ignore. 
	flags		# a set of GFileCreateFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileOutputStream  *g_file_replace_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file replace operation started withg_file_replace_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFileOutputStream , or NULL on error.Free the returned object with g_object_unref() .  
GFileInfo  *g_file_query_info (GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Gets the requested information about specified file.The result is a GFileInfo object that contains key-valueattributes (such as the type or size of the file).
	file		# input GFile 
	attributes		# an attribute query string
	flags		# a set of GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileInfo for the given file, or NULL on error. Free the returned object with g_object_unref() .  
void g_file_query_info_async (GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously gets the requested information about specified file.The result is a GFileInfo object that contains key-value attributes(such as type or size for the file).
	file		# input GFile 
	attributes		# an attribute query string
	flags		# a set of GFileQueryInfoFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileInfo  *g_file_query_info_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file info query.See g_file_query_info_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError 
	return:		#  GFileInfo for given fileor NULL on error. Free the returned object withg_object_unref() .  
gboolean g_file_query_exists (GFile *file, GCancellable *cancellable);	# Utility function to check if a particular file exists. This isimplemented using g_file_query_info() and as such does blocking I/O.
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the file exists (and can be detected without error),FALSE otherwise (or if cancelled). 
GFileType g_file_query_file_type (GFile *file, GFileQueryInfoFlags flags, GCancellable *cancellable);	# Utility function to inspect the GFileType of a file. This isimplemented using g_file_query_info() and as such does blocking I/O.
	file		# input GFile 
	flags		# a set of GFileQueryInfoFlags passed to 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  The GFileType of the file and G_FILE_TYPE_UNKNOWN if the file does not exist 
GFileInfo  *g_file_query_filesystem_info (GFile *file, const char *attributes, GCancellable *cancellable, GError **error);	# Similar to g_file_query_info() , but obtains informationabout the filesystem the file is on, rather than the file itself.For instance the amount of space available and the type ofthe filesystem.
	file		# input GFile 
	attributes		# an attribute query string
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileInfo or NULL if there was an error.Free the returned object with g_object_unref() .  
void g_file_query_filesystem_info_async (GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously gets the requested information about the filesystemthat the specified file is on. The result is a GFileInfo objectthat contains key-value attributes (such as type or size for thefile).
	file		# input GFile 
	attributes		# an attribute query string
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileInfo  *g_file_query_filesystem_info_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous filesystem info query.See g_file_query_filesystem_info_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError 
	return:		#  GFileInfo for given fileor NULL on error.Free the returned object with g_object_unref() .  
GAppInfo  *g_file_query_default_handler (GFile *file, GCancellable *cancellable, GError **error);	# Returns the GAppInfo that is registered as the defaultapplication to handle the file specified by file.
	file		# a GFile to open
	cancellable		# optional GCancellable object, NULL to ignore
	error		# a GError , or NULL 
	return:		#  a GAppInfo if the handle was found,NULL if there were errors.When you are done with it, release it with g_object_unref() .  
gboolean g_file_measure_disk_usage (GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);	# Recursively measures the disk usage of file.
	file		# a GFile 
	flags		# GFileMeasureFlags 
	cancellable		#  optional GCancellable . 
	return:		#  TRUE if successful, with the out parameters set.FALSE otherwise, with errorset. 
void g_file_measure_disk_usage_async (GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data);	# Recursively measures the disk usage of file.
	file		# a GFile 
	flags		# GFileMeasureFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable . 
gboolean g_file_measure_disk_usage_finish (GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);	# Collects the results from an earlier call tog_file_measure_disk_usage_async() . See g_file_measure_disk_usage() formore information.
	file		# a GFile 
	result		# the GAsyncResult passed to your GAsyncReadyCallback 
	disk_usage		#  the number of bytes of disk space used. 
	return:		#  TRUE if successful, with the out parameters set.FALSE otherwise, with errorset. 
GMount  *g_file_find_enclosing_mount (GFile *file, GCancellable *cancellable, GError **error);	# Gets a GMount for the GFile .
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GMount where the fileis locatedor NULL on error.Free the returned object with g_object_unref() .  
void g_file_find_enclosing_mount_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously gets the mount for the file.
	file		# a GFile 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GMount  *g_file_find_enclosing_mount_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous find mount request.See g_file_find_enclosing_mount_async() .
	file		# a GFile 
	res		# a GAsyncResult 
	error		# a GError 
	return:		#  GMount for given fileor NULL on error.Free the returned object with g_object_unref() .  
GFileEnumerator  *g_file_enumerate_children (GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Gets the requested information about the files in a directory.The result is a GFileEnumerator object that will give outGFileInfo objects for all the files in the directory.
	file		# input GFile 
	attributes		# an attribute query string
	flags		# a set of GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  A GFileEnumerator if successful,NULL on error. Free the returned object with g_object_unref() .  
void g_file_enumerate_children_async (GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously gets the requested information about the filesin a directory. The result is a GFileEnumerator object that willgive out GFileInfo objects for all the files in the directory.
	file		# input GFile 
	attributes		# an attribute query string
	flags		# a set of GFileQueryInfoFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFileEnumerator  *g_file_enumerate_children_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an async enumerate children operation.See g_file_enumerate_children_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError 
	return:		#  a GFileEnumerator or NULL if an error occurred.Free the returned object with g_object_unref() .  
GFile  *g_file_set_display_name (GFile *file, const char *display_name, GCancellable *cancellable, GError **error);	# Renames file to the specified display name.
	file		# input GFile 
	display_name		# a string
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFile specifying what filewas renamed to,or NULL if there was an error.Free the returned object with g_object_unref() .  
void g_file_set_display_name_async (GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously sets the display name for a given GFile .
	file		# input GFile 
	display_name		# a string
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GFile  *g_file_set_display_name_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes setting a display name started withg_file_set_display_name_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFile or NULL on error.Free the returned object with g_object_unref() .  
gboolean g_file_delete (GFile *file, GCancellable *cancellable, GError **error);	# Deletes a file. If the file is a directory, it will only bedeleted if it is empty. This has the same semantics as g_unlink() .
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the file was deleted. FALSE otherwise. 
void g_file_delete_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously delete a file. If the file is a directory, it willonly be deleted if it is empty. This has the same semantics asg_unlink() .
	file		# input GFile 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		# the data to pass to callback function
gboolean g_file_delete_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes deleting a file started with g_file_delete_async() .
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the file was deleted. FALSE otherwise. 
gboolean g_file_trash (GFile *file, GCancellable *cancellable, GError **error);	# Sends file to the "Trashcan", if possible. This is similar todeleting it, but the user can recover it before emptying the trashcan.Not all file systems support trashing, so this call can return theG_IO_ERROR_NOT_SUPPORTED error.
	file		# GFile to send to trash
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE on successful trash, FALSE otherwise. 
void g_file_trash_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously sends file to the Trash location, if possible.
	file		# input GFile 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		# the data to pass to callback function
gboolean g_file_trash_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes an asynchronous file trashing operation, started withg_file_trash_async() .
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE on successful trash, FALSE otherwise. 
gboolean g_file_copy (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);	# Copies the file source to the location specified by destination.Can not handle recursive copies of directories.
	source		# input GFile 
	destination		# destination GFile 
	flags		# set of GFileCopyFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE on success, FALSE otherwise. 
void g_file_copy_async (GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);	# Copies the file source to the location specified by destinationasynchronously. For details of the behaviour, see g_file_copy() .
	source		# input GFile 
	destination		# destination GFile 
	flags		# set of GFileCopyFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
gboolean g_file_copy_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes copying the file started with g_file_copy_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a TRUE on success, FALSE on error. 
gboolean g_file_move (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);	# Tries to move the file or directory source to the location specifiedby destination. If native move operations are supported then this isused, otherwise a copy + delete fallback is used. The nativeimplementation may support moving directories (for instance on movesinside the same filesystem), but the fallback code does not.
	source		# GFile pointing to the source location
	destination		# GFile pointing to the destination location
	flags		# set of GFileCopyFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE on successful move, FALSE otherwise. 
gboolean g_file_make_directory (GFile *file, GCancellable *cancellable, GError **error);	# Creates a directory. Note that this will only create a child directoryof the immediate parent directory of the path or URI given by the GFile .To recursively create directories, see g_file_make_directory_with_parents() .This function will fail if the parent directory does not exist, settingerror to G_IO_ERROR_NOT_FOUND . If the file system doesn't supportcreating directories, this function will fail, setting error toG_IO_ERROR_NOT_SUPPORTED .
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE on successful creation, FALSE otherwise. 
void g_file_make_directory_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously creates a directory.
	file		# input GFile 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		# the data to pass to callback function
gboolean g_file_make_directory_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes an asynchronous directory creation, started withg_file_make_directory_async() .
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE on successful directory creation, FALSE otherwise. 
gboolean g_file_make_directory_with_parents (GFile *file, GCancellable *cancellable, GError **error);	# Creates a directory and any parent directories that may notexist similar to 'mkdir -p'. If the file system does not supportcreating directories, this function will fail, setting error toG_IO_ERROR_NOT_SUPPORTED . If the directory itself already exists,this function will fail setting error to G_IO_ERROR_EXISTS , unlikethe similar g_mkdir_with_parents() .
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if all directories have been successfully created, FALSE otherwise. 
gboolean g_file_make_symbolic_link (GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error);	# Creates a symbolic link named file which contains the stringsymlink_value.
	file		# a GFile with the name of the symlink to create
	symlink_value		#  a string with the path for the targetof the new symlink. 
	return:		#  TRUE on the creation of a new symlink, FALSE otherwise. 
GFileAttributeInfoList  *g_file_query_settable_attributes (GFile *file, GCancellable *cancellable, GError **error);	# Obtain the list of settable attributes for the file.
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileAttributeInfoList describing the settable attributes.When you are done with it, release it withg_file_attribute_info_list_unref()  
GFileAttributeInfoList  *g_file_query_writable_namespaces (GFile *file, GCancellable *cancellable, GError **error);	# Obtain the list of attribute namespaces where new attributescan be created by a user. An example of this is extendedattributes (in the "xattr" namespace).
	file		# input GFile 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileAttributeInfoList describing the writable namespaces.When you are done with it, release it withg_file_attribute_info_list_unref()  
gboolean g_file_set_attribute (GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets an attribute in the file with attribute name attribute to value.
	file		# input GFile 
	attribute		# a string containing the attribute's name
	type		# The type of the attribute
	value_p		#  a pointer to the value (or the pointeritself if the type is a pointer type). 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attribute was set, FALSE otherwise. 
gboolean g_file_set_attributes_from_info (GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Tries to set all attributes in the GFileInfo on the targetvalues, not stopping on the first error.
	file		# input GFile 
	info		# a GFileInfo 
	flags		# GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  FALSE if there was any error, TRUE otherwise. 
void g_file_set_attributes_async (GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously sets the attributes of file with info.
	file		# input GFile 
	info		# a GFileInfo 
	flags		# a GFileQueryInfoFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
gboolean g_file_set_attributes_finish (GFile *file, GAsyncResult *result, GFileInfo **info, GError **error);	# Finishes setting an attribute started in g_file_set_attributes_async() .
	file		# input GFile 
	result		# a GAsyncResult 
	info		#  a GFileInfo . 
	return:		#  TRUE if the attributes were set correctly, FALSE otherwise. 
gboolean g_file_set_attribute_string (GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets attribute of type G_FILE_ATTRIBUTE_TYPE_STRING to value.If attribute is of a different type, this operation will fail.
	file		# input GFile 
	attribute		# a string containing the attribute's name
	value		# a string containing the attribute's value
	flags		# GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributewas successfully set, FALSE otherwise. 
gboolean g_file_set_attribute_byte_string (GFile *file, const char *attribute, const char *value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets attribute of type G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to value.If attribute is of a different type, this operation will fail,returning FALSE .
	file		# input GFile 
	attribute		# a string containing the attribute's name
	value		# a string containing the attribute's new value
	flags		# a GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributewas successfully set to valuein the file, FALSE otherwise. 
gboolean g_file_set_attribute_uint32 (GFile *file, const char *attribute, guint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets attribute of type G_FILE_ATTRIBUTE_TYPE_UINT32 to value.If attribute is of a different type, this operation will fail.
	file		# input GFile 
	attribute		# a string containing the attribute's name
	value		# a guint32 containing the attribute's new value
	flags		# a GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributewas successfully set to valuein the file, FALSE otherwise. 
gboolean g_file_set_attribute_int32 (GFile *file, const char *attribute, gint32 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets attribute of type G_FILE_ATTRIBUTE_TYPE_INT32 to value.If attribute is of a different type, this operation will fail.
	file		# input GFile 
	attribute		# a string containing the attribute's name
	value		# a gint32 containing the attribute's new value
	flags		# a GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributewas successfully set to valuein the file, FALSE otherwise. 
gboolean g_file_set_attribute_uint64 (GFile *file, const char *attribute, guint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets attribute of type G_FILE_ATTRIBUTE_TYPE_UINT64 to value.If attribute is of a different type, this operation will fail.
	file		# input GFile 
	attribute		# a string containing the attribute's name
	value		# a guint64 containing the attribute's new value
	flags		# a GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributewas successfully set to valuein the file, FALSE otherwise. 
gboolean g_file_set_attribute_int64 (GFile *file, const char *attribute, gint64 value, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);	# Sets attribute of type G_FILE_ATTRIBUTE_TYPE_INT64 to value.If attribute is of a different type, this operation will fail.
	file		# input GFile 
	attribute		# a string containing the attribute's name
	value		# a guint64 containing the attribute's new value
	flags		# a GFileQueryInfoFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributewas successfully set, FALSE otherwise. 
void g_file_mount_mountable (GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Mounts a file of type G_FILE_TYPE_MOUNTABLE.Using mount_operation, you can request callbacks when, for instance,passwords are needed during authentication.
	file		# input GFile 
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation ,or NULL to avoid user interaction. 
	user_data		#  the data to pass to callback function. 
GFile  *g_file_mount_mountable_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes a mount operation. See g_file_mount_mountable() for details.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFile or NULL on error.Free the returned object with g_object_unref() .  
void g_file_unmount_mountable (GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_file_unmount_mountable has been deprecated since version 2.22 and should not be used in newly-written code.
	file		# input GFile 
	flags		# flags affecting the operation
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
gboolean g_file_unmount_mountable_finish (GFile *file, GAsyncResult *result, GError **error);	# g_file_unmount_mountable_finish has been deprecated since version 2.22 and should not be used in newly-written code.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the operation finished successfully.FALSE otherwise. 
void g_file_unmount_mountable_with_operation (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Unmounts a file of type G_FILE_TYPE_MOUNTABLE .
	file		# input GFile 
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation ,or NULL to avoid user interaction. 
gboolean g_file_unmount_mountable_with_operation_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes an unmount operation,see g_file_unmount_mountable_with_operation() for details.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the operation finished successfully.FALSE otherwise. 
void g_file_eject_mountable (GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_file_eject_mountable has been deprecated since version 2.22 and should not be used in newly-written code.
	file		# input GFile 
	flags		# flags affecting the operation
	cancellable		#  optional GCancellable object,NULL to ignore. 
	user_data		#  the data to pass to callback function. 
gboolean g_file_eject_mountable_finish (GFile *file, GAsyncResult *result, GError **error);	# g_file_eject_mountable_finish has been deprecated since version 2.22 and should not be used in newly-written code.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the filewas ejected successfully.FALSE otherwise. 
void g_file_eject_mountable_with_operation (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Starts an asynchronous eject on a mountable.When this operation has completed, callback will be called withuser_user data, and the operation can be finalized withg_file_eject_mountable_with_operation_finish() .
	file		# input GFile 
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation ,or NULL to avoid user interaction. 
gboolean g_file_eject_mountable_with_operation_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes an asynchronous eject operation started byg_file_eject_mountable_with_operation() .
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the filewas ejected successfully.FALSE otherwise. 
void g_file_start_mountable (GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Starts a file of type G_FILE_TYPE_MOUNTABLE .Using start_operation, you can request callbacks when, for instance,passwords are needed during authentication.
	file		# input GFile 
	flags		# flags affecting the operation
	start_operation		#  a GMountOperation , or NULL to avoid user interaction. 
gboolean g_file_start_mountable_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes a start operation. See g_file_start_mountable() for details.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the operation finished successfully. FALSE otherwise. 
void g_file_stop_mountable (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Stops a file of type G_FILE_TYPE_MOUNTABLE .
	file		# input GFile 
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation ,or NULL to avoid user interaction. 
gboolean g_file_stop_mountable_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes an stop operation, see g_file_stop_mountable() for details.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the operation finished successfully.FALSE otherwise. 
void g_file_poll_mountable (GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Polls a file of type G_FILE_TYPE_MOUNTABLE .
	file		# input GFile 
	cancellable		# optional GCancellable object, NULL to ignore
	callback		#  a GAsyncReadyCallback to callwhen the request is satisfied, or NULL . 
gboolean g_file_poll_mountable_finish (GFile *file, GAsyncResult *result, GError **error);	# Finishes a poll operation. See g_file_poll_mountable() for details.
	file		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if the operation finished successfully. FALSE otherwise. 
void g_file_mount_enclosing_volume (GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Starts a mount_operation, mounting the volume that containsthe file location.
	location		# input GFile 
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation or NULL to avoid user interaction. 
	user_data		# the data to pass to callback function
gboolean g_file_mount_enclosing_volume_finish (GFile *location, GAsyncResult *result, GError **error);	# Finishes a mount operation started by g_file_mount_enclosing_volume() .
	location		# input GFile 
	result		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  TRUE if successful. If an error has occurred,this function will return FALSE and set errorappropriately if present. 
GFileMonitor  *g_file_monitor_directory (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);	# Obtains a directory monitor for the given file.This may fail if directory monitoring is not supported.
	file		# input GFile 
	flags		# a set of GFileMonitorFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileMonitor for the given file,or NULL on error.Free the returned object with g_object_unref() .  
GFileMonitor  *g_file_monitor_file (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);	# Obtains a file monitor for the given file. If no file notificationmechanism exists, then regular polling of the file is used.
	file		# input GFile 
	flags		# a set of GFileMonitorFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileMonitor for the given file,or NULL on error.Free the returned object with g_object_unref() .  
GFileMonitor  *g_file_monitor (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);	# Obtains a file or directory monitor for the given file,depending on the type of the file.
	file		# input GFile 
	flags		# a set of GFileMonitorFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileMonitor for the given file,or NULL on error.Free the returned object with g_object_unref() .  
gboolean g_file_load_contents (GFile *file, GCancellable *cancellable, char **contents, gsize *length, char **etag_out, GError **error);	# Loads the content of the file into memory. The data is alwayszero-terminated, but this is not included in the resultant length.The returned content should be freed with g_free() when no longerneeded.
	file		# input GFile 
	cancellable		# optional GCancellable object, NULL to ignore
	contents		#  a location to place the contents of the file. 
	return:		#  TRUE if the file's contents were successfully loaded.FALSE if there were errors. 
void g_file_load_contents_async (GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Starts an asynchronous load of the file's contents.
	file		# input GFile 
	cancellable		# optional GCancellable object, NULL to ignore
	callback		# a GAsyncReadyCallback to call when the request is satisfied
	user_data		# the data to pass to callback function
gboolean g_file_load_contents_finish (GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error);	# Finishes an asynchronous load of the file's contents.The contents are placed in contents, and length is set to thesize of the contents string. The content should be freed withg_free() when no longer needed. If etag_out is present, it will beset to the new entity tag for the file.
	file		# input GFile 
	res		# a GAsyncResult 
	contents		#  a location to place the contents of the file. 
	return:		#  TRUE if the load was successful. If FALSE and errorispresent, it will be set appropriately. 
void g_file_load_partial_contents_async (GFile *file, GCancellable *cancellable, GFileReadMoreCallback read_more_callback, GAsyncReadyCallback callback, gpointer user_data);	# Reads the partial contents of a file. A GFileReadMoreCallback shouldbe used to stop reading from the file when appropriate, else thisfunction will behave exactly as g_file_load_contents_async() . Thisoperation can be finished by g_file_load_partial_contents_finish() .
	file		# input GFile 
	cancellable		# optional GCancellable object, NULL to ignore
	read_more_callback		# a GFileReadMoreCallback to receive partial dataand to specify whether further data should be read
	callback		# a GAsyncReadyCallback to call when the request is satisfied
	user_data		# the data to pass to the callback functions
gboolean g_file_load_partial_contents_finish (GFile *file, GAsyncResult *res, char **contents, gsize *length, char **etag_out, GError **error);	# Finishes an asynchronous partial load operation that was startedwith g_file_load_partial_contents_async() . The data is alwayszero-terminated, but this is not included in the resultant length.The returned content should be freed with g_free() when no longerneeded.
	file		# input GFile 
	res		# a GAsyncResult 
	contents		#  a location to place the contents of the file. 
	return:		#  TRUE if the load was successful. If FALSE and errorispresent, it will be set appropriately. 
gboolean g_file_replace_contents (GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, char **new_etag, GCancellable *cancellable, GError **error);	# Replaces the contents of file with contents of length bytes.
	file		# input GFile 
	contents		#  a string containing the new contents for file. 
	flags		# a set of GFileCreateFlags 
	new_etag		#  a location to a new entity tag for the document. This should be freed with 
	error		# a GError , or NULL 
	return:		#  TRUE if successful. If an error has occurred, this functionwill return FALSE and set errorappropriately if present. 
void g_file_replace_contents_async (GFile *file, const char *contents, gsize length, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Starts an asynchronous replacement of file with the givencontents of length bytes. etag will replace the document'scurrent entity tag.
	file		# input GFile 
	contents		#  string of contents to replace the file with. 
	flags		# a set of GFileCreateFlags 
	cancellable		# optional GCancellable object, NULL to ignore
	callback		# a GAsyncReadyCallback to call when the request is satisfied
	user_data		# the data to pass to callback function
void g_file_replace_contents_bytes_async (GFile *file, GBytes *contents, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Same as g_file_replace_contents_async() but takes a GBytes input instead.This function will keep a ref on contents until the operation is done.Unlike g_file_replace_contents_async() this allows forgetting about thecontent without waiting for the callback.
	file		# input GFile 
	contents		# a GBytes 
	etag		#  a new entity tag for the file, or NULL . 
	flags		# a set of GFileCreateFlags 
	cancellable		# optional GCancellable object, NULL to ignore
	callback		# a GAsyncReadyCallback to call when the request is satisfied
	user_data		# the data to pass to callback function
gboolean g_file_replace_contents_finish (GFile *file, GAsyncResult *res, char **new_etag, GError **error);	# Finishes an asynchronous replace of the given file. Seeg_file_replace_contents_async() . Sets new_etag to the new entitytag for the document, if present.
	file		# input GFile 
	res		# a GAsyncResult 
	new_etag		#  a location of a new entity tag for the document. This should be freed with 
	return:		#  TRUE on success, FALSE on failure. 
gboolean g_file_copy_attributes (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GError **error);	# Copies the file attributes from source to destination.
	source		# a GFile with attributes
	destination		# a GFile to copy attributes to
	flags		# a set of GFileCopyFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  TRUE if the attributes were copied successfully,FALSE otherwise. 
GFileIOStream  *g_file_create_readwrite (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);	#创建对象:file and returns a stream for reading andwriting to it. The file must not already exist.
	file		# a GFile 
	flags		# a set of GFileCreateFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileIOStream for the newly createdfile, or NULL on error.Free the returned object with g_object_unref() .  
void g_file_create_readwrite_async (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously创建对象:file and returns a streamfor reading and writing to it. The file must not already exist.
	file		# input GFile 
	flags		# a set of GFileCreateFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
GFileIOStream  *g_file_create_readwrite_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file create operation started withg_file_create_readwrite_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFileIOStream or NULL on error.Free the returned object with g_object_unref() .  
GFileIOStream  *g_file_open_readwrite (GFile *file, GCancellable *cancellable, GError **error);	# Opens an existing file for reading and writing. The result isa GFileIOStream that can be used to read and write the contentsof the file.
	file		# GFile to open
	cancellable		#  a GCancellable . 
	return:		#  GFileIOStream or NULL on error.Free the returned object with g_object_unref() .  
void g_file_open_readwrite_async (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously opens file for reading and writing.
	file		# input GFile 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
GFileIOStream  *g_file_open_readwrite_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file read operation started withg_file_open_readwrite_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFileIOStream or NULL on error.Free the returned object with g_object_unref() .  
GFileIOStream  *g_file_replace_readwrite (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);	# Returns an output stream for overwriting the file in readwrite mode,possibly creating a backup copy of the file first. If the file doesn'texist, it will be created.
	file		# a GFile 
	etag		#  an optional entity tag for the current GFile , or NULL to ignore. 
	flags		# a set of GFileCreateFlags 
	cancellable		#  optional GCancellable object,NULL to ignore. 
	return:		#  a GFileIOStream or NULL on error.Free the returned object with g_object_unref() .  
void g_file_replace_readwrite_async (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously overwrites the file in read-write mode,replacing the contents, possibly creating a backup copyof the file first.
	file		# input GFile 
	etag		#  an entity tag for the current GFile ,or NULL to ignore. 
	flags		# a set of GFileCreateFlags 
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object,NULL to ignore. 
GFileIOStream  *g_file_replace_readwrite_finish (GFile *file, GAsyncResult *res, GError **error);	# Finishes an asynchronous file replace operation started withg_file_replace_readwrite_async() .
	file		# input GFile 
	res		# a GAsyncResult 
	error		# a GError , or NULL 
	return:		#  a GFileIOStream , or NULL on error.Free the returned object with g_object_unref() .  
gboolean g_file_supports_thread_contexts (GFile *file);	# Checks if file supportsthread-default contexts.If this returns FALSE , you cannot perform asynchronous operations onfile in a thread that has a thread-default context.
	file		# a GFile 
	return:		#  Whether or not filesupports thread-default contexts. 
GFileAttributeInfoList  *g_file_attribute_info_list_new (void );	#创建对象:file attribute info list.
	return:		#  a GFileAttributeInfoList . 
GFileAttributeInfoList  *g_file_attribute_info_list_ref (GFileAttributeInfoList *list);	# References a file attribute info list.
	list		# a GFileAttributeInfoList to reference.
	return:		#  GFileAttributeInfoList or NULL on error. 
void g_file_attribute_info_list_unref (GFileAttributeInfoList *list);	# Removes a reference from the given list. If the reference countfalls to zero, the list is deleted.
	list		# The GFileAttributeInfoList to unreference.
GFileAttributeInfoList  *g_file_attribute_info_list_dup (GFileAttributeInfoList *list);	# Makes a duplicate of a file attribute info list.
	list		# a GFileAttributeInfoList to duplicate.
	return:		#  a copy of the given list. 
GFileAttributeInfo  *g_file_attribute_info_list_lookup (GFileAttributeInfoList *list, const char *name);	# Gets the file attribute with the name name from list.
	list		# a GFileAttributeInfoList .
	name		# the name of the attribute to lookup.
	return:		#  a GFileAttributeInfo for the name, or NULL if anattribute isn't found. 
void g_file_attribute_info_list_add (GFileAttributeInfoList *list, const char *name, GFileAttributeType type, GFileAttributeInfoFlags flags);	# Adds a new attribute with name to the list, settingits type and flags.
	list		# a GFileAttributeInfoList .
	name		# the name of the attribute to add.
	type		# the GFileAttributeType for the attribute.
	flags		# GFileAttributeInfoFlags for the attribute.
GFileInfo  *g_file_info_new (void );	#创建对象:file info structure.
	return:		#  a GFileInfo . 
GFileInfo  *g_file_info_dup (GFileInfo *other);	# Duplicates a file info structure.
	other		# a GFileInfo .
	return:		#  a duplicate GFileInfo of other.  
void g_file_info_copy_into (GFileInfo *src_info, GFileInfo *dest_info);	# First clears all of the GFileAttribute of dest_info,and then copies all of the file attributes from src_info to dest_info.
	src_info		# source to copy attributes from.
	dest_info		# destination to copy attributes to.
gboolean g_file_info_has_attribute (GFileInfo *info, const char *attribute);	# Checks if a file info structure has an attribute named attribute.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  TRUE if Ginfohas an attribute named attribute,FALSE otherwise. 
gboolean g_file_info_has_namespace (GFileInfo *info, const char *name_space);	# Checks if a file info structure has an attribute in thespecified name_space.
	info		# a GFileInfo .
	name_space		# a file attribute namespace.
	return:		#  TRUE if Ginfohas an attribute in name_space,FALSE otherwise. 
char  **g_file_info_list_attributes (GFileInfo *info, const char *name_space);	# Lists the file info structure's attributes.
	info		# a GFileInfo .
	name_space		#  a file attribute key's namespace, or NULL to listall attributes. 
	return:		#  anull-terminated array of strings of all of the possible attributetypes for the given name_space, or NULL on error.  
GFileAttributeType g_file_info_get_attribute_type (GFileInfo *info, const char *attribute);	# Gets the attribute type for an attribute key.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  a GFileAttributeType for the given attribute, orG_FILE_ATTRIBUTE_TYPE_INVALID if the key is not set. 
void g_file_info_remove_attribute (GFileInfo *info, const char *attribute);	# Removes all cases of attribute from info if it exists.
	info		# a GFileInfo .
	attribute		# a file attribute key.
char  *g_file_info_get_attribute_as_string (GFileInfo *info, const char *attribute);	# Gets the value of a attribute, formated as a string.This escapes things as needed to make the string validutf8.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  a UTF-8 string associated with the given attribute.When you're done with the string it must be freed with g_free() . 
gboolean g_file_info_get_attribute_data (GFileInfo *info, const char *attribute, GFileAttributeType *type, gpointer *value_pp, GFileAttributeStatus *status);	# Gets the attribute type, value and status for an attribute key.
	info		# a GFileInfo 
	attribute		# a file attribute key
	type		#  return location for the attribute type, or NULL . 
	return:		#  TRUE if infohas an attribute named attribute,FALSE otherwise.  
GFileAttributeStatus g_file_info_get_attribute_status (GFileInfo *info, const char *attribute);	# Gets the attribute status for an attribute key.
	info		# a GFileInfo 
	attribute		# a file attribute key
	return:		#  a GFileAttributeStatus for the given attribute, orG_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid. 
char  *g_file_info_get_attribute_string (GFileInfo *info, const char *attribute);	# Gets the value of a string attribute. If the attribute doesnot contain a string, NULL will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  the contents of the attributevalue as a UTF-8 string, orNULL otherwise. 
char  **g_file_info_get_attribute_stringv (GFileInfo *info, const char *attribute);	# Gets the value of a stringv attribute. If the attribute doesnot contain a stringv, NULL will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  the contents of the attributevalue as a stringv, orNULL otherwise. Do not free. These returned strings are UTF-8.  
char  *g_file_info_get_attribute_byte_string (GFileInfo *info, const char *attribute);	# Gets the value of a byte string attribute. If the attribute doesnot contain a byte string, NULL will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  the contents of the attributevalue as a byte string, orNULL otherwise. 
gboolean g_file_info_get_attribute_boolean (GFileInfo *info, const char *attribute);	# Gets the value of a boolean attribute. If the attribute does notcontain a boolean value, FALSE will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  the boolean value contained within the attribute. 
guint32 g_file_info_get_attribute_uint32 (GFileInfo *info, const char *attribute);	# Gets an unsigned 32-bit integer contained within the attribute. If theattribute does not contain an unsigned 32-bit integer, or is invalid,0 will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  an unsigned 32-bit integer from the attribute. 
gint32 g_file_info_get_attribute_int32 (GFileInfo *info, const char *attribute);	# Gets a signed 32-bit integer contained within the attribute. If theattribute does not contain a signed 32-bit integer, or is invalid,0 will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  a signed 32-bit integer from the attribute. 
guint64 g_file_info_get_attribute_uint64 (GFileInfo *info, const char *attribute);	# Gets a unsigned 64-bit integer contained within the attribute. If theattribute does not contain an unsigned 64-bit integer, or is invalid,0 will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  a unsigned 64-bit integer from the attribute. 
gint64 g_file_info_get_attribute_int64 (GFileInfo *info, const char *attribute);	# Gets a signed 64-bit integer contained within the attribute. If theattribute does not contain an signed 64-bit integer, or is invalid,0 will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  a signed 64-bit integer from the attribute. 
GObject  *g_file_info_get_attribute_object (GFileInfo *info, const char *attribute);	# Gets the value of a GObject attribute. If the attribute doesnot contain a GObject , NULL will be returned.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	return:		#  a GObject associated with the given attribute, orNULL otherwise.  
void g_file_info_set_attribute (GFileInfo *info, const char *attribute, GFileAttributeType type, gpointer value_p);	# Sets the attribute to contain the given value, if possible. To unset theattribute, use G_ATTRIBUTE_TYPE_INVALID for type.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	type		# a GFileAttributeType 
	value_p		#  pointer to the value. 
gboolean g_file_info_set_attribute_status (GFileInfo *info, const char *attribute, GFileAttributeStatus status);	# Sets the attribute status for an attribute key. This is onlyneeded by external code that implement g_file_set_attributes_from_info() or similar functions.
	info		# a GFileInfo 
	attribute		# a file attribute key
	status		# a GFileAttributeStatus 
	return:		#  TRUE if the status was changed, FALSE if the key was not set. 
void g_file_info_set_attribute_string (GFileInfo *info, const char *attribute, const char *attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# a UTF-8 string.
void g_file_info_set_attribute_stringv (GFileInfo *info, const char *attribute, char **attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key
	attr_value		#  a NULL terminated array of UTF-8 strings. 
void g_file_info_set_attribute_byte_string (GFileInfo *info, const char *attribute, const char *attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# a byte string.
void g_file_info_set_attribute_boolean (GFileInfo *info, const char *attribute, gboolean attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# a boolean value.
void g_file_info_set_attribute_uint32 (GFileInfo *info, const char *attribute, guint32 attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# an unsigned 32-bit integer.
void g_file_info_set_attribute_int32 (GFileInfo *info, const char *attribute, gint32 attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# a signed 32-bit integer
void g_file_info_set_attribute_uint64 (GFileInfo *info, const char *attribute, guint64 attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# an unsigned 64-bit integer.
void g_file_info_set_attribute_int64 (GFileInfo *info, const char *attribute, gint64 attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# attribute name to set.
	attr_value		# int64 value to set attribute to.
void g_file_info_set_attribute_object (GFileInfo *info, const char *attribute, GObject *attr_value);	# Sets the attribute to contain the given attr_value,if possible.
	info		# a GFileInfo .
	attribute		# a file attribute key.
	attr_value		# a GObject .
void g_file_info_clear_status (GFileInfo *info);	# Clears the status information from info.
	info		# a GFileInfo .
GFileType g_file_info_get_file_type (GFileInfo *info);	# Gets a file's type (whether it is a regular file, symlink, etc).This is different from the file's content type, see g_file_info_get_content_type() .
	info		# a GFileInfo .
	return:		#  a GFileType for the given file. 
gboolean g_file_info_get_is_hidden (GFileInfo *info);	# Checks if a file is hidden.
	info		# a GFileInfo .
	return:		#  TRUE if the file is a hidden file, FALSE otherwise. 
gboolean g_file_info_get_is_backup (GFileInfo *info);	# Checks if a file is a backup file.
	info		# a GFileInfo .
	return:		#  TRUE if file is a backup file, FALSE otherwise. 
gboolean g_file_info_get_is_symlink (GFileInfo *info);	# Checks if a file is a symlink.
	info		# a GFileInfo .
	return:		#  TRUE if the given infois a symlink. 
char  *g_file_info_get_name (GFileInfo *info);	# Gets the name for a file.
	info		# a GFileInfo .
	return:		#  a string containing the file name.  
char  *g_file_info_get_display_name (GFileInfo *info);	# Gets a display name for a file.
	info		# a GFileInfo .
	return:		#  a string containing the display name. 
char  *g_file_info_get_edit_name (GFileInfo *info);	# Gets the edit name for a file.
	info		# a GFileInfo .
	return:		#  a string containing the edit name. 
GIcon  *g_file_info_get_icon (GFileInfo *info);	# Gets the icon for a file.
	info		# a GFileInfo .
	return:		#  GIcon for the given info.  
GIcon  *g_file_info_get_symbolic_icon (GFileInfo *info);	# Gets the symbolic icon for a file.
	info		# a GFileInfo .
	return:		#  GIcon for the given info.  
char  *g_file_info_get_content_type (GFileInfo *info);	# Gets the file's content type.
	info		# a GFileInfo .
	return:		#  a string containing the file's content type. 
goffset g_file_info_get_size (GFileInfo *info);	# Gets the file's size.
	info		# a GFileInfo .
	return:		#  a goffset containing the file's size. 
void g_file_info_get_modification_time (GFileInfo *info, GTimeVal *result);	# Gets the modification time of the current info and sets itin result.
	info		# a GFileInfo .
	result		#  a GTimeVal . 
char  *g_file_info_get_symlink_target (GFileInfo *info);	# Gets the symlink target for a given GFileInfo .
	info		# a GFileInfo .
	return:		#  a string containing the symlink target. 
char  *g_file_info_get_etag (GFileInfo *info);	# Gets the entity tag for a givenGFileInfo . See G_FILE_ATTRIBUTE_ETAG_VALUE .
	info		# a GFileInfo .
	return:		#  a string containing the value of the "etag:value" attribute. 
gint32 g_file_info_get_sort_order (GFileInfo *info);	# Gets the value of the sort_order attribute from the GFileInfo .See G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER .
	info		# a GFileInfo .
	return:		#  a gint32 containing the value of the "standard::sort_order" attribute. 
GDateTime  *g_file_info_get_deletion_date (GFileInfo *info);	# Returns the GDateTime representing the deletion date of the file, asavailable in G_FILE_ATTRIBUTE_TRASH_DELETION_DATE. If theG_FILE_ATTRIBUTE_TRASH_DELETION_DATE attribute is unset, NULL is returned.
	info		# a GFileInfo .
	return:		#  a GDateTime , or NULL . 
void g_file_info_set_attribute_mask (GFileInfo *info, GFileAttributeMatcher *mask);	# Sets mask on info to match specific attribute types.
	info		# a GFileInfo .
	mask		# a GFileAttributeMatcher .
void g_file_info_unset_attribute_mask (GFileInfo *info);	# Unsets a mask set by g_file_info_set_attribute_mask() , if oneis set.
	info		# GFileInfo .
void g_file_info_set_file_type (GFileInfo *info, GFileType type);	# Sets the file type in a GFileInfo to type.See G_FILE_ATTRIBUTE_STANDARD_TYPE .
	info		# a GFileInfo .
	type		# a GFileType .
void g_file_info_set_is_hidden (GFileInfo *info, gboolean is_hidden);	# Sets the "is_hidden" attribute in a GFileInfo according to is_hidden.See G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN .
	info		# a GFileInfo .
	is_hidden		# a gboolean .
void g_file_info_set_is_symlink (GFileInfo *info, gboolean is_symlink);	# Sets the "is_symlink" attribute in a GFileInfo according to is_symlink.See G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK .
	info		# a GFileInfo .
	is_symlink		# a gboolean .
void g_file_info_set_name (GFileInfo *info, const char *name);	# Sets the name attribute for the current GFileInfo .See G_FILE_ATTRIBUTE_STANDARD_NAME .
	info		# a GFileInfo .
	name		#  a string containing a name. 
void g_file_info_set_display_name (GFileInfo *info, const char *display_name);	# Sets the display name for the current GFileInfo .See G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME .
	info		# a GFileInfo .
	display_name		# a string containing a display name.
void g_file_info_set_edit_name (GFileInfo *info, const char *edit_name);	# Sets the edit name for the current file.See G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME .
	info		# a GFileInfo .
	edit_name		# a string containing an edit name.
void g_file_info_set_icon (GFileInfo *info, GIcon *icon);	# Sets the icon for a given GFileInfo .See G_FILE_ATTRIBUTE_STANDARD_ICON .
	info		# a GFileInfo .
	icon		# a GIcon .
void g_file_info_set_symbolic_icon (GFileInfo *info, GIcon *icon);	# Sets the symbolic icon for a given GFileInfo .See G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON .
	info		# a GFileInfo .
	icon		# a GIcon .
void g_file_info_set_content_type (GFileInfo *info, const char *content_type);	# Sets the content type attribute for a given GFileInfo .See G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE .
	info		# a GFileInfo .
	content_type		# a content type. See GContentType 
void g_file_info_set_size (GFileInfo *info, goffset size);	# Sets the G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file infoto the given size.
	info		# a GFileInfo .
	size		# a goffset containing the file's size.
void g_file_info_set_modification_time (GFileInfo *info, GTimeVal *mtime);	# Sets the G_FILE_ATTRIBUTE_TIME_MODIFIED attribute in the fileinfo to the given time value.
	info		# a GFileInfo .
	mtime		# a GTimeVal .
void g_file_info_set_symlink_target (GFileInfo *info, const char *symlink_target);	# Sets the G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file infoto the given symlink target.
	info		# a GFileInfo .
	symlink_target		# a static string containing a path to a symlink target.
void g_file_info_set_sort_order (GFileInfo *info, gint32 sort_order);	# Sets the sort order attribute in the file info structure. SeeG_FILE_ATTRIBUTE_STANDARD_SORT_ORDER .
	info		# a GFileInfo .
	sort_order		# a sort order integer.
GFileAttributeMatcher  *g_file_attribute_matcher_new (const char *attributes);	#创建对象:file attribute matcher, which matches attributesagainst a given string. GFileAttributeMatchers are referencecounted structures, and are created with a reference count of 1. Ifthe number of references falls to 0, the GFileAttributeMatcher isautomatically destroyed.
	attributes		# an attribute string to match.
	return:		#  a GFileAttributeMatcher  
GFileAttributeMatcher  *g_file_attribute_matcher_ref (GFileAttributeMatcher *matcher);	# References a file attribute matcher.
	matcher		# a GFileAttributeMatcher .
	return:		#  a GFileAttributeMatcher . 
GFileAttributeMatcher  *g_file_attribute_matcher_subtract (GFileAttributeMatcher *matcher, GFileAttributeMatcher *subtract);	# Subtracts all attributes of subtract from matcher and returnsa matcher that supports those attributes.
	matcher		# Matcher to subtract from 
	subtract		# The matcher to subtract
	return:		#  A file attribute matcher matching all attributes ofmatcherthat are not matched by subtract 
void g_file_attribute_matcher_unref (GFileAttributeMatcher *matcher);	# Unreferences matcher. If the reference count falls below 1,the matcher is automatically freed.
	matcher		# a GFileAttributeMatcher .
gboolean g_file_attribute_matcher_matches (GFileAttributeMatcher *matcher, const char *attribute);	# Checks if an attribute will be matched by an attribute matcher. Ifthe matcher was created with the "*" matching string, this functionwill always return TRUE .
	matcher		# a GFileAttributeMatcher .
	attribute		# a file attribute key.
	return:		#  TRUE if attributematches matcher. FALSE otherwise. 
gboolean g_file_attribute_matcher_matches_only (GFileAttributeMatcher *matcher, const char *attribute);	# Checks if a attribute matcher only matches a given attribute. Alwaysreturns FALSE if "*" was used when creating the matcher.
	matcher		# a GFileAttributeMatcher .
	attribute		# a file attribute key.
	return:		#  TRUE if the matcher only matches attribute. FALSE otherwise. 
gboolean g_file_attribute_matcher_enumerate_namespace (GFileAttributeMatcher *matcher, const char *ns);	# Checks if the matcher will match all of the keys in a given namespace.This will always return TRUE if a wildcard character is in use (e.g. ifmatcher was created with "standard::*" and ns is "standard", or if matcher was createdusing "*" and namespace is anything.)
	matcher		# a GFileAttributeMatcher .
	ns		# a string containing a file attribute namespace.
	return:		#  TRUE if the matcher matches all of the entriesin the given ns, FALSE otherwise. 
char  *g_file_attribute_matcher_enumerate_next (GFileAttributeMatcher *matcher);	# Gets the next matched attribute from a GFileAttributeMatcher .
	matcher		# a GFileAttributeMatcher .
	return:		#  a string containing the next attribute or NULL ifno more attribute exist. 
char  *g_file_attribute_matcher_to_string (GFileAttributeMatcher *matcher);	# Prints what the matcher is matching against. The format will be equal to the format passed to g_file_attribute_matcher_new() .The output however, might not be identical, as the matcher maydecide to use a different order or omit needless parts.
	matcher		#  a GFileAttributeMatcher . 
	return:		#  a string describing the attributes the matcher matchesagainst or NULL if matcherwas NULL . 
gboolean g_file_enumerator_iterate (GFileEnumerator *direnum, GFileInfo **out_info, GFile **out_child, GCancellable *cancellable, GError **error);	# This is a version of g_file_enumerator_next_file() that's easier touse correctly from C programs. With g_file_enumerator_next_file() ,the gboolean return value signifies "end of iteration or error", whichrequires allocation of a temporary GError .
	direnum		# an open GFileEnumerator 
	out_info		#  Output location for the next GFileInfo , or NULL . 
	error		# a GError 
GFileInfo  *g_file_enumerator_next_file (GFileEnumerator *enumerator, GCancellable *cancellable, GError **error);	# Returns information for the next file in the enumerated object.Will block until the information is available. The GFileInfo returned from this function will contain attributes that match the attribute string that was passed when the GFileEnumerator was created.
	enumerator		# a GFileEnumerator .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  A GFileInfo or NULL on erroror end of enumerator. Free the returned object withg_object_unref() when no longer needed.  
gboolean g_file_enumerator_close (GFileEnumerator *enumerator, GCancellable *cancellable, GError **error);	# Releases all resources used by this enumerator, making theenumerator return G_IO_ERROR_CLOSED on all calls.
	enumerator		# a GFileEnumerator .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE on success or FALSE on error. 
void g_file_enumerator_next_files_async (GFileEnumerator *enumerator, int num_files, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request information for a number of files from the enumerator asynchronously.When all i/o for the operation is finished the callback will be called withthe requested information. 
	enumerator		# a GFileEnumerator .
	num_files		# the number of file info objects to request
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GList  *g_file_enumerator_next_files_finish (GFileEnumerator *enumerator, GAsyncResult *result, GError **error);	# Finishes the asynchronous operation started with g_file_enumerator_next_files_async() .
	enumerator		# a GFileEnumerator .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a GList of GFileInfos . You must free the list withg_list_free() and unref the infos with g_object_unref() when you'redone with them.  
void g_file_enumerator_close_async (GFileEnumerator *enumerator, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously closes the file enumerator. 
	enumerator		# a GFileEnumerator .
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		#  the data to pass to callback function. 
gboolean g_file_enumerator_close_finish (GFileEnumerator *enumerator, GAsyncResult *result, GError **error);	# Finishes closing a file enumerator, started from g_file_enumerator_close_async() .
	enumerator		# a GFileEnumerator .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the close operation has finished successfully. 
gboolean g_file_enumerator_is_closed (GFileEnumerator *enumerator);	# Checks if the file enumerator has been closed.
	enumerator		# a GFileEnumerator .
	return:		#  TRUE if the enumeratoris closed. 
gboolean g_file_enumerator_has_pending (GFileEnumerator *enumerator);	# Checks if the file enumerator has pending operations.
	enumerator		# a GFileEnumerator .
	return:		#  TRUE if the enumeratorhas pending operations. 
void g_file_enumerator_set_pending (GFileEnumerator *enumerator, gboolean pending);	# Sets the file enumerator as having pending operations.
	enumerator		# a GFileEnumerator .
	pending		# a boolean value.
GFile  *g_file_enumerator_get_container (GFileEnumerator *enumerator);	# Get the GFile container which is being enumerated.
	enumerator		# a GFileEnumerator 
	return:		#  the GFile which is being enumerated.  
GFile  *g_file_enumerator_get_child (GFileEnumerator *enumerator, GFileInfo *info);	# Return a new GFile which refers to the file named by info in the sourcedirectory of enumerator. This function is primarily intended to be usedinside loops with g_file_enumerator_next_file() .
	enumerator		# a GFileEnumerator 
	info		# a GFileInfo gotten from 
	return:		#  a GFile for the GFileInfo passed it.  
GIOErrorEnum g_io_error_from_errno (gint err_no);	# Converts errno.h error codes into GIO error codes. The fallbackvalue G_IO_ERROR_FAILED is returned for error codes not currentlyhandled (but note that future GLib releases may return a morespecific value instead).
	err_no		# Error number as defined in errno.h.
	return:		#  GIOErrorEnum value for the given errno.h error number. 
GIOErrorEnum g_io_error_from_win32_error (gint error_code);	# Converts some common error codes (as returned from GetLastError()or WSAGetLastError()) into GIO error codes. The fallback valueG_IO_ERROR_FAILED is returned for error codes not currentlyhandled (but note that future GLib releases may return a morespecific value instead).
	error_code		# Windows error number.
	return:		#  GIOErrorEnum value for the given error number. 
GMountOperation  *g_mount_operation_new (void );	#创建对象:mount operation.
	return:		#  a GMountOperation . 
char  *g_mount_operation_get_username (GMountOperation *op);	# Get the user name from the mount operation.
	op		# a GMountOperation .
	return:		#  a string containing the user name. 
void g_mount_operation_set_username (GMountOperation *op, const char *username);	# Sets the user name within op to username.
	op		# a GMountOperation .
	username		# input username.
char  *g_mount_operation_get_password (GMountOperation *op);	# Gets a password from the mount operation.
	op		# a GMountOperation .
	return:		#  a string containing the password within op. 
void g_mount_operation_set_password (GMountOperation *op, const char *password);	# Sets the mount operation's password to password.
	op		# a GMountOperation .
	password		# password to set.
gboolean g_mount_operation_get_anonymous (GMountOperation *op);	# Check to see whether the mount operation is being used for an anonymous user.
	op		# a GMountOperation .
	return:		#  TRUE if mount operation is anonymous.  
void g_mount_operation_set_anonymous (GMountOperation *op, gboolean anonymous);	# Sets the mount operation to use an anonymous user if anonymous is TRUE .
	op		# a GMountOperation .
	anonymous		# boolean value.
char  *g_mount_operation_get_domain (GMountOperation *op);	# Gets the domain of the mount operation.
	op		# a GMountOperation .
	return:		#  a string set to the domain.  
void g_mount_operation_set_domain (GMountOperation *op, const char *domain);	# Sets the mount operation's domain.
	op		# a GMountOperation .
	domain		# the domain to set.
GPasswordSave g_mount_operation_get_password_save (GMountOperation *op);	# Gets the state of saving passwords for the mount operation.
	op		# a GMountOperation .
	return:		#  a GPasswordSave flag.  
void g_mount_operation_set_password_save (GMountOperation *op, GPasswordSave save);	# Sets the state of saving passwords for the mount operation.
	op		# a GMountOperation .
	save		# a set of GPasswordSave flags.
int g_mount_operation_get_choice (GMountOperation *op);	# Gets a choice from the mount operation.
	op		# a GMountOperation .
	return:		#  an integer containing an index of the user's choice fromthe choice's list, or 0. 
void g_mount_operation_set_choice (GMountOperation *op, int choice);	# Sets a default choice for the mount operation.
	op		# a GMountOperation .
	choice		# an integer.
void g_mount_operation_reply (GMountOperation *op, GMountOperationResult result);	# Emits the “reply” signal.
	op		# a GMountOperation 
	result		# a GMountOperationResult 
gboolean g_file_monitor_cancel (GFileMonitor *monitor);	# Cancels a file monitor.
	monitor		# a GFileMonitor .
	return:		#  always TRUE  
gboolean g_file_monitor_is_cancelled (GFileMonitor *monitor);	# Returns whether the monitor is canceled.
	monitor		# a GFileMonitor 
	return:		#  TRUE if monitor is canceled. FALSE otherwise. 
void g_file_monitor_set_rate_limit (GFileMonitor *monitor, gint limit_msecs);	# Sets the rate limit to which the monitor will reportconsecutive change events to the same file.
	monitor		# a GFileMonitor .
	limit_msecs		# a non-negative integer with the limit in millisecondsto poll for changes
void g_file_monitor_emit_event (GFileMonitor *monitor, GFile *child, GFile *other_file, GFileMonitorEvent event_type);	# Emits the “changed” signal if a changehas taken place. Should be called from file monitorimplementations only.
	monitor		# a GFileMonitor .
	child		# a GFile .
	other_file		# a GFile .
	event_type		# a set of GFileMonitorEvent flags.
GFilenameCompleter  *g_filename_completer_new (void );	#创建对象:filename completer.
	return:		#  a GFilenameCompleter . 
char  *g_filename_completer_get_completion_suffix (GFilenameCompleter *completer, const char *initial_text);	# Obtains a completion for initial_text from completer.
	completer		# the filename completer.
	initial_text		# text to be completed.
	return:		#  a completed string, or NULL if no completion exists.This string is not owned by GIO, so remember to g_free() itwhen finished. 
char  **g_filename_completer_get_completions (GFilenameCompleter *completer, const char *initial_text);	# Gets an array of completion strings for a given initial text.
	completer		# the filename completer.
	initial_text		# text to be completed.
	return:		#  array of strings with possible completions for initial_text.This array must be freed by g_strfreev() when finished.  
void g_filename_completer_set_dirs_only (GFilenameCompleter *completer, gboolean dirs_only);	# If dirs_only is TRUE , completer will only complete directory names, and not file names.
	completer		# the filename completer.
	dirs_only		# a gboolean .
GCancellable  *g_cancellable_new (void );	#创建对象:GCancellable object.
	return:		#  a GCancellable . 
gboolean g_cancellable_is_cancelled (GCancellable *cancellable);	# Checks if a cancellable job has been cancelled.
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if cancellableis cancelled,FALSE if called with NULL or if item is not cancelled. 
gboolean g_cancellable_set_error_if_cancelled (GCancellable *cancellable, GError **error);	# If the cancellable is cancelled, sets the error to notifythat the operation was cancelled.
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if cancellablewas cancelled, FALSE if it was not 
int g_cancellable_get_fd (GCancellable *cancellable);	# Gets the file descriptor for a cancellable job. This can be used toimplement cancellable operations on Unix systems. The returned fd willturn readable when cancellable is cancelled.
	cancellable		# a GCancellable .
	return:		#  A valid file descriptor. -1 if the file descriptoris not supported, or on errors.  
gboolean g_cancellable_make_pollfd (GCancellable *cancellable, GPollFD *pollfd);	# Creates a GPollFD corresponding to cancellable; this can be passedto g_poll() and used to poll for cancellation. This is useful bothfor unix systems without a native poll and for portability towindows.
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if pollfdwas successfully initialized, FALSE onfailure to prepare the cancellable. 
void g_cancellable_release_fd (GCancellable *cancellable);	# Releases a resources previously allocated by g_cancellable_get_fd() or g_cancellable_make_pollfd() .
	cancellable		# a GCancellable 
GSource  *g_cancellable_source_new (GCancellable *cancellable);	# Creates a source that triggers if cancellable is cancelled andcalls its callback of type GCancellableSourceFunc . This isprimarily useful for attaching to another (non-cancellable) sourcewith g_source_add_child_source() to add cancellability to it.
	cancellable		#  a GCancellable , or NULL . 
	return:		#  the new GSource .  
gboolean <span class="c_punctuation">( *GCancellableSourceFunc<span class="c_punctuation">) (GCancellable *cancellable, gpointer user_data);	# This is the function type of the callback used for the GSource returned by g_cancellable_source_new() .
	cancellable		# the GCancellable 
	user_data		# data passed in by the user.
	return:		#  it should return FALSE if the source should be removed. 
GCancellable  *g_cancellable_get_current (void );	# Gets the top cancellable from the stack.
	return:		#  a GCancellable from the topof the stack, or NULL if the stack is empty.  
void g_cancellable_pop_current (GCancellable *cancellable);	# Pops cancellable off the cancellable stack (verifying that cancellableis on the top of the stack).
	cancellable		# a GCancellable object
void g_cancellable_push_current (GCancellable *cancellable);	# Pushes cancellable onto the cancellable stack. The currentcancellable can then be received using g_cancellable_get_current() .
	cancellable		# a GCancellable object
void g_cancellable_reset (GCancellable *cancellable);	# Resets cancellable to its uncancelled state.
	cancellable		# a GCancellable object.
gulong g_cancellable_connect (GCancellable *cancellable, GCallback callback, gpointer data, GDestroyNotify data_destroy_func);	# Convenience function to connect to the “cancelled” signal. Also handles the race condition that may happenif the cancellable is cancelled right before connecting.
	cancellable		# A GCancellable .
	callback		# The GCallback to connect.
	data		# Data to pass to callback.
	data_destroy_func		#  Free function for dataor NULL . 
	return:		#  The id of the signal handler or 0 if cancellablehas alreadybeen cancelled. 
void g_cancellable_disconnect (GCancellable *cancellable, gulong handler_id);	# Disconnects a handler from a cancellable instance similar tog_signal_handler_disconnect() . Additionally, in the event that asignal handler is currently running, this call will block until thehandler has finished. Calling this function from a“cancelled” signal handler will therefore result in adeadlock.
	cancellable		#  A GCancellable or NULL . 
void g_cancellable_cancel (GCancellable *cancellable);	# Will set cancellable to cancelled, and will emit the“cancelled” signal. (However, see the warning aboutrace conditions in the documentation for that signal if you areplanning to connect to it.)
	cancellable		#  a GCancellable object. 
void <span class="c_punctuation">( *GAsyncReadyCallback<span class="c_punctuation">) (GObject *source_object, GAsyncResult *res, gpointer user_data);	# Type definition for a function that will be called back when an asynchronousoperation within GIO has been completed.
	source_object		# the object the asynchronous operation was started with.
	res		# a GAsyncResult .
	user_data		# user data passed to the callback.
gpointer g_async_result_get_user_data (GAsyncResult *res);	# Gets the user data from a GAsyncResult .
	res		# a GAsyncResult .
	return:		#  the user data for res.  
GObject  *g_async_result_get_source_object (GAsyncResult *res);	# Gets the source object from a GAsyncResult .
	res		# a GAsyncResult 
	return:		#  a new reference to the source object for the res,or NULL if there is none.  
gboolean g_async_result_is_tagged (GAsyncResult *res, gpointer source_tag);	# Checks if res has the given source_tag (generally a functionpointer indicating the function res was created by).
	res		# a GAsyncResult 
	source_tag		# an application-defined tag
	return:		#  TRUE if reshas the indicated source_tag, FALSE ifnot. 
gboolean g_async_result_legacy_propagate_error (GAsyncResult *res, GError **error);	# If res is a GSimpleAsyncResult , this is equivalent tog_simple_async_result_propagate_error() . Otherwise it returnsFALSE .
	res		# a GAsyncResult 
	error		#  a location to propagate the error to. 
	return:		#  TRUE if erroris has been filled in with an error fromres, FALSE if not. 
GTask  *g_task_new (gpointer source_object, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer callback_data);	# Creates a GTask acting on source_object, which will eventually beused to invoke callback in the currentthread-default main context .
	source_object		#  the GObject that ownsthis task, or NULL . 
	return:		#  a GTask . 
void g_task_set_task_data (GTask *task, gpointer task_data, GDestroyNotify task_data_destroy);	# Sets task's task data (freeing the existing task data, if any).
	task		# the GTask 
	task_data		#  task-specific data. 
void g_task_set_priority (GTask *task, gint priority);	# Sets task's priority. If you do not call this, it will default toG_PRIORITY_DEFAULT .
	task		# the GTask 
	priority		# the priority of the request
void g_task_set_check_cancellable (GTask *task, gboolean check_cancellable);	# Sets or clears task's check-cancellable flag. If this is TRUE (the default), then g_task_propagate_pointer() , etc, andg_task_had_error() will check the task's GCancellable first, andif it has been cancelled, then they will consider the task to havereturned an "Operation was cancelled" error(G_IO_ERROR_CANCELLED ), regardless of any other error or returnvalue the task may have had.
	task		# the GTask 
	check_cancellable		# whether GTask will check the state ofits GCancellable for you.
gboolean g_task_set_return_on_cancel (GTask *task, gboolean return_on_cancel);	# Sets or clears task's return-on-cancel flag. This is onlymeaningful for tasks run via g_task_run_in_thread() org_task_run_in_thread_sync() .
	task		# the GTask 
	return_on_cancel		# whether the task returns automatically whenit is cancelled.
	return:		#  TRUE if task's return-on-cancel flag was changed tomatch return_on_cancel. FALSE if taskhas already beencancelled. 
void g_task_set_source_tag (GTask *task, gpointer source_tag);	# Sets task's source tag. You can use this to tag a task returnvalue with a particular pointer (usually a pointer to the functiondoing the tagging) and then later check it usingg_task_get_source_tag() (or g_async_result_is_tagged() ) in thetask's "finish" function, to figure out if the response came from aparticular place.
	task		# the GTask 
	source_tag		# an opaque pointer indicating the source of this task
void g_task_report_error (gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GError *error);	# Creates a GTask and then immediately calls g_task_return_error() on it. Use this in the wrapper function of an asynchronous methodwhen you want to avoid even calling the virtual method. You canthen use g_async_result_is_tagged() in the finish method wrapper tocheck if the result there is tagged as having been created by thewrapper method, and deal with it appropriately if so.
	source_object		#  the GObject that ownsthis task, or NULL . 
void g_task_report_new_error (gpointer source_object, GAsyncReadyCallback callback, gpointer callback_data, gpointer source_tag, GQuark domain, gint code, const char *format, ...);	# Creates a GTask and then immediately callsg_task_return_new_error() on it. Use this in the wrapper functionof an asynchronous method when you want to avoid even calling thevirtual method. You can then use g_async_result_is_tagged() in thefinish method wrapper to check if the result there is tagged ashaving been created by the wrapper method, and deal with itappropriately if so.
	source_object		#  the GObject that ownsthis task, or NULL . 
	code		# an error code.
	format		# a string with format characters.
	...		# a list of values to insert into format.
gpointer g_task_get_task_data (GTask *task);	# Gets task's task_data.
	task		# a GTask 
	return:		#  task's task_data.  
gint g_task_get_priority (GTask *task);	# Gets task's priority
	task		# a GTask 
	return:		#  task's priority 
GCancellable  *g_task_get_cancellable (GTask *task);	# Gets task's GCancellable 
	task		# a GTask 
	return:		#  task's GCancellable .  
gboolean g_task_get_check_cancellable (GTask *task);	# Gets task's check-cancellable flag. Seeg_task_set_check_cancellable() for more details.
	task		# the GTask 
gboolean g_task_get_return_on_cancel (GTask *task);	# Gets task's return-on-cancel flag. Seeg_task_set_return_on_cancel() for more details.
	task		# the GTask 
GMainContext  *g_task_get_context (GTask *task);	# Gets the GMainContext that task will return its result in (thatis, the context that was thethread-default main context at the point when task was created).
	task		# a GTask 
	return:		#  task's GMainContext .  
gpointer g_task_get_source_object (GTask *task);	# Gets the source object from task. Likeg_async_result_get_source_object() , but does not ref the object.
	task		# a GTask 
	return:		#  task's source object, or NULL .  
gpointer g_task_get_source_tag (GTask *task);	# Gets task's source tag. See g_task_set_source_tag() .
	task		# a GTask 
	return:		#  task's source tag.  
void g_task_return_boolean (GTask *task, gboolean result);	# Sets task's result to result and completes the task (seeg_task_return_pointer() for more discussion of exactly what thismeans).
	task		# a GTask .
	result		# the gboolean result of a task function.
void g_task_return_int (GTask *task, gssize result);	# Sets task's result to result and completes the task (seeg_task_return_pointer() for more discussion of exactly what thismeans).
	task		# a GTask .
	result		# the integer (gssize ) result of a task function.
void g_task_return_pointer (GTask *task, gpointer result, GDestroyNotify result_destroy);	# Sets task's result to result and completes the task. If resultis not NULL , then result_destroy will be used to free result ifthe caller does not take ownership of it withg_task_propagate_pointer() .
	task		# a GTask 
	result		#  the pointer result of a taskfunction. 
void g_task_return_error (GTask *task, GError *error);	# Sets task's result to error (which task assumes ownership of)and completes the task (see g_task_return_pointer() for morediscussion of exactly what this means).
	task		# a GTask .
	error		#  the GError result of a task function. 
void g_task_return_new_error (GTask *task, GQuark domain, gint code, const char *format, ...);	# Sets task's result to a new GError created from domain, code,format, and the remaining arguments, and completes the task (seeg_task_return_pointer() for more discussion of exactly what thismeans).
	task		# a GTask .
	domain		# a GQuark .
	code		# an error code.
	format		# a string with format characters.
	...		# a list of values to insert into format.
gboolean g_task_return_error_if_cancelled (GTask *task);	# Checks if task's GCancellable has been cancelled, and if so, setstask's error accordingly and completes the task (seeg_task_return_pointer() for more discussion of exactly what thismeans).
	task		# a GTask 
	return:		#  TRUE if taskhas been cancelled, FALSE if not 
gboolean g_task_propagate_boolean (GTask *task, GError **error);	# Gets the result of task as a gboolean .
	task		# a GTask .
	error		# return location for a GError 
	return:		#  the task result, or FALSE on error 
gssize g_task_propagate_int (GTask *task, GError **error);	# Gets the result of task as an integer (gssize ).
	task		# a GTask .
	error		# return location for a GError 
	return:		#  the task result, or -1 on error 
gpointer g_task_propagate_pointer (GTask *task, GError **error);	# Gets the result of task as a pointer, and transfers ownershipof that value to the caller.
	task		# a GTask 
	error		# return location for a GError 
	return:		#  the task result, or NULL on error.  
gboolean g_task_had_error (GTask *task);	# Tests if task resulted in an error.
	task		# a GTask .
	return:		#  TRUE if the task resulted in an error, FALSE otherwise. 
gboolean g_task_get_completed (GTask *task);	# Gets the value of “completed” . This changes from FALSE to TRUE afterthe task’s callback is invoked, and will return FALSE if called from insidethe callback.
	task		# a GTask .
	return:		#  TRUE if the task has completed, FALSE otherwise. 
void g_task_run_in_thread (GTask *task, GTaskThreadFunc task_func);	# Runs task_func in another thread. When task_func returns, task'sGAsyncReadyCallback will be invoked in task's GMainContext .
	task		# a GTask 
	task_func		# a GTaskThreadFunc 
void g_task_run_in_thread_sync (GTask *task, GTaskThreadFunc task_func);	# Runs task_func in another thread, and waits for it to return or becancelled. You can use g_task_propagate_pointer() , etc, afterwardto get the result of task_func.
	task		# a GTask 
	task_func		# a GTaskThreadFunc 
void <span class="c_punctuation">( *GTaskThreadFunc<span class="c_punctuation">) (GTask *task, gpointer source_object, gpointer task_data, GCancellable *cancellable);	# The prototype for a task function to be run in a thread viag_task_run_in_thread() or g_task_run_in_thread_sync() .
	task		# the GTask 
	source_object		#  task's source object. 
void g_task_attach_source (GTask *task, GSource *source, GSourceFunc callback);	# A utility function for dealing with async operations where you needto wait for a GSource to trigger. Attaches source to task'sGMainContext with task's priority , and sets source'scallback to callback, with task as the callback's user_data.
	task		# a GTask 
	source		# the source to attach
	callback		# the callback to invoke when sourcetriggers
gboolean g_task_is_valid (gpointer result, gpointer source_object);	# Checks that result is a GTask , and that source_object is itssource object (or that source_object is NULL and result has nosource object). This can be used in g_return_if_fail() checks.
	result		#  A GAsyncResult . 
	return:		#  TRUE if resultand source_objectare valid, FALSE if not 
gboolean <span class="c_punctuation">( *GIOSchedulerJobFunc<span class="c_punctuation">) (GIOSchedulerJob *job, GCancellable *cancellable, gpointer user_data);	# I/O Job function.
	job		# a GIOSchedulerJob .
	cancellable		# optional GCancellable object, NULL to ignore.
	user_data		# the data to pass to callback function
	return:		#  TRUE if this function should be called again tocomplete the job, FALSE if the job is complete (or cancelled) 
void g_io_scheduler_push_job (GIOSchedulerJobFunc job_func, gpointer user_data, GDestroyNotify notify, gint io_priority, GCancellable *cancellable);	# g_io_scheduler_push_job is deprecated and should not be used in newly-written code.
	job_func		# a GIOSchedulerJobFunc .
	user_data		# data to pass to job_func
	notify		#  a GDestroyNotify for user_data, or NULL . 
	cancellable		# optional GCancellable object, NULL to ignore.
void g_io_scheduler_cancel_all_jobs (void );	# g_io_scheduler_cancel_all_jobs is deprecated and should not be used in newly-written code.
gboolean g_io_scheduler_job_send_to_mainloop (GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);	# g_io_scheduler_job_send_to_mainloop is deprecated and should not be used in newly-written code.
	job		# a GIOSchedulerJob 
	func		# a GSourceFunc callback that will be called in the original thread
	user_data		# data to pass to func
	notify		#  a GDestroyNotify for user_data, or NULL . 
	return:		#  The return value of func 
void g_io_scheduler_job_send_to_mainloop_async (GIOSchedulerJob *job, GSourceFunc func, gpointer user_data, GDestroyNotify notify);	# g_io_scheduler_job_send_to_mainloop_async is deprecated and should not be used in newly-written code.
	job		# a GIOSchedulerJob 
	func		# a GSourceFunc callback that will be called in the original thread
	user_data		# data to pass to func
	notify		#  a GDestroyNotify for user_data, or NULL . 
void <span class="c_punctuation">( *GSimpleAsyncThreadFunc<span class="c_punctuation">) (GSimpleAsyncResult *res, GObject *object, GCancellable *cancellable);	# Simple thread function that runs an asynchronous operation andchecks for cancellation.
	res		# a GSimpleAsyncResult .
	object		# a GObject .
	cancellable		# optional GCancellable object, NULL to ignore.
GSimpleAsyncResult  *g_simple_async_result_new (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, gpointer source_tag);	# g_simple_async_result_new has been deprecated since version 2.46 and should not be used in newly-written code.
	source_object		#  a GObject , or NULL . 
	return:		#  a GSimpleAsyncResult . 
GSimpleAsyncResult  *g_simple_async_result_new_error (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...);	# g_simple_async_result_new_error has been deprecated since version 2.46 and should not be used in newly-written code.
	source_object		#  a GObject , or NULL . 
	code		# an error code.
	format		# a string with format characters.
	...		# a list of values to insert into format.
	return:		#  a GSimpleAsyncResult . 
GSimpleAsyncResult  *g_simple_async_result_new_from_error (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, const GError *error);	# g_simple_async_result_new_from_error has been deprecated since version 2.46 and should not be used in newly-written code.
	source_object		#  a GObject , or NULL . 
	return:		#  a GSimpleAsyncResult . 
GSimpleAsyncResult  *g_simple_async_result_new_take_error (GObject *source_object, GAsyncReadyCallback callback, gpointer user_data, GError *error);	# g_simple_async_result_new_take_error has been deprecated since version 2.46 and should not be used in newly-written code.
	source_object		#  a GObject , or NULL . 
	return:		#  a GSimpleAsyncResult  
void g_simple_async_result_set_check_cancellable (GSimpleAsyncResult *simple, GCancellable *check_cancellable);	# g_simple_async_result_set_check_cancellable has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult 
	check_cancellable		#  a GCancellable to check, or NULL to unset. 
void g_simple_async_result_set_op_res_gpointer (GSimpleAsyncResult *simple, gpointer op_res, GDestroyNotify destroy_op_res);	# g_simple_async_result_set_op_res_gpointer has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	op_res		# a pointer result from an asynchronous function.
	destroy_op_res		# a GDestroyNotify function.
gpointer g_simple_async_result_get_op_res_gpointer (GSimpleAsyncResult *simple);	# g_simple_async_result_get_op_res_gpointer has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	return:		#  a pointer from the result. 
void g_simple_async_result_set_op_res_gssize (GSimpleAsyncResult *simple, gssize op_res);	# g_simple_async_result_set_op_res_gssize has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	op_res		# a gssize .
gssize g_simple_async_result_get_op_res_gssize (GSimpleAsyncResult *simple);	# g_simple_async_result_get_op_res_gssize has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	return:		#  a gssize returned from the asynchronous function. 
void g_simple_async_result_set_op_res_gboolean (GSimpleAsyncResult *simple, gboolean op_res);	# g_simple_async_result_set_op_res_gboolean has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	op_res		# a gboolean .
gboolean g_simple_async_result_get_op_res_gboolean (GSimpleAsyncResult *simple);	# g_simple_async_result_get_op_res_gboolean has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	return:		#  TRUE if the operation's result was TRUE , FALSE if the operation's result was FALSE . 
gpointer g_simple_async_result_get_source_tag (GSimpleAsyncResult *simple);	# g_simple_async_result_get_source_tag has been deprecated since version 2.46. and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	return:		#  a gpointer to the source object for the GSimpleAsyncResult . 
gboolean g_simple_async_result_is_valid (GAsyncResult *result, GObject *source, gpointer source_tag);	# g_simple_async_result_is_valid has been deprecated since version 2.46 and should not be used in newly-written code.
	result		# the GAsyncResult passed to the _finish function.
	source		#  the GObject passed to the _finish function. 
	return:		#  TRUE if all checks passed or FALSE if any failed. 
void g_simple_async_result_set_handle_cancellation (GSimpleAsyncResult *simple, gboolean handle_cancellation);	# g_simple_async_result_set_handle_cancellation has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	handle_cancellation		# a gboolean .
void g_simple_async_result_complete (GSimpleAsyncResult *simple);	# g_simple_async_result_complete has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
void g_simple_async_result_complete_in_idle (GSimpleAsyncResult *simple);	# g_simple_async_result_complete_in_idle has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
void g_simple_async_result_run_in_thread (GSimpleAsyncResult *simple, GSimpleAsyncThreadFunc func, int io_priority, GCancellable *cancellable);	# g_simple_async_result_run_in_thread has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	func		# a GSimpleAsyncThreadFunc .
	io_priority		# the io priority of the request.
	cancellable		#  optional GCancellable object, NULL to ignore. 
void g_simple_async_result_set_from_error (GSimpleAsyncResult *simple, const GError *error);	# g_simple_async_result_set_from_error has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	error		# GError .
void g_simple_async_result_take_error (GSimpleAsyncResult *simple, GError *error);	# g_simple_async_result_take_error has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult 
	error		# a GError 
gboolean g_simple_async_result_propagate_error (GSimpleAsyncResult *simple, GError **dest);	# g_simple_async_result_propagate_error has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	dest		#  a location to propagate the error to. 
	return:		#  TRUE if the error was propagated to dest. FALSE otherwise. 
void g_simple_async_result_set_error (GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, ...);	# g_simple_async_result_set_error has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	domain		# a GQuark (usually G_IO_ERROR ).
	code		# an error code.
	format		# a formatted error reporting string.
	...		# a list of variables to fill in format.
void g_simple_async_result_set_error_va (GSimpleAsyncResult *simple, GQuark domain, gint code, const char *format, va_list args);	# g_simple_async_result_set_error_va has been deprecated since version 2.46 and should not be used in newly-written code.
	simple		# a GSimpleAsyncResult .
	domain		# a GQuark (usually G_IO_ERROR ).
	code		# an error code.
	format		# a formatted error reporting string.
	args		# va_list of arguments.
void g_simple_async_report_error_in_idle (GObject *object, GAsyncReadyCallback callback, gpointer user_data, GQuark domain, gint code, const char *format, ...);	# g_simple_async_report_error_in_idle has been deprecated since version 2.46 and should not be used in newly-written code.
	object		#  a GObject , or NULL . 
	user_data		# user data passed to callback.
	domain		# a GQuark containing the error domain (usually G_IO_ERROR ).
	code		# a specific error code.
	format		# a formatted error reporting string.
	...		# a list of variables to fill in format.
void g_simple_async_report_gerror_in_idle (GObject *object, GAsyncReadyCallback callback, gpointer user_data, const GError *error);	# g_simple_async_report_gerror_in_idle has been deprecated since version 2.46 and should not be used in newly-written code.
	object		#  a GObject , or NULL . 
void g_simple_async_report_take_gerror_in_idle (GObject *object, GAsyncReadyCallback callback, gpointer user_data, GError *error);	# g_simple_async_report_take_gerror_in_idle has been deprecated since version 2.46 and should not be used in newly-written code.
	object		#  a GObject , or NULL . 
	user_data		# user data passed to callback.
	error		# the GError to report
GConverterResult g_converter_convert (GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error);	# This is the main operation used when converting data. It is to be calledmultiple times in a loop, and each time it will do some work, i.e.producing some output (in outbuf) or consuming some input (from inbuf) orboth. If its not possible to do any work an error is returned.
	converter		# a GConverter .
	inbuf		#  the buffercontaining the data to convert. 
	bytes_read		#  will be set to the number of bytes read from inbufon success. 
	return:		#  a GConverterResult , G_CONVERTER_ERROR on error. 
void g_converter_reset (GConverter *converter);	# Resets all internal state in the converter, making it behaveas if it was just created. If the converter has any internalstate that would produce output then that output is lost.
	converter		# a GConverter .
GCharsetConverter  *g_charset_converter_new (const gchar *to_charset, const gchar *from_charset, GError **error);	#创建对象:GCharsetConverter .
	to_charset		# destination charset
	from_charset		# source charset
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a new GCharsetConverter or NULL on error. 
void g_charset_converter_set_use_fallback (GCharsetConverter *converter, gboolean use_fallback);	# Sets the “use-fallback” property.
	converter		# a GCharsetConverter 
	use_fallback		# TRUE to use fallbacks
gboolean g_charset_converter_get_use_fallback (GCharsetConverter *converter);	# Gets the “use-fallback” property.
	converter		# a GCharsetConverter 
	return:		#  TRUE if fallbacks are used by converter 
guint g_charset_converter_get_num_fallbacks (GCharsetConverter *converter);	# Gets the number of fallbacks that converter has applied so far.
	converter		# a GCharsetConverter 
	return:		#  the number of fallbacks that converterhas applied 
GZlibCompressor  *g_zlib_compressor_new (GZlibCompressorFormat format, int level);	#创建对象:GZlibCompressor .
	format		# The format to use for the compressed data
	level		# compression level (0-9), -1 for default
	return:		#  a new GZlibCompressor  
GFileInfo  *g_zlib_compressor_get_file_info (GZlibCompressor *compressor);	# Returns the “file-info” property.
	compressor		# a GZlibCompressor 
	return:		#  a GFileInfo , or NULL .  
void g_zlib_compressor_set_file_info (GZlibCompressor *compressor, GFileInfo *file_info);	# Sets file_info in compressor. If non-NULL , and compressor's“format” property is G_ZLIB_COMPRESSOR_FORMAT_GZIP ,it will be used to set the file name and modification time inthe GZIP header of the compressed data.
	compressor		# a GZlibCompressor 
	file_info		#  a GFileInfo . 
GZlibDecompressor  *g_zlib_decompressor_new (GZlibCompressorFormat format);	#创建对象:GZlibDecompressor .
	format		# The format to use for the compressed data
	return:		#  a new GZlibDecompressor  
GFileInfo  *g_zlib_decompressor_get_file_info (GZlibDecompressor *decompressor);	# Retrieves the GFileInfo constructed from the GZIP header dataof compressed data processed by compressor, or NULL if decompressor's“format” property is not G_ZLIB_COMPRESSOR_FORMAT_GZIP ,or the header data was not fully processed yet, or it not present in thedata stream at all.
	decompressor		# a GZlibDecompressor 
	return:		#  a GFileInfo , or NULL .  
goffset g_seekable_tell (GSeekable *seekable);	# Tells the current position within the stream.
	seekable		# a GSeekable .
	return:		#  the offset from the beginning of the buffer. 
gboolean g_seekable_can_seek (GSeekable *seekable);	# Tests if the stream supports the GSeekableIface .
	seekable		# a GSeekable .
	return:		#  TRUE if seekablecan be seeked. FALSE otherwise. 
gboolean g_seekable_seek (GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error);	# Seeks in the stream by the given offset, modified by type.
	seekable		# a GSeekable .
	offset		# a goffset .
	type		# a GSeekType .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if successful. If an errorhas occurred, this function will return FALSE and set errorappropriately if present. 
gboolean g_seekable_can_truncate (GSeekable *seekable);	# Tests if the stream can be truncated.
	seekable		# a GSeekable .
	return:		#  TRUE if the stream can be truncated, FALSE otherwise. 
gboolean g_seekable_truncate (GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error);	# Truncates a stream with a given offset . 
	seekable		# a GSeekable .
	offset		# a goffset .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if successful. If an errorhas occurred, this function will return FALSE and set errorappropriately if present.  
gssize g_input_stream_read (GInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error);	# Tries to read count bytes from the stream into the buffer starting atbuffer. Will block during this read.
	stream		# a GInputStream .
	buffer		#  a buffer toread data into (which should be at least count bytes long). 
	return:		#  Number of bytes read, or -1 on error, or 0 on end of file. 
gboolean g_input_stream_read_all (GInputStream *stream, void *buffer, gsize count, gsize *bytes_read, GCancellable *cancellable, GError **error);	# Tries to read count bytes from the stream into the buffer starting atbuffer. Will block during this read.
	stream		# a GInputStream .
	buffer		#  a buffer toread data into (which should be at least count bytes long). 
	return:		#  TRUE on success, FALSE if there was an error 
void g_input_stream_read_all_async (GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request an asynchronous read of count bytes from the stream into thebuffer starting at buffer.
	stream		# A GInputStream 
	buffer		#  a buffer toread data into (which should be at least count bytes long). 
	cancellable		#  optional GCancellable object, NULL to ignore. 
gboolean g_input_stream_read_all_finish (GInputStream *stream, GAsyncResult *result, gsize *bytes_read, GError **error);	# Finishes an asynchronous stream read operation started withg_input_stream_read_all_async() .
	stream		# a GInputStream 
	result		# a GAsyncResult 
	bytes_read		#  location to store the number of bytes that was read from the stream. 
	return:		#  TRUE on success, FALSE if there was an error 
gssize g_input_stream_skip (GInputStream *stream, gsize count, GCancellable *cancellable, GError **error);	# Tries to skip count bytes from the stream. Will block during the operation.
	stream		# a GInputStream .
	count		# the number of bytes that will be skipped from the stream
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  Number of bytes skipped, or -1 on error 
gboolean g_input_stream_close (GInputStream *stream, GCancellable *cancellable, GError **error);	# Closes the stream, releasing resources related to it.
	stream		# A GInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE on success, FALSE on failure 
void g_input_stream_read_async (GInputStream *stream, void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request an asynchronous read of count bytes from the stream into the bufferstarting at buffer. When the operation is finished callback will be called. You can then call g_input_stream_read_finish() to get the result of the operation.
	stream		# A GInputStream .
	buffer		#  a buffer toread data into (which should be at least count bytes long). 
	cancellable		#  optional GCancellable object, NULL to ignore. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
gssize g_input_stream_read_finish (GInputStream *stream, GAsyncResult *result, GError **error);	# Finishes an asynchronous stream read operation.
	stream		# a GInputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  number of bytes read in, or -1 on error, or 0 on end of file. 
void g_input_stream_skip_async (GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request an asynchronous skip of count bytes from the stream.When the operation is finished callback will be called.You can then call g_input_stream_skip_finish() to get the resultof the operation.
	stream		# A GInputStream .
	count		# the number of bytes that will be skipped from the stream
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
gssize g_input_stream_skip_finish (GInputStream *stream, GAsyncResult *result, GError **error);	# Finishes a stream skip operation.
	stream		# a GInputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  the size of the bytes skipped, or -1 on error. 
void g_input_stream_close_async (GInputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Requests an asynchronous closes of the stream, releasing resources related to it.When the operation is finished callback will be called. You can then call g_input_stream_close_finish() to get the result of the operation.
	stream		# A GInputStream .
	io_priority		# the I/O priority of the request
	cancellable		#  optional cancellable object. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
gboolean g_input_stream_close_finish (GInputStream *stream, GAsyncResult *result, GError **error);	# Finishes closing a stream asynchronously, started from g_input_stream_close_async() .
	stream		# a GInputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the stream was closed successfully. 
gboolean g_input_stream_is_closed (GInputStream *stream);	# Checks if an input stream is closed.
	stream		# input stream.
	return:		#  TRUE if the stream is closed. 
gboolean g_input_stream_has_pending (GInputStream *stream);	# Checks if an input stream has pending actions.
	stream		# input stream.
	return:		#  TRUE if streamhas pending actions. 
gboolean g_input_stream_set_pending (GInputStream *stream, GError **error);	# Sets stream to have actions pending. If the pending flag isalready set or stream is closed, it will return FALSE and seterror.
	stream		# input stream
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if pending was previously unset and is now set. 
void g_input_stream_clear_pending (GInputStream *stream);	# Clears the pending flag on stream.
	stream		# input stream
GBytes  *g_input_stream_read_bytes (GInputStream *stream, gsize count, GCancellable *cancellable, GError **error);	# Like g_input_stream_read() , this tries to read count bytes fromthe stream in a blocking fashion. However, rather than reading intoa user-supplied buffer, this will create a new GBytes containingthe data that was read. This may be easier to use from languagebindings.
	stream		# a GInputStream .
	count		# maximum number of bytes that will be read from the stream. Commonvalues include 4096 and 8192.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a new GBytes , or NULL on error.  
void g_input_stream_read_bytes_async (GInputStream *stream, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request an asynchronous read of count bytes from the stream into anew GBytes . When the operation is finished callback will becalled. You can then call g_input_stream_read_bytes_finish() to get theresult of the operation.
	stream		# A GInputStream .
	count		# the number of bytes that will be read from the stream
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
GBytes  *g_input_stream_read_bytes_finish (GInputStream *stream, GAsyncResult *result, GError **error);	# Finishes an asynchronous stream read-into-GBytes operation.
	stream		# a GInputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  the newly-allocated GBytes , or NULL on error.  
gssize g_output_stream_write (GOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error);	# Tries to write count bytes from buffer into the stream. Will blockduring the operation.
	stream		# a GOutputStream .
	buffer		#  the buffer containing the data to write. 
	return:		#  Number of bytes written, or -1 on error 
gboolean g_output_stream_write_all (GOutputStream *stream, const void *buffer, gsize count, gsize *bytes_written, GCancellable *cancellable, GError **error);	# Tries to write count bytes from buffer into the stream. Will blockduring the operation.
	stream		# a GOutputStream .
	buffer		#  the buffer containing the data to write. 
	return:		#  TRUE on success, FALSE if there was an error 
void g_output_stream_write_all_async (GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request an asynchronous write of count bytes from buffer intothe stream. When the operation is finished callback will be called.You can then call g_output_stream_write_all_finish() to get the result of theoperation.
	stream		# A GOutputStream 
	buffer		#  the buffer containing the data to write. 
gboolean g_output_stream_write_all_finish (GOutputStream *stream, GAsyncResult *result, gsize *bytes_written, GError **error);	# Finishes an asynchronous stream write operation started withg_output_stream_write_all_async() .
	stream		# a GOutputStream 
	result		# a GAsyncResult 
	bytes_written		#  location to store the number of bytes that was written to the stream. 
	return:		#  TRUE on success, FALSE if there was an error 
gssize g_output_stream_splice (GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, GCancellable *cancellable, GError **error);	# Splices an input stream into an output stream.
	stream		# a GOutputStream .
	source		# a GInputStream .
	flags		# a set of GOutputStreamSpliceFlags .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a gssize containing the size of the data spliced, or-1 if an error occurred. Note that if the number of bytesspliced is greater than G_MAXSSIZE , then that will bereturned, and there is no way to determine the actual numberof bytes spliced. 
gboolean g_output_stream_flush (GOutputStream *stream, GCancellable *cancellable, GError **error);	# Forces a write of all user-space buffered data for the givenstream. Will block during the operation. Closing the stream willimplicitly cause a flush.
	stream		# a GOutputStream .
	cancellable		#  optional cancellable object. 
	return:		#  TRUE on success, FALSE on error 
gboolean g_output_stream_close (GOutputStream *stream, GCancellable *cancellable, GError **error);	# Closes the stream, releasing resources related to it.
	stream		# A GOutputStream .
	cancellable		#  optional cancellable object. 
	return:		#  TRUE on success, FALSE on failure 
void g_output_stream_write_async (GOutputStream *stream, const void *buffer, gsize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Request an asynchronous write of count bytes from buffer into the stream. When the operation is finished callback will be called.You can then call g_output_stream_write_finish() to get the result of the operation.
	stream		# A GOutputStream .
	buffer		#  the buffer containing the data to write. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
gssize g_output_stream_write_finish (GOutputStream *stream, GAsyncResult *result, GError **error);	# Finishes a stream write operation.
	stream		# a GOutputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a gssize containing the number of bytes written to the stream. 
void g_output_stream_splice_async (GOutputStream *stream, GInputStream *source, GOutputStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Splices a stream asynchronously.When the operation is finished callback will be called.You can then call g_output_stream_splice_finish() to get the result of the operation.
	stream		# a GOutputStream .
	source		# a GInputStream . 
	flags		# a set of GOutputStreamSpliceFlags .
	io_priority		# the io priority of the request.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		#  user data passed to callback. 
gssize g_output_stream_splice_finish (GOutputStream *stream, GAsyncResult *result, GError **error);	# Finishes an asynchronous stream splice operation.
	stream		# a GOutputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a gssize of the number of bytes spliced. Note that if thenumber of bytes spliced is greater than G_MAXSSIZE , then thatwill be returned, and there is no way to determine the actualnumber of bytes spliced. 
void g_output_stream_flush_async (GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Forces an asynchronous write of all user-space buffered data forthe given stream.For behaviour details see g_output_stream_flush() .
	stream		# a GOutputStream .
	io_priority		# the io priority of the request.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		#  the data to pass to callback function. 
gboolean g_output_stream_flush_finish (GOutputStream *stream, GAsyncResult *result, GError **error);	# Finishes flushing an output stream.
	stream		# a GOutputStream .
	result		# a GAsyncResult.
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if flush operation succeeded, FALSE otherwise. 
void g_output_stream_close_async (GOutputStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Requests an asynchronous close of the stream, releasing resources related to it. When the operation is finished callback will be called. You can then call g_output_stream_close_finish() to get the result of the operation.
	stream		# A GOutputStream .
	io_priority		# the io priority of the request.
	cancellable		#  optional cancellable object. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
gboolean g_output_stream_close_finish (GOutputStream *stream, GAsyncResult *result, GError **error);	# Closes an output stream.
	stream		# a GOutputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if stream was successfully closed, FALSE otherwise. 
gboolean g_output_stream_is_closing (GOutputStream *stream);	# Checks if an output stream is being closed. This can beused inside e.g. a flush implementation to see if theflush (or other i/o operation) is called from withinthe closing operation.
	stream		# a GOutputStream .
	return:		#  TRUE if streamis being closed. FALSE otherwise. 
gboolean g_output_stream_is_closed (GOutputStream *stream);	# Checks if an output stream has already been closed.
	stream		# a GOutputStream .
	return:		#  TRUE if streamis closed. FALSE otherwise.  
gboolean g_output_stream_has_pending (GOutputStream *stream);	# Checks if an output stream has pending actions.
	stream		# a GOutputStream .
	return:		#  TRUE if streamhas pending actions.  
gboolean g_output_stream_set_pending (GOutputStream *stream, GError **error);	# Sets stream to have actions pending. If the pending flag isalready set or stream is closed, it will return FALSE and seterror.
	stream		# a GOutputStream .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if pending was previously unset and is now set. 
void g_output_stream_clear_pending (GOutputStream *stream);	# Clears the pending flag on stream.
	stream		# output stream
gssize g_output_stream_write_bytes (GOutputStream *stream, GBytes *bytes, GCancellable *cancellable, GError **error);	# A wrapper function for g_output_stream_write() which takes aGBytes as input. This can be more convenient for use by languagebindings or in other cases where the refcounted nature of GBytes is helpful over a bare pointer interface.
	stream		# a GOutputStream .
	bytes		# the GBytes to write
	cancellable		#  optional cancellable object. 
	return:		#  Number of bytes written, or -1 on error 
void g_output_stream_write_bytes_async (GOutputStream *stream, GBytes *bytes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This function is similar to g_output_stream_write_async() , buttakes a GBytes as input. Due to the refcounted nature of GBytes ,this allows the stream to avoid taking a copy of the data.
	stream		# A GOutputStream .
	bytes		# The bytes to write
	io_priority		# the io priority of the request.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
gssize g_output_stream_write_bytes_finish (GOutputStream *stream, GAsyncResult *result, GError **error);	# Finishes a stream write-from-GBytes operation.
	stream		# a GOutputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a gssize containing the number of bytes written to the stream. 
gboolean g_output_stream_printf (GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, ...);	# This is a utility function around g_output_stream_write_all() . Ituses g_strdup_vprintf() to turn format and @... into a string thatis then written to stream.
	stream		# a GOutputStream .
	bytes_written		#  location to store the number of bytes that waswritten to the stream. 
	format		# the format string. See the 
	...		# the parameters to insert into the format string
	return:		#  TRUE on success, FALSE if there was an error 
gboolean g_output_stream_vprintf (GOutputStream *stream, gsize *bytes_written, GCancellable *cancellable, GError **error, const gchar *format, va_list args);	# This is a utility function around g_output_stream_write_all() . Ituses g_strdup_vprintf() to turn format and args into a string thatis then written to stream.
	stream		# a GOutputStream .
	bytes_written		#  location to store the number of bytes that waswritten to the stream. 
	format		# the format string. See the 
	args		# the parameters to insert into the format string
	return:		#  TRUE on success, FALSE if there was an error 
GInputStream  *g_io_stream_get_input_stream (GIOStream *stream);	# Gets the input stream for this object. This is usedfor reading.
	stream		# a GIOStream 
	return:		#  a GInputStream , owned by the GIOStream .Do not free.  
GOutputStream  *g_io_stream_get_output_stream (GIOStream *stream);	# Gets the output stream for this object. This is used forwriting.
	stream		# a GIOStream 
	return:		#  a GOutputStream , owned by the GIOStream .Do not free.  
void g_io_stream_splice_async (GIOStream *stream1, GIOStream *stream2, GIOStreamSpliceFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asyncronously splice the output stream of stream1 to the input stream ofstream2, and splice the output stream of stream2 to the input stream ofstream1.
	stream1		# a GIOStream .
	stream2		# a GIOStream .
	flags		# a set of GIOStreamSpliceFlags .
	io_priority		# the io priority of the request.
	cancellable		#  optional GCancellable object, NULL to ignore. 
gboolean g_io_stream_splice_finish (GAsyncResult *result, GError **error);	# Finishes an asynchronous io stream splice operation.
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE on success, FALSE otherwise. 
gboolean g_io_stream_close (GIOStream *stream, GCancellable *cancellable, GError **error);	# Closes the stream, releasing resources related to it. This will alsoclose the individual input and output streams, if they are not alreadyclosed.
	stream		# a GIOStream 
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE on success, FALSE on failure 
void g_io_stream_close_async (GIOStream *stream, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Requests an asynchronous close of the stream, releasing resourcesrelated to it. When the operation is finished callback will becalled. You can then call g_io_stream_close_finish() to getthe result of the operation.
	stream		# a GIOStream 
	io_priority		# the io priority of the request
	cancellable		#  optional cancellable object. 
gboolean g_io_stream_close_finish (GIOStream *stream, GAsyncResult *result, GError **error);	# Closes a stream.
	stream		# a GIOStream 
	result		# a GAsyncResult 
	error		# a GError location to store the error occurring, or NULL toignore
	return:		#  TRUE if stream was successfully closed, FALSE otherwise. 
gboolean g_io_stream_is_closed (GIOStream *stream);	# Checks if a stream is closed.
	stream		# a GIOStream 
	return:		#  TRUE if the stream is closed. 
gboolean g_io_stream_has_pending (GIOStream *stream);	# Checks if a stream has pending actions.
	stream		# a GIOStream 
	return:		#  TRUE if streamhas pending actions. 
gboolean g_io_stream_set_pending (GIOStream *stream, GError **error);	# Sets stream to have actions pending. If the pending flag isalready set or stream is closed, it will return FALSE and seterror.
	stream		# a GIOStream 
	error		# a GError location to store the error occurring, or NULL toignore
	return:		#  TRUE if pending was previously unset and is now set. 
void g_io_stream_clear_pending (GIOStream *stream);	# Clears the pending flag on stream.
	stream		# a GIOStream 
GIOStream  *g_simple_io_stream_new (GInputStream *input_stream, GOutputStream *output_stream);	#创建对象:GSimpleIOStream wrapping input_stream and output_stream.See also GIOStream .
	input_stream		# a GInputStream .
	output_stream		# a GOutputStream .
	return:		#  a new GSimpleIOStream instance. 
GFileInfo  *g_file_input_stream_query_info (GFileInputStream *stream, const char *attributes, GCancellable *cancellable, GError **error);	# Queries a file input stream the given attributes. This function blocks while querying the stream. For the asynchronous (non-blocking) version of this function, see g_file_input_stream_query_info_async() . While the stream is blocked, the stream will set the pending flag internally, and any other operations on the stream will fail with G_IO_ERROR_PENDING .
	stream		# a GFileInputStream .
	attributes		# a file attribute query string.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a GFileInfo , or NULL on error.  
void g_file_input_stream_query_info_async (GFileInputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Queries the stream information asynchronously.When the operation is finished callback will be called. You can then call g_file_input_stream_query_info_finish() to get the result of the operation.
	stream		# a GFileInputStream .
	attributes		# a file attribute query string.
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
	callback		#  callback to call when the request is satisfied. 
	user_data		#  the data to pass to callback function. 
GFileInfo  *g_file_input_stream_query_info_finish (GFileInputStream *stream, GAsyncResult *result, GError **error);	# Finishes an asynchronous info query operation.
	stream		# a GFileInputStream .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring,or NULL to ignore.
	return:		#  GFileInfo .  
GFileInfo  *g_file_output_stream_query_info (GFileOutputStream *stream, const char *attributes, GCancellable *cancellable, GError **error);	# Queries a file output stream for the given attributes. This function blocks while querying the stream. For the asynchronous version of this function, see g_file_output_stream_query_info_async() . While the stream is blocked, the stream will set the pending flag internally, and any other operations on the stream will fail with G_IO_ERROR_PENDING .
	stream		# a GFileOutputStream .
	attributes		# a file attribute query string.
	cancellable		# optional GCancellable object, NULL to ignore. 
	error		# a GError , NULL to ignore.
	return:		#  a GFileInfo for the stream, or NULL on error.  
void g_file_output_stream_query_info_async (GFileOutputStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously queries the stream for a GFileInfo . When completed,callback will be called with a GAsyncResult which can be used to finish the operation with g_file_output_stream_query_info_finish() .
	stream		# a GFileOutputStream .
	attributes		# a file attribute query string.
	io_priority		# the I/O priority of the request
	cancellable		# optional GCancellable object, NULL to ignore. 
	callback		# callback to call when the request is satisfied
	user_data		# the data to pass to callback function
GFileInfo  *g_file_output_stream_query_info_finish (GFileOutputStream *stream, GAsyncResult *result, GError **error);	# Finalizes the asynchronous query started by g_file_output_stream_query_info_async() .
	stream		# a GFileOutputStream .
	result		# a GAsyncResult .
	error		# a GError , NULL to ignore.
	return:		#  A GFileInfo for the finished query.  
char  *g_file_output_stream_get_etag (GFileOutputStream *stream);	# Gets the entity tag for the file when it has been written.This must be called after the stream has been writtenand closed, as the etag can change while writing.
	stream		# a GFileOutputStream .
	return:		#  the entity tag for the stream. 
char  *g_file_io_stream_get_etag (GFileIOStream *stream);	# Gets the entity tag for the file when it has been written.This must be called after the stream has been writtenand closed, as the etag can change while writing.
	stream		# a GFileIOStream .
	return:		#  the entity tag for the stream. 
GFileInfo  *g_file_io_stream_query_info (GFileIOStream *stream, const char *attributes, GCancellable *cancellable, GError **error);	# Queries a file io stream for the given attributes.This function blocks while querying the stream. For the asynchronousversion of this function, see g_file_io_stream_query_info_async() .While the stream is blocked, the stream will set the pending flaginternally, and any other operations on the stream will fail withG_IO_ERROR_PENDING .
	stream		# a GFileIOStream .
	attributes		# a file attribute query string.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a GFileInfo for the stream, or NULL on error.  
void g_file_io_stream_query_info_async (GFileIOStream *stream, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously queries the stream for a GFileInfo . When completed,callback will be called with a GAsyncResult which can be used tofinish the operation with g_file_io_stream_query_info_finish() .
	stream		# a GFileIOStream .
	attributes		# a file attribute query string.
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
GFileInfo  *g_file_io_stream_query_info_finish (GFileIOStream *stream, GAsyncResult *result, GError **error);	# Finalizes the asynchronous query startedby g_file_io_stream_query_info_async() .
	stream		# a GFileIOStream .
	result		# a GAsyncResult .
	error		# a GError , NULL to ignore.
	return:		#  A GFileInfo for the finished query.  
int g_file_descriptor_based_get_fd (GFileDescriptorBased *fd_based);	# Gets the underlying file descriptor.
	fd_based		# a GFileDescriptorBased .
	return:		#  The file descriptor 
GInputStream  *g_filter_input_stream_get_base_stream (GFilterInputStream *stream);	# Gets the base stream for the filter stream.
	stream		# a GFilterInputStream .
	return:		#  a GInputStream .  
gboolean g_filter_input_stream_get_close_base_stream (GFilterInputStream *stream);	# Returns whether the base stream will be closed when stream isclosed.
	stream		# a GFilterInputStream .
	return:		#  TRUE if the base stream will be closed. 
void g_filter_input_stream_set_close_base_stream (GFilterInputStream *stream, gboolean close_base);	# Sets whether the base stream will be closed when stream is closed.
	stream		# a GFilterInputStream .
	close_base		# TRUE to close the base stream.
GOutputStream  *g_filter_output_stream_get_base_stream (GFilterOutputStream *stream);	# Gets the base stream for the filter stream.
	stream		# a GFilterOutputStream .
	return:		#  a GOutputStream .  
gboolean g_filter_output_stream_get_close_base_stream (GFilterOutputStream *stream);	# Returns whether the base stream will be closed when stream isclosed.
	stream		# a GFilterOutputStream .
	return:		#  TRUE if the base stream will be closed. 
void g_filter_output_stream_set_close_base_stream (GFilterOutputStream *stream, gboolean close_base);	# Sets whether the base stream will be closed when stream is closed.
	stream		# a GFilterOutputStream .
	close_base		# TRUE to close the base stream.
GInputStream  *g_memory_input_stream_new (void );	#创建对象:empty GMemoryInputStream .
	return:		#  a new GInputStream  
GInputStream  *g_memory_input_stream_new_from_data (const void *data, gssize len, GDestroyNotify destroy);	#创建对象:GMemoryInputStream with data in memory of a given size.
	data		#  input data. 
	return:		#  new GInputStream read from dataof lenbytes. 
GInputStream  *g_memory_input_stream_new_from_bytes (GBytes *bytes);	#创建对象:GMemoryInputStream with data from the given bytes.
	bytes		# a GBytes 
	return:		#  new GInputStream read from bytes 
void g_memory_input_stream_add_data (GMemoryInputStream *stream, const void *data, gssize len, GDestroyNotify destroy);	# Appends data to data that can be read from the input stream
	stream		# a GMemoryInputStream 
	data		#  input data. 
void g_memory_input_stream_add_bytes (GMemoryInputStream *stream, GBytes *bytes);	# Appends bytes to data that can be read from the input stream.
	stream		# a GMemoryInputStream 
	bytes		# input data
gpointer <span class="c_punctuation">( *GReallocFunc<span class="c_punctuation">) (gpointer data, gsize size);	# Changes the size of the memory block pointed to by data tosize bytes.
	data		# memory block to reallocate
	size		# size to reallocate datato
	return:		#  a pointer to the reallocated memory 
GOutputStream  *g_memory_output_stream_new (gpointer data, gsize size, GReallocFunc realloc_function, GDestroyNotify destroy_function);	#创建对象:GMemoryOutputStream .
	data		#  pointer to a chunk of memory to use, or NULL . 
	return:		#  A newly created GMemoryOutputStream object. 
GOutputStream  *g_memory_output_stream_new_resizable (void );	#创建对象:GMemoryOutputStream , using g_realloc() and g_free() for memory allocation.
gpointer g_memory_output_stream_get_data (GMemoryOutputStream *ostream);	# Gets any loaded data from the ostream.
	ostream		# a GMemoryOutputStream 
	return:		#  pointer to the stream's data, or NULL if the datahas been stolen.  
gsize g_memory_output_stream_get_size (GMemoryOutputStream *ostream);	# Gets the size of the currently allocated data area (available fromg_memory_output_stream_get_data() ).
	ostream		# a GMemoryOutputStream 
	return:		#  the number of bytes allocated for the data buffer 
gsize g_memory_output_stream_get_data_size (GMemoryOutputStream *ostream);	# Returns the number of bytes from the start up to including the lastbyte written in the stream that has not been truncated away.
	ostream		# a GMemoryOutputStream 
	return:		#  the number of bytes written to the stream 
gpointer g_memory_output_stream_steal_data (GMemoryOutputStream *ostream);	# Gets any loaded data from the ostream. Ownership of the datais transferred to the caller; when no longer needed it must befreed using the free function set in ostream's“destroy-function” property.
	ostream		# a GMemoryOutputStream 
	return:		#  the stream's data, or NULL if it has previouslybeen stolen.  
GBytes  *g_memory_output_stream_steal_as_bytes (GMemoryOutputStream *ostream);	# Returns data from the ostream as a GBytes . ostream must beclosed before calling this function.
	ostream		# a GMemoryOutputStream 
	return:		#  the stream's data.  
GInputStream  *g_buffered_input_stream_new (GInputStream *base_stream);	#创建对象:GInputStream from the given base_stream, witha buffer set to the default size (4 kilobytes).
	base_stream		# a GInputStream 
	return:		#  a GInputStream for the given base_stream. 
GInputStream  *g_buffered_input_stream_new_sized (GInputStream *base_stream, gsize size);	#创建对象:GBufferedInputStream from the given base_stream,with a buffer set to size.
	base_stream		# a GInputStream 
	size		# a gsize 
	return:		#  a GInputStream . 
gsize g_buffered_input_stream_get_buffer_size (GBufferedInputStream *stream);	# Gets the size of the input buffer.
	stream		# a GBufferedInputStream 
	return:		#  the current buffer size. 
void g_buffered_input_stream_set_buffer_size (GBufferedInputStream *stream, gsize size);	# Sets the size of the internal buffer of stream to size, or to thesize of the contents of the buffer. The buffer can never be resizedsmaller than its current contents.
	stream		# a GBufferedInputStream 
	size		# a gsize 
gsize g_buffered_input_stream_get_available (GBufferedInputStream *stream);	# Gets the size of the available data within the stream.
	stream		# GBufferedInputStream 
	return:		#  size of the available stream. 
void  *g_buffered_input_stream_peek_buffer (GBufferedInputStream *stream, gsize *count);	# Returns the buffer with the currently available bytes. The returnedbuffer must not be modified and will become invalid when reading fromthe stream or filling the buffer.
	stream		# a GBufferedInputStream 
	count		#  a gsize to get the number of bytes available in the buffer. 
	return:		#  read-only buffer.  
gsize g_buffered_input_stream_peek (GBufferedInputStream *stream, void *buffer, gsize offset, gsize count);	# Peeks in the buffer, copying data of size count into buffer,offset offset bytes.
	stream		# a GBufferedInputStream 
	buffer		#  a pointer toan allocated chunk of memory. 
	count		# a gsize 
	return:		#  a gsize of the number of bytes peeked, or -1 on error. 
gssize g_buffered_input_stream_fill (GBufferedInputStream *stream, gssize count, GCancellable *cancellable, GError **error);	# Tries to read count bytes from the stream into the buffer.Will block during this read.
	stream		# a GBufferedInputStream 
	count		# the number of bytes that will be read from the stream
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  the number of bytes read into stream's buffer, up to count,or -1 on error. 
void g_buffered_input_stream_fill_async (GBufferedInputStream *stream, gssize count, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Reads data into stream's buffer asynchronously, up to count size.io_priority can be used to prioritize reads. For the synchronousversion of this function, see g_buffered_input_stream_fill() .
	stream		# a GBufferedInputStream 
	count		# the number of bytes that will be read from the stream
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object. 
gssize g_buffered_input_stream_fill_finish (GBufferedInputStream *stream, GAsyncResult *result, GError **error);	# Finishes an asynchronous read.
	stream		# a GBufferedInputStream 
	result		# a GAsyncResult 
	error		# a GError 
	return:		#  a gssize of the read stream, or -1 on an error. 
int g_buffered_input_stream_read_byte (GBufferedInputStream *stream, GCancellable *cancellable, GError **error);	# Tries to read a single byte from the stream or the buffer. Will blockduring this read.
	stream		# a GBufferedInputStream 
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  the byte read from the stream, or -1 on end of stream or error. 
GOutputStream  *g_buffered_output_stream_new (GOutputStream *base_stream);	#创建对象:buffered output stream for a base stream.
	base_stream		# a GOutputStream .
	return:		#  a GOutputStream for the given base_stream. 
GOutputStream  *g_buffered_output_stream_new_sized (GOutputStream *base_stream, gsize size);	#创建对象:buffered output stream with a given buffer size.
	base_stream		# a GOutputStream .
	size		# a gsize .
	return:		#  a GOutputStream with an internal buffer set to size. 
gsize g_buffered_output_stream_get_buffer_size (GBufferedOutputStream *stream);	# Gets the size of the buffer in the stream.
	stream		# a GBufferedOutputStream .
	return:		#  the current size of the buffer. 
void g_buffered_output_stream_set_buffer_size (GBufferedOutputStream *stream, gsize size);	# Sets the size of the internal buffer to size.
	stream		# a GBufferedOutputStream .
	size		# a gsize .
gboolean g_buffered_output_stream_get_auto_grow (GBufferedOutputStream *stream);	# Checks if the buffer automatically grows as data is added.
	stream		# a GBufferedOutputStream .
	return:		#  TRUE if the stream's buffer automatically grows,FALSE otherwise. 
void g_buffered_output_stream_set_auto_grow (GBufferedOutputStream *stream, gboolean auto_grow);	# Sets whether or not the stream's buffer should automatically grow.If auto_grow is true, then each write will just make the bufferlarger, and you must manually flush the buffer to actually write outthe data to the underlying stream.
	stream		# a GBufferedOutputStream .
	auto_grow		# a gboolean .
GDataInputStream  *g_data_input_stream_new (GInputStream *base_stream);	#创建对象:data input stream for the base_stream.
	base_stream		# a GInputStream .
	return:		#  a new GDataInputStream . 
void g_data_input_stream_set_byte_order (GDataInputStream *stream, GDataStreamByteOrder order);	# This function sets the byte order for the given stream. All subsequentreads from the stream will be read in the given order.
	stream		# a given GDataInputStream .
	order		# a GDataStreamByteOrder to set.
GDataStreamByteOrder g_data_input_stream_get_byte_order (GDataInputStream *stream);	# Gets the byte order for the data input stream.
	stream		# a given GDataInputStream .
	return:		#  the stream's current GDataStreamByteOrder .  
void g_data_input_stream_set_newline_type (GDataInputStream *stream, GDataStreamNewlineType type);	# Sets the newline type for the stream.
	stream		# a GDataInputStream .
	type		# the type of new line return as GDataStreamNewlineType .
GDataStreamNewlineType g_data_input_stream_get_newline_type (GDataInputStream *stream);	# Gets the current newline type for the stream.
	stream		# a given GDataInputStream .
	return:		#  GDataStreamNewlineType for the given stream. 
guchar g_data_input_stream_read_byte (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads an unsigned 8-bit/1-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  an unsigned 8-bit/1-byte value read from the streamor 0if an error occurred. 
gint16 g_data_input_stream_read_int16 (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads a 16-bit/2-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a signed 16-bit/2-byte value read from streamor 0 ifan error occurred. 
guint16 g_data_input_stream_read_uint16 (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads an unsigned 16-bit/2-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  an unsigned 16-bit/2-byte value read from the streamor 0 ifan error occurred.  
gint32 g_data_input_stream_read_int32 (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads a signed 32-bit/4-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a signed 32-bit/4-byte value read from the streamor 0 ifan error occurred.  
guint32 g_data_input_stream_read_uint32 (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads an unsigned 32-bit/4-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  an unsigned 32-bit/4-byte value read from the streamor 0 ifan error occurred.  
gint64 g_data_input_stream_read_int64 (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads a 64-bit/8-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a signed 64-bit/8-byte value read from streamor 0 ifan error occurred.  
guint64 g_data_input_stream_read_uint64 (GDataInputStream *stream, GCancellable *cancellable, GError **error);	# Reads an unsigned 64-bit/8-byte value from stream.
	stream		# a given GDataInputStream .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  an unsigned 64-bit/8-byte read from streamor 0 ifan error occurred.  
char  *g_data_input_stream_read_line (GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error);	# Reads a line from the data input stream. Note that no encodingchecks or conversion is performed; the input is not guaranteed tobe UTF-8, and may in fact have embedded NUL characters.
	stream		# a given GDataInputStream .
	length		#  a gsize to get the length of the data read in. 
	return:		#  a NUL terminated byte array with the line that was read in(without the newlines). Set lengthto a gsize to get the lengthof the read line. On an error, it will return NULL and errorwill be set. If there's no content to read, it will still returnNULL , but errorwon't be set.  
char  *g_data_input_stream_read_line_utf8 (GDataInputStream *stream, gsize *length, GCancellable *cancellable, GError **error);	# Reads a UTF-8 encoded line from the data input stream.
	stream		# a given GDataInputStream .
	length		#  a gsize to get the length of the data read in. 
	return:		#  a NUL terminated UTF-8 stringwith the line that was read in (without the newlines). Setlengthto a gsize to get the length of the read line. On anerror, it will return NULL and errorwill be set. For UTF-8conversion errors, the set error domain is G_CONVERT_ERROR . Ifthere's no content to read, it will still return NULL , but errorwon't be set.  
void g_data_input_stream_read_line_async (GDataInputStream *stream, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# The asynchronous version of g_data_input_stream_read_line() . It isan error to have two outstanding calls to this function.
	stream		# a given GDataInputStream .
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
char  *g_data_input_stream_read_line_finish (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);	# Finish an asynchronous call started byg_data_input_stream_read_line_async() . Note the warning aboutstring encoding in g_data_input_stream_read_line() applies here aswell.
	stream		# a given GDataInputStream .
	result		# the GAsyncResult that was provided to the callback.
	length		#  a gsize to get the length of the data read in. 
	return:		#  a NUL-terminated byte array with the line that was read in(without the newlines). Set lengthto a gsize to get the lengthof the read line. On an error, it will return NULL and errorwill be set. If there's no content to read, it will still returnNULL , but errorwon't be set.  
char  *g_data_input_stream_read_line_finish_utf8 (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);	# Finish an asynchronous call started byg_data_input_stream_read_line_async() .
	stream		# a given GDataInputStream .
	result		# the GAsyncResult that was provided to the callback.
	length		#  a gsize to get the length of the data read in. 
	return:		#  a string with the line thatwas read in (without the newlines). Set lengthto a gsize toget the length of the read line. On an error, it will returnNULL and errorwill be set. For UTF-8 conversion errors, the seterror domain is G_CONVERT_ERROR . If there's no content to read,it will still return NULL , but errorwon't be set.  
char  *g_data_input_stream_read_upto (GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gsize *length, GCancellable *cancellable, GError **error);	# Reads a string from the data input stream, up to the firstoccurrence of any of the stop characters.
	stream		# a GDataInputStream 
	stop_chars		# characters to terminate the read
	stop_chars_len		# length of stop_chars. May be -1 if stop_charsisnul-terminated
	length		#  a gsize to get the length of the data read in. 
	return:		#  a string with the data that was readbefore encountering any of the stop characters. Set lengthtoa gsize to get the length of the string. This function willreturn NULL on an error.  
void g_data_input_stream_read_upto_async (GDataInputStream *stream, const gchar *stop_chars, gssize stop_chars_len, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# The asynchronous version of g_data_input_stream_read_upto() .It is an error to have two outstanding calls to this function.
	stream		# a GDataInputStream 
	stop_chars		# characters to terminate the read
	stop_chars_len		# length of stop_chars. May be -1 if stop_charsisnul-terminated
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
char  *g_data_input_stream_read_upto_finish (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);	# Finish an asynchronous call started byg_data_input_stream_read_upto_async() .
	stream		# a GDataInputStream 
	result		# the GAsyncResult that was provided to the callback
	length		#  a gsize to get the length of the data read in. 
	return:		#  a string with the data that was readbefore encountering any of the stop characters. Set lengthtoa gsize to get the length of the string. This function willreturn NULL on an error.  
char  *g_data_input_stream_read_until (GDataInputStream *stream, const gchar *stop_chars, gsize *length, GCancellable *cancellable, GError **error);	# Reads a string from the data input stream, up to the firstoccurrence of any of the stop characters.
	stream		# a given GDataInputStream .
	stop_chars		# characters to terminate the read.
	length		#  a gsize to get the length of the data read in. 
	return:		#  a string with the data that was readbefore encountering any of the stop characters. Set lengthtoa gsize to get the length of the string. This function willreturn NULL on an error.  
void g_data_input_stream_read_until_async (GDataInputStream *stream, const gchar *stop_chars, gint io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# The asynchronous version of g_data_input_stream_read_until() .It is an error to have two outstanding calls to this function.
	stream		# a given GDataInputStream .
	stop_chars		# characters to terminate the read.
	io_priority		# the I/O priority of the request
	cancellable		#  optional GCancellable object, NULL to ignore. 
char  *g_data_input_stream_read_until_finish (GDataInputStream *stream, GAsyncResult *result, gsize *length, GError **error);	# Finish an asynchronous call started byg_data_input_stream_read_until_async() .
	stream		# a given GDataInputStream .
	result		# the GAsyncResult that was provided to the callback.
	length		#  a gsize to get the length of the data read in. 
	return:		#  a string with the data that was readbefore encountering any of the stop characters. Set lengthtoa gsize to get the length of the string. This function willreturn NULL on an error.  
GDataOutputStream  *g_data_output_stream_new (GOutputStream *base_stream);	#创建对象:data output stream for base_stream.
	base_stream		# a GOutputStream .
	return:		#  GDataOutputStream . 
void g_data_output_stream_set_byte_order (GDataOutputStream *stream, GDataStreamByteOrder order);	# Sets the byte order of the data output stream to order.
	stream		# a GDataOutputStream .
	order		# a GDataStreamByteOrder .
GDataStreamByteOrder g_data_output_stream_get_byte_order (GDataOutputStream *stream);	# Gets the byte order for the stream.
	stream		# a GDataOutputStream .
	return:		#  the GDataStreamByteOrder for the stream. 
gboolean g_data_output_stream_put_byte (GDataOutputStream *stream, guchar data, GCancellable *cancellable, GError **error);	# Puts a byte into the output stream.
	stream		# a GDataOutputStream .
	data		# a guchar .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_int16 (GDataOutputStream *stream, gint16 data, GCancellable *cancellable, GError **error);	# Puts a signed 16-bit integer into the output stream.
	stream		# a GDataOutputStream .
	data		# a gint16 .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_uint16 (GDataOutputStream *stream, guint16 data, GCancellable *cancellable, GError **error);	# Puts an unsigned 16-bit integer into the output stream.
	stream		# a GDataOutputStream .
	data		# a guint16 .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_int32 (GDataOutputStream *stream, gint32 data, GCancellable *cancellable, GError **error);	# Puts a signed 32-bit integer into the output stream.
	stream		# a GDataOutputStream .
	data		# a gint32 .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_uint32 (GDataOutputStream *stream, guint32 data, GCancellable *cancellable, GError **error);	# Puts an unsigned 32-bit integer into the stream.
	stream		# a GDataOutputStream .
	data		# a guint32 .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_int64 (GDataOutputStream *stream, gint64 data, GCancellable *cancellable, GError **error);	# Puts a signed 64-bit integer into the stream.
	stream		# a GDataOutputStream .
	data		# a gint64 .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_uint64 (GDataOutputStream *stream, guint64 data, GCancellable *cancellable, GError **error);	# Puts an unsigned 64-bit integer into the stream.
	stream		# a GDataOutputStream .
	data		# a guint64 .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if datawas successfully added to the stream. 
gboolean g_data_output_stream_put_string (GDataOutputStream *stream, const char *str, GCancellable *cancellable, GError **error);	# Puts a string into the output stream.
	stream		# a GDataOutputStream .
	str		# a string.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  TRUE if stringwas successfully added to the stream. 
GInputStream  *g_unix_input_stream_new (gint fd, gboolean close_fd);	#创建对象:GUnixInputStream for the given fd. 
	fd		# a UNIX file descriptor
	close_fd		# TRUE to close the file descriptor when done
	return:		#  a new GUnixInputStream  
void g_unix_input_stream_set_close_fd (GUnixInputStream *stream, gboolean close_fd);	# Sets whether the file descriptor of stream shall be closedwhen the stream is closed.
	stream		# a GUnixInputStream 
	close_fd		# TRUE to close the file descriptor when done
gboolean g_unix_input_stream_get_close_fd (GUnixInputStream *stream);	# Returns whether the file descriptor of stream will beclosed when the stream is closed.
	stream		# a GUnixInputStream 
	return:		#  TRUE if the file descriptor is closed when done 
gint g_unix_input_stream_get_fd (GUnixInputStream *stream);	# Return the UNIX file descriptor that the stream reads from.
	stream		# a GUnixInputStream 
	return:		#  The file descriptor of stream 
GOutputStream  *g_unix_output_stream_new (gint fd, gboolean close_fd);	#创建对象:GUnixOutputStream for the given fd. 
	fd		# a UNIX file descriptor
	close_fd		# TRUE to close the file descriptor when done
	return:		#  a new GOutputStream  
void g_unix_output_stream_set_close_fd (GUnixOutputStream *stream, gboolean close_fd);	# Sets whether the file descriptor of stream shall be closedwhen the stream is closed.
	stream		# a GUnixOutputStream 
	close_fd		# TRUE to close the file descriptor when done
gboolean g_unix_output_stream_get_close_fd (GUnixOutputStream *stream);	# Returns whether the file descriptor of stream will beclosed when the stream is closed.
	stream		# a GUnixOutputStream 
	return:		#  TRUE if the file descriptor is closed when done 
gint g_unix_output_stream_get_fd (GUnixOutputStream *stream);	# Return the UNIX file descriptor that the stream writes to.
	stream		# a GUnixOutputStream 
	return:		#  The file descriptor of stream 
GInputStream  *g_win32_input_stream_new (void *handle, gboolean close_handle);	#创建对象:GWin32InputStream for the given handle.
	handle		# a Win32 file handle
	close_handle		# TRUE to close the handle when done
	return:		#  a new GWin32InputStream  
void g_win32_input_stream_set_close_handle (GWin32InputStream *stream, gboolean close_handle);	# Sets whether the handle of stream shall be closedwhen the stream is closed.
	stream		# a GWin32InputStream 
	close_handle		# TRUE to close the handle when done
gboolean g_win32_input_stream_get_close_handle (GWin32InputStream *stream);	# Returns whether the handle of stream will beclosed when the stream is closed.
	stream		# a GWin32InputStream 
	return:		#  TRUE if the handle is closed when done 
void  *g_win32_input_stream_get_handle (GWin32InputStream *stream);	# Return the Windows file handle that the stream reads from.
	stream		# a GWin32InputStream 
	return:		#  The file handle of stream 
GOutputStream  *g_win32_output_stream_new (void *handle, gboolean close_handle);	#创建对象:GWin32OutputStream for the given handle.
	handle		# a Win32 file handle
	close_handle		# TRUE to close the handle when done
	return:		#  a new GOutputStream  
void g_win32_output_stream_set_close_handle (GWin32OutputStream *stream, gboolean close_handle);	# Sets whether the handle of stream shall be closed when the streamis closed.
	stream		# a GWin32OutputStream 
	close_handle		# TRUE to close the handle when done
gboolean g_win32_output_stream_get_close_handle (GWin32OutputStream *stream);	# Returns whether the handle of stream will be closed when thestream is closed.
	stream		# a GWin32OutputStream 
	return:		#  TRUE if the handle is closed when done 
void  *g_win32_output_stream_get_handle (GWin32OutputStream *stream);	# Return the Windows handle that the stream writes to.
	stream		# a GWin32OutputStream 
	return:		#  The handle descriptor of stream 
GInputStream  *g_converter_input_stream_new (GInputStream *base_stream, GConverter *converter);	#创建对象:converter input stream for the base_stream.
	base_stream		# a GInputStream 
	converter		# a GConverter 
	return:		#  a new GInputStream . 
GConverter  *g_converter_input_stream_get_converter (GConverterInputStream *converter_stream);	# Gets the GConverter that is used by converter_stream.
	converter_stream		# a GConverterInputStream 
	return:		#  the converter of the converter input stream.  
GOutputStream  *g_converter_output_stream_new (GOutputStream *base_stream, GConverter *converter);	#创建对象:converter output stream for the base_stream.
	base_stream		# a GOutputStream 
	converter		# a GConverter 
	return:		#  a new GOutputStream . 
GConverter  *g_converter_output_stream_get_converter (GConverterOutputStream *converter_stream);	# Gets the GConverter that is used by converter_stream.
	converter_stream		# a GConverterOutputStream 
	return:		#  the converter of the converter output stream.  
gboolean g_pollable_input_stream_can_poll (GPollableInputStream *stream);	# Checks if stream is actually pollable. Some classes may implementGPollableInputStream but have only certain instances of that classbe pollable. If this method returns FALSE , then the behavior ofother GPollableInputStream methods is undefined.
	stream		# a GPollableInputStream .
	return:		#  TRUE if streamis pollable, FALSE if not. 
gboolean g_pollable_input_stream_is_readable (GPollableInputStream *stream);	# Checks if stream can be read.
	stream		# a GPollableInputStream .
	return:		#  TRUE if streamis readable, FALSE if not. If an errorhas occurred on stream, this will result ing_pollable_input_stream_is_readable() returning TRUE , and thenext attempt to read will return the error. 
GSource  *g_pollable_input_stream_create_source (GPollableInputStream *stream, GCancellable *cancellable);	# Creates a GSource that triggers when stream can be read, orcancellable is triggered or an error occurs. The callback on thesource is of the GPollableSourceFunc type.
	stream		# a GPollableInputStream .
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a new GSource .  
gssize g_pollable_input_stream_read_nonblocking (GPollableInputStream *stream, void *buffer, gsize count, GCancellable *cancellable, GError **error);	# Attempts to read up to count bytes from stream into buffer, aswith g_input_stream_read() . If stream is not currently readable,this will immediately return G_IO_ERROR_WOULD_BLOCK , and you canuse g_pollable_input_stream_create_source() to create a GSource that will be triggered when stream is readable.
	stream		# a GPollableInputStream 
	buffer		#  a buffer toread data into (which should be at least countbytes long). 
	return:		#  the number of bytes read, or -1 on error (includingG_IO_ERROR_WOULD_BLOCK ). 
gboolean g_pollable_output_stream_can_poll (GPollableOutputStream *stream);	# Checks if stream is actually pollable. Some classes may implementGPollableOutputStream but have only certain instances of thatclass be pollable. If this method returns FALSE , then the behaviorof other GPollableOutputStream methods is undefined.
	stream		# a GPollableOutputStream .
	return:		#  TRUE if streamis pollable, FALSE if not. 
gboolean g_pollable_output_stream_is_writable (GPollableOutputStream *stream);	# Checks if stream can be written.
	stream		# a GPollableOutputStream .
	return:		#  TRUE if streamis writable, FALSE if not. If an errorhas occurred on stream, this will result ing_pollable_output_stream_is_writable() returning TRUE , and thenext attempt to write will return the error. 
GSource  *g_pollable_output_stream_create_source (GPollableOutputStream *stream, GCancellable *cancellable);	# Creates a GSource that triggers when stream can be written, orcancellable is triggered or an error occurs. The callback on thesource is of the GPollableSourceFunc type.
	stream		# a GPollableOutputStream .
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a new GSource .  
gssize g_pollable_output_stream_write_nonblocking (GPollableOutputStream *stream, const void *buffer, gsize count, GCancellable *cancellable, GError **error);	# Attempts to write up to count bytes from buffer to stream, aswith g_output_stream_write() . If stream is not currently writable,this will immediately return G_IO_ERROR_WOULD_BLOCK , and you canuse g_pollable_output_stream_create_source() to create a GSource that will be triggered when stream is writable.
	stream		# a GPollableOutputStream 
	buffer		#  a buffer to writedata from. 
	return:		#  the number of bytes written, or -1 on error (includingG_IO_ERROR_WOULD_BLOCK ). 
gboolean <span class="c_punctuation">( *GPollableSourceFunc<span class="c_punctuation">) (GObject *pollable_stream, gpointer user_data);	# This is the function type of the callback used for the GSource returned by g_pollable_input_stream_create_source() andg_pollable_output_stream_create_source() .
	pollable_stream		# the GPollableInputStream or GPollableOutputStream 
	user_data		# data passed in by the user.
	return:		#  it should return FALSE if the source should be removed. 
GSource  *g_pollable_source_new (GObject *pollable_stream);	# Utility method for GPollableInputStream and GPollableOutputStream implementations.创建对象:GSource that expects a callback oftype GPollableSourceFunc . The new source does not actually doanything on its own; use g_source_add_child_source() to add othersources to it to cause it to trigger.
	pollable_stream		# the stream associated with the new source
	return:		#  the new GSource .  
GSource  *g_pollable_source_new_full (gpointer pollable_stream, GSource *child_source, GCancellable *cancellable);	# Utility method for GPollableInputStream and GPollableOutputStream implementations.创建对象:GSource , as withg_pollable_source_new() , but also attaching child_source (with adummy callback), and cancellable, if they are non-NULL .
	pollable_stream		#  the stream associated with thenew source. 
	return:		#  the new GSource .  
gssize g_pollable_stream_read (GInputStream *stream, void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error);	# Tries to read from stream, as with g_input_stream_read() (ifblocking is TRUE ) or g_pollable_input_stream_read_nonblocking() (if blocking is FALSE ). This can be used to more easily sharecode between blocking and non-blocking implementations of a method.
	stream		# a GInputStream 
	buffer		#  a buffer toread data into. 
	return:		#  the number of bytes read, or -1 on error. 
gssize g_pollable_stream_write (GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, GCancellable *cancellable, GError **error);	# Tries to write to stream, as with g_output_stream_write() (ifblocking is TRUE ) or g_pollable_output_stream_write_nonblocking() (if blocking is FALSE ). This can be used to more easily sharecode between blocking and non-blocking implementations of a method.
	stream		# a GOutputStream .
	buffer		#  the buffercontaining the data to write. 
	return:		#  the number of bytes written, or -1 on error. 
gboolean g_pollable_stream_write_all (GOutputStream *stream, const void *buffer, gsize count, gboolean blocking, gsize *bytes_written, GCancellable *cancellable, GError **error);	# Tries to write count bytes to stream, as withg_output_stream_write_all() , but using g_pollable_stream_write() rather than g_output_stream_write() .
	stream		# a GOutputStream .
	buffer		#  the buffercontaining the data to write. 
	return:		#  TRUE on success, FALSE if there was an error 
gboolean g_content_type_equals (const gchar *type1, const gchar *type2);	# Compares two content types for equality.
	type1		# a content type string
	type2		# a content type string
	return:		#  TRUE if the two strings are identical or equivalent,FALSE otherwise. 
gboolean g_content_type_is_a (const gchar *type, const gchar *supertype);	# Determines if type is a subset of supertype.
	type		# a content type string
	supertype		# a content type string
	return:		#  TRUE if typeis a kind of supertype,FALSE otherwise. 
gboolean g_content_type_is_mime_type (const gchar *type, const gchar *mime_type);	# Determines if type is a subset of mime_type.Convenience wrapper around g_content_type_is_a() .
	type		# a content type string
	mime_type		# a mime type string
	return:		#  TRUE if typeis a kind of mime_type,FALSE otherwise. 
gboolean g_content_type_is_unknown (const gchar *type);	# Checks if the content type is the generic "unknown" type.On UNIX this is the "application/octet-stream" mimetype,while on win32 it is "*" and on OSX it is a dynamic typeor octet-stream.
	type		# a content type string
	return:		#  TRUE if the type is the unknown type. 
gchar  *g_content_type_get_description (const gchar *type);	# Gets the human readable description of the content type.
	type		# a content type string
	return:		#  a short description of the content type type. Free thereturned string with g_free()  
gchar  *g_content_type_get_mime_type (const gchar *type);	# Gets the mime type for the content type, if one is registered.
	type		# a content type string
	return:		#  the registered mime type for the given type,or NULL if unknown.  
GIcon  *g_content_type_get_icon (const gchar *type);	# Gets the icon for a content type.
	type		# a content type string
	return:		#  GIcon corresponding to the content type. Free the returnedobject with g_object_unref() .  
GIcon  *g_content_type_get_symbolic_icon (const gchar *type);	# Gets the symbolic icon for a content type.
	type		# a content type string
	return:		#  symbolic GIcon corresponding to the content type.Free the returned object with g_object_unref() .  
gchar  *g_content_type_get_generic_icon_name (const gchar *type);	# Gets the generic icon name for a content type.
	type		# a content type string
	return:		#  the registered generic icon name for the given type,or NULL if unknown. Free with g_free() .  
gboolean g_content_type_can_be_executable (const gchar *type);	# Checks if a content type can be executable. Note that for instancethings like text files can be executables (i.e. scripts and batch files).
	type		# a content type string
	return:		#  TRUE if the file type corresponds to a type thatcan be executable, FALSE otherwise. 
gchar  *g_content_type_from_mime_type (const gchar *mime_type);	# Tries to find a content type based on the mime type name.
	mime_type		# a mime type string
	return:		#  Newly allocated string with content type orNULL . Free with g_free() .  
gchar  *g_content_type_guess (const gchar *filename, const guchar *data, gsize data_size, gboolean *result_uncertain);	# Guesses the content type based on example data. If the function isuncertain, result_uncertain will be set to TRUE . Either filenameor data may be NULL , in which case the guess will be based solelyon the other argument.
	filename		#  a string, or NULL . 
	return:		#  a string indicating a guessed content type for thegiven data. Free with g_free()  
gchar  **g_content_type_guess_for_tree (GFile *root);	# Tries to guess the type of the tree with root root, bylooking at the files it contains. The result is an arrayof content types, with the best guess coming first.
	root		# the root of the tree to guess a type for
	return:		#  an NULL -terminatedarray of zero or more content types. Free with g_strfreev() .  
GList  *g_content_types_get_registered (void );	# Gets a list of strings containing all the registered content typesknown to the system. The list and its data should be freed usingg_list_free_full (list, g_free).
	return:		#  list of the registeredcontent types.  
GAppInfo  *g_app_info_create_from_commandline (const char *commandline, const char *application_name, GAppInfoCreateFlags flags, GError **error);	#创建对象:GAppInfo from the given information.
	commandline		# the commandline to use
	application_name		#  the application name, or NULL to use commandline. 
	error		# a GError location to store the error occurring, NULL to ignore.
	return:		#  new GAppInfo for given command.  
GAppInfo  *g_app_info_dup (GAppInfo *appinfo);	# Creates a duplicate of a GAppInfo .
	appinfo		# a GAppInfo .
	return:		#  a duplicate of appinfo.  
gboolean g_app_info_equal (GAppInfo *appinfo1, GAppInfo *appinfo2);	# Checks if two GAppInfos are equal.
	appinfo1		# the first GAppInfo .
	appinfo2		# the second GAppInfo .
	return:		#  TRUE if appinfo1is equal to appinfo2. FALSE otherwise. 
char  *g_app_info_get_id (GAppInfo *appinfo);	# Gets the ID of an application. An id is a string thatidentifies the application. The exact format of the id isplatform dependent. For instance, on Unix this is thedesktop file id from the xdg menu specification.
	appinfo		# a GAppInfo .
	return:		#  a string containing the application's ID. 
char  *g_app_info_get_name (GAppInfo *appinfo);	# Gets the installed name of the application.
	appinfo		# a GAppInfo .
	return:		#  the name of the application for appinfo. 
char  *g_app_info_get_display_name (GAppInfo *appinfo);	# Gets the display name of the application. The display name is often moredescriptive to the user than the name itself.
	appinfo		# a GAppInfo .
	return:		#  the display name of the application for appinfo, or the name ifno display name is available. 
char  *g_app_info_get_description (GAppInfo *appinfo);	# Gets a human-readable description of an installed application.
	appinfo		# a GAppInfo .
	return:		#  a string containing a description of theapplication appinfo, or NULL if none.  
char  *g_app_info_get_executable (GAppInfo *appinfo);	# Gets the executable's name for the installed application.
	appinfo		# a GAppInfo 
	return:		#  a string containing the appinfo's applicationbinaries name.  
char  *g_app_info_get_commandline (GAppInfo *appinfo);	# Gets the commandline with which the application will bestarted.
	appinfo		# a GAppInfo 
	return:		#  a string containing the appinfo's commandline,or NULL if this information is not available.  
GIcon  *g_app_info_get_icon (GAppInfo *appinfo);	# Gets the icon for the application.
	appinfo		# a GAppInfo .
	return:		#  the default GIcon for appinfoor NULL if there is no default icon.  
gboolean g_app_info_launch (GAppInfo *appinfo, GList *files, GAppLaunchContext *launch_context, GError **error);	# Launches the application. Passes files to the launched applicationas arguments, using the optional launch_context to get informationabout the details of the launcher (like what screen it is on).On error, error will be set accordingly.
	appinfo		# a GAppInfo 
	files		#  a GList of GFile objects. 
	return:		#  TRUE on successful launch, FALSE otherwise. 
gboolean g_app_info_supports_files (GAppInfo *appinfo);	# Checks if the application accepts files as arguments.
	appinfo		# a GAppInfo .
	return:		#  TRUE if the appinfosupports files. 
gboolean g_app_info_supports_uris (GAppInfo *appinfo);	# Checks if the application supports reading files and directories from URIs.
	appinfo		# a GAppInfo .
	return:		#  TRUE if the appinfosupports URIs. 
gboolean g_app_info_launch_uris (GAppInfo *appinfo, GList *uris, GAppLaunchContext *launch_context, GError **error);	# Launches the application. This passes the uris to the launched applicationas arguments, using the optional launch_context to get informationabout the details of the launcher (like what screen it is on).On error, error will be set accordingly.
	appinfo		# a GAppInfo 
	uris		#  a GList containing URIs to launch. 
	return:		#  TRUE on successful launch, FALSE otherwise. 
gboolean g_app_info_should_show (GAppInfo *appinfo);	# Checks if the application info should be shown in menus that list available applications.
	appinfo		# a GAppInfo .
	return:		#  TRUE if the appinfoshould be shown, FALSE otherwise. 
gboolean g_app_info_can_delete (GAppInfo *appinfo);	# Obtains the information whether the GAppInfo can be deleted.See g_app_info_delete() .
	appinfo		# a GAppInfo 
	return:		#  TRUE if appinfocan be deleted 
gboolean g_app_info_delete (GAppInfo *appinfo);	# Tries to delete a GAppInfo .
	appinfo		# a GAppInfo 
	return:		#  TRUE if appinfohas been deleted 
void g_app_info_reset_type_associations (const char *content_type);	# Removes all changes to the type associations done byg_app_info_set_as_default_for_type() ,g_app_info_set_as_default_for_extension() ,g_app_info_add_supports_type() org_app_info_remove_supports_type() .
	content_type		# a content type
gboolean g_app_info_set_as_default_for_type (GAppInfo *appinfo, const char *content_type, GError **error);	# Sets the application as the default handler for a given type.
	appinfo		# a GAppInfo .
	content_type		# the content type.
	error		# a GError .
	return:		#  TRUE on success, FALSE on error. 
gboolean g_app_info_set_as_default_for_extension (GAppInfo *appinfo, const char *extension, GError **error);	# Sets the application as the default handler for the given file extension.
	appinfo		# a GAppInfo .
	extension		#  a string containing the file extension(without the dot). 
	return:		#  TRUE on success, FALSE on error. 
gboolean g_app_info_set_as_last_used_for_type (GAppInfo *appinfo, const char *content_type, GError **error);	# Sets the application as the last used application for a given type.This will make the application appear as first in the list returnedby g_app_info_get_recommended_for_type() , regardless of the defaultapplication for that content type.
	appinfo		# a GAppInfo .
	content_type		# the content type.
	error		# a GError .
	return:		#  TRUE on success, FALSE on error. 
gboolean g_app_info_add_supports_type (GAppInfo *appinfo, const char *content_type, GError **error);	# Adds a content type to the application information to indicate the application is capable of opening files with the given content type.
	appinfo		# a GAppInfo .
	content_type		# a string.
	error		# a GError .
	return:		#  TRUE on success, FALSE on error. 
gboolean g_app_info_can_remove_supports_type (GAppInfo *appinfo);	# Checks if a supported content type can be removed from an application.
	appinfo		# a GAppInfo .
	return:		#  TRUE if it is possible to remove supportedcontent types from a given appinfo, FALSE if not. 
gboolean g_app_info_remove_supports_type (GAppInfo *appinfo, const char *content_type, GError **error);	# Removes a supported type from an application, if possible.
	appinfo		# a GAppInfo .
	content_type		# a string.
	error		# a GError .
	return:		#  TRUE on success, FALSE on error. 
char  **g_app_info_get_supported_types (GAppInfo *appinfo);	# Retrieves the list of content types that app_info claims to support.If this information is not provided by the environment, this functionwill return NULL .This function does not take in consideration associations added withg_app_info_add_supports_type() , but only those exported directly bythe application.
	appinfo		# a GAppInfo that can handle files
	return:		#  a list of content types.  
GList  *g_app_info_get_all (void );	# Gets a list of all of the applications currently registeredon this system.
	return:		#  a newly allocated GList of references to GAppInfos .  
GList  *g_app_info_get_all_for_type (const char *content_type);	# Gets a list of all GAppInfos for a given content type,including the recommended and fallback GAppInfos . Seeg_app_info_get_recommended_for_type() andg_app_info_get_fallback_for_type() .
	content_type		# the content type to find a GAppInfo for
	return:		#  GList of GAppInfos for given content_typeor NULL on error.  
GAppInfo  *g_app_info_get_default_for_type (const char *content_type, gboolean must_support_uris);	# Gets the default GAppInfo for a given content type.
	content_type		# the content type to find a GAppInfo for
	must_support_uris		# if TRUE , the GAppInfo is expected tosupport URIs
	return:		#  GAppInfo for given content_typeorNULL on error.  
GAppInfo  *g_app_info_get_default_for_uri_scheme (const char *uri_scheme);	# Gets the default application for handling URIs withthe given URI scheme. A URI scheme is the initial partof the URI, up to but not including the ':', e.g. "http","ftp" or "sip".
	uri_scheme		# a string containing a URI scheme.
	return:		#  GAppInfo for given uri_schemeor NULL on error.  
GList  *g_app_info_get_fallback_for_type (const gchar *content_type);	# Gets a list of fallback GAppInfos for a given content type, i.e.those applications which claim to support the given content typeby MIME type subclassing and not directly.
	content_type		# the content type to find a GAppInfo for
	return:		#  GList of GAppInfos for given content_typeor NULL on error.  
GList  *g_app_info_get_recommended_for_type (const gchar *content_type);	# Gets a list of recommended GAppInfos for a given content type, i.e.those applications which claim to support the given content type exactly,and not by MIME type subclassing.Note that the first application of the list is the last used one, i.e.the last one for which g_app_info_set_as_last_used_for_type() has beencalled.
	content_type		# the content type to find a GAppInfo for
	return:		#  GList of GAppInfos for given content_typeor NULL on error.  
gboolean g_app_info_launch_default_for_uri (const char *uri, GAppLaunchContext *launch_context, GError **error);	# Utility function that launches the default applicationregistered to handle the specified uri. Synchronous I/Ois done on the uri to detect the type of the file ifrequired.
	uri		# the uri to show
	launch_context		#  an optional GAppLaunchContext . 
	return:		#  TRUE on success, FALSE on error. 
void g_app_info_launch_default_for_uri_async (const char *uri, GAppLaunchContext *launch_context, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Async version of g_app_info_launch_default_for_uri() .
	uri		# the uri to show
	context		#  an optional GAppLaunchContext cancellable: (nullable): a GCancellable . 
gboolean g_app_info_launch_default_for_uri_finish (GAsyncResult *result, GError **error);	# Finishes an asynchronous launch-default-for-uri operation.
	result		# a GAsyncResult 
	error		#  return location for an error, or NULL . 
	return:		#  TRUE if the launch was successful, FALSE if erroris set 
void g_app_launch_context_setenv (GAppLaunchContext *context, const char *variable, const char *value);	# Arranges for variable to be set to value in the child'senvironment when context is used to launch an application.
	context		# a GAppLaunchContext 
	variable		# the environment variable to set
	value		# the value for to set the variable to.
void g_app_launch_context_unsetenv (GAppLaunchContext *context, const char *variable);	# Arranges for variable to be unset in the child's environmentwhen context is used to launch an application.
	context		# a GAppLaunchContext 
	variable		# the environment variable to remove
char  **g_app_launch_context_get_environment (GAppLaunchContext *context);	# Gets the complete environment variable list to be passed tothe child process when context is used to launch an application.This is a NULL -terminated array of strings, where each string hasthe form KEY=VALUE.
	context		# a GAppLaunchContext 
	return:		#  thechild's environment.  
char  *g_app_launch_context_get_display (GAppLaunchContext *context, GAppInfo *info, GList *files);	# Gets the display string for the context. This is used to ensure newapplications are started on the same display as the launchingapplication, by setting the DISPLAY environment variable.
	context		# a GAppLaunchContext 
	info		# a GAppInfo 
	files		#  a GList of GFile objects. 
	return:		#  a display string for the display. 
char  *g_app_launch_context_get_startup_notify_id (GAppLaunchContext *context, GAppInfo *info, GList *files);	# Initiates startup notification for the application and returns theDESKTOP_STARTUP_ID for the launched operation, if supported.
	context		# a GAppLaunchContext 
	info		# a GAppInfo 
	files		#  a GList of of GFile objects. 
	return:		#  a startup notification ID for the application, or NULL ifnot supported. 
void g_app_launch_context_launch_failed (GAppLaunchContext *context, const char *startup_notify_id);	# Called when an application has failed to launch, so that it can cancelthe application startup notification started in g_app_launch_context_get_startup_notify_id() .
	context		# a GAppLaunchContext .
	startup_notify_id		# the startup notification id that was returned by 
GAppLaunchContext  *g_app_launch_context_new (void );	#创建对象:application launch context. This is not normally used,instead you instantiate a subclass of this, such as GdkAppLaunchContext .
	return:		#  a GAppLaunchContext . 
GAppInfoMonitor  *g_app_info_monitor_get (void );	# Gets the GAppInfoMonitor for the current thread-default maincontext.
	return:		#  a reference to a GAppInfoMonitor .  
GDesktopAppInfo  *g_desktop_app_info_new_from_filename (const char *filename);	#创建对象:GDesktopAppInfo .
	filename		#  the path of a desktop file, in the GLibfilename encoding. 
	return:		#  a new GDesktopAppInfo or NULL on error. 
GDesktopAppInfo  *g_desktop_app_info_new_from_keyfile (GKeyFile *key_file);	#创建对象:GDesktopAppInfo .
	key_file		# an opened GKeyFile 
	return:		#  a new GDesktopAppInfo or NULL on error. 
GDesktopAppInfo  *g_desktop_app_info_new (const char *desktop_id);	#创建对象:GDesktopAppInfo based on a desktop file id.
	desktop_id		# the desktop file id
	return:		#  a new GDesktopAppInfo , or NULL if no desktop file with that id 
char  *g_desktop_app_info_get_filename (GDesktopAppInfo *info);	# When info was created from a known filename, return it. In somesituations such as the GDesktopAppInfo returned fromg_desktop_app_info_new_from_keyfile() , this function will return NULL .
	info		# a GDesktopAppInfo 
	return:		#  The full path to the file for info,or NULL if not known.  
gboolean g_desktop_app_info_get_is_hidden (GDesktopAppInfo *info);	# A desktop file is hidden if the Hidden key in it isset to True.
	info		# a GDesktopAppInfo .
	return:		#  TRUE if hidden, FALSE otherwise. 
gboolean g_desktop_app_info_get_nodisplay (GDesktopAppInfo *info);	# Gets the value of the NoDisplay key, which helps determine if theapplication info should be shown in menus. SeeG_KEY_FILE_DESKTOP_KEY_NO_DISPLAY and g_app_info_should_show() .
	info		# a GDesktopAppInfo 
	return:		#  The value of the NoDisplay key 
gboolean g_desktop_app_info_get_show_in (GDesktopAppInfo *info, const gchar *desktop_env);	# Checks if the application info should be shown in menus that list availableapplications for a specific name of the desktop, based on theOnlyShowIn and NotShowIn keys.
	info		# a GDesktopAppInfo 
	desktop_env		#  a string specifying a desktop name. 
	return:		#  TRUE if the infoshould be shown in desktop_envaccording to theOnlyShowIn and NotShowIn keys, FALSE otherwise. 
char  *g_desktop_app_info_get_generic_name (GDesktopAppInfo *info);	# Gets the generic name from the destkop file.
	info		# a GDesktopAppInfo 
	return:		#  The value of the GenericName key 
char  *g_desktop_app_info_get_categories (GDesktopAppInfo *info);	# Gets the categories from the desktop file.
	info		# a GDesktopAppInfo 
	return:		#  The unparsed Categories key from the desktop file;i.e. no attempt is made to split it by ';' or validate it. 
char  * const *g_desktop_app_info_get_keywords (GDesktopAppInfo *info);	# Gets the keywords from the desktop file.
	info		# a GDesktopAppInfo 
	return:		#  The value of the Keywords key.  
char  *g_desktop_app_info_get_startup_wm_class (GDesktopAppInfo *info);	# Retrieves the StartupWMClass field from info. This represents theWM_CLASS property of the main window of the application, if launchedthrough info.
	info		# a GDesktopAppInfo that supports startup notify
	return:		#  the startup WM class, or NULL if none is setin the desktop file.  
void g_desktop_app_info_set_desktop_env (const char *desktop_env);	# g_desktop_app_info_set_desktop_env has been deprecated since version 2.42 and should not be used in newly-written code.
	desktop_env		# a string specifying what desktop this is
char  *g_desktop_app_info_get_string (GDesktopAppInfo *info, const char *key);	# Looks up a string value in the keyfile backing info.
	info		# a GDesktopAppInfo 
	key		# the key to look up
	return:		#  a newly allocated string, or NULL if the keyis not found 
gboolean g_desktop_app_info_get_boolean (GDesktopAppInfo *info, const char *key);	# Looks up a boolean value in the keyfile backing info.
	info		# a GDesktopAppInfo 
	key		# the key to look up
	return:		#  the boolean value, or FALSE if the keyis not found 
gboolean g_desktop_app_info_has_key (GDesktopAppInfo *info, const char *key);	# Returns whether key exists in the "Desktop Entry" groupof the keyfile backing info.
	info		# a GDesktopAppInfo 
	key		# the key to look up
	return:		#  TRUE if the keyexists 
void <span class="c_punctuation">( *GDesktopAppLaunchCallback<span class="c_punctuation">) (GDesktopAppInfo *appinfo, GPid pid, gpointer user_data);	# During invocation, g_desktop_app_info_launch_uris_as_manager() maycreate one or more child processes. This callback is invoked oncefor each, providing the process ID.
	appinfo		# a GDesktopAppInfo 
	pid		# Process identifier
	user_data		# User data
gboolean g_desktop_app_info_launch_uris_as_manager (GDesktopAppInfo *appinfo, GList *uris, GAppLaunchContext *launch_context, GSpawnFlags spawn_flags, GSpawnChildSetupFunc user_setup, gpointer user_setup_data, GDesktopAppLaunchCallback pid_callback, gpointer pid_callback_data, GError **error);	# This function performs the equivalent of g_app_info_launch_uris() ,but is intended primarily for operating system components thatlaunch applications. Ordinary applications should useg_app_info_launch_uris() .
	appinfo		# a GDesktopAppInfo 
	uris		#  List of URIs. 
	user_setup		#  a GSpawnChildSetupFunc , used oncefor each process. 
	return:		#  TRUE on successful launch, FALSE otherwise. 
gchar  * const *g_desktop_app_info_list_actions (GDesktopAppInfo *info);	# Returns the list of "additional application actions" supported on thedesktop file, as per the desktop file specification.
	info		# a GDesktopAppInfo 
	return:		#  a list of strings, always non-NULL .  
gchar  *g_desktop_app_info_get_action_name (GDesktopAppInfo *info, const gchar *action_name);	# Gets the user-visible display name of the "additional applicationaction" specified by action_name.
	info		# a GDesktopAppInfo 
	action_name		# the name of the action as from
	return:		#  the locale-specific action name.  
void g_desktop_app_info_launch_action (GDesktopAppInfo *info, const gchar *action_name, GAppLaunchContext *launch_context);	# Activates the named application action.
	info		# a GDesktopAppInfo 
	action_name		# the name of the action as from
	launch_context		#  a GAppLaunchContext . 
gchar  ***g_desktop_app_info_search (const gchar *search_string);	# Searches desktop files for ones that match search_string.
	search_string		# the search string to use
	return:		#  alist of strvs. Free each item with g_strfreev() and free the outerlist with g_free() .  
GList  *g_desktop_app_info_get_implementations (const gchar *interface);	# Gets all applications that implement interface.
	interface		# the name of the interface
	return:		#  a list of GDesktopAppInfo objects.  
GVolumeMonitor  *g_volume_monitor_get (void );	# Gets the volume monitor used by gio.
	return:		#  a reference to the GVolumeMonitor used by gio. Callg_object_unref() when done with it.  
GList  *g_volume_monitor_get_connected_drives (GVolumeMonitor *volume_monitor);	# Gets a list of drives connected to the system.
	volume_monitor		# a GVolumeMonitor .
	return:		#  a GList of connected GDrive objects.  
GList  *g_volume_monitor_get_volumes (GVolumeMonitor *volume_monitor);	# Gets a list of the volumes on the system.
	volume_monitor		# a GVolumeMonitor .
	return:		#  a GList of GVolume objects.  
GList  *g_volume_monitor_get_mounts (GVolumeMonitor *volume_monitor);	# Gets a list of the mounts on the system.
	volume_monitor		# a GVolumeMonitor .
	return:		#  a GList of GMount objects.  
GVolume  *g_volume_monitor_adopt_orphan_mount (GMount *mount);	# g_volume_monitor_adopt_orphan_mount has been deprecated since version 2.20 and should not be used in newly-written code.
	mount		# a GMount object to find a parent for
	return:		#  the GVolume object that is the parent for mountor NULL if no wants to adopt the GMount .  
GMount  *g_volume_monitor_get_mount_for_uuid (GVolumeMonitor *volume_monitor, const char *uuid);	# Finds a GMount object by its UUID (see g_mount_get_uuid() )
	volume_monitor		# a GVolumeMonitor .
	uuid		# the UUID to look for
	return:		#  a GMount or NULL if no such mount is available.Free the returned object with g_object_unref() .  
GVolume  *g_volume_monitor_get_volume_for_uuid (GVolumeMonitor *volume_monitor, const char *uuid);	# Finds a GVolume object by its UUID (see g_volume_get_uuid() )
	volume_monitor		# a GVolumeMonitor .
	uuid		# the UUID to look for
	return:		#  a GVolume or NULL if no such volume is available.Free the returned object with g_object_unref() .  
char  *g_volume_get_name (GVolume *volume);	# Gets the name of volume.
	volume		# a GVolume 
	return:		#  the name for the given volume. The returned string shouldbe freed with g_free() when no longer needed. 
char  *g_volume_get_uuid (GVolume *volume);	# Gets the UUID for the volume. The reference is typically based onthe file system UUID for the volume in question and should beconsidered an opaque string. Returns NULL if there is no UUIDavailable.
	volume		# a GVolume 
	return:		#  the UUID for volumeor NULL if no UUID can be computed.The returned string should be freed with g_free() when no longer needed. 
GIcon  *g_volume_get_icon (GVolume *volume);	# Gets the icon for volume.
	volume		# a GVolume 
	return:		#  a GIcon .The returned object should be unreffed with g_object_unref() when no longer needed.  
GIcon  *g_volume_get_symbolic_icon (GVolume *volume);	# Gets the symbolic icon for volume.
	volume		# a GVolume 
	return:		#  a GIcon .The returned object should be unreffed with g_object_unref() when no longer needed.  
GDrive  *g_volume_get_drive (GVolume *volume);	# Gets the drive for the volume.
	volume		# a GVolume 
	return:		#  a GDrive or NULL if volumeis notassociated with a drive. The returned object should be unreffedwith g_object_unref() when no longer needed.  
GMount  *g_volume_get_mount (GVolume *volume);	# Gets the mount for the volume.
	volume		# a GVolume 
	return:		#  a GMount or NULL if volumeisn't mounted.The returned object should be unreffed with g_object_unref() when no longer needed.  
gboolean g_volume_can_mount (GVolume *volume);	# Checks if a volume can be mounted.
	volume		# a GVolume 
	return:		#  TRUE if the volumecan be mounted. FALSE otherwise 
gboolean g_volume_should_automount (GVolume *volume);	# Returns whether the volume should be automatically mounted.
	volume		# a GVolume 
	return:		#  TRUE if the volume should be automatically mounted 
GFile  *g_volume_get_activation_root (GVolume *volume);	# Gets the activation root for a GVolume if it is known ahead ofmount time. Returns NULL otherwise. If not NULL and if volumeis mounted, then the result of g_mount_get_root() on theGMount object obtained from g_volume_get_mount() will alwayseither be equal or a prefix of what this function returns. Inother words, in code
	volume		# a GVolume 
	return:		#  the activation root of volumeor NULL . Use g_object_unref() to free.  
void g_volume_mount (GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Mounts a volume. This is an asynchronous operation, and isfinished by calling g_volume_mount_finish() with the volumeand GAsyncResult returned in the callback.
	volume		# a GVolume 
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation or NULL to avoid user interaction. 
	user_data		# user data that gets passed to callback
gboolean g_volume_mount_finish (GVolume *volume, GAsyncResult *result, GError **error);	# Finishes mounting a volume. If any errors occurred during the operation,error will be set to contain the errors and FALSE will be returned.
	volume		# a GVolume 
	result		# a GAsyncResult 
	error		# a GError location to store an error, or NULL to ignore
	return:		#  TRUE , FALSE if operation failed 
gboolean g_volume_can_eject (GVolume *volume);	# Checks if a volume can be ejected.
	volume		# a GVolume 
	return:		#  TRUE if the volumecan be ejected. FALSE otherwise 
void g_volume_eject (GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_volume_eject has been deprecated since version 2.22 and should not be used in newly-written code.
	volume		# a GVolume 
	flags		# flags affecting the unmount if required for eject
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		# user data that gets passed to callback
gboolean g_volume_eject_finish (GVolume *volume, GAsyncResult *result, GError **error);	# g_volume_eject_finish has been deprecated since version 2.22 and should not be used in newly-written code.
	volume		# pointer to a GVolume 
	result		# a GAsyncResult 
	error		# a GError location to store an error, or NULL to ignore
	return:		#  TRUE , FALSE if operation failed 
void g_volume_eject_with_operation (GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Ejects a volume. This is an asynchronous operation, and isfinished by calling g_volume_eject_with_operation_finish() with the volumeand GAsyncResult data returned in the callback.
	volume		# a GVolume 
	flags		# flags affecting the unmount if required for eject
	mount_operation		#  a GMountOperation or NULL toavoid user interaction. 
gboolean g_volume_eject_with_operation_finish (GVolume *volume, GAsyncResult *result, GError **error);	# Finishes ejecting a volume. If any errors occurred during the operation,error will be set to contain the errors and FALSE will be returned.
	volume		# a GVolume 
	result		# a GAsyncResult 
	error		# a GError location to store the error occurring, or NULL 
	return:		#  TRUE if the volume was successfully ejected. FALSE otherwise 
char  **g_volume_enumerate_identifiers (GVolume *volume);	# Gets the kinds of identifiers that volume has.Use g_volume_get_identifier() to obtain the identifiers themselves.
	volume		# a GVolume 
	return:		#  a NULL -terminated arrayof strings containing kinds of identifiers. Use g_strfreev() to free.  
char  *g_volume_get_identifier (GVolume *volume, const char *kind);	# Gets the identifier of the given kind for volume. See the introduction for moreinformation about volume identifiers.
	volume		# a GVolume 
	kind		# the kind of identifier to return
	return:		#  a newly allocated string containing therequested identfier, or NULL if the GVolume doesn't have this kind of identifier 
gchar  *g_volume_get_sort_key (GVolume *volume);	# Gets the sort key for volume, if any.
	volume		# a GVolume 
	return:		#  Sorting key for volumeor NULL if no such key is available 
char  *g_mount_get_name (GMount *mount);	# Gets the name of mount.
	mount		# a GMount .
	return:		#  the name for the given mount.The returned string should be freed with g_free() when no longer needed. 
char  *g_mount_get_uuid (GMount *mount);	# Gets the UUID for the mount. The reference is typically based onthe file system UUID for the mount in question and should beconsidered an opaque string. Returns NULL if there is no UUIDavailable.
	mount		# a GMount .
	return:		#  the UUID for mountor NULL if no UUID can be computed.The returned string should be freed with g_free() when no longer needed. 
GIcon  *g_mount_get_icon (GMount *mount);	# Gets the icon for mount.
	mount		# a GMount .
	return:		#  a GIcon .The returned object should be unreffed withg_object_unref() when no longer needed.  
GIcon  *g_mount_get_symbolic_icon (GMount *mount);	# Gets the symbolic icon for mount.
	mount		# a GMount .
	return:		#  a GIcon .The returned object should be unreffed withg_object_unref() when no longer needed.  
GDrive  *g_mount_get_drive (GMount *mount);	# Gets the drive for the mount.
	mount		# a GMount .
	return:		#  a GDrive or NULL if mountis not associated with a volume or a drive.The returned object should be unreffed withg_object_unref() when no longer needed.  
GFile  *g_mount_get_root (GMount *mount);	# Gets the root directory on mount.
	mount		# a GMount .
	return:		#  a GFile .The returned object should be unreffed withg_object_unref() when no longer needed.  
GVolume  *g_mount_get_volume (GMount *mount);	# Gets the volume for the mount.
	mount		# a GMount .
	return:		#  a GVolume or NULL if mountis not associated with a volume.The returned object should be unreffed withg_object_unref() when no longer needed.  
GFile  *g_mount_get_default_location (GMount *mount);	# Gets the default location of mount. The default location of the givenmount is a path that reflects the main entry point for the user (e.g.the home directory, or the root of the volume).
	mount		# a GMount .
	return:		#  a GFile .The returned object should be unreffed withg_object_unref() when no longer needed.  
gboolean g_mount_can_unmount (GMount *mount);	# Checks if mount can be unmounted.
	mount		# a GMount .
	return:		#  TRUE if the mountcan be unmounted. 
void g_mount_unmount (GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_mount_unmount has been deprecated since version 2.22 and should not be used in newly-written code.
	mount		# a GMount .
	flags		# flags affecting the operation
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		# user data passed to callback.
gboolean g_mount_unmount_finish (GMount *mount, GAsyncResult *result, GError **error);	# g_mount_unmount_finish has been deprecated since version 2.22 and should not be used in newly-written code.
	mount		# a GMount .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the mount was successfully unmounted. FALSE otherwise. 
void g_mount_unmount_with_operation (GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Unmounts a mount. This is an asynchronous operation, and isfinished by calling g_mount_unmount_with_operation_finish() with the mount and GAsyncResult data returned in the callback.
	mount		# a GMount .
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation or NULL to avoiduser interaction. 
gboolean g_mount_unmount_with_operation_finish (GMount *mount, GAsyncResult *result, GError **error);	# Finishes unmounting a mount. If any errors occurred during the operation,error will be set to contain the errors and FALSE will be returned.
	mount		# a GMount .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the mount was successfully unmounted. FALSE otherwise. 
void g_mount_remount (GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Remounts a mount. This is an asynchronous operation, and is finished by calling g_mount_remount_finish() with the mount and GAsyncResults data returned in the callback.
	mount		# a GMount .
	flags		# flags affecting the operation
	mount_operation		#  a GMountOperation or NULL to avoiduser interaction. 
	user_data		# user data passed to callback.
gboolean g_mount_remount_finish (GMount *mount, GAsyncResult *result, GError **error);	# Finishes remounting a mount. If any errors occurred during the operation, error will be set to contain the errors and FALSE will be returned.
	mount		# a GMount .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the mount was successfully remounted. FALSE otherwise. 
gboolean g_mount_can_eject (GMount *mount);	# Checks if mount can be ejected.
	mount		# a GMount .
	return:		#  TRUE if the mountcan be ejected. 
void g_mount_eject (GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_mount_eject has been deprecated since version 2.22 and should not be used in newly-written code.
	mount		# a GMount .
	flags		# flags affecting the unmount if required for eject
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		# user data passed to callback.
gboolean g_mount_eject_finish (GMount *mount, GAsyncResult *result, GError **error);	# g_mount_eject_finish has been deprecated since version 2.22 and should not be used in newly-written code.
	mount		# a GMount .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the mount was successfully ejected. FALSE otherwise. 
void g_mount_eject_with_operation (GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Ejects a mount. This is an asynchronous operation, and isfinished by calling g_mount_eject_with_operation_finish() with the mountand GAsyncResult data returned in the callback.
	mount		# a GMount .
	flags		# flags affecting the unmount if required for eject
	mount_operation		#  a GMountOperation or NULL to avoiduser interaction. 
gboolean g_mount_eject_with_operation_finish (GMount *mount, GAsyncResult *result, GError **error);	# Finishes ejecting a mount. If any errors occurred during the operation,error will be set to contain the errors and FALSE will be returned.
	mount		# a GMount .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the mount was successfully ejected. FALSE otherwise. 
void g_mount_guess_content_type (GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Tries to guess the type of content stored on mount. Returns one ormore textual identifiers of well-known content types (typicallyprefixed with "x-content/"), e.g. x-content/image-dcf for camera memory cards. See the shared-mime-info specification for more on x-content types.
	mount		# a GMount 
	force_rescan		# Whether to force a rescan of the content.Otherwise a cached result will be used if available
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		# user data passed to callback
gchar  **g_mount_guess_content_type_finish (GMount *mount, GAsyncResult *result, GError **error);	# Finishes guessing content types of mount. If any errors occurredduring the operation, error will be set to contain the errors andFALSE will be returned. In particular, you may get an G_IO_ERROR_NOT_SUPPORTED if the mount does not support content guessing.
	mount		# a GMount 
	result		# a GAsyncResult 
	error		# a GError location to store the error occurring, or NULL toignore
	return:		#  a NULL -terminated array of content types or NULL on error.Caller should free this array with g_strfreev() when done with it.  
gchar  **g_mount_guess_content_type_sync (GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error);	# Tries to guess the type of content stored on mount. Returns one ormore textual identifiers of well-known content types (typicallyprefixed with "x-content/"), e.g. x-content/image-dcf for camera memory cards. See the shared-mime-info specification for more on x-content types.
	mount		# a GMount 
	force_rescan		# Whether to force a rescan of the content.Otherwise a cached result will be used if available
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a NULL -terminated array of content types or NULL on error.Caller should free this array with g_strfreev() when done with it.  
gboolean g_mount_is_shadowed (GMount *mount);	# Determines if mount is shadowed. Applications or libraries shouldavoid displaying mount in the user interface if it is shadowed.
	mount		# A GMount .
	return:		#  TRUE if mountis shadowed. 
void g_mount_shadow (GMount *mount);	# Increments the shadow count on mount. Usually used byGVolumeMonitor implementations when creating a shadow mount formount, see g_mount_is_shadowed() for more information. The callerwill need to emit the “changed” signal on mount manually.
	mount		# A GMount .
void g_mount_unshadow (GMount *mount);	# Decrements the shadow count on mount. Usually used byGVolumeMonitor implementations when destroying a shadow mount formount, see g_mount_is_shadowed() for more information. The callerwill need to emit the “changed” signal on mount manually.
	mount		# A GMount .
gchar  *g_mount_get_sort_key (GMount *mount);	# Gets the sort key for mount, if any.
	mount		# A GMount .
	return:		#  Sorting key for mountor NULL if no such key is available. 
char  *g_drive_get_name (GDrive *drive);	# Gets the name of drive.
	drive		# a GDrive .
	return:		#  a string containing drive's name. The returnedstring should be freed when no longer needed. 
GIcon  *g_drive_get_icon (GDrive *drive);	# Gets the icon for drive.
	drive		# a GDrive .
	return:		#  GIcon for the drive.Free the returned object with g_object_unref() .  
GIcon  *g_drive_get_symbolic_icon (GDrive *drive);	# Gets the icon for drive.
	drive		# a GDrive .
	return:		#  symbolic GIcon for the drive.Free the returned object with g_object_unref() .  
gboolean g_drive_has_volumes (GDrive *drive);	# Check if drive has any mountable volumes.
	drive		# a GDrive .
	return:		#  TRUE if the drivecontains volumes, FALSE otherwise. 
GList  *g_drive_get_volumes (GDrive *drive);	# Get a list of mountable volumes for drive.
	drive		# a GDrive .
	return:		#  GList containing any GVolume objects on the given drive.  
gboolean g_drive_can_eject (GDrive *drive);	# Checks if a drive can be ejected.
	drive		# a GDrive .
	return:		#  TRUE if the drivecan be ejected, FALSE otherwise. 
GDriveStartStopType g_drive_get_start_stop_type (GDrive *drive);	# Gets a hint about how a drive can be started/stopped.
	drive		# a GDrive .
	return:		#  A value from the GDriveStartStopType enumeration. 
gboolean g_drive_can_start (GDrive *drive);	# Checks if a drive can be started.
	drive		# a GDrive .
	return:		#  TRUE if the drivecan be started, FALSE otherwise. 
gboolean g_drive_can_start_degraded (GDrive *drive);	# Checks if a drive can be started degraded.
	drive		# a GDrive .
	return:		#  TRUE if the drivecan be started degraded, FALSE otherwise. 
gboolean g_drive_can_stop (GDrive *drive);	# Checks if a drive can be stopped.
	drive		# a GDrive .
	return:		#  TRUE if the drivecan be stopped, FALSE otherwise. 
gboolean g_drive_can_poll_for_media (GDrive *drive);	# Checks if a drive can be polled for media changes.
	drive		# a GDrive .
	return:		#  TRUE if the drivecan be polled for media changes,FALSE otherwise. 
void g_drive_poll_for_media (GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously polls drive to see if media has been inserted or removed.
	drive		# a GDrive .
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		# user data to pass to callback
gboolean g_drive_poll_for_media_finish (GDrive *drive, GAsyncResult *result, GError **error);	# Finishes an operation started with g_drive_poll_for_media() on a drive.
	drive		# a GDrive .
	result		# a GAsyncResult .
	error		# a GError , or NULL 
	return:		#  TRUE if the drive has been poll_for_mediaed successfully,FALSE otherwise. 
gboolean g_drive_has_media (GDrive *drive);	# Checks if the drive has media. Note that the OS may not be pollingthe drive for media changes; see g_drive_is_media_check_automatic() for more details.
	drive		# a GDrive .
	return:		#  TRUE if drivehas media, FALSE otherwise. 
gboolean g_drive_is_media_check_automatic (GDrive *drive);	# Checks if drive is capabable of automatically detecting media changes.
	drive		# a GDrive .
	return:		#  TRUE if the driveis capabable of automatically detectingmedia changes, FALSE otherwise. 
gboolean g_drive_is_removable (GDrive *drive);	# Checks if the GDrive and/or its media is considered removable by the user.See g_drive_is_media_removable() .
	drive		# a GDrive .
	return:		#  TRUE if driveand/or its media is considered removable, FALSE otherwise. 
gboolean g_drive_is_media_removable (GDrive *drive);	# Checks if the drive supports removable media.
	drive		# a GDrive .
	return:		#  TRUE if drivesupports removable media, FALSE otherwise. 
void g_drive_eject (GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_drive_eject has been deprecated since version 2.22 and should not be used in newly-written code.
	drive		# a GDrive .
	flags		# flags affecting the unmount if required for eject
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		# user data to pass to callback
gboolean g_drive_eject_finish (GDrive *drive, GAsyncResult *result, GError **error);	# g_drive_eject_finish has been deprecated since version 2.22 and should not be used in newly-written code.
	drive		# a GDrive .
	result		# a GAsyncResult .
	error		# a GError , or NULL 
	return:		#  TRUE if the drive has been ejected successfully,FALSE otherwise. 
void g_drive_eject_with_operation (GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Ejects a drive. This is an asynchronous operation, and isfinished by calling g_drive_eject_with_operation_finish() with the driveand GAsyncResult data returned in the callback.
	drive		# a GDrive .
	flags		# flags affecting the unmount if required for eject
	mount_operation		#  a GMountOperation or NULL to avoiduser interaction. 
gboolean g_drive_eject_with_operation_finish (GDrive *drive, GAsyncResult *result, GError **error);	# Finishes ejecting a drive. If any errors occurred during the operation,error will be set to contain the errors and FALSE will be returned.
	drive		# a GDrive .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if the drive was successfully ejected. FALSE otherwise. 
void g_drive_start (GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously starts a drive.
	drive		# a GDrive .
	flags		# flags affecting the start operation.
	mount_operation		#  a GMountOperation or NULL to avoiduser interaction. 
gboolean g_drive_start_finish (GDrive *drive, GAsyncResult *result, GError **error);	# Finishes starting a drive.
	drive		# a GDrive .
	result		# a GAsyncResult .
	error		# a GError , or NULL 
	return:		#  TRUE if the drive has been started successfully,FALSE otherwise. 
void g_drive_stop (GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously stops a drive.
	drive		# a GDrive .
	flags		# flags affecting the unmount if required for stopping.
	mount_operation		#  a GMountOperation or NULL to avoiduser interaction. 
gboolean g_drive_stop_finish (GDrive *drive, GAsyncResult *result, GError **error);	# Finishes stopping a drive.
	drive		# a GDrive .
	result		# a GAsyncResult .
	error		# a GError , or NULL 
	return:		#  TRUE if the drive has been stopped successfully,FALSE otherwise. 
char  **g_drive_enumerate_identifiers (GDrive *drive);	# Gets the kinds of identifiers that drive has. Use g_drive_get_identifier() to obtain the identifiersthemselves.
	drive		# a GDrive 
	return:		#  a NULL -terminatedarray of strings containing kinds of identifiers. Use g_strfreev() to free.  
char  *g_drive_get_identifier (GDrive *drive, const char *kind);	# Gets the identifier of the given kind for drive.
	drive		# a GDrive 
	kind		# the kind of identifier to return
	return:		#  a newly allocated string containing therequested identfier, or NULL if the GDrive doesn't have this kind of identifier. 
gchar  *g_drive_get_sort_key (GDrive *drive);	# Gets the sort key for drive, if any.
	drive		# A GDrive .
	return:		#  Sorting key for driveor NULL if no such key is available. 
void g_unix_mount_free (GUnixMountEntry *mount_entry);	# Frees a unix mount.
	mount_entry		# a GUnixMountEntry .
gint g_unix_mount_compare (GUnixMountEntry *mount1, GUnixMountEntry *mount2);	# Compares two unix mounts.
	mount1		# first GUnixMountEntry to compare.
	mount2		# second GUnixMountEntry to compare.
	return:		#  1, 0 or -1 if mount1is greater than, equal to,or less than mount2, respectively.  
GUnixMountEntry  *g_unix_mount_copy (GUnixMountEntry *mount_entry);	# Makes a copy of mount_entry.
	mount_entry		# a GUnixMountEntry .
	return:		#  a new GUnixMountEntry .  
char  *g_unix_mount_get_mount_path (GUnixMountEntry *mount_entry);	# Gets the mount path for a unix mount.
	mount_entry		# input GUnixMountEntry to get the mount path for.
	return:		#  the mount path for mount_entry.  
char  *g_unix_mount_get_device_path (GUnixMountEntry *mount_entry);	# Gets the device path for a unix mount.
	mount_entry		# a GUnixMount .
	return:		#  a string containing the device path.  
char  *g_unix_mount_get_fs_type (GUnixMountEntry *mount_entry);	# Gets the filesystem type for the unix mount.
	mount_entry		# a GUnixMount .
	return:		#  a string containing the file system type. 
gboolean g_unix_mount_is_readonly (GUnixMountEntry *mount_entry);	# Checks if a unix mount is mounted read only.
	mount_entry		# a GUnixMount .
	return:		#  TRUE if mount_entryis read only. 
gboolean g_unix_mount_is_system_internal (GUnixMountEntry *mount_entry);	# Checks if a unix mount is a system path.
	mount_entry		# a GUnixMount .
	return:		#  TRUE if the unix mount is for a system path. 
GIcon  *g_unix_mount_guess_icon (GUnixMountEntry *mount_entry);	# Guesses the icon of a Unix mount.
	mount_entry		# a GUnixMountEntry 
	return:		#  a GIcon .  
GIcon  *g_unix_mount_guess_symbolic_icon (GUnixMountEntry *mount_entry);	# Guesses the symbolic icon of a Unix mount.
	mount_entry		# a GUnixMountEntry 
	return:		#  a GIcon .  
char  *g_unix_mount_guess_name (GUnixMountEntry *mount_entry);	# Guesses the name of a Unix mount. The result is a translated string.
	mount_entry		# a GUnixMountEntry 
	return:		#  A newly allocated string that mustbe freed with g_free()  
gboolean g_unix_mount_guess_can_eject (GUnixMountEntry *mount_entry);	# Guesses whether a Unix mount can be ejected.
	mount_entry		# a GUnixMountEntry 
	return:		#  TRUE if mount_entryis deemed to be ejectable. 
gboolean g_unix_mount_guess_should_display (GUnixMountEntry *mount_entry);	# Guesses whether a Unix mount should be displayed in the UI.
	mount_entry		# a GUnixMountEntry 
	return:		#  TRUE if mount_entryis deemed to be displayable. 
void g_unix_mount_point_free (GUnixMountPoint *mount_point);	# Frees a unix mount point.
	mount_point		# unix mount point to free.
gint g_unix_mount_point_compare (GUnixMountPoint *mount1, GUnixMountPoint *mount2);	# Compares two unix mount points.
	mount1		# a GUnixMount .
	mount2		# a GUnixMount .
	return:		#  1, 0 or -1 if mount1is greater than, equal to,or less than mount2, respectively. 
GUnixMountPoint  *g_unix_mount_point_copy (GUnixMountPoint *mount_point);	# Makes a copy of mount_point.
	mount_point		# a GUnixMountPoint .
	return:		#  a new GUnixMountPoint .  
char  *g_unix_mount_point_get_mount_path (GUnixMountPoint *mount_point);	# Gets the mount path for a unix mount point.
	mount_point		# a GUnixMountPoint .
	return:		#  a string containing the mount path.  
char  *g_unix_mount_point_get_device_path (GUnixMountPoint *mount_point);	# Gets the device path for a unix mount point.
	mount_point		# a GUnixMountPoint .
	return:		#  a string containing the device path.  
char  *g_unix_mount_point_get_fs_type (GUnixMountPoint *mount_point);	# Gets the file system type for the mount point.
	mount_point		# a GUnixMountPoint .
	return:		#  a string containing the file system type. 
char  *g_unix_mount_point_get_options (GUnixMountPoint *mount_point);	# Gets the options for the mount point.
	mount_point		# a GUnixMountPoint .
	return:		#  a string containing the options. 
gboolean g_unix_mount_point_is_readonly (GUnixMountPoint *mount_point);	# Checks if a unix mount point is read only.
	mount_point		# a GUnixMountPoint .
	return:		#  TRUE if a mount point is read only. 
gboolean g_unix_mount_point_is_user_mountable (GUnixMountPoint *mount_point);	# Checks if a unix mount point is mountable by the user.
	mount_point		# a GUnixMountPoint .
	return:		#  TRUE if the mount point is user mountable. 
gboolean g_unix_mount_point_is_loopback (GUnixMountPoint *mount_point);	# Checks if a unix mount point is a loopback device.
	mount_point		# a GUnixMountPoint .
	return:		#  TRUE if the mount point is a loopback. FALSE otherwise.  
GIcon  *g_unix_mount_point_guess_icon (GUnixMountPoint *mount_point);	# Guesses the icon of a Unix mount point.
	mount_point		# a GUnixMountPoint 
	return:		#  a GIcon .  
GIcon  *g_unix_mount_point_guess_symbolic_icon (GUnixMountPoint *mount_point);	# Guesses the symbolic icon of a Unix mount point.
	mount_point		# a GUnixMountPoint 
	return:		#  a GIcon .  
char  *g_unix_mount_point_guess_name (GUnixMountPoint *mount_point);	# Guesses the name of a Unix mount point. The result is a translated string.
	mount_point		# a GUnixMountPoint 
	return:		#  A newly allocated string that mustbe freed with g_free()  
gboolean g_unix_mount_point_guess_can_eject (GUnixMountPoint *mount_point);	# Guesses whether a Unix mount point can be ejected.
	mount_point		# a GUnixMountPoint 
	return:		#  TRUE if mount_pointis deemed to be ejectable. 
GList  *g_unix_mount_points_get (guint64 *time_read);	# Gets a GList of GUnixMountPoint containing the unix mount points.If time_read is set, it will be filled with the mount timestamp,allowing for checking if the mounts have changed withg_unix_mount_points_changed_since() .
	time_read		#  guint64 to contain a timestamp. 
	return:		#  a GList of the UNIX mountpoints.  
GList  *g_unix_mounts_get (guint64 *time_read);	# Gets a GList of GUnixMountEntry containing the unix mounts.If time_read is set, it will be filled with the mounttimestamp, allowing for checking if the mounts have changedwith g_unix_mounts_changed_since() .
	time_read		#  guint64 to contain a timestamp, or NULL . 
	return:		#  a GList of the UNIX mounts.  
GUnixMountEntry  *g_unix_mount_at (const char *mount_path, guint64 *time_read);	# Gets a GUnixMountEntry for a given mount path. If time_readis set, it will be filled with a unix timestamp for checkingif the mounts have changed since with g_unix_mounts_changed_since() .
	mount_path		#  path for a possible unix mount. 
	return:		#  a GUnixMountEntry .  
gboolean g_unix_mounts_changed_since (guint64 time);	# Checks if the unix mounts have changed since a given unix time.
	time		# guint64 to contain a timestamp.
	return:		#  TRUE if the mounts have changed since time.  
gboolean g_unix_mount_points_changed_since (guint64 time);	# Checks if the unix mount points have changed since a given unix time.
	time		# guint64 to contain a timestamp.
	return:		#  TRUE if the mount points have changed since time.  
GUnixMountMonitor  *g_unix_mount_monitor_get (void );	# Gets the GUnixMountMonitor for the current thread-default maincontext.
	return:		#  the GUnixMountMonitor .  
GUnixMountMonitor  *g_unix_mount_monitor_new (void );	# g_unix_mount_monitor_new has been deprecated since version 2.44 and should not be used in newly-written code.
	return:		#  a GUnixMountMonitor . 
void g_unix_mount_monitor_set_rate_limit (GUnixMountMonitor *mount_monitor, int limit_msec);	# g_unix_mount_monitor_set_rate_limit has been deprecated since version 2.44 and should not be used in newly-written code.
	mount_monitor		# a GUnixMountMonitor 
	limit_msec		# a integer with the limit in milliseconds topoll for changes.
gboolean g_unix_is_mount_path_system_internal (const char *mount_path);	# Determines if mount_path is considered an implementation of theOS. This is primarily used for hiding mountable and mounted volumesthat only are used in the OS and has little to no relevance to thecasual user.
	mount_path		#  a mount path, e.g. /media/disk or /usr. 
	return:		#  TRUE if mount_pathis considered an implementation detailof the OS. 
guint g_icon_hash (gconstpointer icon);	# Gets a hash for an icon.
	icon		#  gconstpointer to an icon object. 
	return:		#  a guint containing a hash for the icon, suitable foruse in a GHashTable or similar data structure. 
gboolean g_icon_equal (GIcon *icon1, GIcon *icon2);	# Checks if two icons are equal.
	icon1		#  pointer to the first GIcon . 
	return:		#  TRUE if icon1is equal to icon2. FALSE otherwise. 
gchar  *g_icon_to_string (GIcon *icon);	# Generates a textual representation of icon that can be used forserialization such as when passing icon to a different process orsaving it to persistent storage. Use g_icon_new_for_string() toget icon back from the returned string.
	icon		# a GIcon .
	return:		#  An allocated NUL-terminated UTF8 string orNULL if iconcan't be serialized. Use g_free() to free.  
GIcon  *g_icon_new_for_string (const gchar *str, GError **error);	# Generate a GIcon instance from str. This function can fail ifstr is not valid - see g_icon_to_string() for discussion.
	str		# A string obtained via 
	error		# Return location for error.
	return:		#  An object implementing the GIcon interface or NULL if erroris set.  
GVariant  *g_icon_serialize (GIcon *icon);	# Serializes a GIcon into a GVariant . An equivalent GIcon can be retrievedback by calling g_icon_deserialize() on the returned value.As serialization will avoid using raw icon data when possible, it onlymakes sense to transfer the GVariant between processes on the same machine,(as opposed to over the network), and within the same file system namespace.
	icon		# a GIcon 
	return:		#  a GVariant , or NULL when serialization fails.  
GIcon  *g_icon_deserialize (GVariant *value);	# Deserializes a GIcon previously serialized using g_icon_serialize() .
	value		# a GVariant created with 
	return:		#  a GIcon , or NULL when deserialization fails.  
GIcon  *g_file_icon_new (GFile *file);	#创建对象:icon for a file.
	file		# a GFile .
	return:		#  a GIcon for the givenfile, or NULL on error.  
GFile  *g_file_icon_get_file (GFileIcon *icon);	# Gets the GFile associated with the given icon.
	icon		# a GIcon .
	return:		#  a GFile , or NULL .  
GIcon  *g_bytes_icon_new (GBytes *bytes);	#创建对象:icon for a bytes.
	bytes		# a GBytes .
	return:		#  a GIcon for the givenbytes, or NULL on error.  
GBytes  *g_bytes_icon_get_bytes (GBytesIcon *icon);	# Gets the GBytes associated with the given icon.
	icon		# a GIcon .
	return:		#  a GBytes , or NULL .  
GInputStream  *g_loadable_icon_load (GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error);	# Loads a loadable icon. For the asynchronous version of this function, see g_loadable_icon_load_async() .
	icon		# a GLoadableIcon .
	size		# an integer.
	type		#  a location to store the type of the loadedicon, NULL to ignore. 
	return:		#  a GInputStream to read the icon from.  
void g_loadable_icon_load_async (GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Loads an icon asynchronously. To finish this function, see g_loadable_icon_load_finish() . For the synchronous, blocking version of this function, see g_loadable_icon_load() .
	icon		# a GLoadableIcon .
	size		# an integer.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GInputStream  *g_loadable_icon_load_finish (GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error);	# Finishes an asynchronous icon load started in g_loadable_icon_load_async() .
	icon		# a GLoadableIcon .
	res		# a GAsyncResult .
	type		#  a location to store the type of the loadedicon, NULL to ignore. 
	return:		#  a GInputStream to read the icon from.  
GIcon  *g_themed_icon_new (const char *iconname);	#创建对象:themed icon for iconname.
	iconname		# a string containing an icon name.
	return:		#  a new GThemedIcon .  
GIcon  *g_themed_icon_new_from_names (char **iconnames, int len);	#创建对象:themed icon for iconnames.
	iconnames		#  an array of strings containing icon names. 
	return:		#  a new GThemedIcon .  
GIcon  *g_themed_icon_new_with_default_fallbacks (const char *iconname);	#创建对象:themed icon for iconname, and all the namesthat can be created by shortening iconname at '-' characters.
	iconname		# a string containing an icon name
	return:		#  a new GThemedIcon .  
void g_themed_icon_prepend_name (GThemedIcon *icon, const char *iconname);	# Prepend a name to the list of icons from within icon.
	icon		# a GThemedIcon 
	iconname		# name of icon to prepend to list of icons from within icon.
void g_themed_icon_append_name (GThemedIcon *icon, const char *iconname);	# Append a name to the list of icons from within icon.
	icon		# a GThemedIcon 
	iconname		# name of icon to append to list of icons from within icon.
gchar  * const *g_themed_icon_get_names (GThemedIcon *icon);	# Gets the names of icons from within icon.
	icon		# a GThemedIcon .
	return:		#  a list of icon names.  
GIcon  *g_emblemed_icon_new (GIcon *icon, GEmblem *emblem);	#创建对象:emblemed icon for icon with the emblem emblem.
	icon		# a GIcon 
	emblem		#  a GEmblem , or NULL . 
	return:		#  a new GIcon .  
GIcon  *g_emblemed_icon_get_icon (GEmblemedIcon *emblemed);	# Gets the main icon for emblemed.
	emblemed		# a GEmblemedIcon 
	return:		#  a GIcon that is owned by emblemed.  
GList  *g_emblemed_icon_get_emblems (GEmblemedIcon *emblemed);	# Gets the list of emblems for the icon.
	emblemed		# a GEmblemedIcon 
	return:		#  a GList ofGEmblems that is owned by emblemed.  
void g_emblemed_icon_add_emblem (GEmblemedIcon *emblemed, GEmblem *emblem);	# Adds emblem to the GList of GEmblems .
	emblemed		# a GEmblemedIcon 
	emblem		# a GEmblem 
void g_emblemed_icon_clear_emblems (GEmblemedIcon *emblemed);	# Removes all the emblems from icon.
	emblemed		# a GEmblemedIcon 
GEmblem  *g_emblem_new (GIcon *icon);	#创建对象:emblem for icon.
	icon		# a GIcon containing the icon.
	return:		#  a new GEmblem . 
GEmblem  *g_emblem_new_with_origin (GIcon *icon, GEmblemOrigin origin);	#创建对象:emblem for icon.
	icon		# a GIcon containing the icon.
	origin		# a GEmblemOrigin enum defining the emblem's origin
	return:		#  a new GEmblem . 
GIcon  *g_emblem_get_icon (GEmblem *emblem);	# Gives back the icon from emblem.
	emblem		# a GEmblem from which the icon should be extracted.
	return:		#  a GIcon . The returned object belongs tothe emblem and should not be modified or freed.  
GEmblemOrigin g_emblem_get_origin (GEmblem *emblem);	# Gets the origin of the emblem.
	emblem		# a GEmblem 
	return:		#  the origin of the emblem.  
gboolean g_initable_init (GInitable *initable, GCancellable *cancellable, GError **error);	# Initializes the object implementing the interface.
	initable		# a GInitable .
	cancellable		# optional GCancellable object, NULL to ignore.
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if successful. If an error has occurred, this function willreturn FALSE and set errorappropriately if present. 
gpointer g_initable_new (GType object_type, GCancellable *cancellable, GError **error, const gchar *first_property_name, ...);	# Helper function for constructing GInitable object. This issimilar to g_object_new() but also initializes the objectand returns NULL , setting an error on failure.
	object_type		# a GType supporting GInitable .
	cancellable		# optional GCancellable object, NULL to ignore.
	error		# a GError location to store the error occurring, or NULL toignore.
	first_property_name		#  the name of the first property, or NULL if noproperties. 
	return:		#  a newly allocatedGObject , or NULL on error.  
GObject  *g_initable_new_valist (GType object_type, const gchar *first_property_name, va_list var_args, GCancellable *cancellable, GError **error);	# Helper function for constructing GInitable object. This issimilar to g_object_new_valist() but also initializes the objectand returns NULL , setting an error on failure.
	object_type		# a GType supporting GInitable .
	first_property_name		# the name of the first property, followed bythe value, and other property value pairs, and ended by NULL .
	var_args		# The var args list generated from first_property_name.
	cancellable		# optional GCancellable object, NULL to ignore.
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a newly allocatedGObject , or NULL on error.  
gpointer g_initable_newv (GType object_type, guint n_parameters, GParameter *parameters, GCancellable *cancellable, GError **error);	# g_initable_newv has been deprecated since version 2.54 and should not be used in newly-written code.
	object_type		# a GType supporting GInitable .
	n_parameters		# the number of parameters in parameters
	parameters		#  the parameters to use to construct the object. 
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a newly allocatedGObject , or NULL on error.  
void g_async_initable_init_async (GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Starts asynchronous initialization of the object implementing theinterface. This must be done before any real use of the object afterinitial construction. If the object also implements GInitable you canoptionally call g_initable_init() instead.
	initable		# a GAsyncInitable .
	io_priority		# the I/O priority of the operation
	cancellable		# optional GCancellable object, NULL to ignore.
	callback		# a GAsyncReadyCallback to call when the request is satisfied
	user_data		# the data to pass to callback function
gboolean g_async_initable_init_finish (GAsyncInitable *initable, GAsyncResult *res, GError **error);	# Finishes asynchronous initialization and returns the result.See g_async_initable_init_async() .
	initable		# a GAsyncInitable .
	res		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  TRUE if successful. If an error has occurred, this functionwill return FALSE and set errorappropriately if present. 
void g_async_initable_new_async (GType object_type, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data, const gchar *first_property_name, ...);	# Helper function for constructing GAsyncInitable object. This issimilar to g_object_new() but also initializes the object asynchronously.
	object_type		# a GType supporting GAsyncInitable .
	io_priority		# the I/O priority of the operation
	cancellable		# optional GCancellable object, NULL to ignore.
	callback		# a GAsyncReadyCallback to call when the initialization isfinished
	user_data		# the data to pass to callback function
	first_property_name		#  the name of the first property, or NULL if noproperties. 
GObject  *g_async_initable_new_finish (GAsyncInitable *initable, GAsyncResult *res, GError **error);	# Finishes the async construction for the various g_async_initable_newcalls, returning the created object or NULL on error.
	initable		# the GAsyncInitable from the callback
	res		# the GAsyncResult from the callback
	error		# return location for errors, or NULL to ignore
	return:		#  a newly created GObject ,or NULL on error. Free with g_object_unref() .  
void g_async_initable_new_valist_async (GType object_type, const gchar *first_property_name, va_list var_args, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Helper function for constructing GAsyncInitable object. This issimilar to g_object_new_valist() but also initializes the objectasynchronously.
	object_type		# a GType supporting GAsyncInitable .
	first_property_name		# the name of the first property, followed bythe value, and other property value pairs, and ended by NULL .
	var_args		# The var args list generated from first_property_name.
	io_priority		# the I/O priority of the operation
	cancellable		# optional GCancellable object, NULL to ignore.
	callback		# a GAsyncReadyCallback to call when the initialization isfinished
	user_data		# the data to pass to callback function
void g_async_initable_newv_async (GType object_type, guint n_parameters, GParameter *parameters, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# g_async_initable_newv_async has been deprecated since version 2.54 and should not be used in newly-written code.
	object_type		# a GType supporting GAsyncInitable .
	n_parameters		# the number of parameters in parameters
	parameters		# the parameters to use to construct the object
	io_priority		# the I/O priority of the operation
	cancellable		# optional GCancellable object, NULL to ignore.
	callback		# a GAsyncReadyCallback to call when the initialization isfinished
	user_data		# the data to pass to callback function
GSubprocess  *g_subprocess_new (GSubprocessFlags flags, GError **error, const gchar *argv0, ...);	# Create a new process with the given flags and varargs argumentlist. By default, matching the g_spawn_async() defaults, thechild's stdin will be set to the system null device, andstdout/stderr will be inherited from the parent. You can useflags to control this behavior.
	flags		# flags that define the behaviour of the subprocess
	error		#  return location for an error, or NULL . 
	return:		#  A newly created GSubprocess , or NULL on error (and errorwill be set) 
GSubprocess  *g_subprocess_newv (const gchar * const *argv, GSubprocessFlags flags, GError **error);	# Create a new process with the given flags and argument list.
	argv		#  commandline arguments for the subprocess. 
	return:		#  A newly created GSubprocess , or NULL on error (and errorwill be set) 
gchar  *g_subprocess_get_identifier (GSubprocess *subprocess);	# On UNIX, returns the process ID as a decimal string.On Windows, returns the result of GetProcessId() also as a string.
	subprocess		# a GSubprocess 
GOutputStream  *g_subprocess_get_stdin_pipe (GSubprocess *subprocess);	# Gets the GOutputStream that you can write to in order to give datato the stdin of subprocess.
	subprocess		# a GSubprocess 
	return:		#  the stdout pipe.  
GInputStream  *g_subprocess_get_stdout_pipe (GSubprocess *subprocess);	# Gets the GInputStream from which to read the stdout output ofsubprocess.
	subprocess		# a GSubprocess 
	return:		#  the stdout pipe.  
GInputStream  *g_subprocess_get_stderr_pipe (GSubprocess *subprocess);	# Gets the GInputStream from which to read the stderr output ofsubprocess.
	subprocess		# a GSubprocess 
	return:		#  the stderr pipe.  
gboolean g_subprocess_wait (GSubprocess *subprocess, GCancellable *cancellable, GError **error);	# Synchronously wait for the subprocess to terminate.
	subprocess		# a GSubprocess 
	cancellable		# a GCancellable 
	error		# a GError 
	return:		#  TRUE on success, FALSE if cancellablewas cancelled 
void g_subprocess_wait_async (GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Wait for the subprocess to terminate.
	subprocess		# a GSubprocess 
	cancellable		# a GCancellable , or NULL 
	callback		# a GAsyncReadyCallback to call when the operation is complete
	user_data		# user_data for callback
gboolean g_subprocess_wait_finish (GSubprocess *subprocess, GAsyncResult *result, GError **error);	# Collects the result of a previous call tog_subprocess_wait_async() .
	subprocess		# a GSubprocess 
	result		# the GAsyncResult passed to your GAsyncReadyCallback 
	error		# a pointer to a NULL GError , or NULL 
	return:		#  TRUE if successful, or FALSE with errorset 
gboolean g_subprocess_wait_check (GSubprocess *subprocess, GCancellable *cancellable, GError **error);	# Combines g_subprocess_wait() with g_spawn_check_exit_status() .
	subprocess		# a GSubprocess 
	cancellable		# a GCancellable 
	error		# a GError 
	return:		#  TRUE on success, FALSE if process exited abnormally, orcancellablewas cancelled 
void g_subprocess_wait_check_async (GSubprocess *subprocess, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Combines g_subprocess_wait_async() with g_spawn_check_exit_status() .
	subprocess		# a GSubprocess 
	cancellable		# a GCancellable , or NULL 
	callback		# a GAsyncReadyCallback to call when the operation is complete
	user_data		# user_data for callback
gboolean g_subprocess_wait_check_finish (GSubprocess *subprocess, GAsyncResult *result, GError **error);	# Collects the result of a previous call tog_subprocess_wait_check_async() .
	subprocess		# a GSubprocess 
	result		# the GAsyncResult passed to your GAsyncReadyCallback 
	error		# a pointer to a NULL GError , or NULL 
	return:		#  TRUE if successful, or FALSE with errorset 
gboolean g_subprocess_get_successful (GSubprocess *subprocess);	# Checks if the process was "successful". A process is consideredsuccessful if it exited cleanly with an exit status of 0, either byway of the exit() system call or return from main().
	subprocess		# a GSubprocess 
	return:		#  TRUE if the process exited cleanly with a exit status of 0 
gboolean g_subprocess_get_if_exited (GSubprocess *subprocess);	# Check if the given subprocess exited normally (ie: by way of exit()or return from main()).
	subprocess		# a GSubprocess 
	return:		#  TRUE if the case of a normal exit 
gint g_subprocess_get_exit_status (GSubprocess *subprocess);	# Check the exit status of the subprocess, given that it exitednormally. This is the value passed to the exit() system call or thereturn value from main.
	subprocess		# a GSubprocess 
	return:		#  the exit status 
gboolean g_subprocess_get_if_signaled (GSubprocess *subprocess);	# Check if the given subprocess terminated in response to a signal.
	subprocess		# a GSubprocess 
	return:		#  TRUE if the case of termination due to a signal 
gint g_subprocess_get_term_sig (GSubprocess *subprocess);	# Get the signal number that caused the subprocess to terminate, giventhat it terminated due to a signal.
	subprocess		# a GSubprocess 
	return:		#  the signal causing termination 
gint g_subprocess_get_status (GSubprocess *subprocess);	# Gets the raw status code of the process, as from waitpid().
	subprocess		# a GSubprocess 
	return:		#  the (meaningless) waitpid() exit status from the kernel 
void g_subprocess_send_signal (GSubprocess *subprocess, gint signal_num);	# Sends the UNIX signal signal_num to the subprocess, if it is stillrunning.
	subprocess		# a GSubprocess 
	signal_num		# the signal number to send
void g_subprocess_force_exit (GSubprocess *subprocess);	# Use an operating-system specific method to attempt an immediate,forceful termination of the process. There is no mechanism todetermine whether or not the request itself was successful;however, you can use g_subprocess_wait() to monitor the status ofthe process after calling this function.
	subprocess		# a GSubprocess 
gboolean g_subprocess_communicate (GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GBytes **stdout_buf, GBytes **stderr_buf, GError **error);	# Communicate with the subprocess until it terminates, and all inputand output has been completed.
	subprocess		# a GSubprocess 
	stdin_buf		#  data to send to the stdin of the subprocess, or NULL . 
	stdout_buf		#  data read from the subprocess stdout. 
	return:		#  TRUE if successful 
void g_subprocess_communicate_async (GSubprocess *subprocess, GBytes *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronous version of g_subprocess_communicate() . Completeinvocation with g_subprocess_communicate_finish() .
	subprocess		# Self
	stdin_buf		#  Input data, or NULL . 
	cancellable		#  Cancellable. 
	callback		# Callback
	user_data		# User data
gboolean g_subprocess_communicate_finish (GSubprocess *subprocess, GAsyncResult *result, GBytes **stdout_buf, GBytes **stderr_buf, GError **error);	# Complete an invocation of g_subprocess_communicate_async() .
	subprocess		# Self
	result		# Result
	stdout_buf		#  Return location for stdout data. 
	stderr_buf		#  Return location for stderr data. 
	error		# Error
gboolean g_subprocess_communicate_utf8 (GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, char **stdout_buf, char **stderr_buf, GError **error);	# Like g_subprocess_communicate() , but validates the output of theprocess as UTF-8, and returns it as a regular NUL terminated string.
	subprocess		# a GSubprocess 
	stdin_buf		#  data to send to the stdin of the subprocess, or NULL . 
	stdout_buf		#  data read from the subprocess stdout. 
void g_subprocess_communicate_utf8_async (GSubprocess *subprocess, const char *stdin_buf, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronous version of g_subprocess_communicate_utf8() . Completeinvocation with g_subprocess_communicate_utf8_finish() .
	subprocess		# Self
	stdin_buf		#  Input data, or NULL . 
	cancellable		# Cancellable
	callback		# Callback
	user_data		# User data
gboolean g_subprocess_communicate_utf8_finish (GSubprocess *subprocess, GAsyncResult *result, char **stdout_buf, char **stderr_buf, GError **error);	# Complete an invocation of g_subprocess_communicate_utf8_async() .
	subprocess		# Self
	result		# Result
	stdout_buf		#  Return location for stdout data. 
GSubprocessLauncher  *g_subprocess_launcher_new (GSubprocessFlags flags);	#创建对象:GSubprocessLauncher .
	flags		# GSubprocessFlags 
GSubprocess  *g_subprocess_launcher_spawn (GSubprocessLauncher *self, GError **error, const gchar *argv0, ...);	# Creates a GSubprocess given a provided varargs list of arguments.
	self		# a GSubprocessLauncher 
	error		# Error
	argv0		# Command line arguments
	...		# Continued arguments, NULL terminated
	return:		#  A new GSubprocess , or NULL on error (and errorwill be set).  
GSubprocess  *g_subprocess_launcher_spawnv (GSubprocessLauncher *self, const gchar * const *argv, GError **error);	# Creates a GSubprocess given a provided array of arguments.
	self		# a GSubprocessLauncher 
	argv		#  Command line arguments. 
	return:		#  A new GSubprocess , or NULL on error (and errorwill be set).  
void g_subprocess_launcher_set_environ (GSubprocessLauncher *self, gchar **env);	# Replace the entire environment of processes launched from thislauncher with the given 'environ' variable.
	self		# a GSubprocess 
	env		#  the replacement environment. 
void g_subprocess_launcher_setenv (GSubprocessLauncher *self, const gchar *variable, const gchar *value, gboolean overwrite);	# Sets the environment variable variable in the environment ofprocesses launched from this launcher.
	self		# a GSubprocess 
	variable		# the environment variable to set, must not contain '='
	value		# the new value for the variable
	overwrite		# whether to change the variable if it already exists
void g_subprocess_launcher_unsetenv (GSubprocessLauncher *self, const gchar *variable);	# Removes the environment variable variable from the environment ofprocesses launched from this launcher.
	self		# a GSubprocess 
	variable		# the environment variable to unset, must not contain '='
gchar  *g_subprocess_launcher_getenv (GSubprocessLauncher *self, const gchar *variable);	# Returns the value of the environment variable variable in theenvironment of processes launched from this launcher.
	self		# a GSubprocess 
	variable		# the environment variable to get
	return:		#  the value of the environment variable, NULL if unset 
void g_subprocess_launcher_set_cwd (GSubprocessLauncher *self, const gchar *cwd);	# Sets the current working directory that processes will be launchedwith.
	self		# a GSubprocess 
	cwd		#  the cwd for launched processes. 
void g_subprocess_launcher_set_flags (GSubprocessLauncher *self, GSubprocessFlags flags);	# Sets the flags on the launcher.
	self		# a GSubprocessLauncher 
	flags		# GSubprocessFlags 
void g_subprocess_launcher_set_stdin_file_path (GSubprocessLauncher *self, const gchar *path);	# Sets the file path to use as the stdin for spawned processes.
	self		# a GSubprocessLauncher 
	path		# (type filename) (nullable: a filename or NULL 
void g_subprocess_launcher_take_stdin_fd (GSubprocessLauncher *self, gint fd);	# Sets the file descriptor to use as the stdin for spawned processes.
	self		# a GSubprocessLauncher 
	fd		# a file descriptor, or -1
void g_subprocess_launcher_set_stdout_file_path (GSubprocessLauncher *self, const gchar *path);	# Sets the file path to use as the stdout for spawned processes.
	self		# a GSubprocessLauncher 
	path		#  a filename or NULL . 
void g_subprocess_launcher_take_stdout_fd (GSubprocessLauncher *self, gint fd);	# Sets the file descriptor to use as the stdout for spawned processes.
	self		# a GSubprocessLauncher 
	fd		# a file descriptor, or -1
void g_subprocess_launcher_set_stderr_file_path (GSubprocessLauncher *self, const gchar *path);	# Sets the file path to use as the stderr for spawned processes.
	self		# a GSubprocessLauncher 
	path		#  a filename or NULL . 
void g_subprocess_launcher_take_stderr_fd (GSubprocessLauncher *self, gint fd);	# Sets the file descriptor to use as the stderr for spawned processes.
	self		# a GSubprocessLauncher 
	fd		# a file descriptor, or -1
void g_subprocess_launcher_take_fd (GSubprocessLauncher *self, gint source_fd, gint target_fd);	# Transfer an arbitrary file descriptor from parent process to thechild. This function takes "ownership" of the fd; it will be closedin the parent when self is freed.
	self		# a GSubprocessLauncher 
	source_fd		# File descriptor in parent process
	target_fd		# Target descriptor for child process
void g_subprocess_launcher_set_child_setup (GSubprocessLauncher *self, GSpawnChildSetupFunc child_setup, gpointer user_data, GDestroyNotify destroy_notify);	# Sets up a child setup function.
	self		# a GSubprocessLauncher 
	child_setup		# a GSpawnChildSetupFunc to use as the child setup function
	user_data		# user data for child_setup
	destroy_notify		# a GDestroyNotify for user_data
gboolean <span class="c_punctuation">( *GSocketSourceFunc<span class="c_punctuation">) (GSocket *socket, GIOCondition condition, gpointer user_data);	# This is the function type of the callback used for the GSource returned by g_socket_create_source() .
	socket		# the GSocket 
	condition		# the current condition at the source fired.
	user_data		# data passed in by the user.
	return:		#  it should return FALSE if the source should be removed. 
GSocket  *g_socket_new (GSocketFamily family, GSocketType type, GSocketProtocol protocol, GError **error);	#创建对象:GSocket with the defined family, type and protocol.If protocol is 0 (G_SOCKET_PROTOCOL_DEFAULT ) the default protocol typefor the family and type is used.
	family		# the socket family to use, e.g. G_SOCKET_FAMILY_IPV4 .
	type		# the socket type to use.
	protocol		# the id of the protocol to use, or 0 for default.
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a GSocket or NULL on error.Free the returned object with g_object_unref() . 
GSocket  *g_socket_new_from_fd (gint fd, GError **error);	#创建对象:GSocket from a native file descriptoror winsock SOCKET handle.
	fd		# a native socket file descriptor.
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a GSocket or NULL on error.Free the returned object with g_object_unref() . 
gboolean g_socket_bind (GSocket *socket, GSocketAddress *address, gboolean allow_reuse, GError **error);	# When a socket is created it is attached to an address family, but itdoesn't have an address in this family. g_socket_bind() assigns theaddress (sometimes called name) of the socket.
	socket		# a GSocket .
	address		# a GSocketAddress specifying the local address.
	allow_reuse		# whether to allow reusing this address
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE on success, FALSE on error. 
gboolean g_socket_listen (GSocket *socket, GError **error);	# Marks the socket as a server socket, i.e. a socket that is usedto accept incoming requests using g_socket_accept() .
	socket		# a GSocket .
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE on success, FALSE on error. 
GSocket  *g_socket_accept (GSocket *socket, GCancellable *cancellable, GError **error);	# Accept incoming connections on a connection-based socket. This removesthe first outstanding connection request from the listening socket andcreates a GSocket object for it.
	socket		# a GSocket .
	cancellable		#  a GCancellable or NULL . 
	return:		#  a new GSocket , or NULL on error.Free the returned object with g_object_unref() .  
gboolean g_socket_connect (GSocket *socket, GSocketAddress *address, GCancellable *cancellable, GError **error);	# Connect the socket to the specified remote address.
	socket		# a GSocket .
	address		# a GSocketAddress specifying the remote address.
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if connected, FALSE on error. 
gboolean g_socket_check_connect_result (GSocket *socket, GError **error);	# Checks and resets the pending connect error for the socket.This is used to check for errors when g_socket_connect() isused in non-blocking mode.
	socket		# a GSocket 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE if no error, FALSE otherwise, setting errorto the error 
gssize g_socket_receive (GSocket *socket, gchar *buffer, gsize size, GCancellable *cancellable, GError **error);	# Receive data (up to size bytes) from a socket. This is mainly used byconnection-oriented sockets; it is identical to g_socket_receive_from() with address set to NULL .
	socket		# a GSocket 
	buffer		#  a buffer toread data into (which should be at least sizebytes long). 
	return:		#  Number of bytes read, or 0 if the connection was closed bythe peer, or -1 on error 
gssize g_socket_receive_from (GSocket *socket, GSocketAddress **address, gchar *buffer, gsize size, GCancellable *cancellable, GError **error);	# Receive data (up to size bytes) from a socket.
	socket		# a GSocket 
	address		#  a pointer to a GSocketAddress pointer, or NULL . 
	return:		#  Number of bytes read, or 0 if the connection was closed bythe peer, or -1 on error 
gssize g_socket_receive_message (GSocket *socket, GSocketAddress **address, GInputVector *vectors, gint num_vectors, GSocketControlMessage ***messages, gint *num_messages, gint *flags, GCancellable *cancellable, GError **error);	# Receive data from a socket. For receiving multiple messages, seeg_socket_receive_messages() ; for easier use, seeg_socket_receive() and g_socket_receive_from() .
	socket		# a GSocket 
	address		#  a pointer to a GSocketAddress pointer, or NULL . 
	error		# a GError pointer, or NULL 
	return:		#  Number of bytes read, or 0 if the connection was closed bythe peer, or -1 on error 
gint g_socket_receive_messages (GSocket *socket, GInputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error);	# Receive multiple data messages from socket in one go. This is the mostcomplicated and fully-featured version of this call. For easier use, seeg_socket_receive() , g_socket_receive_from() , and g_socket_receive_message() .
	socket		# a GSocket 
	messages		#  an array of GInputMessage structs. 
	cancellable		#  a GCancellable or NULL . 
	return:		#  number of messages received, or -1 on error. Note that the numberof messages received may be smaller than num_messagesif in non-blockingmode, if the peer closed the connection, or if num_messageswas larger than UIO_MAXIOV (1024), in which case the caller may re-tryto receive the remaining messages. 
gssize g_socket_receive_with_blocking (GSocket *socket, gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error);	# This behaves exactly the same as g_socket_receive() , except thatthe choice of blocking or non-blocking behavior is determined bythe blocking argument rather than by socket's properties.
	socket		# a GSocket 
	buffer		#  a buffer toread data into (which should be at least sizebytes long). 
	return:		#  Number of bytes read, or 0 if the connection was closed bythe peer, or -1 on error 
gssize g_socket_send (GSocket *socket, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error);	# Tries to send size bytes from buffer on the socket. This ismainly used by connection-oriented sockets; it is identical tog_socket_send_to() with address set to NULL .
	socket		# a GSocket 
	buffer		#  the buffercontaining the data to send. 
	return:		#  Number of bytes written (which may be less than size), or -1on error 
gssize g_socket_send_to (GSocket *socket, GSocketAddress *address, const gchar *buffer, gsize size, GCancellable *cancellable, GError **error);	# Tries to send size bytes from buffer to address. If address isNULL then the message is sent to the default receiver (set byg_socket_connect() ).
	socket		# a GSocket 
	address		#  a GSocketAddress , or NULL . 
	return:		#  Number of bytes written (which may be less than size), or -1on error 
gssize g_socket_send_message (GSocket *socket, GSocketAddress *address, GOutputVector *vectors, gint num_vectors, GSocketControlMessage **messages, gint num_messages, gint flags, GCancellable *cancellable, GError **error);	# Send data to address on socket. For sending multiple messages seeg_socket_send_messages() ; for easier use, seeg_socket_send() and g_socket_send_to() .
	socket		# a GSocket 
	address		#  a GSocketAddress , or NULL . 
	cancellable		#  a GCancellable or NULL . 
	return:		#  Number of bytes written (which may be less than size), or -1on error 
gint g_socket_send_messages (GSocket *socket, GOutputMessage *messages, guint num_messages, gint flags, GCancellable *cancellable, GError **error);	# Send multiple data messages from socket in one go. This is the mostcomplicated and fully-featured version of this call. For easier use, seeg_socket_send() , g_socket_send_to() , and g_socket_send_message() .
	socket		# a GSocket 
	messages		#  an array of GOutputMessage structs. 
	cancellable		#  a GCancellable or NULL . 
	return:		#  number of messages sent, or -1 on error. Note that the number ofmessages sent may be smaller than num_messagesif the socket isnon-blocking or if num_messageswas larger than UIO_MAXIOV (1024),in which case the caller may re-try to send the remaining messages. 
gssize g_socket_send_with_blocking (GSocket *socket, const gchar *buffer, gsize size, gboolean blocking, GCancellable *cancellable, GError **error);	# This behaves exactly the same as g_socket_send() , except thatthe choice of blocking or non-blocking behavior is determined bythe blocking argument rather than by socket's properties.
	socket		# a GSocket 
	buffer		#  the buffercontaining the data to send. 
	return:		#  Number of bytes written (which may be less than size), or -1on error 
gboolean g_socket_close (GSocket *socket, GError **error);	# Closes the socket, shutting down any active connection.
	socket		# a GSocket 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE on success, FALSE on error 
gboolean g_socket_is_closed (GSocket *socket);	# Checks whether a socket is closed.
	socket		# a GSocket 
	return:		#  TRUE if socket is closed, FALSE otherwise 
gboolean g_socket_shutdown (GSocket *socket, gboolean shutdown_read, gboolean shutdown_write, GError **error);	# Shut down part or all of a full-duplex connection.
	socket		# a GSocket 
	shutdown_read		# whether to shut down the read side
	shutdown_write		# whether to shut down the write side
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE on success, FALSE on error 
gboolean g_socket_is_connected (GSocket *socket);	# Check whether the socket is connected. This is only useful forconnection-oriented sockets.
	socket		# a GSocket .
	return:		#  TRUE if socket is connected, FALSE otherwise. 
GSource  *g_socket_create_source (GSocket *socket, GIOCondition condition, GCancellable *cancellable);	# Creates a GSource that can be attached to a GMainContext to monitorfor the availability of the specified condition on the socket. The GSource keeps a reference to the socket.
	socket		# a GSocket 
	condition		# a GIOCondition mask to monitor
	cancellable		#  a GCancellable or NULL . 
	return:		#  a newly allocated GSource , free with g_source_unref() .  
GIOCondition g_socket_condition_check (GSocket *socket, GIOCondition condition);	# Checks on the readiness of socket to perform operations.The operations specified in condition are checked for and maskedagainst the currently-satisfied conditions on socket. The resultis returned.
	socket		# a GSocket 
	condition		# a GIOCondition mask to check
	return:		#  the GIOConditionmask of the current state 
gboolean g_socket_condition_wait (GSocket *socket, GIOCondition condition, GCancellable *cancellable, GError **error);	# Waits for condition to become true on socket. When the conditionis met, TRUE is returned.
	socket		# a GSocket 
	condition		# a GIOCondition mask to wait for
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE if the condition was met, FALSE otherwise 
gboolean g_socket_condition_timed_wait (GSocket *socket, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error);	# Waits for up to timeout microseconds for condition to become trueon socket. If the condition is met, TRUE is returned.
	socket		# a GSocket 
	condition		# a GIOCondition mask to wait for
	timeout		# the maximum time (in microseconds) to wait, or -1
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE if the condition was met, FALSE otherwise 
gssize g_socket_get_available_bytes (GSocket *socket);	# Get the amount of data pending in the OS input buffer, without blocking.
	socket		# a GSocket 
	return:		#  the number of bytes that can be read from the socketwithout blocking or truncating, or -1 on error. 
void g_socket_set_listen_backlog (GSocket *socket, gint backlog);	# Sets the maximum number of outstanding connections allowedwhen listening on this socket. If more clients than this areconnecting to the socket and the application is not handling themon time then the new connections will be refused.
	socket		# a GSocket .
	backlog		# the maximum number of pending connections.
gint g_socket_get_listen_backlog (GSocket *socket);	# Gets the listen backlog setting of the socket. For details on this,see g_socket_set_listen_backlog() .
	socket		# a GSocket .
	return:		#  the maximum number of pending connections. 
gboolean g_socket_get_blocking (GSocket *socket);	# Gets the blocking mode of the socket. For details on blocking I/O,see g_socket_set_blocking() .
	socket		# a GSocket .
	return:		#  TRUE if blocking I/O is used, FALSE otherwise. 
void g_socket_set_blocking (GSocket *socket, gboolean blocking);	# Sets the blocking mode of the socket. In blocking modeall operations (which don’t take an explicit blocking parameter) block untilthey succeed or there is an error. Innon-blocking mode all functions return results immediately orwith a G_IO_ERROR_WOULD_BLOCK error.
	socket		# a GSocket .
	blocking		# Whether to use blocking I/O or not.
gboolean g_socket_get_keepalive (GSocket *socket);	# Gets the keepalive mode of the socket. For details on this,see g_socket_set_keepalive() .
	socket		# a GSocket .
	return:		#  TRUE if keepalive is active, FALSE otherwise. 
void g_socket_set_keepalive (GSocket *socket, gboolean keepalive);	# Sets or unsets the SO_KEEPALIVE flag on the underlying socket. Whenthis flag is set on a socket, the system will attempt to verify that theremote socket endpoint is still present if a sufficiently long period oftime passes with no data being exchanged. If the system is unable toverify the presence of the remote endpoint, it will automatically closethe connection.
	socket		# a GSocket .
	keepalive		# Value for the keepalive flag
guint g_socket_get_timeout (GSocket *socket);	# Gets the timeout setting of the socket. For details on this, seeg_socket_set_timeout() .
	socket		# a GSocket .
	return:		#  the timeout in seconds 
void g_socket_set_timeout (GSocket *socket, guint timeout);	# Sets the time in seconds after which I/O operations on socket willtime out if they have not yet completed.
	socket		# a GSocket .
	timeout		# the timeout for socket, in seconds, or 0 for none
void g_socket_set_ttl (GSocket *socket, guint ttl);	# Sets the time-to-live for outgoing unicast packets on socket.By default the platform-specific default value is used.
	socket		# a GSocket .
	ttl		# the time-to-live value for all unicast packets on socket
guint g_socket_get_ttl (GSocket *socket);	# Gets the unicast time-to-live setting on socket; seeg_socket_set_ttl() for more details.
	socket		# a GSocket .
	return:		#  the time-to-live setting on socket 
gboolean g_socket_get_broadcast (GSocket *socket);	# Gets the broadcast setting on socket; if TRUE ,it is possible to send packets to broadcastaddresses.
	socket		# a GSocket .
	return:		#  the broadcast setting on socket 
void g_socket_set_broadcast (GSocket *socket, gboolean broadcast);	# Sets whether socket should allow sending to broadcast addresses.This is FALSE by default.
	socket		# a GSocket .
	broadcast		# whether socketshould allow sending to broadcastaddresses
gboolean g_socket_get_option (GSocket *socket, gint level, gint optname, gint *value, GError **error);	# Gets the value of an integer-valued option on socket, as withgetsockopt(). (If you need to fetch a non-integer-valued option,you will need to call getsockopt() directly.)
	socket		# a GSocket 
	level		# the "API level" of the option (eg, SOL_SOCKET)
	optname		# the "name" of the option (eg, SO_BROADCAST)
	value		#  return location for the option value. 
	return:		#  success or failure. On failure, errorwill be set, andthe system error value (errno or WSAGetLastError()) will stillbe set to the result of the getsockopt() call. 
gboolean g_socket_set_option (GSocket *socket, gint level, gint optname, gint value, GError **error);	# Sets the value of an integer-valued option on socket, as withsetsockopt(). (If you need to set a non-integer-valued option,you will need to call setsockopt() directly.)
	socket		# a GSocket 
	level		# the "API level" of the option (eg, SOL_SOCKET)
	optname		# the "name" of the option (eg, SO_BROADCAST)
	value		# the value to set the option to
	error		# GError for error reporting, or NULL to ignore.
	return:		#  success or failure. On failure, errorwill be set, andthe system error value (errno or WSAGetLastError()) will stillbe set to the result of the setsockopt() call. 
GSocketFamily g_socket_get_family (GSocket *socket);	# Gets the socket family of the socket.
	socket		# a GSocket .
	return:		#  a GSocketFamily  
int g_socket_get_fd (GSocket *socket);	# Returns the underlying OS socket object. On unix thisis a socket file descriptor, and on Windows this isa Winsock2 SOCKET handle. This may be useful fordoing platform specific or otherwise unusual operationson the socket.
	socket		# a GSocket .
	return:		#  the file descriptor of the socket. 
GSocketAddress  *g_socket_get_local_address (GSocket *socket, GError **error);	# Try to get the local address of a bound socket. This is onlyuseful if the socket has been bound to a local address,either explicitly or implicitly when connecting.
	socket		# a GSocket .
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a GSocketAddress or NULL on error.Free the returned object with g_object_unref() .  
GSocketProtocol g_socket_get_protocol (GSocket *socket);	# Gets the socket protocol id the socket was created with.In case the protocol is unknown, -1 is returned.
	socket		# a GSocket .
	return:		#  a protocol id, or -1 if unknown 
GSocketAddress  *g_socket_get_remote_address (GSocket *socket, GError **error);	# Try to get the remove address of a connected socket. This is onlyuseful for connection oriented sockets that have been connected.
	socket		# a GSocket .
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a GSocketAddress or NULL on error.Free the returned object with g_object_unref() .  
GSocketType g_socket_get_socket_type (GSocket *socket);	# Gets the socket type of the socket.
	socket		# a GSocket .
	return:		#  a GSocketType  
gboolean g_socket_speaks_ipv4 (GSocket *socket);	# Checks if a socket is capable of speaking IPv4.
	socket		# a GSocket 
	return:		#  TRUE if this socket can be used with IPv4. 
GCredentials  *g_socket_get_credentials (GSocket *socket, GError **error);	# Returns the credentials of the foreign process connected to thissocket, if any (e.g. it is only supported for G_SOCKET_FAMILY_UNIX sockets).
	socket		# a GSocket .
	error		# GError for error reporting, or NULL to ignore.
	return:		#  NULL if erroris set, otherwise a GCredentials objectthat must be freed with g_object_unref() .  
gboolean g_socket_join_multicast_group (GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error);	# Registers socket to receive multicast messages sent to group.socket must be a G_SOCKET_TYPE_DATAGRAM socket, and must havebeen bound to an appropriate interface and port withg_socket_bind() .
	socket		# a GSocket .
	group		# a GInetAddress specifying the group address to join.
	iface		#  Name of the interface to use, or NULL . 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE on success, FALSE on error. 
gboolean g_socket_leave_multicast_group (GSocket *socket, GInetAddress *group, gboolean source_specific, const gchar *iface, GError **error);	# Removes socket from the multicast group defined by group, iface,and source_specific (which must all have the same values they hadwhen you joined the group).
	socket		# a GSocket .
	group		# a GInetAddress specifying the group address to leave.
	iface		#  Interface used. 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE on success, FALSE on error. 
gboolean g_socket_get_multicast_loopback (GSocket *socket);	# Gets the multicast loopback setting on socket; if TRUE (thedefault), outgoing multicast packets will be looped back tomulticast listeners on the same host.
	socket		# a GSocket .
	return:		#  the multicast loopback setting on socket 
void g_socket_set_multicast_loopback (GSocket *socket, gboolean loopback);	# Sets whether outgoing multicast packets will be received by socketslistening on that multicast address on the same host. This is TRUE by default.
	socket		# a GSocket .
	loopback		# whether socketshould receive messages sent to itsmulticast groups from the local host
guint g_socket_get_multicast_ttl (GSocket *socket);	# Gets the multicast time-to-live setting on socket; seeg_socket_set_multicast_ttl() for more details.
	socket		# a GSocket .
	return:		#  the multicast time-to-live setting on socket 
void g_socket_set_multicast_ttl (GSocket *socket, guint ttl);	# Sets the time-to-live for outgoing multicast datagrams on socket.By default, this is 1, meaning that multicast packets will not leavethe local network.
	socket		# a GSocket .
	ttl		# the time-to-live value for all multicast datagrams on socket
gboolean <span class="c_punctuation">( *GDatagramBasedSourceFunc<span class="c_punctuation">) (GDatagramBased *datagram_based, GIOCondition condition, gpointer user_data);	# This is the function type of the callback used for the GSource returned by g_datagram_based_create_source() .
	datagram_based		# the GDatagramBased 
	condition		# the current condition at the source fired
	user_data		# data passed in by the user
	return:		#  G_SOURCE_REMOVE if the source should be removed,G_SOURCE_CONTINUE otherwise 
gint g_datagram_based_receive_messages (GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);	# Receive one or more data messages from datagram_based in one go.
	datagram_based		# a GDatagramBased 
	messages		#  an array of GInputMessage structs. 
	timeout		# the maximum time (in microseconds) to wait, 0 to not block, or -1to block indefinitely
	cancellable		#  a GCancellable . 
	return:		#  number of messages received, or -1 on error. Note that the numberof messages received may be smaller than num_messagesif timeoutiszero or positive, if the peer closed the connection, or if num_messageswas larger than UIO_MAXIOV (1024), in which case the caller may re-tryto receive the remaining messages. 
gint g_datagram_based_send_messages (GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);	# Send one or more data messages from datagram_based in one go.
	datagram_based		# a GDatagramBased 
	messages		#  an array of GOutputMessage structs. 
	timeout		# the maximum time (in microseconds) to wait, 0 to not block, or -1to block indefinitely
	cancellable		#  a GCancellable . 
	return:		#  number of messages sent, or -1 on error. Note that the number ofmessages sent may be smaller than num_messagesif timeoutis zeroor positive, or if num_messageswas larger than UIO_MAXIOV (1024), inwhich case the caller may re-try to send the remaining messages. 
GSource  *g_datagram_based_create_source (GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable);	# Creates a GSource that can be attached to a GMainContext to monitor forthe availability of the specified condition on the GDatagramBased . TheGSource keeps a reference to the datagram_based.
	datagram_based		# a GDatagramBased 
	condition		# a GIOCondition mask to monitor
	cancellable		#  a GCancellable . 
	return:		#  a newly allocated GSource .  
GIOCondition g_datagram_based_condition_check (GDatagramBased *datagram_based, GIOCondition condition);	# Checks on the readiness of datagram_based to perform operations. Theoperations specified in condition are checked for and masked against thecurrently-satisfied conditions on datagram_based. The result is returned.
	datagram_based		# a GDatagramBased 
	condition		# a GIOCondition mask to check
	return:		#  the GIOCondition mask of the current state 
gboolean g_datagram_based_condition_wait (GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error);	# Waits for up to timeout microseconds for condition to become true ondatagram_based. If the condition is met, TRUE is returned.
	datagram_based		# a GDatagramBased 
	condition		# a GIOCondition mask to wait for
	timeout		# the maximum time (in microseconds) to wait, 0 to not block, or -1to block indefinitely
	cancellable		#  a GCancellable . 
	return:		#  TRUE if the condition was met, FALSE otherwise 
GInetAddress  *g_inet_address_new_from_string (const gchar *string);	# Parses string as an IP address and创建对象:GInetAddress .
	string		# a string representation of an IP address
	return:		#  a new GInetAddress corresponding to string, or NULL ifstringcould not be parsed.Free the returned object with g_object_unref() . 
GInetAddress  *g_inet_address_new_from_bytes (const guint8 *bytes, GSocketFamily family);	#创建对象:GInetAddress from the given family and bytes.bytes should be 4 bytes for G_SOCKET_FAMILY_IPV4 and 16 bytes forG_SOCKET_FAMILY_IPV6 .
	bytes		#  raw address data. 
	return:		#  a new GInetAddress corresponding to familyand bytes.Free the returned object with g_object_unref() . 
GInetAddress  *g_inet_address_new_any (GSocketFamily family);	# Creates a GInetAddress for the "any" address (unassigned/"don'tcare") for family.
	family		# the address family
	return:		#  a new GInetAddress corresponding to the "any" addressfor family.Free the returned object with g_object_unref() . 
GInetAddress  *g_inet_address_new_loopback (GSocketFamily family);	# Creates a GInetAddress for the loopback address for family.
	family		# the address family
	return:		#  a new GInetAddress corresponding to the loopback addressfor family.Free the returned object with g_object_unref() . 
gboolean g_inet_address_equal (GInetAddress *address, GInetAddress *other_address);	# Checks if two GInetAddress instances are equal, e.g. the same address.
	address		# A GInetAddress .
	other_address		# Another GInetAddress .
	return:		#  TRUE if addressand other_addressare equal, FALSE otherwise. 
guint8  *g_inet_address_to_bytes (GInetAddress *address);	# Gets the raw binary address data from address.
	address		# a GInetAddress 
	return:		#  a pointer to an internal array of the bytes in address,which should not be modified, stored, or freed. The size of thisarray can be gotten with g_inet_address_get_native_size() . 
gsize g_inet_address_get_native_size (GInetAddress *address);	# Gets the size of the native raw binary address for address. Thisis the size of the data that you get from g_inet_address_to_bytes() .
	address		# a GInetAddress 
	return:		#  the number of bytes used for the native version of address. 
gchar  *g_inet_address_to_string (GInetAddress *address);	# Converts address to string form.
	address		# a GInetAddress 
	return:		#  a representation of addressas a string, which should befreed after use. 
GSocketFamily g_inet_address_get_family (GInetAddress *address);	# Gets address's family
	address		# a GInetAddress 
	return:		#  address's family 
gboolean g_inet_address_get_is_any (GInetAddress *address);	# Tests whether address is the "any" address for its family.
	address		# a GInetAddress 
	return:		#  TRUE if addressis the "any" address for its family. 
gboolean g_inet_address_get_is_loopback (GInetAddress *address);	# Tests whether address is the loopback address for its family.
	address		# a GInetAddress 
	return:		#  TRUE if addressis the loopback address for its family. 
gboolean g_inet_address_get_is_link_local (GInetAddress *address);	# Tests whether address is a link-local address (that is, if itidentifies a host on a local network that is not connected to theInternet).
	address		# a GInetAddress 
	return:		#  TRUE if addressis a link-local address. 
gboolean g_inet_address_get_is_site_local (GInetAddress *address);	# Tests whether address is a site-local address such as 10.0.0.1(that is, the address identifies a host on a local network that cannot be reached directly from the Internet, but which may haveoutgoing Internet connectivity via a NAT or firewall).
	address		# a GInetAddress 
	return:		#  TRUE if addressis a site-local address. 
gboolean g_inet_address_get_is_multicast (GInetAddress *address);	# Tests whether address is a multicast address.
	address		# a GInetAddress 
	return:		#  TRUE if addressis a multicast address. 
gboolean g_inet_address_get_is_mc_link_local (GInetAddress *address);	# Tests whether address is a link-local multicast address.
	address		# a GInetAddress 
	return:		#  TRUE if addressis a link-local multicast address. 
gboolean g_inet_address_get_is_mc_node_local (GInetAddress *address);	# Tests whether address is a node-local multicast address.
	address		# a GInetAddress 
	return:		#  TRUE if addressis a node-local multicast address. 
gboolean g_inet_address_get_is_mc_site_local (GInetAddress *address);	# Tests whether address is a site-local multicast address.
	address		# a GInetAddress 
	return:		#  TRUE if addressis a site-local multicast address. 
gboolean g_inet_address_get_is_mc_org_local (GInetAddress *address);	# Tests whether address is an organization-local multicast address.
	address		# a GInetAddress 
	return:		#  TRUE if addressis an organization-local multicast address. 
gboolean g_inet_address_get_is_mc_global (GInetAddress *address);	# Tests whether address is a global multicast address.
	address		# a GInetAddress 
	return:		#  TRUE if addressis a global multicast address. 
GInetAddressMask  *g_inet_address_mask_new (GInetAddress *addr, guint length, GError **error);	#创建对象:GInetAddressMask representing all addresses whosefirst length bits match addr.
	addr		# a GInetAddress 
	length		# number of bits of addrto use
	error		# return location for GError , or NULL 
	return:		#  a new GInetAddressMask , or NULL on error 
GInetAddressMask  *g_inet_address_mask_new_from_string (const gchar *mask_string, GError **error);	# Parses mask_string as an IP address and (optional) length, andcreates a new GInetAddressMask . The length, if present, isdelimited by a "/". If it is not present, then the length isassumed to be the full length of the address.
	mask_string		# an IP address or address/length string
	error		# return location for GError , or NULL 
	return:		#  a new GInetAddressMask corresponding to string, or NULL on error. 
gchar  *g_inet_address_mask_to_string (GInetAddressMask *mask);	# Converts mask back to its corresponding string form.
	mask		# a GInetAddressMask 
	return:		#  a string corresponding to mask. 
GSocketFamily g_inet_address_mask_get_family (GInetAddressMask *mask);	# Gets the GSocketFamily of mask's address
	mask		# a GInetAddressMask 
	return:		#  the GSocketFamily of mask's address 
GInetAddress  *g_inet_address_mask_get_address (GInetAddressMask *mask);	# Gets mask's base address
	mask		# a GInetAddressMask 
	return:		#  mask's base address.  
guint g_inet_address_mask_get_length (GInetAddressMask *mask);	# Gets mask's length
	mask		# a GInetAddressMask 
	return:		#  mask's length 
gboolean g_inet_address_mask_matches (GInetAddressMask *mask, GInetAddress *address);	# Tests if address falls within the range described by mask.
	mask		# a GInetAddressMask 
	address		# a GInetAddress 
	return:		#  whether addressfalls within the range described bymask. 
gboolean g_inet_address_mask_equal (GInetAddressMask *mask, GInetAddressMask *mask2);	# Tests if mask and mask2 are the same mask.
	mask		# a GInetAddressMask 
	mask2		# another GInetAddressMask 
	return:		#  whether maskand mask2are the same mask 
GSocketAddress  *g_socket_address_new_from_native (gpointer native, gsize len);	# Creates a GSocketAddress subclass corresponding to the nativestruct sockaddr native.
	native		#  a pointer to a struct sockaddr. 
	return:		#  a new GSocketAddress if nativecould successfullybe converted, otherwise NULL  
GSocketFamily g_socket_address_get_family (GSocketAddress *address);	# Gets the socket family type of address.
	address		# a GSocketAddress 
	return:		#  the socket family type of address 
gboolean g_socket_address_to_native (GSocketAddress *address, gpointer dest, gsize destlen, GError **error);	# Converts a GSocketAddress to a native struct sockaddr, which canbe passed to low-level functions like connect() or bind().
	address		# a GSocketAddress 
	dest		# a pointer to a memory location that will contain the nativestruct sockaddr
	destlen		# the size of dest. Must be at least as large as
	error		# GError for error reporting, or NULL to ignore
	return:		#  TRUE if destwas filled in, FALSE on error 
gssize g_socket_address_get_native_size (GSocketAddress *address);	# Gets the size of address's native struct sockaddr.You can use this to allocate memory to pass tog_socket_address_to_native() .
	address		# a GSocketAddress 
	return:		#  the size of the native struct sockaddr thataddressrepresents 
GSocketAddress  *g_inet_socket_address_new (GInetAddress *address, guint16 port);	#创建对象:GInetSocketAddress for address and port.
	address		# a GInetAddress 
	port		# a port number
	return:		#  a new GInetSocketAddress  
GSocketAddress  *g_inet_socket_address_new_from_string (const char *address, guint port);	#创建对象:GInetSocketAddress for address and port.
	address		# the string form of an IP address
	port		# a port number
	return:		#  a new GInetSocketAddress , or NULL if addresscannot beparsed. 
GInetAddress  *g_inet_socket_address_get_address (GInetSocketAddress *address);	# Gets address's GInetAddress .
	address		# a GInetSocketAddress 
	return:		#  the GInetAddress for address, which must beg_object_ref() 'd if it will be stored.  
guint16 g_inet_socket_address_get_port (GInetSocketAddress *address);	# Gets address's port.
	address		# a GInetSocketAddress 
	return:		#  the port for address 
guint32 g_inet_socket_address_get_flowinfo (GInetSocketAddress *address);	# Gets the sin6_flowinfo field from address,which must be an IPv6 address.
	address		# a G_SOCKET_FAMILY_IPV6 GInetSocketAddress 
	return:		#  the flowinfo field 
guint32 g_inet_socket_address_get_scope_id (GInetSocketAddress *address);	# Gets the sin6_scope_id field from address,which must be an IPv6 address.
	address		# a G_SOCKET_FAMILY_IPV6 GInetAddress 
	return:		#  the scope id field 
GSocketAddress  *g_unix_socket_address_new (const gchar *path);	#创建对象:GUnixSocketAddress for path.
	path		# the socket path
	return:		#  a new GUnixSocketAddress  
GSocketAddress  *g_unix_socket_address_new_abstract (const gchar *path, gint path_len);	# g_unix_socket_address_new_abstract is deprecated and should not be used in newly-written code.
	path		#  the abstract name. 
	return:		#  a new GUnixSocketAddress  
GSocketAddress  *g_unix_socket_address_new_with_type (const gchar *path, gint path_len, GUnixSocketAddressType type);	#创建对象:GUnixSocketAddress of type type with name path.
	path		#  the name. 
	return:		#  a new GUnixSocketAddress  
gboolean g_unix_socket_address_get_is_abstract (GUnixSocketAddress *address);	# g_unix_socket_address_get_is_abstract is deprecated and should not be used in newly-written code.
	address		# a GInetSocketAddress 
	return:		#  TRUE if the address is abstract, FALSE otherwise 
GUnixSocketAddressType g_unix_socket_address_get_address_type (GUnixSocketAddress *address);	# Gets address's type.
	address		# a GInetSocketAddress 
	return:		#  a GUnixSocketAddressType  
char  *g_unix_socket_address_get_path (GUnixSocketAddress *address);	# Gets address's path, or for abstract sockets the "name".
	address		# a GInetSocketAddress 
	return:		#  the path for address 
gsize g_unix_socket_address_get_path_len (GUnixSocketAddress *address);	# Gets the length of address's path.
	address		# a GInetSocketAddress 
	return:		#  the length of the path 
gboolean g_unix_socket_address_abstract_names_supported (void );	# Checks if abstract UNIX domain socket names are supported.
	return:		#  TRUE if supported, FALSE otherwise 
GSocketControlMessage  *g_socket_control_message_deserialize (int level, int type, gsize size, gpointer data);	# Tries to deserialize a socket control message of a givenlevel and type. This will ask all known (to GType) subclassesof GSocketControlMessage if they can understand this kindof message and if so deserialize it into a GSocketControlMessage .
	level		# a socket level
	type		# a socket control message type for the given level
	size		# the size of the data in bytes
	data		#  pointer to the message data. 
	return:		#  the deserialized message or NULL .  
int g_socket_control_message_get_level (GSocketControlMessage *message);	# Returns the "level" (i.e. the originating protocol) of the control message.This is often SOL_SOCKET.
	message		# a GSocketControlMessage 
	return:		#  an integer describing the level 
int g_socket_control_message_get_msg_type (GSocketControlMessage *message);	# Returns the protocol specific type of the control message.For instance, for UNIX fd passing this would be SCM_RIGHTS.
	message		# a GSocketControlMessage 
	return:		#  an integer describing the type of control message 
gsize g_socket_control_message_get_size (GSocketControlMessage *message);	# Returns the space required for the control message, not includingheaders or alignment.
	message		# a GSocketControlMessage 
	return:		#  The number of bytes required. 
void g_socket_control_message_serialize (GSocketControlMessage *message, gpointer data);	# Converts the data in the message to bytes placed in themessage.
	message		# a GSocketControlMessage 
	data		#  A buffer to write data to. 
GUnixFDList  *g_unix_fd_list_new_from_array (const gint *fds, gint n_fds);	#创建对象:GUnixFDList containing the file descriptors given infds. The file descriptors become the property of the new list andmay no longer be used by the caller. The array itself is owned bythe caller.
	fds		#  the initial list of file descriptors. 
	return:		#  a new GUnixFDList  
GUnixFDList  *g_unix_fd_list_new (void );	#创建对象:GUnixFDList containing no file descriptors.
	return:		#  a new GUnixFDList  
gint g_unix_fd_list_get_length (GUnixFDList *list);	# Gets the length of list (ie: the number of file descriptorscontained within).
	list		# a GUnixFDList 
	return:		#  the length of list 
gint g_unix_fd_list_get (GUnixFDList *list, gint index_, GError **error);	# Gets a file descriptor out of list.
	list		# a GUnixFDList 
	index_		# the index into the list
	error		# a GError pointer
	return:		#  the file descriptor, or -1 in case of error 
gint  *g_unix_fd_list_peek_fds (GUnixFDList *list, gint *length);	# Returns the array of file descriptors that is contained in thisobject.
	list		# a GUnixFDList 
	length		#  pointer to the length of the returnedarray, or NULL . 
	return:		#  an array of filedescriptors.  
gint  *g_unix_fd_list_steal_fds (GUnixFDList *list, gint *length);	# Returns the array of file descriptors that is contained in thisobject.
	list		# a GUnixFDList 
	length		#  pointer to the length of the returnedarray, or NULL . 
	return:		#  an array of filedescriptors.  
gint g_unix_fd_list_append (GUnixFDList *list, gint fd, GError **error);	# Adds a file descriptor to list.
	list		# a GUnixFDList 
	fd		# a valid open file descriptor
	error		# a GError pointer
	return:		#  the index of the appended fd in case of success, else -1(and erroris set) 
GSocketControlMessage  *g_unix_fd_message_new_with_fd_list (GUnixFDList *fd_list);	#创建对象:GUnixFDMessage containing list.
	fd_list		# a GUnixFDList 
	return:		#  a new GUnixFDMessage  
GSocketControlMessage  *g_unix_fd_message_new (void );	#创建对象:GUnixFDMessage containing an empty file descriptorlist.
	return:		#  a new GUnixFDMessage  
GUnixFDList  *g_unix_fd_message_get_fd_list (GUnixFDMessage *message);	# Gets the GUnixFDList contained in message. This function does notreturn a reference to the caller, but the returned list is valid forthe lifetime of message.
	message		# a GUnixFDMessage 
	return:		#  the GUnixFDList from message.  
gboolean g_unix_fd_message_append_fd (GUnixFDMessage *message, gint fd, GError **error);	# Adds a file descriptor to message.
	message		# a GUnixFDMessage 
	fd		# a valid open file descriptor
	error		# a GError pointer
	return:		#  TRUE in case of success, else FALSE (and erroris set) 
gint  *g_unix_fd_message_steal_fds (GUnixFDMessage *message, gint *length);	# Returns the array of file descriptors that is contained in thisobject.
	message		# a GUnixFDMessage 
	length		#  pointer to the length of the returnedarray, or NULL . 
	return:		#  an array of filedescriptors.  
GCredentials  *g_credentials_new (void );	#创建对象:GCredentials object with credentials matching thethe current process.
	return:		#  A GCredentials . Free with g_object_unref() . 
gchar  *g_credentials_to_string (GCredentials *credentials);	# Creates a human-readable textual representation of credentialsthat can be used in logging and debug messages. The format of thereturned string may change in future GLib release.
	credentials		# A GCredentials object.
	return:		#  A string that should be freed with g_free() . 
gpointer g_credentials_get_native (GCredentials *credentials, GCredentialsType native_type);	# Gets a pointer to native credentials of type native_type fromcredentials.
	credentials		# A GCredentials .
	native_type		# The type of native credentials to get.
	return:		#  The pointer to native credentials or NULL if theoperation there is no GCredentials support for the OS or ifnative_typeisn't supported by the OS. Do not free the returneddata, it is owned by credentials. 
void g_credentials_set_native (GCredentials *credentials, GCredentialsType native_type, gpointer native);	# Copies the native credentials of type native_type from nativeinto credentials.
	credentials		# A GCredentials .
	native_type		# The type of native credentials to set.
	native		#  A pointer to native credentials. 
gboolean g_credentials_is_same_user (GCredentials *credentials, GCredentials *other_credentials, GError **error);	# Checks if credentials and other_credentials is the same user.
	credentials		# A GCredentials .
	other_credentials		# A GCredentials .
	error		# Return location for error or NULL .
	return:		#  TRUE if credentialsand other_credentialshas the sameuser, FALSE otherwise or if erroris set. 
uid_t g_credentials_get_unix_user (GCredentials *credentials, GError **error);	# Tries to get the UNIX user identifier from credentials. Thismethod is only available on UNIX platforms.
	credentials		# A GCredentials 
	error		# Return location for error or NULL .
	return:		#  The UNIX user identifier or -1 if erroris set. 
gboolean g_credentials_set_unix_user (GCredentials *credentials, uid_t uid, GError **error);	# Tries to set the UNIX user identifier on credentials. This methodis only available on UNIX platforms.
	credentials		# A GCredentials .
	uid		# The UNIX user identifier to set.
	error		# Return location for error or NULL .
	return:		#  TRUE if uidwas set, FALSE if error is set. 
pid_t g_credentials_get_unix_pid (GCredentials *credentials, GError **error);	# Tries to get the UNIX process identifier from credentials. Thismethod is only available on UNIX platforms.
	credentials		# A GCredentials 
	error		# Return location for error or NULL .
	return:		#  The UNIX process ID, or -1 if erroris set. 
GSocketControlMessage  *g_unix_credentials_message_new (void );	#创建对象:GUnixCredentialsMessage with credentials matching the current processes.
	return:		#  a new GUnixCredentialsMessage  
GSocketControlMessage  *g_unix_credentials_message_new_with_credentials (GCredentials *credentials);	#创建对象:GUnixCredentialsMessage holding credentials.
	credentials		# A GCredentials object.
	return:		#  a new GUnixCredentialsMessage  
GCredentials  *g_unix_credentials_message_get_credentials (GUnixCredentialsMessage *message);	# Gets the credentials stored in message.
	message		# A GUnixCredentialsMessage .
	return:		#  A GCredentials instance. Do not free, it is owned by message.  
gboolean g_unix_credentials_message_is_supported (void );	# Checks if passing GCredentials on a GSocket is supported on this platform.
	return:		#  TRUE if supported, FALSE otherwise 
GIOStream  *g_proxy_connect (GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error);	# Given connection to communicate with a proxy (eg, aGSocketConnection that is connected to the proxy server), thisdoes the necessary handshake to connect to proxy_address, and ifrequired, wraps the GIOStream to handle proxy payload.
	proxy		# a GProxy 
	connection		# a GIOStream 
	proxy_address		# a GProxyAddress 
	cancellable		#  a GCancellable . 
	return:		#  a GIOStream that will replace connection. This mightbe the same as connection, in which case a referencewill be added.  
void g_proxy_connect_async (GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronous version of g_proxy_connect() .
	proxy		# a GProxy 
	connection		# a GIOStream 
	proxy_address		# a GProxyAddress 
	cancellable		#  a GCancellable . 
GIOStream  *g_proxy_connect_finish (GProxy *proxy, GAsyncResult *result, GError **error);	# See g_proxy_connect() .
	proxy		# a GProxy 
	result		# a GAsyncResult 
	error		# return GError 
	return:		#  a GIOStream .  
GProxy  *g_proxy_get_default_for_protocol (const gchar *protocol);	# Lookup "gio-proxy" extension point for a proxy implementation that supportsspecified protocol.
	protocol		# the proxy protocol name (e.g. http, socks, etc)
	return:		#  return a GProxy or NULL if protocolis not supported.  
gboolean g_proxy_supports_hostname (GProxy *proxy);	# Some proxy protocols expect to be passed a hostname, which theywill resolve to an IP address themselves. Others, like SOCKS4, donot allow this. This function will return FALSE if proxy isimplementing such a protocol. When FALSE is returned, the callershould resolve the destination hostname first, and then pass aGProxyAddress containing the stringified IP address tog_proxy_connect() or g_proxy_connect_async() .
	proxy		# a GProxy 
	return:		#  TRUE if hostname resolution is supported. 
gchar  *g_proxy_address_get_destination_protocol (GProxyAddress *proxy);	# Gets the protocol that is being spoken to the destinationserver; eg, "http" or "ftp".
	proxy		# a GProxyAddress 
	return:		#  the proxy's destination protocol 
gchar  *g_proxy_address_get_destination_hostname (GProxyAddress *proxy);	# Gets proxy's destination hostname; that is, the name of the hostthat will be connected to via the proxy, not the name of the proxyitself.
	proxy		# a GProxyAddress 
	return:		#  the proxy's destination hostname 
guint16 g_proxy_address_get_destination_port (GProxyAddress *proxy);	# Gets proxy's destination port; that is, the port on thedestination host that will be connected to via the proxy, not theport number of the proxy itself.
	proxy		# a GProxyAddress 
	return:		#  the proxy's destination port 
gchar  *g_proxy_address_get_password (GProxyAddress *proxy);	# Gets proxy's password.
	proxy		# a GProxyAddress 
	return:		#  the proxy's password 
gchar  *g_proxy_address_get_protocol (GProxyAddress *proxy);	# Gets proxy's protocol. eg, "socks" or "http"
	proxy		# a GProxyAddress 
	return:		#  the proxy's protocol 
gchar  *g_proxy_address_get_username (GProxyAddress *proxy);	# Gets proxy's username.
	proxy		# a GProxyAddress 
	return:		#  the proxy's username 
gchar  *g_proxy_address_get_uri (GProxyAddress *proxy);	# Gets the proxy URI that proxy was constructed from.
	proxy		# a GProxyAddress 
	return:		#  the proxy's URI, or NULL if unknown 
GSocketAddress  *g_proxy_address_new (GInetAddress *inetaddr, guint16 port, const gchar *protocol, const gchar *dest_hostname, guint16 dest_port, const gchar *username, const gchar *password);	#创建对象:GProxyAddress for inetaddr with protocol that shouldtunnel through dest_hostname and dest_port.
	inetaddr		# The proxy server GInetAddress .
	port		# The proxy server port.
	protocol		# The proxy protocol to support, in lower case (e.g. socks, http).
	dest_hostname		# The destination hostname the proxy should tunnel to.
	dest_port		# The destination port to tunnel to.
	username		#  The username to authenticate to the proxy server(or NULL ). 
	return:		#  a new GProxyAddress  
void g_networking_init (void );	# Initializes the platform networking libraries (eg, on Windows, thiscalls WSAStartup()). GLib will call this itself if it is needed, soyou only need to call it if you directly call system networkingfunctions (without calling any GLib networking functions first).
GSocketClient  *g_socket_client_new (void );	#创建对象:GSocketClient with the default options.
	return:		#  a GSocketClient .Free the returned object with g_object_unref() . 
GSocketConnection  *g_socket_client_connect (GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);	# Tries to resolve the connectable and make a network connection to it.
	client		# a GSocketClient .
	connectable		# a GSocketConnectable specifying the remote address.
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a GSocketConnection on success, NULL on error.  
void g_socket_client_connect_async (GSocketClient *client, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This is the asynchronous version of g_socket_client_connect() .
	client		# a GSocketClient 
	connectable		# a GSocketConnectable specifying the remote address.
	cancellable		#  a GCancellable , or NULL . 
GSocketConnection  *g_socket_client_connect_finish (GSocketClient *client, GAsyncResult *result, GError **error);	# Finishes an async connect operation. See g_socket_client_connect_async() 
	client		# a GSocketClient .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a GSocketConnection on success, NULL on error.  
GSocketConnection  *g_socket_client_connect_to_host (GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GError **error);	# This is a helper function for g_socket_client_connect() .
	client		# a GSocketClient 
	host_and_port		# the name and optionally port of the host to connect to
	default_port		# the default port to connect to
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a GSocketConnection on success, NULL on error.  
void g_socket_client_connect_to_host_async (GSocketClient *client, const gchar *host_and_port, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This is the asynchronous version of g_socket_client_connect_to_host() .
	client		# a GSocketClient 
	host_and_port		# the name and optionally the port of the host to connect to
	default_port		# the default port to connect to
	cancellable		#  a GCancellable , or NULL . 
GSocketConnection  *g_socket_client_connect_to_host_finish (GSocketClient *client, GAsyncResult *result, GError **error);	# Finishes an async connect operation. See g_socket_client_connect_to_host_async() 
	client		# a GSocketClient .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a GSocketConnection on success, NULL on error.  
GSocketConnection  *g_socket_client_connect_to_service (GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GError **error);	# Attempts to create a TCP connection to a service.
	client		# a GSocketConnection 
	domain		# a domain name
	service		# the name of the service to connect to
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a GSocketConnection if successful, or NULL on error.  
void g_socket_client_connect_to_service_async (GSocketClient *client, const gchar *domain, const gchar *service, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This is the asynchronous version ofg_socket_client_connect_to_service() .
	client		# a GSocketClient 
	domain		# a domain name
	service		# the name of the service to connect to
	cancellable		#  a GCancellable , or NULL . 
GSocketConnection  *g_socket_client_connect_to_service_finish (GSocketClient *client, GAsyncResult *result, GError **error);	# Finishes an async connect operation. See g_socket_client_connect_to_service_async() 
	client		# a GSocketClient .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a GSocketConnection on success, NULL on error.  
GSocketConnection  *g_socket_client_connect_to_uri (GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GError **error);	# This is a helper function for g_socket_client_connect() .
	client		# a GSocketClient 
	uri		# A network URI
	default_port		# the default port to connect to
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a GSocketConnection on success, NULL on error.  
void g_socket_client_connect_to_uri_async (GSocketClient *client, const gchar *uri, guint16 default_port, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This is the asynchronous version of g_socket_client_connect_to_uri() .
	client		# a GSocketClient 
	uri		# a network uri
	default_port		# the default port to connect to
	cancellable		#  a GCancellable , or NULL . 
GSocketConnection  *g_socket_client_connect_to_uri_finish (GSocketClient *client, GAsyncResult *result, GError **error);	# Finishes an async connect operation. See g_socket_client_connect_to_uri_async() 
	client		# a GSocketClient .
	result		# a GAsyncResult .
	error		# a GError location to store the error occurring, or NULL toignore.
	return:		#  a GSocketConnection on success, NULL on error.  
void g_socket_client_set_family (GSocketClient *client, GSocketFamily family);	# Sets the socket family of the socket client.If this is set to something other than G_SOCKET_FAMILY_INVALID then the sockets created by this object will be of the specifiedfamily.
	client		# a GSocketClient .
	family		# a GSocketFamily 
void g_socket_client_set_local_address (GSocketClient *client, GSocketAddress *address);	# Sets the local address of the socket client.The sockets created by this object will bound to thespecified address (if not NULL ) before connecting.
	client		# a GSocketClient .
	address		#  a GSocketAddress , or NULL . 
void g_socket_client_set_protocol (GSocketClient *client, GSocketProtocol protocol);	# Sets the protocol of the socket client.The sockets created by this object will use of the specifiedprotocol.
	client		# a GSocketClient .
	protocol		# a GSocketProtocol 
void g_socket_client_set_socket_type (GSocketClient *client, GSocketType type);	# Sets the socket type of the socket client.The sockets created by this object will be of the specifiedtype.
	client		# a GSocketClient .
	type		# a GSocketType 
void g_socket_client_set_timeout (GSocketClient *client, guint timeout);	# Sets the I/O timeout for sockets created by client. timeout is atime in seconds, or 0 for no timeout (the default).
	client		# a GSocketClient .
	timeout		# the timeout
void g_socket_client_set_enable_proxy (GSocketClient *client, gboolean enable);	# Sets whether or not client attempts to make connections via aproxy server. When enabled (the default), GSocketClient will use aGProxyResolver to determine if a proxy protocol such as SOCKS isneeded, and automatically do the necessary proxy negotiation.
	client		# a GSocketClient .
	enable		# whether to enable proxies
void g_socket_client_set_proxy_resolver (GSocketClient *client, GProxyResolver *proxy_resolver);	# Overrides the GProxyResolver used by client. You can call this ifyou want to use specific proxies, rather than using the systemdefault proxy settings.
	client		# a GSocketClient .
	proxy_resolver		#  a GProxyResolver , or NULL for thedefault. 
void g_socket_client_set_tls (GSocketClient *client, gboolean tls);	# Sets whether client creates TLS (aka SSL) connections. If tls isTRUE , client will wrap its connections in a GTlsClientConnection and perform a TLS handshake when connecting.
	client		# a GSocketClient .
	tls		# whether to use TLS
void g_socket_client_set_tls_validation_flags (GSocketClient *client, GTlsCertificateFlags flags);	# Sets the TLS validation flags used when creating TLS connectionsvia client. The default value is G_TLS_CERTIFICATE_VALIDATE_ALL .
	client		# a GSocketClient .
	flags		# the validation flags
GSocketFamily g_socket_client_get_family (GSocketClient *client);	# Gets the socket family of the socket client.
	client		# a GSocketClient .
	return:		#  a GSocketFamily  
GSocketAddress  *g_socket_client_get_local_address (GSocketClient *client);	# Gets the local address of the socket client.
	client		# a GSocketClient .
	return:		#  a GSocketAddress or NULL . Do not free.  
GSocketProtocol g_socket_client_get_protocol (GSocketClient *client);	# Gets the protocol name type of the socket client.
	client		# a GSocketClient 
	return:		#  a GSocketProtocol  
GSocketType g_socket_client_get_socket_type (GSocketClient *client);	# Gets the socket type of the socket client.
	client		# a GSocketClient .
	return:		#  a GSocketFamily  
guint g_socket_client_get_timeout (GSocketClient *client);	# Gets the I/O timeout time for sockets created by client.
	client		# a GSocketClient 
	return:		#  the timeout in seconds 
gboolean g_socket_client_get_enable_proxy (GSocketClient *client);	# Gets the proxy enable state; see g_socket_client_set_enable_proxy() 
	client		# a GSocketClient .
	return:		#  whether proxying is enabled 
GProxyResolver  *g_socket_client_get_proxy_resolver (GSocketClient *client);	# Gets the GProxyResolver being used by client. Normally, this willbe the resolver returned by g_proxy_resolver_get_default() , but youcan override it with g_socket_client_set_proxy_resolver() .
	client		# a GSocketClient .
	return:		#  The GProxyResolver being used byclient.  
gboolean g_socket_client_get_tls (GSocketClient *client);	# Gets whether client creates TLS connections. Seeg_socket_client_set_tls() for details.
	client		# a GSocketClient .
	return:		#  whether clientuses TLS 
GTlsCertificateFlags g_socket_client_get_tls_validation_flags (GSocketClient *client);	# Gets the TLS validation flags used creating TLS connections viaclient.
	client		# a GSocketClient .
	return:		#  the TLS validation flags 
void g_socket_client_add_application_proxy (GSocketClient *client, const gchar *protocol);	# Enable proxy protocols to be handled by the application. When theindicated proxy protocol is returned by the GProxyResolver ,GSocketClient will consider this protocol as supported but willnot try to find a GProxy instance to handle handshaking. Theapplication must check for this case by callingg_socket_connection_get_remote_address() on the returnedGSocketConnection , and seeing if it's a GProxyAddress of theappropriate type, to determine whether or not it needs to handlethe proxy handshaking itself.
	client		# a GSocketClient 
	protocol		# The proxy protocol
gboolean g_socket_connection_connect (GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GError **error);	# Connect connection to the specified remote address.
	connection		# a GSocketConnection 
	address		# a GSocketAddress specifying the remote address.
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if the connection succeeded, FALSE on error 
void g_socket_connection_connect_async (GSocketConnection *connection, GSocketAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously connect connection to the specified remote address.
	connection		# a GSocketConnection 
	address		# a GSocketAddress specifying the remote address.
	cancellable		#  a GCancellable or NULL . 
gboolean g_socket_connection_connect_finish (GSocketConnection *connection, GAsyncResult *result, GError **error);	# Gets the result of a g_socket_connection_connect_async() call.
	connection		# a GSocketConnection 
	result		# the GAsyncResult 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  TRUE if the connection succeeded, FALSE on error 
gboolean g_socket_connection_is_connected (GSocketConnection *connection);	# Checks if connection is connected. This is equivalent to callingg_socket_is_connected() on connection's underlying GSocket .
	connection		# a GSocketConnection 
	return:		#  whether connectionis connected 
GSocketAddress  *g_socket_connection_get_local_address (GSocketConnection *connection, GError **error);	# Try to get the local address of a socket connection.
	connection		# a GSocketConnection 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a GSocketAddress or NULL on error.Free the returned object with g_object_unref() .  
GSocketAddress  *g_socket_connection_get_remote_address (GSocketConnection *connection, GError **error);	# Try to get the remote address of a socket connection.
	connection		# a GSocketConnection 
	error		# GError for error reporting, or NULL to ignore.
	return:		#  a GSocketAddress or NULL on error.Free the returned object with g_object_unref() .  
GSocket  *g_socket_connection_get_socket (GSocketConnection *connection);	# Gets the underlying GSocket object of the connection.This can be useful if you want to do something unusual on itnot supported by the GSocketConnection APIs.
	connection		# a GSocketConnection 
	return:		#  a GSocket or NULL on error.  
GSocketConnection  *g_socket_connection_factory_create_connection (GSocket *socket);	# Creates a GSocketConnection subclass of the right type forsocket.
	socket		# a GSocket 
	return:		#  a GSocketConnection .  
GType g_socket_connection_factory_lookup_type (GSocketFamily family, GSocketType type, gint protocol_id);	# Looks up the GType to be used when creating socket connections onsockets with the specified family, type and protocol_id.
	family		# a GSocketFamily 
	type		# a GSocketType 
	protocol_id		# a protocol id
	return:		#  a GType  
void g_socket_connection_factory_register_type (GType g_type, GSocketFamily family, GSocketType type, gint protocol);	# Looks up the GType to be used when creating socket connections onsockets with the specified family, type and protocol.
	g_type		# a GType , inheriting from G_TYPE_SOCKET_CONNECTION
	family		# a GSocketFamily 
	type		# a GSocketType 
	protocol		# a protocol id
gint g_unix_connection_receive_fd (GUnixConnection *connection, GCancellable *cancellable, GError **error);	# Receives a file descriptor from the sending end of the connection.The sending end has to call g_unix_connection_send_fd() for thisto work.
	connection		# a GUnixConnection 
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a file descriptor on success, -1 on error. 
gboolean g_unix_connection_send_fd (GUnixConnection *connection, gint fd, GCancellable *cancellable, GError **error);	# Passes a file descriptor to the receiving side of theconnection. The receiving end has to call g_unix_connection_receive_fd() to accept the file descriptor.
	connection		# a GUnixConnection 
	fd		# a file descriptor
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a TRUE on success, NULL on error. 
GCredentials  *g_unix_connection_receive_credentials (GUnixConnection *connection, GCancellable *cancellable, GError **error);	# Receives credentials from the sending end of the connection. Thesending end has to call g_unix_connection_send_credentials() (orsimilar) for this to work.
	connection		# A GUnixConnection .
	cancellable		#  A GCancellable or NULL . 
	return:		#  Received credentials on success (free withg_object_unref() ), NULL if erroris set.  
void g_unix_connection_receive_credentials_async (GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously receive credentials.
	connection		# A GUnixConnection .
	cancellable		#  optional GCancellable object, NULL to ignore. 
GCredentials  *g_unix_connection_receive_credentials_finish (GUnixConnection *connection, GAsyncResult *result, GError **error);	# Finishes an asynchronous receive credentials operation started withg_unix_connection_receive_credentials_async() .
	connection		# A GUnixConnection .
	result		# a GAsyncResult .
	error		# a GError , or NULL 
	return:		#  a GCredentials , or NULL on error.Free the returned object with g_object_unref() .  
gboolean g_unix_connection_send_credentials (GUnixConnection *connection, GCancellable *cancellable, GError **error);	# Passes the credentials of the current user the receiving sideof the connection. The receiving end has to callg_unix_connection_receive_credentials() (or similar) to accept thecredentials.
	connection		# A GUnixConnection .
	cancellable		#  A GCancellable or NULL . 
	return:		#  TRUE on success, FALSE if erroris set. 
void g_unix_connection_send_credentials_async (GUnixConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously send credentials.
	connection		# A GUnixConnection .
	cancellable		#  optional GCancellable object, NULL to ignore. 
gboolean g_unix_connection_send_credentials_finish (GUnixConnection *connection, GAsyncResult *result, GError **error);	# Finishes an asynchronous send credentials operation started withg_unix_connection_send_credentials_async() .
	connection		# A GUnixConnection .
	result		# a GAsyncResult .
	error		# a GError , or NULL 
	return:		#  TRUE if the operation was successful, otherwise FALSE . 
void g_tcp_connection_set_graceful_disconnect (GTcpConnection *connection, gboolean graceful_disconnect);	# This enables graceful disconnects on close. A graceful disconnectmeans that we signal the receiving end that the connection is terminatedand wait for it to close the connection before closing the connection.
	connection		# a GTcpConnection 
	graceful_disconnect		# Whether to do graceful disconnects or not
gboolean g_tcp_connection_get_graceful_disconnect (GTcpConnection *connection);	# Checks if graceful disconnects are used. Seeg_tcp_connection_set_graceful_disconnect() .
	connection		# a GTcpConnection 
	return:		#  TRUE if graceful disconnect is used on close, FALSE otherwise 
GSocketConnection  *g_tcp_wrapper_connection_new (GIOStream *base_io_stream, GSocket *socket);	# Wraps base_io_stream and socket together as a GSocketConnection .
	base_io_stream		# the GIOStream to wrap
	socket		# the GSocket associated with base_io_stream
	return:		#  the new GSocketConnection . 
GIOStream  *g_tcp_wrapper_connection_get_base_io_stream (GTcpWrapperConnection *conn);	# Get's conn's base GIOStream 
	conn		# a GTcpWrapperConnection 
	return:		#  conn's base GIOStream .  
GSocketListener  *g_socket_listener_new (void );	#创建对象:GSocketListener with no sockets to listen for.New listeners can be added with e.g. g_socket_listener_add_address() or g_socket_listener_add_inet_port() .
	return:		#  a new GSocketListener . 
gboolean g_socket_listener_add_socket (GSocketListener *listener, GSocket *socket, GObject *source_object, GError **error);	# Adds socket to the set of sockets that we try to acceptnew clients from. The socket must be bound to a localaddress and listened to.
	listener		# a GSocketListener 
	socket		# a listening GSocket 
	source_object		#  Optional GObject identifying this source. 
	return:		#  TRUE on success, FALSE on error. 
gboolean g_socket_listener_add_address (GSocketListener *listener, GSocketAddress *address, GSocketType type, GSocketProtocol protocol, GObject *source_object, GSocketAddress **effective_address, GError **error);	# Creates a socket of type type and protocol protocol, bindsit to address and adds it to the set of sockets we're acceptingsockets from.
	listener		# a GSocketListener 
	address		# a GSocketAddress 
	type		# a GSocketType 
	protocol		# a GSocketProtocol 
	source_object		#  Optional GObject identifying this source. 
	return:		#  TRUE on success, FALSE on error. 
gboolean g_socket_listener_add_inet_port (GSocketListener *listener, guint16 port, GObject *source_object, GError **error);	# Helper function for g_socket_listener_add_address() thatcreates a TCP/IP socket listening on IPv4 and IPv6 (ifsupported) on the specified port on all interfaces.
	listener		# a GSocketListener 
	port		# an IP port number (non-zero)
	source_object		#  Optional GObject identifying this source. 
	return:		#  TRUE on success, FALSE on error. 
guint16 g_socket_listener_add_any_inet_port (GSocketListener *listener, GObject *source_object, GError **error);	# Listens for TCP connections on any available port number for bothIPv6 and IPv4 (if each is available).
	listener		# a GSocketListener 
	source_object		#  Optional GObject identifying this source. 
	return:		#  the port number, or 0 in case of failure. 
GSocketConnection  *g_socket_listener_accept (GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error);	# Blocks waiting for a client to connect to any of the sockets addedto the listener. Returns a GSocketConnection for the socket that wasaccepted.
	listener		# a GSocketListener 
	source_object		#  location where GObject pointer will be stored, or NULL . 
	return:		#  a GSocketConnection on success, NULL on error.  
void g_socket_listener_accept_async (GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This is the asynchronous version of g_socket_listener_accept() .
	listener		# a GSocketListener 
	cancellable		#  a GCancellable , or NULL . 
GSocketConnection  *g_socket_listener_accept_finish (GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error);	# Finishes an async accept operation. See g_socket_listener_accept_async() 
	listener		# a GSocketListener 
	result		# a GAsyncResult .
	source_object		#  Optional GObject identifying this source. 
	return:		#  a GSocketConnection on success, NULL on error.  
GSocket  *g_socket_listener_accept_socket (GSocketListener *listener, GObject **source_object, GCancellable *cancellable, GError **error);	# Blocks waiting for a client to connect to any of the sockets addedto the listener. Returns the GSocket that was accepted.
	listener		# a GSocketListener 
	source_object		#  location where GObject pointer will be stored, or NULL . 
	return:		#  a GSocket on success, NULL on error.  
void g_socket_listener_accept_socket_async (GSocketListener *listener, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# This is the asynchronous version of g_socket_listener_accept_socket() .
	listener		# a GSocketListener 
	cancellable		#  a GCancellable , or NULL . 
GSocket  *g_socket_listener_accept_socket_finish (GSocketListener *listener, GAsyncResult *result, GObject **source_object, GError **error);	# Finishes an async accept operation. See g_socket_listener_accept_socket_async() 
	listener		# a GSocketListener 
	result		# a GAsyncResult .
	source_object		#  Optional GObject identifying this source. 
	return:		#  a GSocket on success, NULL on error.  
void g_socket_listener_close (GSocketListener *listener);	# Closes all the sockets in the listener.
	listener		# a GSocketListener 
void g_socket_listener_set_backlog (GSocketListener *listener, int listen_backlog);	# Sets the listen backlog on the sockets in the listener.
	listener		# a GSocketListener 
	listen_backlog		# an integer
GSocketService  *g_socket_service_new (void );	#创建对象:GSocketService with no sockets to listen for.New listeners can be added with e.g. g_socket_listener_add_address() or g_socket_listener_add_inet_port() .
	return:		#  a new GSocketService . 
void g_socket_service_start (GSocketService *service);	# Restarts the service, i.e. start accepting connectionsfrom the added sockets when the mainloop runs. This only needsto be called after the service has been stopped fromg_socket_service_stop() .
	service		# a GSocketService 
void g_socket_service_stop (GSocketService *service);	# Stops the service, i.e. stops accepting connectionsfrom the added sockets when the mainloop runs.
	service		# a GSocketService 
gboolean g_socket_service_is_active (GSocketService *service);	# Check whether the service is active or not. An activeservice will accept new clients that connect, whilea non-active service will let connecting clients queueup until the service is started.
	service		# a GSocketService 
	return:		#  TRUE if the service is active, FALSE otherwise 
GSocketService  *g_threaded_socket_service_new (int max_threads);	#创建对象:GThreadedSocketService with no listeners. Listenersmust be added with one of the GSocketListener "add" methods.
	max_threads		# the maximal number of threads to execute concurrentlyhandling incoming clients, -1 means no limit
	return:		#  a new GSocketService . 
GNetworkMonitor  *g_network_monitor_get_default (void );	# Gets the default GNetworkMonitor for the system.
	return:		#  a GNetworkMonitor .  
gboolean g_network_monitor_get_network_available (GNetworkMonitor *monitor);	# Checks if the network is available. "Available" here means that thesystem has a default route available for at least one of IPv4 orIPv6. It does not necessarily imply that the public Internet isreachable. See “network-available” for more details.
	monitor		# the GNetworkMonitor 
	return:		#  whether the network is available 
gboolean g_network_monitor_get_network_metered (GNetworkMonitor *monitor);	# Checks if the network is metered.See “network-metered” for more details.
	monitor		# the GNetworkMonitor 
	return:		#  whether the connection is metered 
gboolean g_network_monitor_can_reach (GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);	# Attempts to determine whether or not the host pointed to byconnectable can be reached, without actually trying to connect toit.
	monitor		# a GNetworkMonitor 
	connectable		# a GSocketConnectable 
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE if connectableis reachable, FALSE if not. 
void g_network_monitor_can_reach_async (GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously attempts to determine whether or not the hostpointed to by connectable can be reached, without actuallytrying to connect to it.
	monitor		# a GNetworkMonitor 
	connectable		# a GSocketConnectable 
	cancellable		#  a GCancellable , or NULL . 
	user_data		#  the data to pass to callback function. 
gboolean g_network_monitor_can_reach_finish (GNetworkMonitor *monitor, GAsyncResult *result, GError **error);	# Finishes an async network connectivity test.See g_network_monitor_can_reach_async() .
	monitor		# a GNetworkMonitor 
	result		# a GAsyncResult 
	error		# return location for errors, or NULL 
	return:		#  TRUE if network is reachable, FALSE if not. 
GNetworkConnectivity g_network_monitor_get_connectivity (GNetworkMonitor *monitor);	# Gets a more detailed networking state thang_network_monitor_get_network_available() .
	monitor		# the GNetworkMonitor 
	return:		#  the network connectivity state 
GTlsCertificate  *g_tls_certificate_new_from_pem (const gchar *data, gssize length, GError **error);	# Creates a GTlsCertificate from the PEM-encoded data in data. Ifdata includes both a certificate and a private key, then thereturned certificate will include the private key data as well. (Seethe “private-key-pem” property for information aboutsupported formats.)
	data		# PEM-encoded certificate data
	length		# the length of data, or -1 if it's 0-terminated.
	error		# GError for error reporting, or NULL to ignore.
	return:		#  the new certificate, or NULL if datais invalid 
GTlsCertificate  *g_tls_certificate_new_from_file (const gchar *file, GError **error);	# Creates a GTlsCertificate from the PEM-encoded data in file. Thereturned certificate will be the first certificate found in file. Asof GLib 2.44, if file contains more certificates it will try to loada certificate chain. All certificates will be verified in the orderfound (top-level certificate should be the last one in the file) andthe “issuer” property of each certificate will be setaccordingly if the verification succeeds. If any certificate in thechain cannot be verified, the first certificate in the file willstill be returned.
	file		#  file containing a PEM-encoded certificate to import. 
	return:		#  the new certificate, or NULL on error 
GTlsCertificate  *g_tls_certificate_new_from_files (const gchar *cert_file, const gchar *key_file, GError **error);	# Creates a GTlsCertificate from the PEM-encoded data in cert_fileand key_file. The returned certificate will be the first certificatefound in cert_file. As of GLib 2.44, if cert_file contains morecertificates it will try to load a certificate chain. Allcertificates will be verified in the order found (top-levelcertificate should be the last one in the file) and the“issuer” property of each certificate will be setaccordingly if the verification succeeds. If any certificate in thechain cannot be verified, the first certificate in the file willstill be returned.
	cert_file		#  file containing one or more PEM-encodedcertificates to import. 
	return:		#  the new certificate, or NULL on error 
GList  *g_tls_certificate_list_new_from_file (const gchar *file, GError **error);	# Creates one or more GTlsCertificates from the PEM-encodeddata in file. If file cannot be read or parsed, the function willreturn NULL and set error. If file does not contain anyPEM-encoded certificates, this will return an empty list and notset error.
	file		#  file containing PEM-encoded certificates to import. 
	return:		#  aGList containing GTlsCertificate objects. You must free the listand its contents when you are done with it.  
GTlsCertificate  *g_tls_certificate_get_issuer (GTlsCertificate *cert);	# Gets the GTlsCertificate representing cert's issuer, if known
	cert		# a GTlsCertificate 
	return:		#  The certificate of cert's issuer,or NULL if certis self-signed or signed with an unknowncertificate.  
GTlsCertificateFlags g_tls_certificate_verify (GTlsCertificate *cert, GSocketConnectable *identity, GTlsCertificate *trusted_ca);	# This verifies cert and returns a set of GTlsCertificateFlags indicating any problems found with it. This can be used to verify acertificate outside the context of making a connection, or tocheck a certificate against a CA that is not part of the systemCA database.
	cert		# a GTlsCertificate 
	identity		#  the expected peer identity. 
	return:		#  the appropriate GTlsCertificateFlags  
gboolean g_tls_certificate_is_same (GTlsCertificate *cert_one, GTlsCertificate *cert_two);	# Check if two GTlsCertificate objects represent the same certificate.The raw DER byte data of the two certificates are checked for equality.This has the effect that two certificates may compare equal even iftheir “issuer” , “private-key” , or“private-key-pem” properties differ.
	cert_one		# first certificate to compare
	cert_two		# second certificate to compare
	return:		#  whether the same or not 
void g_tls_connection_set_certificate (GTlsConnection *conn, GTlsCertificate *certificate);	# This sets the certificate that conn will present to its peerduring the TLS handshake. For a GTlsServerConnection , it ismandatory to set this, and that will normally be done at constructtime.
	conn		# a GTlsConnection 
	certificate		# the certificate to use for conn
GTlsCertificate  *g_tls_connection_get_certificate (GTlsConnection *conn);	# Gets conn's certificate, as set byg_tls_connection_set_certificate() .
	conn		# a GTlsConnection 
	return:		#  conn's certificate, or NULL .  
GTlsCertificate  *g_tls_connection_get_peer_certificate (GTlsConnection *conn);	# Gets conn's peer's certificate after the handshake has completed.(It is not set during the emission of“accept-certificate” .)
	conn		# a GTlsConnection 
	return:		#  conn's peer's certificate, or NULL .  
GTlsCertificateFlags g_tls_connection_get_peer_certificate_errors (GTlsConnection *conn);	# Gets the errors associated with validating conn's peer'scertificate, after the handshake has completed. (It is not setduring the emission of “accept-certificate” .)
	conn		# a GTlsConnection 
	return:		#  conn's peer's certificate errors 
void g_tls_connection_set_require_close_notify (GTlsConnection *conn, gboolean require_close_notify);	# Sets whether or not conn expects a proper TLS close notificationbefore the connection is closed. If this is TRUE (the default),then conn will expect to receive a TLS close notification from itspeer before the connection is closed, and will return aG_TLS_ERROR_EOF error if the connection is closed without propernotification (since this may indicate a network error, orman-in-the-middle attack).
	conn		# a GTlsConnection 
	require_close_notify		# whether or not to require close notification
gboolean g_tls_connection_get_require_close_notify (GTlsConnection *conn);	# Tests whether or not conn expects a proper TLS close notificationwhen the connection is closed. Seeg_tls_connection_set_require_close_notify() for details.
	conn		# a GTlsConnection 
	return:		#  TRUE if connrequires a proper TLS closenotification. 
void g_tls_connection_set_rehandshake_mode (GTlsConnection *conn, GTlsRehandshakeMode mode);	# Sets how conn behaves with respect to rehandshaking requests.
	conn		# a GTlsConnection 
	mode		# the rehandshaking mode
GTlsRehandshakeMode g_tls_connection_get_rehandshake_mode (GTlsConnection *conn);	# Gets conn rehandshaking mode. Seeg_tls_connection_set_rehandshake_mode() for details.
	conn		# a GTlsConnection 
	return:		#  conn's rehandshaking mode 
void g_tls_connection_set_use_system_certdb (GTlsConnection *conn, gboolean use_system_certdb);	# g_tls_connection_set_use_system_certdb has been deprecated since version 2.30 and should not be used in newly-written code.
	conn		# a GTlsConnection 
	use_system_certdb		# whether to use the system certificate database
gboolean g_tls_connection_get_use_system_certdb (GTlsConnection *conn);	# g_tls_connection_get_use_system_certdb has been deprecated since version 2.30 and should not be used in newly-written code.
	conn		# a GTlsConnection 
	return:		#  whether connuses the system certificate database 
GTlsDatabase  *g_tls_connection_get_database (GTlsConnection *conn);	# Gets the certificate database that conn uses to verifypeer certificates. See g_tls_connection_set_database() .
	conn		# a GTlsConnection 
	return:		#  the certificate database that connuses or NULL .  
void g_tls_connection_set_database (GTlsConnection *conn, GTlsDatabase *database);	# Sets the certificate database that is used to verify peer certificates.This is set to the default database by default. Seeg_tls_backend_get_default_database() . If set to NULL , thenpeer certificate validation will always set theG_TLS_CERTIFICATE_UNKNOWN_CA error (meaning“accept-certificate” will always be emitted onclient-side connections, unless that bit is not set in“validation-flags” ).
	conn		# a GTlsConnection 
	database		# a GTlsDatabase 
GTlsInteraction  *g_tls_connection_get_interaction (GTlsConnection *conn);	# Get the object that will be used to interact with the user. It will be usedfor things like prompting the user for passwords. If NULL is returned, thenno user interaction will occur for this connection.
	conn		# a connection
	return:		#  The interaction object.  
void g_tls_connection_set_interaction (GTlsConnection *conn, GTlsInteraction *interaction);	# Set the object that will be used to interact with the user. It will be usedfor things like prompting the user for passwords.
	conn		# a connection
	interaction		#  an interaction object, or NULL . 
gboolean g_tls_connection_handshake (GTlsConnection *conn, GCancellable *cancellable, GError **error);	# Attempts a TLS handshake on conn.
	conn		# a GTlsConnection 
	cancellable		#  a GCancellable , or NULL . 
	return:		#  success or failure 
void g_tls_connection_handshake_async (GTlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously performs a TLS handshake on conn. Seeg_tls_connection_handshake() for more information.
	conn		# a GTlsConnection 
	io_priority		# the I/O priority of the request
	cancellable		#  a GCancellable , or NULL . 
gboolean g_tls_connection_handshake_finish (GTlsConnection *conn, GAsyncResult *result, GError **error);	# Finish an asynchronous TLS handshake operation. Seeg_tls_connection_handshake() for more information.
	conn		# a GTlsConnection 
	result		# a GAsyncResult .
	error		# a GError pointer, or NULL 
	return:		#  TRUE on success, FALSE on failure, in whichcase errorwill be set. 
gboolean g_tls_connection_emit_accept_certificate (GTlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);	# Used by GTlsConnection implementations to emit the“accept-certificate” signal.
	conn		# a GTlsConnection 
	peer_cert		# the peer's GTlsCertificate 
	errors		# the problems with peer_cert
	return:		#  TRUE if one of the signal handlers has returnedTRUE to accept peer_cert 
GIOStream  *g_tls_client_connection_new (GIOStream *base_io_stream, GSocketConnectable *server_identity, GError **error);	#创建对象:GTlsClientConnection wrapping base_io_stream (whichmust have pollable input and output streams) which is assumed tocommunicate with the server identified by server_identity.
	base_io_stream		# the GIOStream to wrap
	server_identity		#  the expected identity of the server. 
	return:		#  the newGTlsClientConnection , or NULL on error.  
void g_tls_client_connection_set_server_identity (GTlsClientConnection *conn, GSocketConnectable *identity);	# Sets conn's expected server identity, which is used both to tellservers on virtual hosts which certificate to present, and alsoto let conn know what name to look for in the certificate whenperforming G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
	conn		# the GTlsClientConnection 
	identity		# a GSocketConnectable describing the expected server identity
GSocketConnectable  *g_tls_client_connection_get_server_identity (GTlsClientConnection *conn);	# Gets conn's expected server identity
	conn		# the GTlsClientConnection 
	return:		#  a GSocketConnectable describing theexpected server identity, or NULL if the expected identity is notknown.  
void g_tls_client_connection_set_validation_flags (GTlsClientConnection *conn, GTlsCertificateFlags flags);	# Sets conn's validation flags, to override the default set ofchecks performed when validating a server certificate. By default,G_TLS_CERTIFICATE_VALIDATE_ALL is used.
	conn		# the GTlsClientConnection 
	flags		# the GTlsCertificateFlags to use
GTlsCertificateFlags g_tls_client_connection_get_validation_flags (GTlsClientConnection *conn);	# Gets conn's validation flags
	conn		# the GTlsClientConnection 
	return:		#  the validation flags 
void g_tls_client_connection_set_use_ssl3 (GTlsClientConnection *conn, gboolean use_ssl3);	# If use_ssl3 is TRUE , this forces conn to use SSL 3.0 rather thantrying to properly negotiate the right version of TLS or SSL to use.This can be used when talking to servers that do not implement thefallbacks correctly and which will therefore fail to handshake witha "modern" TLS handshake attempt.
	conn		# the GTlsClientConnection 
	use_ssl3		# whether to use SSL 3.0
gboolean g_tls_client_connection_get_use_ssl3 (GTlsClientConnection *conn);	# Gets whether conn will use SSL 3.0 rather than thehighest-supported version of TLS; seeg_tls_client_connection_set_use_ssl3() .
	conn		# the GTlsClientConnection 
	return:		#  whether connwill use SSL 3.0 
GList  *g_tls_client_connection_get_accepted_cas (GTlsClientConnection *conn);	# Gets the list of distinguished names of the Certificate Authoritiesthat the server will accept certificates from. This will be setduring the TLS handshake if the server requests a certificate.Otherwise, it will be NULL .
	conn		# the GTlsClientConnection 
	return:		#  the list ofCA DNs. You should unref each element with g_byte_array_unref() and thenthe free the list with g_list_free() .  
void g_tls_client_connection_copy_session_state (GTlsClientConnection *conn, GTlsClientConnection *source);	# Copies session state from one connection to another. This isnot normally needed, but may be used when the same sessionneeds to be used between different endpoints as is requiredby some protocols such as FTP over TLS. source should havealready completed a handshake, and conn should not havecompleted a handshake.
	conn		# a GTlsClientConnection 
	source		# a GTlsClientConnection 
GIOStream  *g_tls_server_connection_new (GIOStream *base_io_stream, GTlsCertificate *certificate, GError **error);	#创建对象:GTlsServerConnection wrapping base_io_stream (whichmust have pollable input and output streams).
	base_io_stream		# the GIOStream to wrap
	certificate		#  the default server certificate, or NULL . 
	return:		#  the newGTlsServerConnection , or NULL on error.  
void g_dtls_connection_set_certificate (GDtlsConnection *conn, GTlsCertificate *certificate);	# This sets the certificate that conn will present to its peerduring the TLS handshake. For a GDtlsServerConnection , it ismandatory to set this, and that will normally be done at constructtime.
	conn		# a GDtlsConnection 
	certificate		# the certificate to use for conn
GTlsCertificate  *g_dtls_connection_get_certificate (GDtlsConnection *conn);	# Gets conn's certificate, as set byg_dtls_connection_set_certificate() .
	conn		# a GDtlsConnection 
	return:		#  conn's certificate, or NULL .  
GTlsCertificate  *g_dtls_connection_get_peer_certificate (GDtlsConnection *conn);	# Gets conn's peer's certificate after the handshake has completed.(It is not set during the emission of“accept-certificate” .)
	conn		# a GDtlsConnection 
	return:		#  conn's peer's certificate, or NULL .  
GTlsCertificateFlags g_dtls_connection_get_peer_certificate_errors (GDtlsConnection *conn);	# Gets the errors associated with validating conn's peer'scertificate, after the handshake has completed. (It is not setduring the emission of “accept-certificate” .)
	conn		# a GDtlsConnection 
	return:		#  conn's peer's certificate errors 
void g_dtls_connection_set_require_close_notify (GDtlsConnection *conn, gboolean require_close_notify);	# Sets whether or not conn expects a proper TLS close notificationbefore the connection is closed. If this is TRUE (the default),then conn will expect to receive a TLS close notification from itspeer before the connection is closed, and will return aG_TLS_ERROR_EOF error if the connection is closed without propernotification (since this may indicate a network error, orman-in-the-middle attack).
	conn		# a GDtlsConnection 
	require_close_notify		# whether or not to require close notification
gboolean g_dtls_connection_get_require_close_notify (GDtlsConnection *conn);	# Tests whether or not conn expects a proper TLS close notificationwhen the connection is closed. Seeg_dtls_connection_set_require_close_notify() for details.
	conn		# a GDtlsConnection 
	return:		#  TRUE if connrequires a proper TLS close notification. 
void g_dtls_connection_set_rehandshake_mode (GDtlsConnection *conn, GTlsRehandshakeMode mode);	# Sets how conn behaves with respect to rehandshaking requests.
	conn		# a GDtlsConnection 
	mode		# the rehandshaking mode
GTlsRehandshakeMode g_dtls_connection_get_rehandshake_mode (GDtlsConnection *conn);	# Gets conn rehandshaking mode. Seeg_dtls_connection_set_rehandshake_mode() for details.
	conn		# a GDtlsConnection 
	return:		#  conn's rehandshaking mode 
GTlsDatabase  *g_dtls_connection_get_database (GDtlsConnection *conn);	# Gets the certificate database that conn uses to verifypeer certificates. See g_dtls_connection_set_database() .
	conn		# a GDtlsConnection 
	return:		#  the certificate database that connuses or NULL .  
void g_dtls_connection_set_database (GDtlsConnection *conn, GTlsDatabase *database);	# Sets the certificate database that is used to verify peer certificates.This is set to the default database by default. Seeg_dtls_backend_get_default_database(). If set to NULL , thenpeer certificate validation will always set theG_TLS_CERTIFICATE_UNKNOWN_CA error (meaning“accept-certificate” will always be emitted onclient-side connections, unless that bit is not set in“validation-flags” ).
	conn		# a GDtlsConnection 
	database		# a GTlsDatabase 
GTlsInteraction  *g_dtls_connection_get_interaction (GDtlsConnection *conn);	# Get the object that will be used to interact with the user. It will be usedfor things like prompting the user for passwords. If NULL is returned, thenno user interaction will occur for this connection.
	conn		# a connection
	return:		#  The interaction object.  
void g_dtls_connection_set_interaction (GDtlsConnection *conn, GTlsInteraction *interaction);	# Set the object that will be used to interact with the user. It will be usedfor things like prompting the user for passwords.
	conn		# a connection
	interaction		#  an interaction object, or NULL . 
gboolean g_dtls_connection_handshake (GDtlsConnection *conn, GCancellable *cancellable, GError **error);	# Attempts a TLS handshake on conn.
	conn		# a GDtlsConnection 
	cancellable		#  a GCancellable , or NULL . 
	return:		#  success or failure 
void g_dtls_connection_handshake_async (GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously performs a TLS handshake on conn. Seeg_dtls_connection_handshake() for more information.
	conn		# a GDtlsConnection 
	io_priority		# the I/O priority of the request
	cancellable		#  a GCancellable , or NULL . 
gboolean g_dtls_connection_handshake_finish (GDtlsConnection *conn, GAsyncResult *result, GError **error);	# Finish an asynchronous TLS handshake operation. Seeg_dtls_connection_handshake() for more information.
	conn		# a GDtlsConnection 
	result		# a GAsyncResult .
	error		# a GError pointer, or NULL 
	return:		#  TRUE on success, FALSE on failure, in whichcase errorwill be set. 
gboolean g_dtls_connection_shutdown (GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, GCancellable *cancellable, GError **error);	# Shut down part or all of a DTLS connection.
	conn		# a GDtlsConnection 
	shutdown_read		# TRUE to stop reception of incoming datagrams
	shutdown_write		# TRUE to stop sending outgoing datagrams
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE on success, FALSE otherwise 
void g_dtls_connection_shutdown_async (GDtlsConnection *conn, gboolean shutdown_read, gboolean shutdown_write, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously shut down part or all of the DTLS connection. Seeg_dtls_connection_shutdown() for more information.
	conn		# a GDtlsConnection 
	shutdown_read		# TRUE to stop reception of incoming datagrams
	shutdown_write		# TRUE to stop sending outgoing datagrams
	io_priority		# the I/O priority of the request
	cancellable		#  a GCancellable , or NULL . 
gboolean g_dtls_connection_shutdown_finish (GDtlsConnection *conn, GAsyncResult *result, GError **error);	# Finish an asynchronous TLS shutdown operation. Seeg_dtls_connection_shutdown() for more information.
	conn		# a GDtlsConnection 
	result		# a GAsyncResult 
	error		# a GError pointer, or NULL 
	return:		#  TRUE on success, FALSE on failure, in whichcase errorwill be set 
gboolean g_dtls_connection_close (GDtlsConnection *conn, GCancellable *cancellable, GError **error);	# Close the DTLS connection. This is equivalent to callingg_dtls_connection_shutdown() to shut down both sides of the connection.
	conn		# a GDtlsConnection 
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE on success, FALSE otherwise 
void g_dtls_connection_close_async (GDtlsConnection *conn, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously close the DTLS connection. See g_dtls_connection_close() formore information.
	conn		# a GDtlsConnection 
	io_priority		# the I/O priority of the request
	cancellable		#  a GCancellable , or NULL . 
gboolean g_dtls_connection_close_finish (GDtlsConnection *conn, GAsyncResult *result, GError **error);	# Finish an asynchronous TLS close operation. See g_dtls_connection_close() for more information.
	conn		# a GDtlsConnection 
	result		# a GAsyncResult 
	error		# a GError pointer, or NULL 
	return:		#  TRUE on success, FALSE on failure, in whichcase errorwill be set 
gboolean g_dtls_connection_emit_accept_certificate (GDtlsConnection *conn, GTlsCertificate *peer_cert, GTlsCertificateFlags errors);	# Used by GDtlsConnection implementations to emit the“accept-certificate” signal.
	conn		# a GDtlsConnection 
	peer_cert		# the peer's GTlsCertificate 
	errors		# the problems with peer_cert
	return:		#  TRUE if one of the signal handlers has returnedTRUE to accept peer_cert 
GDatagramBased  *g_dtls_client_connection_new (GDatagramBased *base_socket, GSocketConnectable *server_identity, GError **error);	#创建对象:GDtlsClientConnection wrapping base_socket which isassumed to communicate with the server identified by server_identity.
	base_socket		# the GDatagramBased to wrap
	server_identity		#  the expected identity of the server. 
	return:		#  the newGDtlsClientConnection , or NULL on error.  
void g_dtls_client_connection_set_server_identity (GDtlsClientConnection *conn, GSocketConnectable *identity);	# Sets conn's expected server identity, which is used both to tellservers on virtual hosts which certificate to present, and alsoto let conn know what name to look for in the certificate whenperforming G_TLS_CERTIFICATE_BAD_IDENTITY validation, if enabled.
	conn		# the GDtlsClientConnection 
	identity		# a GSocketConnectable describing the expected server identity
GSocketConnectable  *g_dtls_client_connection_get_server_identity (GDtlsClientConnection *conn);	# Gets conn's expected server identity
	conn		# the GDtlsClientConnection 
	return:		#  a GSocketConnectable describing theexpected server identity, or NULL if the expected identity is notknown.  
void g_dtls_client_connection_set_validation_flags (GDtlsClientConnection *conn, GTlsCertificateFlags flags);	# Sets conn's validation flags, to override the default set ofchecks performed when validating a server certificate. By default,G_TLS_CERTIFICATE_VALIDATE_ALL is used.
	conn		# the GDtlsClientConnection 
	flags		# the GTlsCertificateFlags to use
GTlsCertificateFlags g_dtls_client_connection_get_validation_flags (GDtlsClientConnection *conn);	# Gets conn's validation flags
	conn		# the GDtlsClientConnection 
	return:		#  the validation flags 
GList  *g_dtls_client_connection_get_accepted_cas (GDtlsClientConnection *conn);	# Gets the list of distinguished names of the Certificate Authoritiesthat the server will accept certificates from. This will be setduring the TLS handshake if the server requests a certificate.Otherwise, it will be NULL .
	conn		# the GDtlsClientConnection 
	return:		#  the list ofCA DNs. You should unref each element with g_byte_array_unref() and thenthe free the list with g_list_free() .  
GDatagramBased  *g_dtls_server_connection_new (GDatagramBased *base_socket, GTlsCertificate *certificate, GError **error);	#创建对象:GDtlsServerConnection wrapping base_socket.
	base_socket		# the GDatagramBased to wrap
	certificate		#  the default server certificate, or NULL . 
	return:		#  the newGDtlsServerConnection , or NULL on error.  
GTlsBackend  *g_tls_backend_get_default (void );	# Gets the default GTlsBackend for the system.
	return:		#  a GTlsBackend .  
gboolean g_tls_backend_supports_tls (GTlsBackend *backend);	# Checks if TLS is supported; if this returns FALSE for the defaultGTlsBackend , it means no "real" TLS backend is available.
	backend		# the GTlsBackend 
	return:		#  whether or not TLS is supported 
gboolean g_tls_backend_supports_dtls (GTlsBackend *backend);	# Checks if DTLS is supported. DTLS support may not be available even if TLSsupport is available, and vice-versa.
	backend		# the GTlsBackend 
	return:		#  whether DTLS is supported 
GTlsDatabase  *g_tls_backend_get_default_database (GTlsBackend *backend);	# Gets the default GTlsDatabase used to verify TLS connections.
	backend		# the GTlsBackend 
	return:		#  the default database, which should beunreffed when done.  
GType g_tls_backend_get_certificate_type (GTlsBackend *backend);	# Gets the GType of backend's GTlsCertificate implementation.
	backend		# the GTlsBackend 
	return:		#  the GType of backend's GTlsCertificate implementation. 
GType g_tls_backend_get_client_connection_type (GTlsBackend *backend);	# Gets the GType of backend's GTlsClientConnection implementation.
	backend		# the GTlsBackend 
	return:		#  the GType of backend's GTlsClientConnection implementation. 
GType g_tls_backend_get_server_connection_type (GTlsBackend *backend);	# Gets the GType of backend's GTlsServerConnection implementation.
	backend		# the GTlsBackend 
	return:		#  the GType of backend's GTlsServerConnection implementation. 
GType g_tls_backend_get_dtls_client_connection_type (GTlsBackend *backend);	# Gets the GType of backend’s GDtlsClientConnection implementation.
	backend		# the GTlsBackend 
	return:		#  the GType of backend’s GDtlsClientConnection implementation. 
GType g_tls_backend_get_dtls_server_connection_type (GTlsBackend *backend);	# Gets the GType of backend’s GDtlsServerConnection implementation.
	backend		# the GTlsBackend 
	return:		#  the GType of backend’s GDtlsServerConnection implementation. 
GType g_tls_backend_get_file_database_type (GTlsBackend *backend);	# Gets the GType of backend's GTlsFileDatabase implementation.
	backend		# the GTlsBackend 
	return:		#  the GType of backend's GTlsFileDatabase implementation. 
GTlsCertificateFlags g_tls_database_verify_chain (GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error);	# Determines the validity of a certificate chain after looking up andadding any missing certificates to the chain.
	self		# a GTlsDatabase 
	chain		# a GTlsCertificate chain
	purpose		# the purpose that this certificate chain will be used for.
	identity		#  the expected peer identity. 
	return:		#  the appropriate GTlsCertificateFlags which represents theresult of verification. 
void g_tls_database_verify_chain_async (GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously determines the validity of a certificate chain afterlooking up and adding any missing certificates to the chain. Seeg_tls_database_verify_chain() for more information.
	self		# a GTlsDatabase 
	chain		# a GTlsCertificate chain
	purpose		# the purpose that this certificate chain will be used for.
	identity		#  the expected peer identity. 
GTlsCertificateFlags g_tls_database_verify_chain_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);	# Finish an asynchronous verify chain operation. Seeg_tls_database_verify_chain() for more information.
	self		# a GTlsDatabase 
	result		# a GAsyncResult .
	error		# a GError pointer, or NULL 
	return:		#  the appropriate GTlsCertificateFlags which represents theresult of verification. 
GTlsCertificate  *g_tls_database_lookup_certificate_issuer (GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);	# Lookup the issuer of certificate in the database.
	self		# a GTlsDatabase 
	certificate		# a GTlsCertificate 
	interaction		#  used to interact with the user if necessary. 
	return:		#  a newly allocated issuer GTlsCertificate ,or NULL . Use g_object_unref() to release the certificate.  
void g_tls_database_lookup_certificate_issuer_async (GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously lookup the issuer of certificate in the database. Seeg_tls_database_lookup_certificate_issuer() for more information.
	self		# a GTlsDatabase 
	certificate		# a GTlsCertificate 
	interaction		#  used to interact with the user if necessary. 
GTlsCertificate  *g_tls_database_lookup_certificate_issuer_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);	# Finish an asynchronous lookup issuer operation. Seeg_tls_database_lookup_certificate_issuer() for more information.
	self		# a GTlsDatabase 
	result		# a GAsyncResult .
	error		# a GError pointer, or NULL 
	return:		#  a newly allocated issuer GTlsCertificate ,or NULL . Use g_object_unref() to release the certificate.  
GList  *g_tls_database_lookup_certificates_issued_by (GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);	# Lookup certificates issued by this issuer in the database.
	self		# a GTlsDatabase 
	issuer_raw_dn		# a GByteArray which holds the DER encoded issuer DN.
	interaction		#  used to interact with the user if necessary. 
	return:		#  a newly allocated list of GTlsCertificate objects. Use g_object_unref() on each certificate, and g_list_free() on the release the list.  
void g_tls_database_lookup_certificates_issued_by_async (GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously lookup certificates issued by this issuer in the database. Seeg_tls_database_lookup_certificates_issued_by() for more information.
	self		# a GTlsDatabase 
	issuer_raw_dn		# a GByteArray which holds the DER encoded issuer DN.
	interaction		#  used to interact with the user if necessary. 
GList  *g_tls_database_lookup_certificates_issued_by_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);	# Finish an asynchronous lookup of certificates. Seeg_tls_database_lookup_certificates_issued_by() for more information.
	self		# a GTlsDatabase 
	result		# a GAsyncResult .
	error		# a GError pointer, or NULL 
	return:		#  a newly allocated list of GTlsCertificate objects. Use g_object_unref() on each certificate, and g_list_free() on the release the list.  
gchar  *g_tls_database_create_certificate_handle (GTlsDatabase *self, GTlsCertificate *certificate);	# Create a handle string for the certificate. The database will only be ableto create a handle for certificates that originate from the database. Incases where the database cannot create a handle for a certificate, NULL will be returned.
	self		# a GTlsDatabase 
	certificate		# certificate for which to create a handle.
	return:		#  a newly allocated string containing thehandle.  
GTlsCertificate  *g_tls_database_lookup_certificate_for_handle (GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);	# Lookup a certificate by its handle.
	self		# a GTlsDatabase 
	handle		# a certificate handle
	interaction		#  used to interact with the user if necessary. 
	return:		#  a newly allocatedGTlsCertificate , or NULL . Use g_object_unref() to release the certificate.  
void g_tls_database_lookup_certificate_for_handle_async (GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously lookup a certificate by its handle in the database. Seeg_tls_database_lookup_certificate_for_handle() for more information.
	self		# a GTlsDatabase 
	handle		# a certificate handle
	interaction		#  used to interact with the user if necessary. 
GTlsCertificate  *g_tls_database_lookup_certificate_for_handle_finish (GTlsDatabase *self, GAsyncResult *result, GError **error);	# Finish an asynchronous lookup of a certificate by its handle. Seeg_tls_database_lookup_certificate_handle() for more information.
	self		# a GTlsDatabase 
	result		# a GAsyncResult .
	error		# a GError pointer, or NULL 
	return:		#  a newly allocated GTlsCertificate object.Use g_object_unref() to release the certificate.  
GTlsDatabase  *g_tls_file_database_new (const gchar *anchors, GError **error);	#创建对象:GTlsFileDatabase which uses anchor certificate authoritiesin anchors to verify certificate chains.
	anchors		#  filename of anchor certificate authorities. 
	return:		#  the newGTlsFileDatabase , or NULL on error.  
GTlsInteractionResult g_tls_interaction_invoke_ask_password (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);	# Invoke the interaction to ask the user for a password. It invokes thisinteraction in the main loop, specifically the GMainContext returned byg_main_context_get_thread_default() when the interaction is created. Thisis called by called by GTlsConnection or GTlsDatabase to ask the userfor a password.
	interaction		# a GTlsInteraction object
	password		# a GTlsPassword object
	cancellable		# an optional GCancellable cancellation object
	error		# an optional location to place an error on failure
	return:		#  The status of the ask password interaction. 
GTlsInteractionResult g_tls_interaction_invoke_request_certificate (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);	# Invoke the interaction to ask the user to choose a certificate touse with the connection. It invokes this interaction in the mainloop, specifically the GMainContext returned byg_main_context_get_thread_default() when the interaction iscreated. This is called by called by GTlsConnection when the peerrequests a certificate during the handshake.
	interaction		# a GTlsInteraction object
	connection		# a GTlsConnection object
	flags		# flags providing more information about the request
	cancellable		# an optional GCancellable cancellation object
	error		# an optional location to place an error on failure
	return:		#  The status of the certificate request interaction. 
GTlsInteractionResult g_tls_interaction_ask_password (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);	# Run synchronous interaction to ask the user for a password. In general,g_tls_interaction_invoke_ask_password() should be used instead of thisfunction.
	interaction		# a GTlsInteraction object
	password		# a GTlsPassword object
	cancellable		# an optional GCancellable cancellation object
	error		# an optional location to place an error on failure
	return:		#  The status of the ask password interaction. 
void g_tls_interaction_ask_password_async (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Run asynchronous interaction to ask the user for a password. In general,g_tls_interaction_invoke_ask_password() should be used instead of thisfunction.
	interaction		# a GTlsInteraction object
	password		# a GTlsPassword object
	cancellable		# an optional GCancellable cancellation object
	callback		#  will be called when the interaction completes. 
GTlsInteractionResult g_tls_interaction_ask_password_finish (GTlsInteraction *interaction, GAsyncResult *result, GError **error);	# Complete an ask password user interaction request. This should be oncethe g_tls_interaction_ask_password_async() completion callback is called.
	interaction		# a GTlsInteraction object
	result		# the result passed to the callback
	error		# an optional location to place an error on failure
	return:		#  The status of the ask password interaction. 
GTlsInteractionResult g_tls_interaction_request_certificate (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);	# Run synchronous interaction to ask the user to choose a certificate to usewith the connection. In general, g_tls_interaction_invoke_request_certificate() should be used instead of this function.
	interaction		# a GTlsInteraction object
	connection		# a GTlsConnection object
	flags		# flags providing more information about the request
	cancellable		# an optional GCancellable cancellation object
	error		# an optional location to place an error on failure
	return:		#  The status of the request certificate interaction. 
void g_tls_interaction_request_certificate_async (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Run asynchronous interaction to ask the user for a certificate to use withthe connection. In general, g_tls_interaction_invoke_request_certificate() shouldbe used instead of this function.
	interaction		# a GTlsInteraction object
	connection		# a GTlsConnection object
	flags		# flags providing more information about the request
	cancellable		# an optional GCancellable cancellation object
	callback		#  will be called when the interaction completes. 
GTlsInteractionResult g_tls_interaction_request_certificate_finish (GTlsInteraction *interaction, GAsyncResult *result, GError **error);	# Complete an request certificate user interaction request. This should be oncethe g_tls_interaction_request_certificate_async() completion callback is called.
	interaction		# a GTlsInteraction object
	result		# the result passed to the callback
	error		# an optional location to place an error on failure
	return:		#  The status of the request certificate interaction. 
GTlsPassword  *g_tls_password_new (GTlsPasswordFlags flags, const gchar *description);	# Create a new GTlsPassword object.
	flags		# the password flags
	description		# description of what the password is for
	return:		#  The newly allocated password object.  
guchar  *g_tls_password_get_value (GTlsPassword *password, gsize *length);	# Get the password value. If length is not NULL then it will befilled in with the length of the password value. (Note that thepassword value is not nul-terminated, so you can only pass NULL for length in contexts where you know the password will have acertain fixed length.)
	password		# a GTlsPassword object
	length		#  location to place the length of the password. 
	return:		#  The password value (owned by the password object). 
void g_tls_password_set_value (GTlsPassword *password, const guchar *value, gssize length);	# Set the value for this password. The value will be copied by the passwordobject.
	password		# a GTlsPassword object
	value		# the new password value
	length		# the length of the password, or -1
void g_tls_password_set_value_full (GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy);	# Provide the value for this password.
	password		# a GTlsPassword object
	value		# the value for the password
	length		# the length of the password, or -1
	destroy		#  a function to use to free the password. 
gchar  *g_tls_password_get_description (GTlsPassword *password);	# Get a description string about what the password will be used for.
	password		# a GTlsPassword object
	return:		#  The description of the password. 
void g_tls_password_set_description (GTlsPassword *password, const gchar *description);	# Set a description string about what the password will be used for.
	password		# a GTlsPassword object
	description		# The description of the password
GTlsPasswordFlags g_tls_password_get_flags (GTlsPassword *password);	# Get flags about the password.
	password		# a GTlsPassword object
	return:		#  The flags about the password. 
void g_tls_password_set_flags (GTlsPassword *password, GTlsPasswordFlags flags);	# Set flags about the password.
	password		# a GTlsPassword object
	flags		# The flags about the password
gchar  *g_tls_password_get_warning (GTlsPassword *password);	# Get a user readable translated warning. Usually this warning is arepresentation of the password flags returned fromg_tls_password_get_flags() .
	password		# a GTlsPassword object
	return:		#  The warning. 
void g_tls_password_set_warning (GTlsPassword *password, const gchar *warning);	# Set a user readable translated warning. Usually this warning is arepresentation of the password flags returned fromg_tls_password_get_flags() .
	password		# a GTlsPassword object
	warning		# The user readable warning
GResolver  *g_resolver_get_default (void );	# Gets the default GResolver . You should unref it when you are donewith it. GResolver may use its reference count as a hint about howmany threads it should allocate for concurrent DNS resolutions.
	return:		#  the default GResolver .  
void g_resolver_set_default (GResolver *resolver);	# Sets resolver to be the application's default resolver (reffingresolver, and unreffing the previous default resolver, if any).Future calls to g_resolver_get_default() will return this resolver.
	resolver		# the new default GResolver 
GList  *g_resolver_lookup_by_name (GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GError **error);	# Synchronously resolves hostname to determine its associated IPaddress(es). hostname may be an ASCII-only or UTF-8 hostname, orthe textual form of an IP address (in which case this just becomesa wrapper around g_inet_address_new_from_string() ).
	resolver		# a GResolver 
	hostname		# the hostname to look up
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a non-empty GList of GInetAddress , or NULL on error. Youmust unref each of the addresses and free the list when you aredone with it. (You can use g_resolver_free_addresses() to do this.).  
void g_resolver_lookup_by_name_async (GResolver *resolver, const gchar *hostname, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Begins asynchronously resolving hostname to determine itsassociated IP address(es), and eventually calls callback, whichmust call g_resolver_lookup_by_name_finish() to get the result.See g_resolver_lookup_by_name() for more details.
	resolver		# a GResolver 
	hostname		# the hostname to look up the address of
	cancellable		#  a GCancellable , or NULL . 
GList  *g_resolver_lookup_by_name_finish (GResolver *resolver, GAsyncResult *result, GError **error);	# Retrieves the result of a call tog_resolver_lookup_by_name_async() .
	resolver		# a GResolver 
	result		# the result passed to your GAsyncReadyCallback 
	error		# return location for a GError , or NULL 
	return:		#  a GList of GInetAddress , or NULL on error. See g_resolver_lookup_by_name() for more details.  
void g_resolver_free_addresses (GList *addresses);	# Frees addresses (which should be the return value fromg_resolver_lookup_by_name() or g_resolver_lookup_by_name_finish() ).(This is a convenience method; you can also simply free the resultsby hand.)
	addresses		# a GList of GInetAddress 
gchar  *g_resolver_lookup_by_address (GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GError **error);	# Synchronously reverse-resolves address to determine itsassociated hostname.
	resolver		# a GResolver 
	address		# the address to reverse-resolve
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a hostname (either ASCII-only, or in ASCII-encodedform), or NULL on error. 
void g_resolver_lookup_by_address_async (GResolver *resolver, GInetAddress *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Begins asynchronously reverse-resolving address to determine itsassociated hostname, and eventually calls callback, which mustcall g_resolver_lookup_by_address_finish() to get the final result.
	resolver		# a GResolver 
	address		# the address to reverse-resolve
	cancellable		#  a GCancellable , or NULL . 
gchar  *g_resolver_lookup_by_address_finish (GResolver *resolver, GAsyncResult *result, GError **error);	# Retrieves the result of a previous call tog_resolver_lookup_by_address_async() .
	resolver		# a GResolver 
	result		# the result passed to your GAsyncReadyCallback 
	error		# return location for a GError , or NULL 
	return:		#  a hostname (either ASCII-only, or in ASCII-encodedform), or NULL on error. 
GList  *g_resolver_lookup_service (GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GError **error);	# Synchronously performs a DNS SRV lookup for the given service andprotocol in the given domain and returns an array of GSrvTarget .domain may be an ASCII-only or UTF-8 hostname. Note also that theservice and protocol arguments do not include the leading underscorethat appears in the actual DNS entry.
	resolver		# a GResolver 
	service		# the service type to look up (eg, "ldap")
	protocol		# the networking protocol to use for service(eg, "tcp")
	domain		# the DNS domain to look up the service in
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a non-empty GList ofGSrvTarget , or NULL on error. You must free each of the targets and thelist when you are done with it. (You can use g_resolver_free_targets() to dothis.).  
void g_resolver_lookup_service_async (GResolver *resolver, const gchar *service, const gchar *protocol, const gchar *domain, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Begins asynchronously performing a DNS SRV lookup for the givenservice and protocol in the given domain, and eventually callscallback, which must call g_resolver_lookup_service_finish() toget the final result. See g_resolver_lookup_service() for moredetails.
	resolver		# a GResolver 
	service		# the service type to look up (eg, "ldap")
	protocol		# the networking protocol to use for service(eg, "tcp")
	domain		# the DNS domain to look up the service in
	cancellable		#  a GCancellable , or NULL . 
GList  *g_resolver_lookup_service_finish (GResolver *resolver, GAsyncResult *result, GError **error);	# Retrieves the result of a previous call tog_resolver_lookup_service_async() .
	resolver		# a GResolver 
	result		# the result passed to your GAsyncReadyCallback 
	error		# return location for a GError , or NULL 
	return:		#  a non-empty GList ofGSrvTarget , or NULL on error. See g_resolver_lookup_service() for moredetails.  
void g_resolver_free_targets (GList *targets);	# Frees targets (which should be the return value fromg_resolver_lookup_service() or g_resolver_lookup_service_finish() ).(This is a convenience method; you can also simply free theresults by hand.)
	targets		# a GList of GSrvTarget 
GList  *g_resolver_lookup_records (GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GError **error);	# Synchronously performs a DNS record lookup for the given rrname and returnsa list of records as GVariant tuples. See GResolverRecordType forinformation on what the records contain for each record_type.
	resolver		# a GResolver 
	rrname		# the DNS name to lookup the record for
	record_type		# the type of DNS record to lookup
	cancellable		#  a GCancellable , or NULL . 
	return:		#  a non-empty GList ofGVariant , or NULL on error. You must free each of the records and the listwhen you are done with it. (You can use g_list_free_full() withg_variant_unref() to do this.).  
void g_resolver_lookup_records_async (GResolver *resolver, const gchar *rrname, GResolverRecordType record_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Begins asynchronously performing a DNS lookup for the givenrrname, and eventually calls callback, which must callg_resolver_lookup_records_finish() to get the final result. Seeg_resolver_lookup_records() for more details.
	resolver		# a GResolver 
	rrname		# the DNS name to lookup the record for
	record_type		# the type of DNS record to lookup
	cancellable		#  a GCancellable , or NULL . 
GList  *g_resolver_lookup_records_finish (GResolver *resolver, GAsyncResult *result, GError **error);	# Retrieves the result of a previous call tog_resolver_lookup_records_async() . Returns a non-empty list of records asGVariant tuples. See GResolverRecordType for information on what therecords contain.
	resolver		# a GResolver 
	result		# the result passed to your GAsyncReadyCallback 
	error		# return location for a GError , or NULL 
	return:		#  a non-empty GList ofGVariant , or NULL on error. You must free each of the records and the listwhen you are done with it. (You can use g_list_free_full() withg_variant_unref() to do this.).  
GProxyResolver  *g_proxy_resolver_get_default (void );	# Gets the default GProxyResolver for the system.
	return:		#  the default GProxyResolver .  
gboolean g_proxy_resolver_is_supported (GProxyResolver *resolver);	# Checks if resolver can be used on this system. (This is usedinternally; g_proxy_resolver_get_default() will only return a proxyresolver that returns TRUE for this method.)
	resolver		# a GProxyResolver 
	return:		#  TRUE if resolveris supported. 
gchar  **g_proxy_resolver_lookup (GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error);	# Looks into the system proxy configuration to determine what proxy,if any, to use to connect to uri. The returned proxy URIs are ofthe form &lt;protocol&gt;://[user[:password]@]host:port ordirect://, where &lt;protocol&gt; could be http, rtsp, socksor other proxying protocol.
	resolver		# a GProxyResolver 
	uri		# a URI representing the destination to connect to
	cancellable		#  a GCancellable , or NULL . 
	return:		#  ANULL-terminated array of proxy URIs. Must be freedwith g_strfreev() .  
void g_proxy_resolver_lookup_async (GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronous lookup of proxy. See g_proxy_resolver_lookup() for moredetails.
	resolver		# a GProxyResolver 
	uri		# a URI representing the destination to connect to
	cancellable		#  a GCancellable , or NULL . 
gchar  **g_proxy_resolver_lookup_finish (GProxyResolver *resolver, GAsyncResult *result, GError **error);	# Call this function to obtain the array of proxy URIs wheng_proxy_resolver_lookup_async() is complete. Seeg_proxy_resolver_lookup() for more details.
	resolver		# a GProxyResolver 
	result		# the result passed to your GAsyncReadyCallback 
	error		# return location for a GError , or NULL 
	return:		#  ANULL-terminated array of proxy URIs. Must be freedwith g_strfreev() .  
GProxyResolver  *g_simple_proxy_resolver_new (const gchar *default_proxy, gchar **ignore_hosts);	#创建对象:GSimpleProxyResolver . See“default-proxy” and“ignore-hosts” for more details on how thearguments are interpreted.
	default_proxy		#  the default proxy to use, eg"socks://192.168.1.1". 
	return:		#  (transfer full) a new GSimpleProxyResolver  
void g_simple_proxy_resolver_set_default_proxy (GSimpleProxyResolver *resolver, const gchar *default_proxy);	# Sets the default proxy on resolver, to be used for any URIs thatdon't match “ignore-hosts” or a proxy setvia g_simple_proxy_resolver_set_uri_proxy() .
	resolver		# a GSimpleProxyResolver 
	default_proxy		# the default proxy to use
void g_simple_proxy_resolver_set_ignore_hosts (GSimpleProxyResolver *resolver, gchar **ignore_hosts);	# Sets the list of ignored hosts.
	resolver		# a GSimpleProxyResolver 
	ignore_hosts		# NULL -terminated list of hosts/IP addressesto not use a proxy for
void g_simple_proxy_resolver_set_uri_proxy (GSimpleProxyResolver *resolver, const gchar *uri_scheme, const gchar *proxy);	# Adds a URI-scheme-specific proxy to resolver; URIs whose schemematches uri_scheme (and which don't match“ignore-hosts” ) will be proxied via proxy.
	resolver		# a GSimpleProxyResolver 
	uri_scheme		# the URI scheme to add a proxy for
	proxy		# the proxy to use for uri_scheme
GSocketAddressEnumerator  *g_socket_connectable_enumerate (GSocketConnectable *connectable);	# Creates a GSocketAddressEnumerator for connectable.
	connectable		# a GSocketConnectable 
	return:		#  a new GSocketAddressEnumerator .  
GSocketAddressEnumerator  *g_socket_connectable_proxy_enumerate (GSocketConnectable *connectable);	# Creates a GSocketAddressEnumerator for connectable that willreturn GProxyAddresses for addresses that you must connectto via a proxy.
	connectable		# a GSocketConnectable 
	return:		#  a new GSocketAddressEnumerator .  
gchar  *g_socket_connectable_to_string (GSocketConnectable *connectable);	# Format a GSocketConnectable as a string. This is a human-readable format foruse in debugging output, and is not a stable serialization format. It is notsuitable for use in user interfaces as it exposes too much information for auser.
	connectable		# a GSocketConnectable 
	return:		#  the formatted string.  
GSocketAddress  *g_socket_address_enumerator_next (GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GError **error);	# Retrieves the next GSocketAddress from enumerator. Note that thismay block for some amount of time. (Eg, a GNetworkAddress may needto do a DNS lookup before it can return an address.) Useg_socket_address_enumerator_next_async() if you need to avoidblocking.
	enumerator		# a GSocketAddressEnumerator 
	cancellable		#  optional GCancellable object, NULL to ignore. 
	return:		#  a GSocketAddress (owned by the caller), or NULL onerror (in which case *errorwill be set) or if there are nomore addresses.  
void g_socket_address_enumerator_next_async (GSocketAddressEnumerator *enumerator, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously retrieves the next GSocketAddress from enumeratorand then calls callback, which must callg_socket_address_enumerator_next_finish() to get the result.
	enumerator		# a GSocketAddressEnumerator 
	cancellable		#  optional GCancellable object, NULL to ignore. 
	user_data		#  the data to pass to callback function. 
GSocketAddress  *g_socket_address_enumerator_next_finish (GSocketAddressEnumerator *enumerator, GAsyncResult *result, GError **error);	# Retrieves the result of a completed call tog_socket_address_enumerator_next_async() . Seeg_socket_address_enumerator_next() for more information abouterror handling.
	enumerator		# a GSocketAddressEnumerator 
	result		# a GAsyncResult 
	error		# a GError 
	return:		#  a GSocketAddress (owned by the caller), or NULL onerror (in which case *errorwill be set) or if there are nomore addresses.  
GSocketConnectable  *g_network_address_new (const gchar *hostname, guint16 port);	#创建对象:GSocketConnectable for connecting to the givenhostname and port.
	hostname		# the hostname
	port		# the port
	return:		#  the new GNetworkAddress .  
GSocketConnectable  *g_network_address_new_loopback (guint16 port);	#创建对象:GSocketConnectable for connecting to the local hostover a loopback connection to the given port. This is intended foruse in connecting to local services which may be running on IPv4 orIPv6.
	port		# the port
	return:		#  the new GNetworkAddress .  
GSocketConnectable  *g_network_address_parse (const gchar *host_and_port, guint16 default_port, GError **error);	#创建对象:GSocketConnectable for connecting to the givenhostname and port. May fail and return NULL in caseparsing host_and_port fails.
	host_and_port		# the hostname and optionally a port
	default_port		# the default port if not in host_and_port
	error		# a pointer to a GError , or NULL 
	return:		#  the newGNetworkAddress , or NULL on error.  
GSocketConnectable  *g_network_address_parse_uri (const gchar *uri, guint16 default_port, GError **error);	#创建对象:GSocketConnectable for connecting to the givenuri. May fail and return NULL in case parsing uri fails.
	uri		# the hostname and optionally a port
	default_port		# The default port if none is found in the URI
	error		# a pointer to a GError , or NULL 
	return:		#  the newGNetworkAddress , or NULL on error.  
gchar  *g_network_address_get_hostname (GNetworkAddress *addr);	# Gets addr's hostname. This might be either UTF-8 or ASCII-encoded,depending on what addr was created with.
	addr		# a GNetworkAddress 
	return:		#  addr's hostname 
guint16 g_network_address_get_port (GNetworkAddress *addr);	# Gets addr's port number
	addr		# a GNetworkAddress 
	return:		#  addr's port (which may be 0) 
gchar  *g_network_address_get_scheme (GNetworkAddress *addr);	# Gets addr's scheme
	addr		# a GNetworkAddress 
	return:		#  addr's scheme (NULL if not built from URI) 
GSocketConnectable  *g_network_service_new (const gchar *service, const gchar *protocol, const gchar *domain);	#创建对象:GNetworkService representing the given service,protocol, and domain. This will initially be unresolved; use theGSocketConnectable interface to resolve it.
	service		# the service type to look up (eg, "ldap")
	protocol		# the networking protocol to use for service(eg, "tcp")
	domain		# the DNS domain to look up the service in
	return:		#  a new GNetworkService .  
gchar  *g_network_service_get_service (GNetworkService *srv);	# Gets srv's service name (eg, "ldap").
	srv		# a GNetworkService 
	return:		#  srv's service name 
gchar  *g_network_service_get_protocol (GNetworkService *srv);	# Gets srv's protocol name (eg, "tcp").
	srv		# a GNetworkService 
	return:		#  srv's protocol name 
gchar  *g_network_service_get_domain (GNetworkService *srv);	# Gets the domain that srv serves. This might be either UTF-8 orASCII-encoded, depending on what srv was created with.
	srv		# a GNetworkService 
	return:		#  srv's domain name 
gchar  *g_network_service_get_scheme (GNetworkService *srv);	# Get's the URI scheme used to resolve proxies. By default, the service nameis used as scheme.
	srv		# a GNetworkService 
	return:		#  srv's scheme name 
void g_network_service_set_scheme (GNetworkService *srv, const gchar *scheme);	# Set's the URI scheme used to resolve proxies. By default, the service nameis used as scheme.
	srv		# a GNetworkService 
	scheme		# a URI scheme
GSrvTarget  *g_srv_target_new (const gchar *hostname, guint16 port, guint16 priority, guint16 weight);	#创建对象:GSrvTarget with the given parameters.
	hostname		# the host that the service is running on
	port		# the port that the service is running on
	priority		# the target's priority
	weight		# the target's weight
	return:		#  a new GSrvTarget . 
GSrvTarget  *g_srv_target_copy (GSrvTarget *target);	# Copies target
	target		# a GSrvTarget 
	return:		#  a copy of target 
void g_srv_target_free (GSrvTarget *target);	# Frees target
	target		# a GSrvTarget 
gchar  *g_srv_target_get_hostname (GSrvTarget *target);	# Gets target's hostname (in ASCII form; if you are going to presentthis to the user, you should use g_hostname_is_ascii_encoded() tocheck if it contains encoded Unicode segments, and useg_hostname_to_unicode() to convert it if it does.)
	target		# a GSrvTarget 
	return:		#  target's hostname 
guint16 g_srv_target_get_port (GSrvTarget *target);	# Gets target's port
	target		# a GSrvTarget 
	return:		#  target's port 
guint16 g_srv_target_get_priority (GSrvTarget *target);	# Gets target's priority. You should not need to look at this;GResolver already sorts the targets according to the algorithm inRFC 2782.
	target		# a GSrvTarget 
	return:		#  target's priority 
guint16 g_srv_target_get_weight (GSrvTarget *target);	# Gets target's weight. You should not need to look at this;GResolver already sorts the targets according to the algorithm inRFC 2782.
	target		# a GSrvTarget 
	return:		#  target's weight 
GList  *g_srv_target_list_sort (GList *targets);	# Sorts targets in place according to the algorithm in RFC 2782.
	targets		# a GList of GSrvTarget 
	return:		#  the head of the sorted list.  
gchar  *g_dbus_generate_guid (void );	# Generate a D-Bus GUID that can be used withe.g. g_dbus_connection_new() .
	return:		#  A valid D-Bus GUID. Free with g_free() . 
gboolean g_dbus_is_guid (const gchar *string);	# Checks if string is a D-Bus GUID.
	string		# The string to check.
	return:		#  TRUE if stringis a guid, FALSE otherwise. 
gboolean g_dbus_is_name (const gchar *string);	# Checks if string is a valid D-Bus bus name (either unique or well-known).
	string		# The string to check.
	return:		#  TRUE if valid, FALSE otherwise. 
gboolean g_dbus_is_unique_name (const gchar *string);	# Checks if string is a valid D-Bus unique bus name.
	string		# The string to check.
	return:		#  TRUE if valid, FALSE otherwise. 
gboolean g_dbus_is_member_name (const gchar *string);	# Checks if string is a valid D-Bus member (e.g. signal or method) name.
	string		# The string to check.
	return:		#  TRUE if valid, FALSE otherwise. 
gboolean g_dbus_is_interface_name (const gchar *string);	# Checks if string is a valid D-Bus interface name.
	string		# The string to check.
	return:		#  TRUE if valid, FALSE otherwise. 
GVariant  *g_dbus_gvalue_to_gvariant (const GValue *gvalue, const GVariantType *type);	# Converts a GValue to a GVariant of the type indicated by the typeparameter.
	gvalue		# A GValue to convert to a GVariant 
	type		# A GVariantType 
	return:		#  A GVariant (never floating) of GVariantType typeholdingthe data from gvalueor NULL in case of failure. Free withg_variant_unref() . 
void g_dbus_gvariant_to_gvalue (GVariant *value, GValue *out_gvalue);	# Converts a GVariant to a GValue . If value is floating, it is consumed.
	value		# A GVariant .
	out_gvalue		#  Return location pointing to a zero-filled (uninitialized) GValue . 
gboolean g_dbus_is_address (const gchar *string);	# Checks if string is aD-Bus address .
	string		# A string.
	return:		#  TRUE if stringis a valid D-Bus address, FALSE otherwise. 
gboolean g_dbus_is_supported_address (const gchar *string, GError **error);	# Like g_dbus_is_address() but also checks if the library supports thetransports in string and that key/value pairs for each transportare valid. See the specification of theD-Bus address format .
	string		# A string.
	error		# Return location for error or NULL .
	return:		#  TRUE if stringis a valid D-Bus address that issupported by this library, FALSE if erroris set. 
void g_dbus_address_get_stream (const gchar *address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously connects to an endpoint specified by address andsets up the connection so it is in a state to run the client-sideof the D-Bus authentication conversation. address must be in theD-Bus address format .
	address		# A valid D-Bus address.
	cancellable		#  A GCancellable or NULL . 
	user_data		# Data to pass to callback.
GIOStream  *g_dbus_address_get_stream_finish (GAsyncResult *res, gchar **out_guid, GError **error);	# Finishes an operation started with g_dbus_address_get_stream() .
	res		# A GAsyncResult obtained from the GAsyncReadyCallback passed to 
	out_guid		#  NULL or return location to store the GUID extracted from address, if any. 
	return:		#  A GIOStream or NULL if erroris set.  
GIOStream  *g_dbus_address_get_stream_sync (const gchar *address, gchar **out_guid, GCancellable *cancellable, GError **error);	# Synchronously connects to an endpoint specified by address andsets up the connection so it is in a state to run the client-sideof the D-Bus authentication conversation. address must be in theD-Bus address format .
	address		# A valid D-Bus address.
	out_guid		#  NULL or return location to store the GUID extracted from address, if any. 
	return:		#  A GIOStream or NULL if erroris set.  
gchar  *g_dbus_address_get_for_bus_sync (GBusType bus_type, GCancellable *cancellable, GError **error);	# Synchronously looks up the D-Bus address for the well-known messagebus instance specified by bus_type. This may involve using variousplatform specific mechanisms.
	bus_type		# a GBusType 
	cancellable		#  a GCancellable or NULL . 
	return:		#  a valid D-Bus address string for bus_typeor NULL iferroris set 
gchar  *g_dbus_address_escape_value (const gchar *string);	# Escape string so it can appear in a D-Bus address as the valuepart of a key-value pair.
	string		# an unescaped string to be included in a D-Bus addressas the value in a key-value pair
	return:		#  a copy of stringwith allnon-optionally-escaped bytes escaped.  
gchar  *g_dbus_annotation_info_lookup (GDBusAnnotationInfo **annotations, const gchar *name);	# Looks up the value of an annotation.
	annotations		#  A NULL -terminated array of annotations or NULL . 
	return:		#  The value or NULL if not found. Do not free, it is owned by annotations. 
GDBusMethodInfo  *g_dbus_interface_info_lookup_method (GDBusInterfaceInfo *info, const gchar *name);	# Looks up information about a method.
	info		# A GDBusInterfaceInfo .
	name		# A D-Bus method name (typically in CamelCase)
	return:		#  A GDBusMethodInfo or NULL if not found. Do not free, it is owned by info.  
GDBusSignalInfo  *g_dbus_interface_info_lookup_signal (GDBusInterfaceInfo *info, const gchar *name);	# Looks up information about a signal.
	info		# A GDBusInterfaceInfo .
	name		# A D-Bus signal name (typically in CamelCase)
	return:		#  A GDBusSignalInfo or NULL if not found. Do not free, it is owned by info.  
GDBusPropertyInfo  *g_dbus_interface_info_lookup_property (GDBusInterfaceInfo *info, const gchar *name);	# Looks up information about a property.
	info		# A GDBusInterfaceInfo .
	name		# A D-Bus property name (typically in CamelCase).
	return:		#  A GDBusPropertyInfo or NULL if not found. Do not free, it is owned by info.  
void g_dbus_interface_info_cache_build (GDBusInterfaceInfo *info);	# Builds a lookup-cache to speed upg_dbus_interface_info_lookup_method() ,g_dbus_interface_info_lookup_signal() andg_dbus_interface_info_lookup_property() .
	info		# A GDBusInterfaceInfo .
void g_dbus_interface_info_cache_release (GDBusInterfaceInfo *info);	# Decrements the usage count for the cache for info built byg_dbus_interface_info_cache_build() (if any) and frees theresources used by the cache if the usage count drops to zero.
	info		# A GDBusInterfaceInfo
void g_dbus_interface_info_generate_xml (GDBusInterfaceInfo *info, guint indent, GString *string_builder);	# Appends an XML representation of info (and its children) to string_builder.
	info		# A GDBusNodeInfo 
	indent		# Indentation level.
	string_builder		# A GString to to append XML data to.
GDBusNodeInfo  *g_dbus_node_info_new_for_xml (const gchar *xml_data, GError **error);	# Parses xml_data and returns a GDBusNodeInfo representing the data.
	xml_data		# Valid D-Bus introspection XML.
	error		# Return location for error.
	return:		#  A GDBusNodeInfo structure or NULL if erroris set. Freewith g_dbus_node_info_unref() . 
GDBusInterfaceInfo  *g_dbus_node_info_lookup_interface (GDBusNodeInfo *info, const gchar *name);	# Looks up information about an interface.
	info		# A GDBusNodeInfo .
	name		# A D-Bus interface name.
	return:		#  A GDBusInterfaceInfo or NULL if not found. Do not free, it is owned by info.  
void g_dbus_node_info_generate_xml (GDBusNodeInfo *info, guint indent, GString *string_builder);	# Appends an XML representation of info (and its children) to string_builder.
	info		# A GDBusNodeInfo .
	indent		# Indentation level.
	string_builder		# A GString to to append XML data to.
GDBusNodeInfo  *g_dbus_node_info_ref (GDBusNodeInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusNodeInfo 
	return:		#  The same info. 
GDBusInterfaceInfo  *g_dbus_interface_info_ref (GDBusInterfaceInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusInterfaceInfo 
	return:		#  The same info. 
GDBusMethodInfo  *g_dbus_method_info_ref (GDBusMethodInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusMethodInfo 
	return:		#  The same info. 
GDBusSignalInfo  *g_dbus_signal_info_ref (GDBusSignalInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusSignalInfo 
	return:		#  The same info. 
GDBusPropertyInfo  *g_dbus_property_info_ref (GDBusPropertyInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusPropertyInfo 
	return:		#  The same info. 
GDBusArgInfo  *g_dbus_arg_info_ref (GDBusArgInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusArgInfo 
	return:		#  The same info. 
GDBusAnnotationInfo  *g_dbus_annotation_info_ref (GDBusAnnotationInfo *info);	# If info is statically allocated does nothing. Otherwise increasesthe reference count.
	info		# A GDBusNodeInfo 
	return:		#  The same info. 
void g_dbus_node_info_unref (GDBusNodeInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusNodeInfo .
void g_dbus_interface_info_unref (GDBusInterfaceInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusInterfaceInfo .
void g_dbus_method_info_unref (GDBusMethodInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusMethodInfo .
void g_dbus_signal_info_unref (GDBusSignalInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusSignalInfo .
void g_dbus_property_info_unref (GDBusPropertyInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusPropertyInfo .
void g_dbus_arg_info_unref (GDBusArgInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusArgInfo .
void g_dbus_annotation_info_unref (GDBusAnnotationInfo *info);	# If info is statically allocated, does nothing. Otherwise decreasesthe reference count of info. When its reference count drops to 0,the memory used is freed.
	info		# A GDBusAnnotationInfo .
gboolean g_dbus_error_is_remote_error (const GError *error);	# Checks if error represents an error received via D-Bus from a remote peer. If so,use g_dbus_error_get_remote_error() to get the name of the error.
	error		# A GError .
	return:		#  TRUE if errorrepresents an error from a remote peer,FALSE otherwise. 
gchar  *g_dbus_error_get_remote_error (const GError *error);	# Gets the D-Bus error name used for error, if any.
	error		# a GError 
	return:		#  an allocated string or NULL if the D-Bus error namecould not be found. Free with g_free() . 
gboolean g_dbus_error_strip_remote_error (GError *error);	# Looks for extra information in the error message used to recoverthe D-Bus error name and strips it if found. If stripped, themessage field in error will correspond exactly to what wasreceived on the wire.
	error		# A GError .
	return:		#  TRUE if information was stripped, FALSE otherwise. 
void g_dbus_error_register_error_domain (const gchar *error_domain_quark_name, volatile gsize *quark_volatile, const GDBusErrorEntry *entries, guint num_entries);	# Helper function for associating a GError error domain with D-Bus error names.
	error_domain_quark_name		# The error domain name.
	quark_volatile		# A pointer where to store the GQuark .
	entries		# A pointer to num_entriesGDBusErrorEntry struct items.
	num_entries		# Number of items to register.
gboolean g_dbus_error_register_error (GQuark error_domain, gint error_code, const gchar *dbus_error_name);	# Creates an association to map between dbus_error_name andGErrors specified by error_domain and error_code.
	error_domain		# A GQuark for a error domain.
	error_code		# An error code.
	dbus_error_name		# A D-Bus error name.
	return:		#  TRUE if the association was created, FALSE if it alreadyexists. 
gboolean g_dbus_error_unregister_error (GQuark error_domain, gint error_code, const gchar *dbus_error_name);	# Destroys an association previously set up with g_dbus_error_register_error() .
	error_domain		# A GQuark for a error domain.
	error_code		# An error code.
	dbus_error_name		# A D-Bus error name.
	return:		#  TRUE if the association was destroyed, FALSE if it wasn't found. 
GError  *g_dbus_error_new_for_dbus_error (const gchar *dbus_error_name, const gchar *dbus_error_message);	# Creates a GError based on the contents of dbus_error_name anddbus_error_message.
	dbus_error_name		# D-Bus error name.
	dbus_error_message		# D-Bus error message.
	return:		#  An allocated GError . Free with g_error_free() . 
void g_dbus_error_set_dbus_error (GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, ...);	# Does nothing if error is NULL . Otherwise sets *error toa new GError created with g_dbus_error_new_for_dbus_error() with dbus_error_message prepend with format (unless NULL ).
	error		# A pointer to a GError or NULL .
	dbus_error_name		# D-Bus error name.
	dbus_error_message		# D-Bus error message.
	format		#  
void g_dbus_error_set_dbus_error_valist (GError **error, const gchar *dbus_error_name, const gchar *dbus_error_message, const gchar *format, va_list var_args);	# Like g_dbus_error_set_dbus_error() but intended for language bindings.
	error		# A pointer to a GError or NULL .
	dbus_error_name		# D-Bus error name.
	dbus_error_message		# D-Bus error message.
	format		#  
gchar  *g_dbus_error_encode_gerror (const GError *error);	# Creates a D-Bus error name to use for error. If error matchesa registered error (cf. g_dbus_error_register_error() ), the correspondingD-Bus error name will be returned.
	error		# A GError .
	return:		#  A D-Bus error name (never NULL ). Free with g_free() . 
GDBusMessage  *g_dbus_message_new (void );	#创建对象:empty GDBusMessage .
	return:		#  A GDBusMessage . Free with g_object_unref() . 
GDBusMessage  *g_dbus_message_new_signal (const gchar *path, const gchar *interface_, const gchar *signal);	#创建对象:GDBusMessage for a signal emission.
	path		# A valid object path.
	interface_		# A valid D-Bus interface name.
	signal		# A valid signal name.
	return:		#  A GDBusMessage . Free with g_object_unref() . 
GDBusMessage  *g_dbus_message_new_method_call (const gchar *name, const gchar *path, const gchar *interface_, const gchar *method);	#创建对象:GDBusMessage for a method call.
	name		#  A valid D-Bus name or NULL . 
	return:		#  A GDBusMessage . Free with g_object_unref() . 
GDBusMessage  *g_dbus_message_new_method_reply (GDBusMessage *method_call_message);	#创建对象:GDBusMessage that is a reply to method_call_message.
	method_call_message		# A message of type G_DBUS_MESSAGE_TYPE_METHOD_CALL tocreate a reply message to.
	return:		#  GDBusMessage . Free with g_object_unref() .  
GDBusMessage  *g_dbus_message_new_method_error (GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message_format, ...);	#创建对象:GDBusMessage that is an error reply to method_call_message.
	method_call_message		# A message of type G_DBUS_MESSAGE_TYPE_METHOD_CALL tocreate a reply message to.
	error_name		# A valid D-Bus error name.
	error_message_format		# The D-Bus error message in a 
	...		# Arguments for error_message_format.
	return:		#  A GDBusMessage . Free with g_object_unref() .  
GDBusMessage  *g_dbus_message_new_method_error_valist (GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message_format, va_list var_args);	# Like g_dbus_message_new_method_error() but intended for language bindings.
	method_call_message		# A message of type G_DBUS_MESSAGE_TYPE_METHOD_CALL tocreate a reply message to.
	error_name		# A valid D-Bus error name.
	error_message_format		# The D-Bus error message in a 
	var_args		# Arguments for error_message_format.
	return:		#  A GDBusMessage . Free with g_object_unref() .  
GDBusMessage  *g_dbus_message_new_method_error_literal (GDBusMessage *method_call_message, const gchar *error_name, const gchar *error_message);	#创建对象:GDBusMessage that is an error reply to method_call_message.
	method_call_message		# A message of type G_DBUS_MESSAGE_TYPE_METHOD_CALL tocreate a reply message to.
	error_name		# A valid D-Bus error name.
	error_message		# The D-Bus error message.
	return:		#  A GDBusMessage . Free with g_object_unref() .  
gchar  *g_dbus_message_print (GDBusMessage *message, guint indent);	# Produces a human-readable multi-line description of message.
	message		# A GDBusMessage .
	indent		# Indentation level.
	return:		#  A string that should be freed with g_free() . 
gboolean g_dbus_message_get_locked (GDBusMessage *message);	# Checks whether message is locked. To monitor changes to thisvalue, conncet to the “notify” signal to listen for changeson the “locked” property.
	message		# A GDBusMessage .
	return:		#  TRUE if messageis locked, FALSE otherwise. 
void g_dbus_message_lock (GDBusMessage *message);	# If message is locked, does nothing. Otherwise locks the message.
	message		# A GDBusMessage .
GDBusMessage  *g_dbus_message_copy (GDBusMessage *message, GError **error);	# Copies message. The copy is a deep copy and the returnedGDBusMessage is completely identical except that it is guaranteedto not be locked.
	message		# A GDBusMessage .
	error		# Return location for error or NULL .
	return:		#  A new GDBusMessage or NULL if erroris set.Free with g_object_unref() .  
GDBusMessageByteOrder g_dbus_message_get_byte_order (GDBusMessage *message);	# Gets the byte order of message.
	message		# A GDBusMessage .
	return:		#  The byte order. 
void g_dbus_message_set_byte_order (GDBusMessage *message, GDBusMessageByteOrder byte_order);	# Sets the byte order of message.
	message		# A GDBusMessage .
	byte_order		# The byte order.
GDBusMessageType g_dbus_message_get_message_type (GDBusMessage *message);	# Gets the type of message.
	message		# A GDBusMessage .
	return:		#  A 8-bit unsigned integer (typically a value from the GDBusMessageType enumeration). 
void g_dbus_message_set_message_type (GDBusMessage *message, GDBusMessageType type);	# Sets message to be of type.
	message		# A GDBusMessage .
	type		# A 8-bit unsigned integer (typically a value from the GDBusMessageType enumeration).
guint32 g_dbus_message_get_serial (GDBusMessage *message);	# Gets the serial for message.
	message		# A GDBusMessage .
	return:		#  A guint32 . 
void g_dbus_message_set_serial (GDBusMessage *message, guint32 serial);	# Sets the serial for message.
	message		# A GDBusMessage .
	serial		# A guint32 .
GDBusMessageFlags g_dbus_message_get_flags (GDBusMessage *message);	# Gets the flags for message.
	message		# A GDBusMessage .
	return:		#  Flags that are set (typically values from the GDBusMessageFlags enumeration bitwise ORed together). 
void g_dbus_message_set_flags (GDBusMessage *message, GDBusMessageFlags flags);	# Sets the flags to set on message.
	message		# A GDBusMessage .
	flags		# Flags for messagethat are set (typically values from the GDBusMessageFlags enumeration bitwise ORed together).
GVariant  *g_dbus_message_get_body (GDBusMessage *message);	# Gets the body of a message.
	message		# A GDBusMessage .
	return:		#  A GVariant or NULL if the body isempty. Do not free, it is owned by message.  
void g_dbus_message_set_body (GDBusMessage *message, GVariant *body);	# Sets the body message. As a side-effect theG_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field is set to thetype string of body (or cleared if body is NULL ).
	message		# A GDBusMessage .
	body		# Either NULL or a GVariant that is a tuple.
GUnixFDList  *g_dbus_message_get_unix_fd_list (GDBusMessage *message);	# Gets the UNIX file descriptors associated with message, if any.
	message		# A GDBusMessage .
	return:		# A GUnixFDList or NULL if no file descriptors areassociated. Do not free, this object is owned by message.  
void g_dbus_message_set_unix_fd_list (GDBusMessage *message, GUnixFDList *fd_list);	# Sets the UNIX file descriptors associated with message. As aside-effect the G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS headerfield is set to the number of fds in fd_list (or cleared iffd_list is NULL ).
	message		# A GDBusMessage .
	fd_list		#  A GUnixFDList or NULL . 
guint32 g_dbus_message_get_num_unix_fds (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_num_unix_fds (GDBusMessage *message, guint32 value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS header field.
	message		# A GDBusMessage .
	value		# The value to set.
guchar  *g_dbus_message_get_header_fields (GDBusMessage *message);	# Gets an array of all header fields on message that are set.
	message		# A GDBusMessage .
	return:		#  An array of header fieldsterminated by G_DBUS_MESSAGE_HEADER_FIELD_INVALID . Each elementis a guchar . Free with g_free() .  
GVariant  *g_dbus_message_get_header (GDBusMessage *message, GDBusMessageHeaderField header_field);	# Gets a header field on message.
	message		# A GDBusMessage .
	header_field		# A 8-bit unsigned integer (typically a value from the GDBusMessageHeaderField enumeration)
	return:		#  A GVariant with the value if the header was found, NULL otherwise. Do not free, it is owned by message. 
void g_dbus_message_set_header (GDBusMessage *message, GDBusMessageHeaderField header_field, GVariant *value);	# Sets a header field on message.
	message		# A GDBusMessage .
	header_field		# A 8-bit unsigned integer (typically a value from the GDBusMessageHeaderField enumeration)
	value		#  A GVariant to set the header field or NULL to clear the header field. 
gchar  *g_dbus_message_get_destination (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_destination (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_error_name (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_error_name (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_interface (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_interface (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_member (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_member (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_MEMBER header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_path (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_path (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_PATH header field.
	message		# A GDBusMessage .
	value		# The value to set.
guint32 g_dbus_message_get_reply_serial (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_reply_serial (GDBusMessage *message, guint32 value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_sender (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_sender (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_SENDER header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_signature (GDBusMessage *message);	# Convenience getter for the G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
	message		# A GDBusMessage .
	return:		#  The value. 
void g_dbus_message_set_signature (GDBusMessage *message, const gchar *value);	# Convenience setter for the G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE header field.
	message		# A GDBusMessage .
	value		# The value to set.
gchar  *g_dbus_message_get_arg0 (GDBusMessage *message);	# Convenience to get the first item in the body of message.
	message		# A GDBusMessage .
	return:		#  The string item or NULL if the first item in the body ofmessageis not a string. 
guchar  *g_dbus_message_to_blob (GDBusMessage *message, gsize *out_size, GDBusCapabilityFlags capabilities, GError **error);	# Serializes message to a blob. The byte order returned byg_dbus_message_get_byte_order() will be used.
	message		# A GDBusMessage .
	out_size		# Return location for size of generated blob.
	capabilities		# A GDBusCapabilityFlags describing what protocol features are supported.
	error		# Return location for error.
	return:		#  A pointer to avalid binary D-Bus message of out_sizebytes generated by messageor NULL if erroris set. Free with g_free() .  
gssize g_dbus_message_bytes_needed (guchar *blob, gsize blob_len, GError **error);	# Utility function to calculate how many bytes are needed tocompletely deserialize the D-Bus message stored at blob.
	blob		#  A blob represent a binary D-Bus message. 
	return:		#  Number of bytes needed or -1 if erroris set (e.g. ifblobcontains invalid data or not enough data is available todetermine the size). 
GDBusMessage  *g_dbus_message_new_from_blob (guchar *blob, gsize blob_len, GDBusCapabilityFlags capabilities, GError **error);	#创建对象:GDBusMessage from the data stored at blob. The byteorder that the message was in can be retrieved usingg_dbus_message_get_byte_order() .
	blob		#  A blob represent a binary D-Bus message. 
	error		# Return location for error or NULL .
	return:		#  A new GDBusMessage or NULL if erroris set. Free withg_object_unref() . 
gboolean g_dbus_message_to_gerror (GDBusMessage *message, GError **error);	# If message is not of type G_DBUS_MESSAGE_TYPE_ERROR doesnothing and returns FALSE .
	message		# A GDBusMessage .
	error		# The GError to set.
	return:		#  TRUE if errorwas set, FALSE otherwise. 
void g_bus_get (GBusType bus_type, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously connects to the message bus specified by bus_type.
	bus_type		# a GBusType 
	cancellable		#  a GCancellable or NULL . 
	user_data		# the data to pass to callback
GDBusConnection  *g_bus_get_finish (GAsyncResult *res, GError **error);	# Finishes an operation started with g_bus_get() .
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passedto 
	error		# return location for error or NULL 
	return:		#  a GDBusConnection or NULL if erroris set.Free with g_object_unref() .  
GDBusConnection  *g_bus_get_sync (GBusType bus_type, GCancellable *cancellable, GError **error);	# Synchronously connects to the message bus specified by bus_type.Note that the returned object may shared with other callers,e.g. if two separate parts of a process calls this function withthe same bus_type, they will share the same object.
	bus_type		# a GBusType 
	cancellable		#  a GCancellable or NULL . 
	return:		#  a GDBusConnection or NULL if erroris set.Free with g_object_unref() .  
void g_dbus_connection_new (GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously sets up a D-Bus connection for exchanging D-Bus messageswith the end represented by stream.
	stream		# a GIOStream 
	guid		#  the GUID to use if a authenticating as a server or NULL . 
	user_data		# the data to pass to callback
GDBusConnection  *g_dbus_connection_new_finish (GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_new() .
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passed to 
	error		# return location for error or NULL 
	return:		#  a GDBusConnection or NULL if erroris set. Freewith g_object_unref() . 
GDBusConnection  *g_dbus_connection_new_sync (GIOStream *stream, const gchar *guid, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);	# Synchronously sets up a D-Bus connection for exchanging D-Bus messageswith the end represented by stream.
	stream		# a GIOStream 
	guid		#  the GUID to use if a authenticating as a server or NULL . 
	return:		#  a GDBusConnection or NULL if erroris set. Free with g_object_unref() . 
void g_dbus_connection_new_for_address (const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously connects and sets up a D-Bus client connection forexchanging D-Bus messages with an endpoint specified by addresswhich must be in theD-Bus address format .
	address		# a D-Bus address
	flags		# flags describing how to make the connection
	observer		#  a GDBusAuthObserver or NULL . 
	user_data		# the data to pass to callback
GDBusConnection  *g_dbus_connection_new_for_address_finish (GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_new_for_address() .
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passedto 
	error		# return location for error or NULL 
	return:		#  a GDBusConnection or NULL if erroris set. Free withg_object_unref() . 
GDBusConnection  *g_dbus_connection_new_for_address_sync (const gchar *address, GDBusConnectionFlags flags, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);	# Synchronously connects and sets up a D-Bus client connection forexchanging D-Bus messages with an endpoint specified by addresswhich must be in theD-Bus address format .
	address		# a D-Bus address
	flags		# flags describing how to make the connection
	observer		#  a GDBusAuthObserver or NULL . 
	return:		#  a GDBusConnection or NULL if erroris set. Free withg_object_unref() . 
void g_dbus_connection_start_message_processing (GDBusConnection *connection);	# If connection was created withG_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING , this methodstarts processing messages. Does nothing on if connection wasn'tcreated with this flag or if the method has already been called.
	connection		# a GDBusConnection 
void g_dbus_connection_close (GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Closes connection. Note that this never causes the process toexit (this might only happen if the other end of a shared messagebus connection disconnects, see “exit-on-close” ).
	connection		# a GDBusConnection 
	cancellable		#  a GCancellable or NULL . 
gboolean g_dbus_connection_close_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_close() .
	connection		# a GDBusConnection 
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passedto 
	error		# return location for error or NULL 
	return:		#  TRUE if the operation succeeded, FALSE if erroris set 
gboolean g_dbus_connection_close_sync (GDBusConnection *connection, GCancellable *cancellable, GError **error);	# Synchronously closees connection. The calling thread is blockeduntil this is done. See g_dbus_connection_close() for theasynchronous version of this method and more details about what itdoes.
	connection		# a GDBusConnection 
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if the operation succeeded, FALSE if erroris set 
gboolean g_dbus_connection_is_closed (GDBusConnection *connection);	# Gets whether connection is closed.
	connection		# a GDBusConnection 
	return:		#  TRUE if the connection is closed, FALSE otherwise 
void g_dbus_connection_flush (GDBusConnection *connection, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously flushes connection, that is, writes all queuedoutgoing message to the transport and then flushes the transport(using g_output_stream_flush_async() ). This is useful in programsthat wants to emit a D-Bus signal and then exit immediately. Withoutflushing the connection, there is no guaranteed that the message hasbeen sent to the networking buffers in the OS kernel.
	connection		# a GDBusConnection 
	cancellable		#  a GCancellable or NULL . 
gboolean g_dbus_connection_flush_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_flush() .
	connection		# a GDBusConnection 
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passedto 
	error		# return location for error or NULL 
	return:		#  TRUE if the operation succeeded, FALSE if erroris set 
gboolean g_dbus_connection_flush_sync (GDBusConnection *connection, GCancellable *cancellable, GError **error);	# Synchronously flushes connection. The calling thread is blockeduntil this is done. See g_dbus_connection_flush() for theasynchronous version of this method and more details about what itdoes.
	connection		# a GDBusConnection 
	cancellable		#  a GCancellable or NULL . 
	return:		#  TRUE if the operation succeeded, FALSE if erroris set 
gboolean g_dbus_connection_get_exit_on_close (GDBusConnection *connection);	# Gets whether the process is terminated when connection isclosed by the remote peer. See“exit-on-close” for more details.
	connection		# a GDBusConnection 
	return:		#  whether the process is terminated when connectionisclosed by the remote peer 
void g_dbus_connection_set_exit_on_close (GDBusConnection *connection, gboolean exit_on_close);	# Sets whether the process should be terminated when connection isclosed by the remote peer. See “exit-on-close” formore details.
	connection		# a GDBusConnection 
	exit_on_close		# whether the process should be terminatedwhen connectionis closed by the remote peer
GIOStream  *g_dbus_connection_get_stream (GDBusConnection *connection);	# Gets the underlying stream used for IO.
	connection		# a GDBusConnection 
	return:		#  the stream used for IO.  
gchar  *g_dbus_connection_get_guid (GDBusConnection *connection);	# The GUID of the peer performing the role of server whenauthenticating. See “guid” for more details.
	connection		# a GDBusConnection 
	return:		#  The GUID. Do not free this string, it is owned byconnection. 
gchar  *g_dbus_connection_get_unique_name (GDBusConnection *connection);	# Gets the unique name of connection as assigned by the messagebus. This can also be used to figure out if connection is amessage bus connection.
	connection		# a GDBusConnection 
	return:		#  the unique name or NULL if connectionis not a messagebus connection. Do not free this string, it is owned byconnection. 
GDBusCapabilityFlags g_dbus_connection_get_capabilities (GDBusConnection *connection);	# Gets the capabilities negotiated with the remote peer
	connection		# a GDBusConnection 
	return:		#  zero or more flags from the GDBusCapabilityFlags enumeration 
GCredentials  *g_dbus_connection_get_peer_credentials (GDBusConnection *connection);	# Gets the credentials of the authenticated peer. This will alwaysreturn NULL unless connection acted as a server(e.g. G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER was passed)when set up and the client passed credentials as part of theauthentication process.
	connection		# a GDBusConnection 
	return:		#  a GCredentials or NULL if notavailable. Do not free this object, it is owned by connection.  
guint32 g_dbus_connection_get_last_serial (GDBusConnection *connection);	# Retrieves the last serial number assigned to a GDBusMessage onthe current thread. This includes messages sent via both low-levelAPI such as g_dbus_connection_send_message() as well ashigh-level API such as g_dbus_connection_emit_signal() ,g_dbus_connection_call() or g_dbus_proxy_call() .
	connection		# a GDBusConnection 
	return:		#  the last used serial or zero when no message has been sentwithin the current thread 
void g_dbus_connection_call (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously invokes the method_name method on theinterface_name D-Bus interface on the remote object atobject_path owned by bus_name.
	connection		# a GDBusConnection 
	bus_name		#  a unique or well-known bus name or NULL ifconnectionis not a message bus connection. 
	timeout_msec		# the timeout in milliseconds, -1 to use the defaulttimeout or G_MAXINT for no timeout
	cancellable		#  a GCancellable or NULL . 
GVariant  *g_dbus_connection_call_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_call() .
	connection		# a GDBusConnection 
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passed to 
	error		# return location for error or NULL 
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
GVariant  *g_dbus_connection_call_sync (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error);	# Synchronously invokes the method_name method on theinterface_name D-Bus interface on the remote object atobject_path owned by bus_name.
	connection		# a GDBusConnection 
	bus_name		#  a unique or well-known bus name or NULL ifconnectionis not a message bus connection. 
	timeout_msec		# the timeout in milliseconds, -1 to use the defaulttimeout or G_MAXINT for no timeout
	cancellable		#  a GCancellable or NULL . 
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
void g_dbus_connection_call_with_unix_fd_list (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Like g_dbus_connection_call() but also takes a GUnixFDList object.
	connection		# a GDBusConnection 
	bus_name		#  a unique or well-known bus name or NULL ifconnectionis not a message bus connection. 
	timeout_msec		# the timeout in milliseconds, -1 to use the defaulttimeout or G_MAXINT for no timeout
	fd_list		#  a GUnixFDList or NULL . 
GVariant  *g_dbus_connection_call_with_unix_fd_list_finish (GDBusConnection *connection, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_call_with_unix_fd_list() .
	connection		# a GDBusConnection 
	out_fd_list		#  return location for a GUnixFDList or NULL . 
	error		# return location for error or NULL 
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
GVariant  *g_dbus_connection_call_with_unix_fd_list_sync (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, const GVariantType *reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error);	# Like g_dbus_connection_call_sync() but also takes and returns GUnixFDList objects.
	connection		# a GDBusConnection 
	bus_name		#  a unique or well-known bus name or NULL if connectionis not a message bus connection. 
	timeout_msec		# the timeout in milliseconds, -1 to use the defaulttimeout or G_MAXINT for no timeout
	fd_list		#  a GUnixFDList or NULL . 
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
gboolean g_dbus_connection_emit_signal (GDBusConnection *connection, const gchar *destination_bus_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, GError **error);	# Emits a signal.
	connection		# a GDBusConnection 
	destination_bus_name		#  the unique bus name for the destinationfor the signal or NULL to emit to all listeners. 
	return:		#  TRUE unless erroris set 
void <span class="c_punctuation">( *GDBusSignalCallback<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender_name, const gchar *object_path, const gchar *interface_name, const gchar *signal_name, GVariant *parameters, gpointer user_data);	# Signature for callback function used in g_dbus_connection_signal_subscribe() .
	connection		# A GDBusConnection .
	sender_name		# The unique bus name of the sender of the signal.
	object_path		# The object path that the signal was emitted on.
	interface_name		# The name of the interface.
	signal_name		# The name of the signal.
	parameters		# A GVariant tuple with parameters for the signal.
	user_data		# User data passed when subscribing to the signal.
guint g_dbus_connection_signal_subscribe (GDBusConnection *connection, const gchar *sender, const gchar *interface_name, const gchar *member, const gchar *object_path, const gchar *arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func);	# Subscribes to signals on connection and invokes callback with a wheneverthe signal is received. Note that callback will be invoked in the thread-default main context of the thread you are calling this method from.
	connection		# a GDBusConnection 
	sender		#  sender name to match on (unique or well-known name)or NULL to listen from all senders. 
	callback		# callback to invoke when there is a signal matching the requested data
	user_data		# user data to pass to callback
	user_data_free_func		#  function to free user_datawith whensubscription is removed or NULL . 
	return:		#  a subscription identifier that can be used with g_dbus_connection_signal_unsubscribe()  
void g_dbus_connection_signal_unsubscribe (GDBusConnection *connection, guint subscription_id);	# Unsubscribes from signals.
	connection		# a GDBusConnection 
	subscription_id		# a subscription id obtained from
gboolean g_dbus_connection_send_message (GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, volatile guint32 *out_serial, GError **error);	# Asynchronously sends message to the peer represented by connection.
	connection		# a GDBusConnection 
	message		# a GDBusMessage 
	flags		# flags affecting how the message is sent
	out_serial		#  return location for serial number assignedto messagewhen sending it or NULL . 
	return:		#  TRUE if the message was well-formed and queued fortransmission, FALSE if erroris set 
void g_dbus_connection_send_message_with_reply (GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously sends message to the peer represented by connection.
	connection		# a GDBusConnection 
	message		# a GDBusMessage 
	flags		# flags affecting how the message is sent
	timeout_msec		# the timeout in milliseconds, -1 to use the defaulttimeout or G_MAXINT for no timeout
	out_serial		#  return location for serial number assignedto messagewhen sending it or NULL . 
GDBusMessage  *g_dbus_connection_send_message_with_reply_finish (GDBusConnection *connection, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_connection_send_message_with_reply() .
	connection		# a GDBusConnection 
	res		# a GAsyncResult obtained from the GAsyncReadyCallback passed to
	error		# teturn location for error or NULL 
	return:		#  a locked GDBusMessage or NULL if erroris set.  
GDBusMessage  *g_dbus_connection_send_message_with_reply_sync (GDBusConnection *connection, GDBusMessage *message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 *out_serial, GCancellable *cancellable, GError **error);	# Synchronously sends message to the peer represented by connectionand blocks the calling thread until a reply is received or thetimeout is reached. See g_dbus_connection_send_message_with_reply() for the asynchronous version of this method.
	connection		# a GDBusConnection 
	message		# a GDBusMessage 
	flags		# flags affecting how the message is sent.
	timeout_msec		# the timeout in milliseconds, -1 to use the defaulttimeout or G_MAXINT for no timeout
	out_serial		#  return location for serial numberassigned to messagewhen sending it or NULL . 
	return:		#  a locked GDBusMessage that is the replyto messageor NULL if erroris set.  
GDBusMessage  *<span class="c_punctuation">( *GDBusMessageFilterFunction<span class="c_punctuation">) (GDBusConnection *connection, GDBusMessage *message, gboolean incoming, gpointer user_data);	# Signature for function used in g_dbus_connection_add_filter() .
	connection		#  A GDBusConnection . 
	user_data		# User data passed when adding the filter.
	return:		#  A GDBusMessage that will be freed withg_object_unref() or NULL to drop the message. Passive filterfunctions can simply return the passed messageobject.  
guint g_dbus_connection_add_filter (GDBusConnection *connection, GDBusMessageFilterFunction filter_function, gpointer user_data, GDestroyNotify user_data_free_func);	# Adds a message filter. Filters are handlers that are run on allincoming and outgoing messages, prior to standard dispatch. Filtersare run in the order that they were added. The same handler can beadded as a filter more than once, in which case it will be run morethan once. Filters added during a filter callback won't be run onthe message being processed. Filter functions are allowed to modifyand even drop messages.
	connection		# a GDBusConnection 
	filter_function		# a filter function
	user_data		# user data to pass to filter_function
	user_data_free_func		# function to free user_datawith when filteris removed or NULL 
	return:		#  a filter identifier that can be used withg_dbus_connection_remove_filter()  
void g_dbus_connection_remove_filter (GDBusConnection *connection, guint filter_id);	# Removes a filter.
	connection		# a GDBusConnection 
	filter_id		# an identifier obtained from 
void <span class="c_punctuation">( *GDBusInterfaceMethodCallFunc<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender, const gchar *object_path, const gchar *interface_name, const gchar *method_name, GVariant *parameters, GDBusMethodInvocation *invocation, gpointer user_data);	# The type of the method_call function in GDBusInterfaceVTable .
	connection		# A GDBusConnection .
	sender		# The unique bus name of the remote caller.
	object_path		# The object path that the method was invoked on.
	interface_name		# The D-Bus interface name the method was invoked on.
	method_name		# The name of the method that was invoked.
	parameters		# A GVariant tuple with parameters.
	invocation		#  A GDBusMethodInvocation object that must be used to return a value or error. 
GVariant  *<span class="c_punctuation">( *GDBusInterfaceGetPropertyFunc<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender, const gchar *object_path, const gchar *interface_name, const gchar *property_name, GError **error, gpointer user_data);	# The type of the get_property function in GDBusInterfaceVTable .
	connection		# A GDBusConnection .
	sender		# The unique bus name of the remote caller.
	object_path		# The object path that the method was invoked on.
	interface_name		# The D-Bus interface name for the property.
	property_name		# The name of the property to get the value of.
	error		# Return location for error.
	user_data		# The user_datagpointer passed to 
	return:		#  A GVariant with the value for property_nameor NULL iferroris set. If the returned GVariant is floating, it isconsumed - otherwise its reference count is decreased by one. 
gboolean <span class="c_punctuation">( *GDBusInterfaceSetPropertyFunc<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender, const gchar *object_path, const gchar *interface_name, const gchar *property_name, GVariant *value, GError **error, gpointer user_data);	# The type of the set_property function in GDBusInterfaceVTable .
	connection		# A GDBusConnection .
	sender		# The unique bus name of the remote caller.
	object_path		# The object path that the method was invoked on.
	interface_name		# The D-Bus interface name for the property.
	property_name		# The name of the property to get the value of.
	value		# The value to set the property to.
	error		# Return location for error.
	user_data		# The user_datagpointer passed to 
	return:		#  TRUE if the property was set to value, FALSE if erroris set. 
guint g_dbus_connection_register_object (GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, const GDBusInterfaceVTable *vtable, gpointer user_data, GDestroyNotify user_data_free_func, GError **error);	# Registers callbacks for exported objects at object_path with theD-Bus interface that is described in interface_info.
	connection		# a GDBusConnection 
	object_path		# the object path to register at
	interface_info		# introspection data for the interface
	vtable		#  a GDBusInterfaceVTable to call into or NULL . 
	return:		#  0 if erroris set, otherwise a registration id (never 0)that can be used with g_dbus_connection_unregister_object()  
gboolean g_dbus_connection_unregister_object (GDBusConnection *connection, guint registration_id);	# Unregisters an object.
	connection		# a GDBusConnection 
	registration_id		# a registration id obtained from
	return:		#  TRUE if the object was unregistered, FALSE otherwise 
guint g_dbus_connection_register_object_with_closures (GDBusConnection *connection, const gchar *object_path, GDBusInterfaceInfo *interface_info, GClosure *method_call_closure, GClosure *get_property_closure, GClosure *set_property_closure, GError **error);	# Version of g_dbus_connection_register_object() using closures instead of aGDBusInterfaceVTable for easier binding in other languages.
	connection		# A GDBusConnection .
	object_path		# The object path to register at.
	interface_info		# Introspection data for the interface.
	method_call_closure		#  GClosure for handling incoming method calls. 
	return:		#  0 if erroris set, otherwise a registration id (never 0)that can be used with g_dbus_connection_unregister_object() . 
gchar  **<span class="c_punctuation">( *GDBusSubtreeEnumerateFunc<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender, const gchar *object_path, gpointer user_data);	# The type of the enumerate function in GDBusSubtreeVTable .
	connection		# A GDBusConnection .
	sender		# The unique bus name of the remote caller.
	object_path		# The object path that was registered with 
	user_data		# The user_datagpointer passed to 
	return:		#  A newly allocated array of strings for node names that are children of object_path. 
GDBusInterfaceInfo  **<span class="c_punctuation">( *GDBusSubtreeIntrospectFunc<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender, const gchar *object_path, const gchar *node, gpointer user_data);	# The type of the introspect function in GDBusSubtreeVTable .
	connection		# A GDBusConnection .
	sender		# The unique bus name of the remote caller.
	object_path		# The object path that was registered with 
	node		# A node that is a child of object_path(relative to object_path) or NULL for the root of the subtree.
	user_data		# The user_datagpointer passed to 
	return:		#  A NULL -terminated array of pointers to GDBusInterfaceInfo , or NULL . 
GDBusInterfaceVTable  *<span class="c_punctuation">( *GDBusSubtreeDispatchFunc<span class="c_punctuation">) (GDBusConnection *connection, const gchar *sender, const gchar *object_path, const gchar *interface_name, const gchar *node, gpointer *out_user_data, gpointer user_data);	# The type of the dispatch function in GDBusSubtreeVTable .
	connection		# A GDBusConnection .
	sender		# The unique bus name of the remote caller.
	object_path		# The object path that was registered with 
	interface_name		# The D-Bus interface name that the method call or property access is for.
	node		# A node that is a child of object_path(relative to object_path) or NULL for the root of the subtree.
	out_user_data		#  Return location for user data to pass to functions in the returned GDBusInterfaceVTable (never NULL ). 
	return:		#  A GDBusInterfaceVTable or NULL if you don't want to handle the methods. 
guint g_dbus_connection_register_subtree (GDBusConnection *connection, const gchar *object_path, const GDBusSubtreeVTable *vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, GError **error);	# Registers a whole subtree of dynamic objects.
	connection		# a GDBusConnection 
	object_path		# the object path to register the subtree at
	vtable		# a GDBusSubtreeVTable to enumerate, introspect anddispatch nodes in the subtree
	flags		# flags used to fine tune the behavior of the subtree
	user_data		# data to pass to functions in vtable
	user_data_free_func		# function to call when the subtree is unregistered
	error		# return location for error or NULL 
	return:		#  0 if erroris set, otherwise a subtree registration id (never 0)that can be used with g_dbus_connection_unregister_subtree() . 
gboolean g_dbus_connection_unregister_subtree (GDBusConnection *connection, guint registration_id);	# Unregisters a subtree.
	connection		# a GDBusConnection 
	registration_id		# a subtree registration id obtained from
	return:		#  TRUE if the subtree was unregistered, FALSE otherwise 
gchar  *g_dbus_method_invocation_get_sender (GDBusMethodInvocation *invocation);	# Gets the bus name that invoked the method.
	invocation		# A GDBusMethodInvocation .
	return:		#  A string. Do not free, it is owned by invocation. 
gchar  *g_dbus_method_invocation_get_object_path (GDBusMethodInvocation *invocation);	# Gets the object path the method was invoked on.
	invocation		# A GDBusMethodInvocation .
	return:		#  A string. Do not free, it is owned by invocation. 
gchar  *g_dbus_method_invocation_get_interface_name (GDBusMethodInvocation *invocation);	# Gets the name of the D-Bus interface the method was invoked on.
	invocation		# A GDBusMethodInvocation .
	return:		#  A string. Do not free, it is owned by invocation. 
gchar  *g_dbus_method_invocation_get_method_name (GDBusMethodInvocation *invocation);	# Gets the name of the method that was invoked.
	invocation		# A GDBusMethodInvocation .
	return:		#  A string. Do not free, it is owned by invocation. 
GDBusMethodInfo  *g_dbus_method_invocation_get_method_info (GDBusMethodInvocation *invocation);	# Gets information about the method call, if any.
	invocation		# A GDBusMethodInvocation .
	return:		#  A GDBusMethodInfo or NULL . Do not free, it is owned by invocation. 
GDBusPropertyInfo  *g_dbus_method_invocation_get_property_info (GDBusMethodInvocation *invocation);	# Gets information about the property that this method call is for, ifany.
	invocation		# A GDBusMethodInvocation 
	return:		#  a GDBusPropertyInfo or NULL .  
GDBusConnection  *g_dbus_method_invocation_get_connection (GDBusMethodInvocation *invocation);	# Gets the GDBusConnection the method was invoked on.
	invocation		# A GDBusMethodInvocation .
	return:		# A GDBusConnection . Do not free, it is owned by invocation.  
GDBusMessage  *g_dbus_method_invocation_get_message (GDBusMethodInvocation *invocation);	# Gets the GDBusMessage for the method invocation. This is useful ifyou need to use low-level protocol features, such as UNIX filedescriptor passing, that cannot be properly expressed in theGVariant API.
	invocation		# A GDBusMethodInvocation .
	return:		#  GDBusMessage . Do not free, it is owned by invocation.  
GVariant  *g_dbus_method_invocation_get_parameters (GDBusMethodInvocation *invocation);	# Gets the parameters of the method invocation. If there are no inputparameters then this will return a GVariant with 0 children rather than NULL.
	invocation		# A GDBusMethodInvocation .
	return:		#  A GVariant tuple. Do not unref this because it is owned by invocation.  
gpointer g_dbus_method_invocation_get_user_data (GDBusMethodInvocation *invocation);	# Gets the user_data gpointer passed to g_dbus_connection_register_object() .
	invocation		# A GDBusMethodInvocation .
	return:		#  A gpointer . 
void g_dbus_method_invocation_return_value (GDBusMethodInvocation *invocation, GVariant *parameters);	# Finishes handling a D-Bus method call by returning parameters.If the parameters GVariant is floating, it is consumed.
	invocation		#  A GDBusMethodInvocation . 
void g_dbus_method_invocation_return_error (GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, ...);	# Finishes handling a D-Bus method call by returning an error.
	invocation		#  A GDBusMethodInvocation . 
	code		# The error code.
	format		# printf()-style format.
	...		# Parameters for format.
void g_dbus_method_invocation_return_error_valist (GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *format, va_list var_args);	# Like g_dbus_method_invocation_return_error() but intended forlanguage bindings.
	invocation		#  A GDBusMethodInvocation . 
	code		# The error code.
	format		# printf()-style format.
	var_args		# va_list of parameters for format.
void g_dbus_method_invocation_return_error_literal (GDBusMethodInvocation *invocation, GQuark domain, gint code, const gchar *message);	# Like g_dbus_method_invocation_return_error() but without printf()-style formatting.
	invocation		#  A GDBusMethodInvocation . 
	code		# The error code.
	message		# The error message.
void g_dbus_method_invocation_return_gerror (GDBusMethodInvocation *invocation, const GError *error);	# Like g_dbus_method_invocation_return_error() but takes a GError instead of the error domain, error code and message.
	invocation		#  A GDBusMethodInvocation . 
void g_dbus_method_invocation_return_dbus_error (GDBusMethodInvocation *invocation, const gchar *error_name, const gchar *error_message);	# Finishes handling a D-Bus method call by returning an error.
	invocation		#  A GDBusMethodInvocation . 
void g_dbus_method_invocation_take_error (GDBusMethodInvocation *invocation, GError *error);	# Like g_dbus_method_invocation_return_gerror() but takes ownershipof error so the caller does not need to free it.
	invocation		#  A GDBusMethodInvocation . 
void g_dbus_method_invocation_return_value_with_unix_fd_list (GDBusMethodInvocation *invocation, GVariant *parameters, GUnixFDList *fd_list);	# Like g_dbus_method_invocation_return_value() but also takes a GUnixFDList .
	invocation		#  A GDBusMethodInvocation . 
GDBusServer  *g_dbus_server_new_sync (const gchar *address, GDBusServerFlags flags, const gchar *guid, GDBusAuthObserver *observer, GCancellable *cancellable, GError **error);	#创建对象:D-Bus server that listens on the first address inaddress that works.
	address		# A D-Bus address.
	flags		# Flags from the GDBusServerFlags enumeration.
	guid		# A D-Bus GUID.
	observer		#  A GDBusAuthObserver or NULL . 
	return:		#  A GDBusServer or NULL if erroris set. Free withg_object_unref() . 
void g_dbus_server_start (GDBusServer *server);	# Starts server.
	server		# A GDBusServer .
void g_dbus_server_stop (GDBusServer *server);	# Stops server.
	server		# A GDBusServer .
gboolean g_dbus_server_is_active (GDBusServer *server);	# Gets whether server is active.
	server		# A GDBusServer .
	return:		#  TRUE if server is active, FALSE otherwise. 
gchar  *g_dbus_server_get_guid (GDBusServer *server);	# Gets the GUID for server.
	server		# A GDBusServer .
	return:		#  A D-Bus GUID. Do not free this string, it is owned by server. 
GDBusServerFlags g_dbus_server_get_flags (GDBusServer *server);	# Gets the flags for server.
	server		# A GDBusServer .
	return:		#  A set of flags from the GDBusServerFlags enumeration. 
gchar  *g_dbus_server_get_client_address (GDBusServer *server);	# Gets aD-Bus address string that can be used by clients to connect to server.
	server		# A GDBusServer .
	return:		#  A D-Bus address string. Do not free, the string is ownedby server. 
GDBusAuthObserver  *g_dbus_auth_observer_new (void );	#创建对象:GDBusAuthObserver object.
	return:		#  A GDBusAuthObserver . Free with g_object_unref() . 
gboolean g_dbus_auth_observer_authorize_authenticated_peer (GDBusAuthObserver *observer, GIOStream *stream, GCredentials *credentials);	# Emits the “authorize-authenticated-peer” signal on observer.
	observer		# A GDBusAuthObserver .
	stream		# A GIOStream for the GDBusConnection .
	credentials		#  Credentials received from the peer or NULL . 
	return:		#  TRUE if the peer is authorized, FALSE if not. 
gboolean g_dbus_auth_observer_allow_mechanism (GDBusAuthObserver *observer, const gchar *mechanism);	# Emits the “allow-mechanism” signal on observer.
	observer		# A GDBusAuthObserver .
	mechanism		# The name of the mechanism, e.g. DBUS_COOKIE_SHA1.
	return:		#  TRUE if mechanismcan be used to authenticate the other peer, FALSE if not. 
void <span class="c_punctuation">( *GBusAcquiredCallback<span class="c_punctuation">) (GDBusConnection *connection, const gchar *name, gpointer user_data);	# Invoked when a connection to a message bus has been obtained.
	connection		# The GDBusConnection to a message bus.
	name		# The name that is requested to be owned.
	user_data		# User data passed to 
void <span class="c_punctuation">( *GBusNameAcquiredCallback<span class="c_punctuation">) (GDBusConnection *connection, const gchar *name, gpointer user_data);	# Invoked when the name is acquired.
	connection		# The GDBusConnection on which to acquired the name.
	name		# The name being owned.
	user_data		# User data passed to 
void <span class="c_punctuation">( *GBusNameLostCallback<span class="c_punctuation">) (GDBusConnection *connection, const gchar *name, gpointer user_data);	# Invoked when the name is lost or connection has been closed.
	connection		# The GDBusConnection on which to acquire the name or NULL ifthe connection was disconnected.
	name		# The name being owned.
	user_data		# User data passed to 
guint g_bus_own_name (GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);	# Starts acquiring name on the bus specified by bus_type and callsname_acquired_handler and name_lost_handler when the name isacquired respectively lost. Callbacks will be invoked in the thread-default main context of the thread you are calling this function from.
	bus_type		# the type of bus to own a name on
	name		# the well-known name to own
	flags		# a set of flags from the GBusNameOwnerFlags enumeration
	bus_acquired_handler		#  handler to invoke when connected to the bus of type bus_typeor NULL . 
	return:		#  an identifier (never 0) that an be used withg_bus_unown_name() to stop owning the name. 
guint g_bus_own_name_on_connection (GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func);	# Like g_bus_own_name() but takes a GDBusConnection instead of aGBusType .
	connection		# a GDBusConnection 
	name		# the well-known name to own
	flags		# a set of flags from the GBusNameOwnerFlags enumeration
	name_acquired_handler		#  handler to invoke when nameis acquired or NULL . 
	return:		#  an identifier (never 0) that an be used withg_bus_unown_name() to stop owning the name 
void g_bus_unown_name (guint owner_id);	# Stops owning a name.
	owner_id		# an identifier obtained from 
guint g_bus_own_name_with_closures (GBusType bus_type, const gchar *name, GBusNameOwnerFlags flags, GClosure *bus_acquired_closure, GClosure *name_acquired_closure, GClosure *name_lost_closure);	# Version of g_bus_own_name() using closures instead of callbacks foreasier binding in other languages.
	bus_type		# the type of bus to own a name on
	name		# the well-known name to own
	flags		# a set of flags from the GBusNameOwnerFlags enumeration
	bus_acquired_closure		#  GClosure to invoke when connected tothe bus of type bus_typeor NULL . 
	return:		#  an identifier (never 0) that an be used withg_bus_unown_name() to stop owning the name. 
guint g_bus_own_name_on_connection_with_closures (GDBusConnection *connection, const gchar *name, GBusNameOwnerFlags flags, GClosure *name_acquired_closure, GClosure *name_lost_closure);	# Version of g_bus_own_name_on_connection() using closures instead ofcallbacks for easier binding in other languages.
	connection		# a GDBusConnection 
	name		# the well-known name to own
	flags		# a set of flags from the GBusNameOwnerFlags enumeration
	name_acquired_closure		#  GClosure to invoke when nameisacquired or NULL . 
	return:		#  an identifier (never 0) that an be used withg_bus_unown_name() to stop owning the name. 
void <span class="c_punctuation">( *GBusNameAppearedCallback<span class="c_punctuation">) (GDBusConnection *connection, const gchar *name, const gchar *name_owner, gpointer user_data);	# Invoked when the name being watched is known to have to have a owner.
	connection		# The GDBusConnection the name is being watched on.
	name		# The name being watched.
	name_owner		# Unique name of the owner of the name being watched.
	user_data		# User data passed to 
void <span class="c_punctuation">( *GBusNameVanishedCallback<span class="c_punctuation">) (GDBusConnection *connection, const gchar *name, gpointer user_data);	# Invoked when the name being watched is known not to have to have a owner.
	connection		# The GDBusConnection the name is being watched on, orNULL .
	name		# The name being watched.
	user_data		# User data passed to 
guint g_bus_watch_name (GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);	# Starts watching name on the bus specified by bus_type and callsname_appeared_handler and name_vanished_handler when the name isknown to have a owner respectively known to lose itsowner. Callbacks will be invoked in thethread-default main context of the thread you are calling this function from.
	bus_type		# The type of bus to watch a name on.
	name		# The name (well-known or unique) to watch.
	flags		# Flags from the GBusNameWatcherFlags enumeration.
	name_appeared_handler		#  Handler to invoke when nameis known to exist or NULL . 
	return:		#  An identifier (never 0) that an be used withg_bus_unwatch_name() to stop watching the name. 
guint g_bus_watch_name_on_connection (GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func);	# Like g_bus_watch_name() but takes a GDBusConnection instead of aGBusType .
	connection		# A GDBusConnection .
	name		# The name (well-known or unique) to watch.
	flags		# Flags from the GBusNameWatcherFlags enumeration.
	name_appeared_handler		#  Handler to invoke when nameis known to exist or NULL . 
	return:		#  An identifier (never 0) that an be used withg_bus_unwatch_name() to stop watching the name. 
void g_bus_unwatch_name (guint watcher_id);	# Stops watching a name.
	watcher_id		# An identifier obtained from 
guint g_bus_watch_name_with_closures (GBusType bus_type, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure);	# Version of g_bus_watch_name() using closures instead of callbacks foreasier binding in other languages.
	bus_type		# The type of bus to watch a name on.
	name		# The name (well-known or unique) to watch.
	flags		# Flags from the GBusNameWatcherFlags enumeration.
	name_appeared_closure		#  GClosure to invoke when nameis knownto exist or NULL . 
	return:		#  An identifier (never 0) that an be used withg_bus_unwatch_name() to stop watching the name. 
guint g_bus_watch_name_on_connection_with_closures (GDBusConnection *connection, const gchar *name, GBusNameWatcherFlags flags, GClosure *name_appeared_closure, GClosure *name_vanished_closure);	# Version of g_bus_watch_name_on_connection() using closures instead of callbacks foreasier binding in other languages.
	connection		# A GDBusConnection .
	name		# The name (well-known or unique) to watch.
	flags		# Flags from the GBusNameWatcherFlags enumeration.
	name_appeared_closure		#  GClosure to invoke when nameis knownto exist or NULL . 
	return:		#  An identifier (never 0) that an be used withg_bus_unwatch_name() to stop watching the name. 
GDBusInterfaceInfo  *g_dbus_interface_get_info (GDBusInterface *interface_);	# Gets D-Bus introspection information for the D-Bus interfaceimplemented by interface_.
	interface_		# An exported D-Bus interface.
	return:		#  A GDBusInterfaceInfo . Do not free.  
GDBusObject  *g_dbus_interface_get_object (GDBusInterface *interface_);	# Gets the GDBusObject that interface_ belongs to, if any.
	interface_		# An exported D-Bus interface
	return:		#  A GDBusObject or NULL . The returnedreference belongs to interface_and should not be freed.  
GDBusObject  *g_dbus_interface_dup_object (GDBusInterface *interface_);	# Gets the GDBusObject that interface_ belongs to, if any.
	interface_		# An exported D-Bus interface.
	return:		#  A GDBusObject or NULL . The returnedreference should be freed with g_object_unref() .  
void g_dbus_interface_set_object (GDBusInterface *interface_, GDBusObject *object);	# Sets the GDBusObject for interface_ to object.
	interface_		# An exported D-Bus interface.
	object		#  A GDBusObject or NULL . 
void g_dbus_interface_skeleton_flush (GDBusInterfaceSkeleton *interface_);	# If interface_ has outstanding changes, request for these changes to beemitted immediately.
	interface_		# A GDBusInterfaceSkeleton .
GDBusInterfaceInfo  *g_dbus_interface_skeleton_get_info (GDBusInterfaceSkeleton *interface_);	# Gets D-Bus introspection information for the D-Bus interfaceimplemented by interface_.
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  A GDBusInterfaceInfo (never NULL ). Do not free.  
GDBusInterfaceVTable  *g_dbus_interface_skeleton_get_vtable (GDBusInterfaceSkeleton *interface_);	# Gets the interface vtable for the D-Bus interface implemented byinterface_. The returned function pointers should expect interface_itself to be passed as user_data.
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  A GDBusInterfaceVTable (never NULL ). 
GVariant  *g_dbus_interface_skeleton_get_properties (GDBusInterfaceSkeleton *interface_);	# Gets all D-Bus properties for interface_.
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  A GVariant of type'a{sv}' .Free with g_variant_unref() .  
gboolean g_dbus_interface_skeleton_export (GDBusInterfaceSkeleton *interface_, GDBusConnection *connection, const gchar *object_path, GError **error);	# Exports interface_ at object_path on connection.
	interface_		# The D-Bus interface to export.
	connection		# A GDBusConnection to export interface_on.
	object_path		# The path to export the interface at.
	error		# Return location for error or NULL .
	return:		#  TRUE if the interface was exported on connection, otherwise FALSE witherrorset. 
void g_dbus_interface_skeleton_unexport (GDBusInterfaceSkeleton *interface_);	# Stops exporting interface_ on all connections it is exported on.
	interface_		# A GDBusInterfaceSkeleton .
void g_dbus_interface_skeleton_unexport_from_connection (GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);	# Stops exporting interface_ on connection.
	interface_		# A GDBusInterfaceSkeleton .
	connection		# A GDBusConnection .
GDBusConnection  *g_dbus_interface_skeleton_get_connection (GDBusInterfaceSkeleton *interface_);	# Gets the first connection that interface_ is exported on, if any.
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  A GDBusConnection or NULL if interface_isnot exported anywhere. Do not free, the object belongs to interface_.  
GList  *g_dbus_interface_skeleton_get_connections (GDBusInterfaceSkeleton *interface_);	# Gets a list of the connections that interface_ is exported on.
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  A list ofall the connections that interface_is exported on. The returnedlist should be freed with g_list_free() after each element hasbeen freed with g_object_unref() .  
gboolean g_dbus_interface_skeleton_has_connection (GDBusInterfaceSkeleton *interface_, GDBusConnection *connection);	# Checks if interface_ is exported on connection.
	interface_		# A GDBusInterfaceSkeleton .
	connection		# A GDBusConnection .
	return:		#  TRUE if interface_is exported on connection, FALSE otherwise. 
gchar  *g_dbus_interface_skeleton_get_object_path (GDBusInterfaceSkeleton *interface_);	# Gets the object path that interface_ is exported on, if any.
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  A string owned by interface_or NULL if interface_is not exportedanywhere. Do not free, the string belongs to interface_. 
GDBusInterfaceSkeletonFlags g_dbus_interface_skeleton_get_flags (GDBusInterfaceSkeleton *interface_);	# Gets the GDBusInterfaceSkeletonFlags that describes what the behaviorof interface_
	interface_		# A GDBusInterfaceSkeleton .
	return:		#  One or more flags from the GDBusInterfaceSkeletonFlags enumeration. 
void g_dbus_interface_skeleton_set_flags (GDBusInterfaceSkeleton *interface_, GDBusInterfaceSkeletonFlags flags);	# Sets flags describing what the behavior of skeleton should be.
	interface_		# A GDBusInterfaceSkeleton .
	flags		# Flags from the GDBusInterfaceSkeletonFlags enumeration.
void g_dbus_proxy_new (GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Creates a proxy for accessing interface_name on the remote objectat object_path owned by name at connection and asynchronouslyloads D-Bus properties unless theG_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used. Connect tothe “g-properties-changed” signal to get notified aboutproperty changes.
	connection		# A GDBusConnection .
	flags		# Flags used when constructing the proxy.
	info		#  A GDBusInterfaceInfo specifying the minimal interface that proxyconforms to or NULL . 
GDBusProxy  *g_dbus_proxy_new_finish (GAsyncResult *res, GError **error);	# Finishes creating a GDBusProxy .
	res		# A GAsyncResult obtained from the GAsyncReadyCallback function passed to 
	error		# Return location for error or NULL .
	return:		#  A GDBusProxy or NULL if erroris set. Free with g_object_unref() . 
GDBusProxy  *g_dbus_proxy_new_sync (GDBusConnection *connection, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error);	# Creates a proxy for accessing interface_name on the remote objectat object_path owned by name at connection and synchronouslyloads D-Bus properties unless theG_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES flag is used.
	connection		# A GDBusConnection .
	flags		# Flags used when constructing the proxy.
	info		#  A GDBusInterfaceInfo specifying the minimal interface that proxyconforms to or NULL . 
	return:		#  A GDBusProxy or NULL if error is set. Free with g_object_unref() . 
void g_dbus_proxy_new_for_bus (GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Like g_dbus_proxy_new() but takes a GBusType instead of a GDBusConnection .
	bus_type		# A GBusType .
	flags		# Flags used when constructing the proxy.
	info		#  A GDBusInterfaceInfo specifying the minimal interface that proxyconforms to or NULL . 
GDBusProxy  *g_dbus_proxy_new_for_bus_finish (GAsyncResult *res, GError **error);	# Finishes creating a GDBusProxy .
	res		# A GAsyncResult obtained from the GAsyncReadyCallback function passed to 
	error		# Return location for error or NULL .
	return:		#  A GDBusProxy or NULL if erroris set. Free with g_object_unref() . 
GDBusProxy  *g_dbus_proxy_new_for_bus_sync (GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo *info, const gchar *name, const gchar *object_path, const gchar *interface_name, GCancellable *cancellable, GError **error);	# Like g_dbus_proxy_new_sync() but takes a GBusType instead of a GDBusConnection .
	bus_type		# A GBusType .
	flags		# Flags used when constructing the proxy.
	info		#  A GDBusInterfaceInfo specifying the minimal interfacethat proxyconforms to or NULL . 
	return:		#  A GDBusProxy or NULL if error is set. Free with g_object_unref() . 
GDBusProxyFlags g_dbus_proxy_get_flags (GDBusProxy *proxy);	# Gets the flags that proxy was constructed with.
	proxy		# A GDBusProxy .
	return:		#  Flags from the GDBusProxyFlags enumeration. 
GDBusConnection  *g_dbus_proxy_get_connection (GDBusProxy *proxy);	# Gets the connection proxy is for.
	proxy		# A GDBusProxy .
	return:		#  A GDBusConnection owned by proxy. Do not free.  
gchar  *g_dbus_proxy_get_name (GDBusProxy *proxy);	# Gets the name that proxy was constructed for.
	proxy		# A GDBusProxy .
	return:		#  A string owned by proxy. Do not free. 
gchar  *g_dbus_proxy_get_name_owner (GDBusProxy *proxy);	# The unique name that owns the name that proxy is for or NULL ifno-one currently owns that name. You may connect to the“notify” signal to track changes to the“g-name-owner” property.
	proxy		# A GDBusProxy .
	return:		#  The name owner or NULL if no name owner exists. Free with g_free() . 
gchar  *g_dbus_proxy_get_object_path (GDBusProxy *proxy);	# Gets the object path proxy is for.
	proxy		# A GDBusProxy .
	return:		#  A string owned by proxy. Do not free. 
gchar  *g_dbus_proxy_get_interface_name (GDBusProxy *proxy);	# Gets the D-Bus interface name proxy is for.
	proxy		# A GDBusProxy .
	return:		#  A string owned by proxy. Do not free. 
gint g_dbus_proxy_get_default_timeout (GDBusProxy *proxy);	# Gets the timeout to use if -1 (specifying default timeout) ispassed as timeout_msec in the g_dbus_proxy_call() andg_dbus_proxy_call_sync() functions.
	proxy		# A GDBusProxy .
	return:		#  Timeout to use for proxy. 
void g_dbus_proxy_set_default_timeout (GDBusProxy *proxy, gint timeout_msec);	# Sets the timeout to use if -1 (specifying default timeout) ispassed as timeout_msec in the g_dbus_proxy_call() andg_dbus_proxy_call_sync() functions.
	proxy		# A GDBusProxy .
	timeout_msec		# Timeout in milliseconds.
GVariant  *g_dbus_proxy_get_cached_property (GDBusProxy *proxy, const gchar *property_name);	# Looks up the value for a property from the cache. This call does noblocking IO.
	proxy		# A GDBusProxy .
	property_name		# Property name.
	return:		#  A reference to the GVariant instance that holds the valuefor property_nameor NULL if the value is not in the cache. Thereturned reference must be freed with g_variant_unref() . 
void g_dbus_proxy_set_cached_property (GDBusProxy *proxy, const gchar *property_name, GVariant *value);	# If value is not NULL , sets the cached value for the property withname property_name to the value in value.
	proxy		# A GDBusProxy 
	property_name		# Property name.
	value		#  Value for the property or NULL to remove it from the cache. 
gchar  **g_dbus_proxy_get_cached_property_names (GDBusProxy *proxy);	# Gets the names of all cached properties on proxy.
	proxy		# A GDBusProxy .
	return:		#  A NULL -terminated array of strings or NULL ifproxyhas no cached properties. Free the returned array withg_strfreev() .  
void g_dbus_proxy_set_interface_info (GDBusProxy *proxy, GDBusInterfaceInfo *info);	# Ensure that interactions with proxy conform to the giveninterface. See the “g-interface-info” property for moredetails.
	proxy		# A GDBusProxy 
	info		#  Minimum interface this proxy conforms to or NULL to unset. 
GDBusInterfaceInfo  *g_dbus_proxy_get_interface_info (GDBusProxy *proxy);	# Returns the GDBusInterfaceInfo , if any, specifying the interfacethat proxy conforms to. See the “g-interface-info” property for more details.
	proxy		# A GDBusProxy 
	return:		#  A GDBusInterfaceInfo or NULL . Do not unref the returnedobject, it is owned by proxy. 
void g_dbus_proxy_call (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously invokes the method_name method on proxy.
	proxy		# A GDBusProxy .
	method_name		# Name of method to invoke.
	parameters		#  A GVariant tuple with parameters for the signal or NULL if not passing parameters. 
	timeout_msec		# The timeout in milliseconds (with G_MAXINT meaning"infinite") or -1 to use the proxy default timeout.
	cancellable		#  A GCancellable or NULL . 
GVariant  *g_dbus_proxy_call_finish (GDBusProxy *proxy, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_proxy_call() .
	proxy		# A GDBusProxy .
	res		# A GAsyncResult obtained from the GAsyncReadyCallback passed to 
	error		# Return location for error or NULL .
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
GVariant  *g_dbus_proxy_call_sync (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable *cancellable, GError **error);	# Synchronously invokes the method_name method on proxy.
	proxy		# A GDBusProxy .
	method_name		# Name of method to invoke.
	parameters		#  A GVariant tuple with parameters for the signalor NULL if not passing parameters. 
	timeout_msec		# The timeout in milliseconds (with G_MAXINT meaning"infinite") or -1 to use the proxy default timeout.
	cancellable		#  A GCancellable or NULL . 
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
void g_dbus_proxy_call_with_unix_fd_list (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Like g_dbus_proxy_call() but also takes a GUnixFDList object.
	proxy		# A GDBusProxy .
	method_name		# Name of method to invoke.
	parameters		#  A GVariant tuple with parameters for the signal or NULL if not passing parameters. 
	timeout_msec		# The timeout in milliseconds (with G_MAXINT meaning"infinite") or -1 to use the proxy default timeout.
	fd_list		#  A GUnixFDList or NULL . 
GVariant  *g_dbus_proxy_call_with_unix_fd_list_finish (GDBusProxy *proxy, GUnixFDList **out_fd_list, GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_proxy_call_with_unix_fd_list() .
	proxy		# A GDBusProxy .
	out_fd_list		#  Return location for a GUnixFDList or NULL . 
	error		# Return location for error or NULL .
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
GVariant  *g_dbus_proxy_call_with_unix_fd_list_sync (GDBusProxy *proxy, const gchar *method_name, GVariant *parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList *fd_list, GUnixFDList **out_fd_list, GCancellable *cancellable, GError **error);	# Like g_dbus_proxy_call_sync() but also takes and returns GUnixFDList objects.
	proxy		# A GDBusProxy .
	method_name		# Name of method to invoke.
	parameters		#  A GVariant tuple with parameters for the signalor NULL if not passing parameters. 
	timeout_msec		# The timeout in milliseconds (with G_MAXINT meaning"infinite") or -1 to use the proxy default timeout.
	fd_list		#  A GUnixFDList or NULL . 
	return:		#  NULL if erroris set. Otherwise a GVariant tuple withreturn values. Free with g_variant_unref() . 
gchar  *g_dbus_object_get_object_path (GDBusObject *object);	# Gets the object path for object.
	object		# A GDBusObject .
	return:		#  A string owned by object. Do not free. 
GList  *g_dbus_object_get_interfaces (GDBusObject *object);	# Gets the D-Bus interfaces associated with object.
	object		# A GDBusObject .
	return:		#  A list of GDBusInterface instances.The returned list must be freed by g_list_free() after each element has been freedwith g_object_unref() .  
GDBusInterface  *g_dbus_object_get_interface (GDBusObject *object, const gchar *interface_name);	# Gets the D-Bus interface with name interface_name associated withobject, if any.
	object		# A GDBusObject .
	interface_name		# A D-Bus interface name.
	return:		#  NULL if not found, otherwise aGDBusInterface that must be freed with g_object_unref() .  
GDBusObjectSkeleton  *g_dbus_object_skeleton_new (const gchar *object_path);	#创建对象:GDBusObjectSkeleton .
	object_path		# An object path.
	return:		#  A GDBusObjectSkeleton . Free with g_object_unref() . 
void g_dbus_object_skeleton_flush (GDBusObjectSkeleton *object);	# This method simply calls g_dbus_interface_skeleton_flush() on allinterfaces belonging to object. See that method for when flushingis useful.
	object		# A GDBusObjectSkeleton .
void g_dbus_object_skeleton_add_interface (GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_);	# Adds interface_ to object.
	object		# A GDBusObjectSkeleton .
	interface_		# A GDBusInterfaceSkeleton .
void g_dbus_object_skeleton_remove_interface (GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_);	# Removes interface_ from object.
	object		# A GDBusObjectSkeleton .
	interface_		# A GDBusInterfaceSkeleton .
void g_dbus_object_skeleton_remove_interface_by_name (GDBusObjectSkeleton *object, const gchar *interface_name);	# Removes the GDBusInterface with interface_name from object.
	object		# A GDBusObjectSkeleton .
	interface_name		# A D-Bus interface name.
void g_dbus_object_skeleton_set_object_path (GDBusObjectSkeleton *object, const gchar *object_path);	# Sets the object path for object.
	object		# A GDBusObjectSkeleton .
	object_path		# A valid D-Bus object path.
GDBusObjectProxy  *g_dbus_object_proxy_new (GDBusConnection *connection, const gchar *object_path);	#创建对象:GDBusObjectProxy for the given connection andobject path.
	connection		# a GDBusConnection 
	object_path		# the object path
	return:		#  a new GDBusObjectProxy  
GDBusConnection  *g_dbus_object_proxy_get_connection (GDBusObjectProxy *proxy);	# Gets the connection that proxy is for.
	proxy		# a GDBusObjectProxy 
	return:		#  A GDBusConnection . Do not free, theobject is owned by proxy.  
gchar  *g_dbus_object_manager_get_object_path (GDBusObjectManager *manager);	# Gets the object path that manager is for.
	manager		# A GDBusObjectManager .
	return:		#  A string owned by manager. Do not free. 
GList  *g_dbus_object_manager_get_objects (GDBusObjectManager *manager);	# Gets all GDBusObject objects known to manager.
	manager		# A GDBusObjectManager .
	return:		#  A list ofGDBusObject objects. The returned list should be freed withg_list_free() after each element has been freed withg_object_unref() .  
GDBusObject  *g_dbus_object_manager_get_object (GDBusObjectManager *manager, const gchar *object_path);	# Gets the GDBusObjectProxy at object_path, if any.
	manager		# A GDBusObjectManager .
	object_path		# Object path to lookup.
	return:		#  A GDBusObject or NULL . Free withg_object_unref() .  
GDBusInterface  *g_dbus_object_manager_get_interface (GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name);	# Gets the interface proxy for interface_name at object_path, ifany.
	manager		# A GDBusObjectManager .
	object_path		# Object path to lookup.
	interface_name		# D-Bus interface name to lookup.
	return:		#  A GDBusInterface instance or NULL . Freewith g_object_unref() .  
GDBusObjectManagerServer  *g_dbus_object_manager_server_new (const gchar *object_path);	#创建对象:GDBusObjectManagerServer object.
	object_path		# The object path to export the manager object at.
	return:		#  A GDBusObjectManagerServer object. Free with g_object_unref() . 
GDBusConnection  *g_dbus_object_manager_server_get_connection (GDBusObjectManagerServer *manager);	# Gets the GDBusConnection used by manager.
	manager		# A GDBusObjectManagerServer 
	return:		#  A GDBusConnection object or NULL ifmanagerisn't exported on a connection. The returned object shouldbe freed with g_object_unref() .  
void g_dbus_object_manager_server_set_connection (GDBusObjectManagerServer *manager, GDBusConnection *connection);	# Exports all objects managed by manager on connection. Ifconnection is NULL , stops exporting objects.
	manager		# A GDBusObjectManagerServer .
	connection		#  A GDBusConnection or NULL . 
void g_dbus_object_manager_server_export (GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);	# Exports object on manager.
	manager		# A GDBusObjectManagerServer .
	object		# A GDBusObjectSkeleton .
void g_dbus_object_manager_server_export_uniquely (GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);	# Like g_dbus_object_manager_server_export() but appends a string ofthe form _N (with N being a natural number) to object's object pathif an object with the given path already exists. As such, the“g-object-path” property of object may be modified.
	manager		# A GDBusObjectManagerServer .
	object		# An object.
gboolean g_dbus_object_manager_server_is_exported (GDBusObjectManagerServer *manager, GDBusObjectSkeleton *object);	# Returns whether object is currently exported on manager.
	manager		# A GDBusObjectManagerServer .
	object		# An object.
	return:		#  TRUE if objectis exported 
gboolean g_dbus_object_manager_server_unexport (GDBusObjectManagerServer *manager, const gchar *object_path);	# If manager has an object at path, removes the object. Otherwisedoes nothing.
	manager		# A GDBusObjectManagerServer .
	object_path		# An object path.
	return:		#  TRUE if object at object_pathwas removed, FALSE otherwise. 
GType <span class="c_punctuation">( *GDBusProxyTypeFunc<span class="c_punctuation">) (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);	# Function signature for a function used to determine the GType touse for an interface proxy (if interface_name is not NULL ) orobject proxy (if interface_name is NULL ).
	manager		# A GDBusObjectManagerClient .
	object_path		# The object path of the remote object.
	interface_name		#  The interface name of the remote object or NULL if a GDBusObjectProxy GType is requested. 
	return:		#  A GType to use for the remote object. The returned typemust be a GDBusProxy or GDBusObjectProxy -derivedtype. 
void g_dbus_object_manager_client_new (GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Asynchronously创建对象:GDBusObjectManagerClient object.
	connection		# A GDBusConnection .
	flags		# Zero or more flags from the GDBusObjectManagerClientFlags enumeration.
	name		# The owner of the control object (unique or well-known name).
	object_path		# The object path of the control object.
	get_proxy_type_func		#  A GDBusProxyTypeFunc function or NULL to always construct GDBusProxy proxies. 
	user_data		# The data to pass to callback.
GDBusObjectManager  *g_dbus_object_manager_client_new_finish (GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_object_manager_client_new() .
	res		# A GAsyncResult obtained from the GAsyncReadyCallback passed to 
	error		# Return location for error or NULL .
	return:		#  AGDBusObjectManagerClient object or NULL if erroris set. Freewith g_object_unref() .  
GDBusObjectManager  *g_dbus_object_manager_client_new_sync (GDBusConnection *connection, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error);	#创建对象:GDBusObjectManagerClient object.
	connection		# A GDBusConnection .
	flags		# Zero or more flags from the GDBusObjectManagerClientFlags enumeration.
	name		#  The owner of the control object (unique or well-known name), or NULL when not using a message bus connection. 
	return:		#  AGDBusObjectManagerClient object or NULL if erroris set. Freewith g_object_unref() .  
void g_dbus_object_manager_client_new_for_bus (GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Like g_dbus_object_manager_client_new() but takes a GBusType instead of aGDBusConnection .
	bus_type		# A GBusType .
	flags		# Zero or more flags from the GDBusObjectManagerClientFlags enumeration.
	name		# The owner of the control object (unique or well-known name).
	object_path		# The object path of the control object.
	get_proxy_type_func		#  A GDBusProxyTypeFunc function or NULL to always construct GDBusProxy proxies. 
	user_data		# The data to pass to callback.
GDBusObjectManager  *g_dbus_object_manager_client_new_for_bus_finish (GAsyncResult *res, GError **error);	# Finishes an operation started with g_dbus_object_manager_client_new_for_bus() .
	res		# A GAsyncResult obtained from the GAsyncReadyCallback passed to 
	error		# Return location for error or NULL .
	return:		#  AGDBusObjectManagerClient object or NULL if erroris set. Freewith g_object_unref() .  
GDBusObjectManager  *g_dbus_object_manager_client_new_for_bus_sync (GBusType bus_type, GDBusObjectManagerClientFlags flags, const gchar *name, const gchar *object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable *cancellable, GError **error);	# Like g_dbus_object_manager_client_new_sync() but takes a GBusType insteadof a GDBusConnection .
	bus_type		# A GBusType .
	flags		# Zero or more flags from the GDBusObjectManagerClientFlags enumeration.
	name		# The owner of the control object (unique or well-known name).
	object_path		# The object path of the control object.
	get_proxy_type_func		#  A GDBusProxyTypeFunc function or NULL to always construct GDBusProxy proxies. 
	return:		#  AGDBusObjectManagerClient object or NULL if erroris set. Freewith g_object_unref() .  
GDBusConnection  *g_dbus_object_manager_client_get_connection (GDBusObjectManagerClient *manager);	# Gets the GDBusConnection used by manager.
	manager		# A GDBusObjectManagerClient 
	return:		#  A GDBusConnection object. Do not free,the object belongs to manager.  
GDBusObjectManagerClientFlags g_dbus_object_manager_client_get_flags (GDBusObjectManagerClient *manager);	# Gets the flags that manager was constructed with.
	manager		# A GDBusObjectManagerClient 
	return:		#  Zero of more flags from the GDBusObjectManagerClientFlags enumeration. 
gchar  *g_dbus_object_manager_client_get_name (GDBusObjectManagerClient *manager);	# Gets the name that manager is for, or NULL if not a message busconnection.
	manager		# A GDBusObjectManagerClient 
	return:		#  A unique or well-known name. Do not free, the stringbelongs to manager. 
gchar  *g_dbus_object_manager_client_get_name_owner (GDBusObjectManagerClient *manager);	# The unique name that owns the name that manager is for or NULL ifno-one currently owns that name. You can connect to the“notify” signal to track changes to the“name-owner” property.
	manager		# A GDBusObjectManagerClient .
	return:		#  The name owner or NULL if no name ownerexists. Free with g_free() .  
GSettings  *g_settings_new (const gchar *schema_id);	#创建对象:GSettings object with the schema specified byschema_id.
	schema_id		# the id of the schema
	return:		#  a new GSettings object 
GSettings  *g_settings_new_with_path (const gchar *schema_id, const gchar *path);	#创建对象:GSettings object with the relocatable schema specifiedby schema_id and a given path.
	schema_id		# the id of the schema
	path		# the path to use
	return:		#  a new GSettings object 
GSettings  *g_settings_new_with_backend (const gchar *schema_id, GSettingsBackend *backend);	#创建对象:GSettings object with the schema specified byschema_id and a given GSettingsBackend .
	schema_id		# the id of the schema
	backend		# the GSettingsBackend to use
	return:		#  a new GSettings object 
GSettings  *g_settings_new_with_backend_and_path (const gchar *schema_id, GSettingsBackend *backend, const gchar *path);	#创建对象:GSettings object with the schema specified byschema_id and a given GSettingsBackend and path.
	schema_id		# the id of the schema
	backend		# the GSettingsBackend to use
	path		# the path to use
	return:		#  a new GSettings object 
GSettings  *g_settings_new_full (GSettingsSchema *schema, GSettingsBackend *backend, const gchar *path);	#创建对象:GSettings object with a given schema, backend andpath.
	schema		# a GSettingsSchema 
	backend		#  a GSettingsBackend . 
	return:		#  a new GSettings object 
void g_settings_sync (void );	# Ensures that all pending operations are complete for the default backend.
GVariant  *g_settings_get_value (GSettings *settings, const gchar *key);	# Gets the value that is stored in settings for key.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  a new GVariant  
gboolean g_settings_set_value (GSettings *settings, const gchar *key, GVariant *value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# a GVariant of the correct type
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gboolean g_settings_is_writable (GSettings *settings, const gchar *name);	# Finds out if a key can be written or not
	settings		# a GSettings object
	name		# the name of a key
	return:		#  TRUE if the key nameis writable 
void g_settings_delay (GSettings *settings);	# Changes the GSettings object into 'delay-apply' mode. In thismode, changes to settings are not immediately propagated to thebackend, but kept locally until g_settings_apply() is called.
	settings		# a GSettings object
void g_settings_apply (GSettings *settings);	# Applies any changes that have been made to the settings. Thisfunction does nothing unless settings is in 'delay-apply' mode;see g_settings_delay() . In the normal case settings are alwaysapplied immediately.
	settings		# a GSettings instance
void g_settings_revert (GSettings *settings);	# Reverts all non-applied changes to the settings. This functiondoes nothing unless settings is in 'delay-apply' mode; seeg_settings_delay() . In the normal case settings are always appliedimmediately.
	settings		# a GSettings instance
gboolean g_settings_get_has_unapplied (GSettings *settings);	# Returns whether the GSettings object has any unappliedchanges. This can only be the case if it is in 'delayed-apply' mode.
	settings		# a GSettings object
	return:		#  TRUE if settingshas unapplied changes 
GSettings  *g_settings_get_child (GSettings *settings, const gchar *name);	# Creates a child settings object which has a base path ofbase-path/@name, where base-path is the base path ofsettings.
	settings		# a GSettings object
	name		# the name of the child schema
	return:		#  a 'child' settings object.  
void g_settings_reset (GSettings *settings, const gchar *key);	# Resets key to its default value.
	settings		# a GSettings object
	key		# the name of a key
GVariant  *g_settings_get_user_value (GSettings *settings, const gchar *key);	# Checks the "user value" of a key, if there is one.
	settings		# a GSettings object
	key		# the key to get the user value for
	return:		#  the user's value, if set.  
GVariant  *g_settings_get_default_value (GSettings *settings, const gchar *key);	# Gets the "default value" of a key.
	settings		# a GSettings object
	key		# the key to get the default value for
	return:		#  the default value.  
gchar  * const *g_settings_list_schemas (void );	# g_settings_list_schemas has been deprecated since version 2.40 and should not be used in newly-written code.
	return:		#  a list of GSettings schemas that are available. The list must not be modified orfreed.  
gchar  * const *g_settings_list_relocatable_schemas (void );	# g_settings_list_relocatable_schemas has been deprecated since version 2.40 and should not be used in newly-written code.
	return:		#  a list of relocatableGSettings schemas that are available. The list must not bemodified or freed.  
gchar  **g_settings_list_keys (GSettings *settings);	# g_settings_list_keys is deprecated and should not be used in newly-written code.
	settings		# a GSettings object
	return:		#  a list of the keys on settings.  
gchar  **g_settings_list_children (GSettings *settings);	# Gets the list of children on settings.
	settings		# a GSettings object
	return:		#  a list of the children on settings.  
GVariant  *g_settings_get_range (GSettings *settings, const gchar *key);	# g_settings_get_range has been deprecated since version 2.40 and should not be used in newly-written code.
	settings		# a GSettings 
	key		# the key to query the range of
gboolean g_settings_range_check (GSettings *settings, const gchar *key, GVariant *value);	# g_settings_range_check has been deprecated since version 2.40 and should not be used in newly-written code.
	settings		# a GSettings 
	key		# the key to check
	value		# the value to check
	return:		#  TRUE if valueis valid for key 
void g_settings_get (GSettings *settings, const gchar *key, const gchar *format, ...);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	format		# a GVariant format string
	...		# arguments as per format
gboolean g_settings_set (GSettings *settings, const gchar *key, const gchar *format, ...);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	format		# a GVariant format string
	...		# arguments as per format
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gboolean g_settings_get_boolean (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  a boolean 
gboolean g_settings_set_boolean (GSettings *settings, const gchar *key, gboolean value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gint g_settings_get_int (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  an integer 
gboolean g_settings_set_int (GSettings *settings, const gchar *key, gint value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gint64 g_settings_get_int64 (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  a 64-bit integer 
gboolean g_settings_set_int64 (GSettings *settings, const gchar *key, gint64 value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
guint g_settings_get_uint (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  an unsigned integer 
gboolean g_settings_set_uint (GSettings *settings, const gchar *key, guint value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
guint64 g_settings_get_uint64 (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  a 64-bit unsigned integer 
gboolean g_settings_set_uint64 (GSettings *settings, const gchar *key, guint64 value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gdouble g_settings_get_double (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  a double 
gboolean g_settings_set_double (GSettings *settings, const gchar *key, gdouble value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gchar  *g_settings_get_string (GSettings *settings, const gchar *key);	# Gets the value that is stored at key in settings.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  a newly-allocated string 
gboolean g_settings_set_string (GSettings *settings, const gchar *key, const gchar *value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		# the value to set it to
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gchar  **g_settings_get_strv (GSettings *settings, const gchar *key);	# A convenience variant of g_settings_get() for string arrays.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  anewly-allocated, NULL -terminated array of strings, the value thatis stored at keyin settings.  
gboolean g_settings_set_strv (GSettings *settings, const gchar *key, const gchar *const *value);	# Sets key in settings to value.
	settings		# a GSettings object
	key		# the name of the key to set
	value		#  the value to set it to, or NULL . 
	return:		#  TRUE if setting the key succeeded,FALSE if the key was not writable 
gint g_settings_get_enum (GSettings *settings, const gchar *key);	# Gets the value that is stored in settings for key and converts itto the enum value that it represents.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  the enum value 
gboolean g_settings_set_enum (GSettings *settings, const gchar *key, gint value);	# Looks up the enumerated type nick for value and writes it to key,within settings.
	settings		# a GSettings object
	key		# a key, within settings
	value		# an enumerated value
	return:		#  TRUE , if the set succeeds 
guint g_settings_get_flags (GSettings *settings, const gchar *key);	# Gets the value that is stored in settings for key and converts itto the flags value that it represents.
	settings		# a GSettings object
	key		# the key to get the value for
	return:		#  the flags value 
gboolean g_settings_set_flags (GSettings *settings, const gchar *key, guint value);	# Looks up the flags type nicks for the bits specified by value, putsthem in an array of strings and writes the array to key, withinsettings.
	settings		# a GSettings object
	key		# a key, within settings
	value		# a flags value
	return:		#  TRUE , if the set succeeds 
gboolean <span class="c_punctuation">( *GSettingsGetMapping<span class="c_punctuation">) (GVariant *value, gpointer *result, gpointer user_data);	# The type of the function that is used to convert from a value storedin a GSettings to a value that is useful to the application.
	value		# the GVariant to map, or NULL 
	result		#  the result of the mapping. 
	return:		#  TRUE if the conversion succeeded, FALSE in case of an error 
gpointer g_settings_get_mapped (GSettings *settings, const gchar *key, GSettingsGetMapping mapping, gpointer user_data);	# Gets the value that is stored at key in settings, subject toapplication-level validation/mapping.
	settings		# a GSettings object
	key		# the key to get the value for
	mapping		#  the function to map the value in thesettings database to the value used by the application. 
	return:		#  the result, which may be NULL .  
void g_settings_bind (GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags);	# Create a binding between the key in the settings objectand the property property of object.
	settings		# a GSettings object
	key		# the key to bind
	object		#  a GObject . 
	property	# the name of the property to bind
	flags		# flags for the binding
void g_settings_bind_with_mapping (GSettings *settings, const gchar *key, gpointer object, const gchar *property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy);	# Create a binding between the key in the settings objectand the property property of object.
	settings		# a GSettings object
	key		# the key to bind
	object		#  a GObject . 
	set_mapping		# a function that gets called to convert valuesfrom objectto settings, or NULL to use the default GIO mapping
	user_data		# data that gets passed to get_mappingand set_mapping
	destroy		# GDestroyNotify function for user_data
void g_settings_bind_writable (GSettings *settings, const gchar *key, gpointer object, const gchar *property, gboolean inverted);	# Create a binding between the writability of key in thesettings object and the property property of object.The property must be boolean; "sensitive" or "visible"properties of widgets are the most likely candidates.
	settings		# a GSettings object
	key		# the key to bind
	object		# a GObject . 
void g_settings_unbind (gpointer object, const gchar *property);	# Removes an existing binding for property on object.
	object		#  the object. 
GVariant  *<span class="c_punctuation">( *GSettingsBindSetMapping<span class="c_punctuation">) (const GValue *value, const GVariantType *expected_type, gpointer user_data);	# The type for the function that is used to convert an object propertyvalue to a GVariant for storing it in GSettings .
	value		# a GValue containing the property value to map
	expected_type		# the GVariantType to create
	user_data		# user data that was specified when the binding was created
	return:		#  a new GVariant holding the data from value,or NULL in case of an error 
gboolean <span class="c_punctuation">( *GSettingsBindGetMapping<span class="c_punctuation">) (GValue *value, GVariant *variant, gpointer user_data);	# The type for the function that is used to convert from GSettings toan object property. The value is already initialized to hold valuesof the appropriate type.
	value		# return location for the property value
	variant		# the GVariant 
	user_data		# user data that was specified when the binding was created
	return:		#  TRUE if the conversion succeeded, FALSE in case of an error 
GAction  *g_settings_create_action (GSettings *settings, const gchar *key);	# Creates a GAction corresponding to a given GSettings key.
	settings		# a GSettings 
	key		# the name of a key in settings
	return:		#  a new GAction .  
GSettingsBackend  *g_settings_backend_get_default (void );	# Returns the default GSettingsBackend . It is possible to overridethe default by setting the GSETTINGS_BACKEND environment variableto the name of a settings backend.
	return:		#  the default GSettingsBackend .  
void g_settings_backend_changed (GSettingsBackend *backend, const gchar *key, gpointer origin_tag);	# Signals that a single key has possibly changed. Backendimplementations should call this if a key has possibly changed itsvalue.
	backend		# a GSettingsBackend implementation
	key		# the name of the key
	origin_tag		# the origin tag
void g_settings_backend_path_changed (GSettingsBackend *backend, const gchar *path, gpointer origin_tag);	# Signals that all keys below a given path may have possibly changed.Backend implementations should call this if an entire path of keyshave possibly changed their values.
	backend		# a GSettingsBackend implementation
	path		# the path containing the changes
	origin_tag		# the origin tag
void g_settings_backend_keys_changed (GSettingsBackend *backend, const gchar *path, gchar const * const *items, gpointer origin_tag);	# Signals that a list of keys have possibly changed. Backendimplementations should call this if keys have possibly changed theirvalues.
	backend		# a GSettingsBackend implementation
	path		# the path containing the changes
	items		#  the NULL -terminated list of changed keys. 
void g_settings_backend_path_writable_changed (GSettingsBackend *backend, const gchar *path);	# Signals that the writability of all keys below a given path may havechanged.
	backend		# a GSettingsBackend implementation
	path		# the name of the path
void g_settings_backend_writable_changed (GSettingsBackend *backend, const gchar *key);	# Signals that the writability of a single key has possibly changed.
	backend		# a GSettingsBackend implementation
	key		# the name of the key
void g_settings_backend_changed_tree (GSettingsBackend *backend, GTree *tree, gpointer origin_tag);	# This call is a convenience wrapper. It gets the list of changes fromtree, computes the longest common prefix and callsg_settings_backend_changed() .
	backend		# a GSettingsBackend implementation
	tree		# a GTree containing the changes
	origin_tag		# the origin tag
void g_settings_backend_flatten_tree (GTree *tree, gchar **path, const gchar ***keys, GVariant ***values);	# Calculate the longest common prefix of all keys in a tree and writeout an array of the key names relative to that prefix and,optionally, the value to store at each of those keys.
	tree		# a GTree containing the changes
	path		#  the location to save the path. 
GSettingsBackend  *g_keyfile_settings_backend_new (const gchar *filename, const gchar *root_path, const gchar *root_group);	# Creates a keyfile-backed GSettingsBackend .
	filename		# the filename of the keyfile
	root_path		# the path under which all settings keys appear
	root_group		#  the group name corresponding toroot_path, or NULL . 
	return:		#  a keyfile-backed GSettingsBackend .  
GSettingsBackend  *g_memory_settings_backend_new (void );	# Creates a memory-backed GSettingsBackend .
	return:		#  a newly created GSettingsBackend .  
GSettingsBackend  *g_null_settings_backend_new (void );	# Creates a readonly GSettingsBackend .
	return:		#  a newly created GSettingsBackend .  
GSettingsSchemaSource  *g_settings_schema_source_get_default (void );	# Gets the default system schema source.
	return:		#  the default schema source.  
GSettingsSchemaSource  *g_settings_schema_source_ref (GSettingsSchemaSource *source);	# Increase the reference count of source, returning a new reference.
	source		# a GSettingsSchemaSource 
	return:		#  a new reference to source 
void g_settings_schema_source_unref (GSettingsSchemaSource *source);	# Decrease the reference count of source, possibly freeing it.
	source		# a GSettingsSchemaSource 
GSettingsSchemaSource  *g_settings_schema_source_new_from_directory (const gchar *directory, GSettingsSchemaSource *parent, gboolean trusted, GError **error);	# Attempts to create a new schema source corresponding to the contentsof the given directory.
	directory		#  the filename of a directory. 
	error		# a pointer to a GError pointer set to NULL , or NULL 
void g_settings_schema_source_list_schemas (GSettingsSchemaSource *source, gboolean recursive, gchar ***non_relocatable, gchar ***relocatable);	# Lists the schemas in a given source.
	source		# a GSettingsSchemaSource 
	recursive		# if we should recurse
	non_relocatable		#  thelist of non-relocatable schemas. 
GSettingsSchema  *g_settings_schema_source_lookup (GSettingsSchemaSource *source, const gchar *schema_id, gboolean recursive);	# Looks up a schema with the identifier schema_id in source.
	source		# a GSettingsSchemaSource 
	schema_id		# a schema ID
	recursive		# TRUE if the lookup should be recursive
	return:		#  a new GSettingsSchema .  
GSettingsSchema  *g_settings_schema_ref (GSettingsSchema *schema);	# Increase the reference count of schema, returning a new reference.
	schema		# a GSettingsSchema 
	return:		#  a new reference to schema 
void g_settings_schema_unref (GSettingsSchema *schema);	# Decrease the reference count of schema, possibly freeing it.
	schema		# a GSettingsSchema 
gchar  *g_settings_schema_get_id (GSettingsSchema *schema);	# Get the ID of schema.
	schema		# a GSettingsSchema 
	return:		#  the ID.  
gchar  *g_settings_schema_get_path (GSettingsSchema *schema);	# Gets the path associated with schema, or NULL .
	schema		# a GSettingsSchema 
	return:		#  the path of the schema, or NULL .  
gboolean g_settings_schema_has_key (GSettingsSchema *schema, const gchar *name);	# Checks if schema has a key named name.
	schema		# a GSettingsSchema 
	name		# the name of a key
	return:		#  TRUE if such a key exists 
GSettingsSchemaKey  *g_settings_schema_get_key (GSettingsSchema *schema, const gchar *name);	# Gets the key named name from schema.
	schema		# a GSettingsSchema 
	name		# the name of a key
	return:		#  the GSettingsSchemaKey for name.  
GSettingsSchemaKey  *g_settings_schema_key_ref (GSettingsSchemaKey *key);	# Increase the reference count of key, returning a new reference.
	key		# a GSettingsSchemaKey 
	return:		#  a new reference to key 
void g_settings_schema_key_unref (GSettingsSchemaKey *key);	# Decrease the reference count of key, possibly freeing it.
	key		# a GSettingsSchemaKey 
gchar  **g_settings_schema_list_children (GSettingsSchema *schema);	# Gets the list of children in schema.
	schema		# a GSettingsSchema 
	return:		#  a list of the children on settings.  
gchar  **g_settings_schema_list_keys (GSettingsSchema *schema);	# Introspects the list of keys on schema.
	schema		# a GSettingsSchema 
	return:		#  a list of the keys onschema.  
GVariantType  *g_settings_schema_key_get_value_type (GSettingsSchemaKey *key);	# Gets the GVariantType of key.
	key		# a GSettingsSchemaKey 
	return:		#  the type of key.  
GVariant  *g_settings_schema_key_get_default_value (GSettingsSchemaKey *key);	# Gets the default value for key.
	key		# a GSettingsSchemaKey 
	return:		#  the default value for the key.  
GVariant  *g_settings_schema_key_get_range (GSettingsSchemaKey *key);	# Queries the range of a key.
	key		# a GSettingsSchemaKey 
	return:		#  a GVariant describing the range.  
gboolean g_settings_schema_key_range_check (GSettingsSchemaKey *key, GVariant *value);	# Checks if the given value is of the correct type and within thepermitted range for key.
	key		# a GSettingsSchemaKey 
	value		# the value to check
	return:		#  TRUE if valueis valid for key 
gchar  *g_settings_schema_key_get_name (GSettingsSchemaKey *key);	# Gets the name of key.
	key		# a GSettingsSchemaKey 
	return:		#  the name of key. 
gchar  *g_settings_schema_key_get_summary (GSettingsSchemaKey *key);	# Gets the summary for key.
	key		# a GSettingsSchemaKey 
	return:		#  the summary for key, or NULL  
gchar  *g_settings_schema_key_get_description (GSettingsSchemaKey *key);	# Gets the description for key.
	key		# a GSettingsSchemaKey 
	return:		#  the description for key, or NULL  
GResource  *g_resource_load (const gchar *filename, GError **error);	# Loads a binary resource bundle and creates a GResource representation of it, allowingyou to query it for data.
	filename		#  the path of a filename to load, in the GLib filename encoding. 
	return:		#  a new GResource , or NULL on error.  
GResource  *g_resource_new_from_data (GBytes *data, GError **error);	# Creates a GResource from a reference to the binary resource bundle.This will keep a reference to data while the resource lives, sothe data should not be modified or freed.
	data		# A GBytes 
	error		# return location for a GError , or NULL 
	return:		#  a new GResource , or NULL on error.  
GResource  *g_resource_ref (GResource *resource);	# Atomically increments the reference count of resource by one. Thisfunction is MT-safe and may be called from any thread.
	resource		# A GResource 
	return:		#  The passed in GResource  
void g_resource_unref (GResource *resource);	# Atomically decrements the reference count of resource by one. If thereference count drops to 0, all memory allocated by the resource isreleased. This function is MT-safe and may be called from anythread.
	resource		# A GResource 
GBytes  *g_resource_lookup_data (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);	# Looks for a file at the specified path in the resource andreturns a GBytes that lets you directly access the data inmemory.
	resource		# A GResource 
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	error		# return location for a GError , or NULL 
	return:		#  GBytes or NULL on error.Free the returned object with g_bytes_unref() .  
GInputStream  *g_resource_open_stream (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);	# Looks for a file at the specified path in the resource andreturns a GInputStream that lets you read the data.
	resource		# A GResource 
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	error		# return location for a GError , or NULL 
	return:		#  GInputStream or NULL on error.Free the returned object with g_object_unref() .  
char  **g_resource_enumerate_children (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, GError **error);	# Returns all the names of children at the specified path in the resource.The return result is a NULL terminated list of strings which shouldbe released with g_strfreev() .
	resource		# A GResource 
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	error		# return location for a GError , or NULL 
	return:		#  an array of constant strings.  
gboolean g_resource_get_info (GResource *resource, const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error);	# Looks for a file at the specified path in the resource andif found returns information about it.
	resource		# A GResource 
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	size		#  a location to place the length of the contents of the file,or NULL if the length is not needed. 
	return:		#  TRUE if the file was found. FALSE if there were errors 
void g_static_resource_init (GStaticResource *static_resource);	# Initializes a GResource from static data using aGStaticResource.
	static_resource		# pointer to a static GStaticResource 
void g_static_resource_fini (GStaticResource *static_resource);	# Finalized a GResource initialized by g_static_resource_init() .
	static_resource		# pointer to a static GStaticResource 
GResource  *g_static_resource_get_resource (GStaticResource *static_resource);	# Gets the GResource that was registered by a call to g_static_resource_init() .
	static_resource		# pointer to a static GStaticResource 
	return:		#  a GResource .  
void g_resources_register (GResource *resource);	# Registers the resource with the process-global set of resources.Once a resource is registered the files in it can be accessedwith the global resource lookup functions like g_resources_lookup_data() .
	resource		# A GResource 
void g_resources_unregister (GResource *resource);	# Unregisters the resource from the process-global set of resources.
	resource		# A GResource 
GBytes  *g_resources_lookup_data (const char *path, GResourceLookupFlags lookup_flags, GError **error);	# Looks for a file at the specified path in the set ofglobally registered resources and returns a GBytes thatlets you directly access the data in memory.
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	error		# return location for a GError , or NULL 
	return:		#  GBytes or NULL on error.Free the returned object with g_bytes_unref() .  
GInputStream  *g_resources_open_stream (const char *path, GResourceLookupFlags lookup_flags, GError **error);	# Looks for a file at the specified path in the set ofglobally registered resources and returns a GInputStream that lets you read the data.
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	error		# return location for a GError , or NULL 
	return:		#  GInputStream or NULL on error.Free the returned object with g_object_unref() .  
char  **g_resources_enumerate_children (const char *path, GResourceLookupFlags lookup_flags, GError **error);	# Returns all the names of children at the specified path in the set ofglobally registered resources.The return result is a NULL terminated list of strings which shouldbe released with g_strfreev() .
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	error		# return location for a GError , or NULL 
	return:		#  an array of constant strings.  
gboolean g_resources_get_info (const char *path, GResourceLookupFlags lookup_flags, gsize *size, guint32 *flags, GError **error);	# Looks for a file at the specified path in the set ofglobally registered resources and if found returns information about it.
	path		# A pathname inside the resource
	lookup_flags		# A GResourceLookupFlags 
	size		#  a location to place the length of the contents of the file,or NULL if the length is not needed. 
	return:		#  TRUE if the file was found. FALSE if there were errors 
gboolean g_permission_get_allowed (GPermission *permission);	# Gets the value of the 'allowed' property. This property is TRUE ifthe caller currently has permission to perform the action thatpermission represents the permission to perform.
	permission		# a GPermission instance
	return:		#  the value of the 'allowed' property 
gboolean g_permission_get_can_acquire (GPermission *permission);	# Gets the value of the 'can-acquire' property. This property is TRUE if it is generally possible to acquire the permission by callingg_permission_acquire() .
	permission		# a GPermission instance
	return:		#  the value of the 'can-acquire' property 
gboolean g_permission_get_can_release (GPermission *permission);	# Gets the value of the 'can-release' property. This property is TRUE if it is generally possible to release the permission by callingg_permission_release() .
	permission		# a GPermission instance
	return:		#  the value of the 'can-release' property 
gboolean g_permission_acquire (GPermission *permission, GCancellable *cancellable, GError **error);	# Attempts to acquire the permission represented by permission.
	permission		# a GPermission instance
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE if the permission was successfully acquired 
void g_permission_acquire_async (GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Attempts to acquire the permission represented by permission.
	permission		# a GPermission instance
	cancellable		#  a GCancellable , or NULL . 
	user_data		# the user data to pass to callback
gboolean g_permission_acquire_finish (GPermission *permission, GAsyncResult *result, GError **error);	# Collects the result of attempting to acquire the permissionrepresented by permission.
	permission		# a GPermission instance
	result		# the GAsyncResult given to the GAsyncReadyCallback 
	error		# a pointer to a NULL GError , or NULL 
	return:		#  TRUE if the permission was successfully acquired 
gboolean g_permission_release (GPermission *permission, GCancellable *cancellable, GError **error);	# Attempts to release the permission represented by permission.
	permission		# a GPermission instance
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE if the permission was successfully released 
void g_permission_release_async (GPermission *permission, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);	# Attempts to release the permission represented by permission.
	permission		# a GPermission instance
	cancellable		#  a GCancellable , or NULL . 
	user_data		# the user data to pass to callback
gboolean g_permission_release_finish (GPermission *permission, GAsyncResult *result, GError **error);	# Collects the result of attempting to release the permissionrepresented by permission.
	permission		# a GPermission instance
	result		# the GAsyncResult given to the GAsyncReadyCallback 
	error		# a pointer to a NULL GError , or NULL 
	return:		#  TRUE if the permission was successfully released 
void g_permission_impl_update (GPermission *permission, gboolean allowed, gboolean can_acquire, gboolean can_release);	# This function is called by the GPermission implementation to updatethe properties of the permission. You should never call thisfunction except from a GPermission implementation.
	permission		# a GPermission instance
	allowed		# the new value for the 'allowed' property
	can_acquire		# the new value for the 'can-acquire' property
	can_release		# the new value for the 'can-release' property
GPermission  *g_simple_permission_new (gboolean allowed);	#创建对象:GPermission instance that represents an action that iseither always or never allowed.
	allowed		# TRUE if the action is allowed
	return:		#  the GSimplePermission , as a GPermission  
GType g_list_model_get_item_type (GListModel *list);	# Gets the type of the items in list. All items returned fromg_list_model_get_type() are of that type or a subtype, or are animplementation of that interface.
	list		# a GListModel 
	return:		#  the GType of the items contained in list. 
guint g_list_model_get_n_items (GListModel *list);	# Gets the number of items in list.
	list		# a GListModel 
	return:		#  the number of items in list. 
gpointer g_list_model_get_item (GListModel *list, guint position);	# Get the item at position. If position is greater than the number ofitems in list, NULL is returned.
	list		# a GListModel 
	position		# the position of the item to fetch
	return:		#  the item at position.  
GObject  *g_list_model_get_object (GListModel *list, guint position);	# Get the item at position. If position is greater than the number ofitems in list, NULL is returned.
	list		# a GListModel 
	position		# the position of the item to fetch
	return:		#  the object at position.  
void g_list_model_items_changed (GListModel *list, guint position, guint removed, guint added);	# Emits the “items-changed” signal on list.
	list		# a GListModel 
	position		# the position at which listchanged
	removed		# the number of items removed
	added		# the number of items added
GListStore  *g_list_store_new (GType item_type);	#创建对象:GListStore with items of type item_type. item_typemust be a subclass of GObject .
	item_type		# the GType of items in the list
	return:		#  a new GListStore  
void g_list_store_insert (GListStore *store, guint position, gpointer item);	# Inserts item into store at position. item must be of type“item-type” or derived from it. position must be smallerthan the length of the list, or equal to it to append.
	store		# a GListStore 
	position		# the position at which to insert the new item
	item		#  the new item. 
guint g_list_store_insert_sorted (GListStore *store, gpointer item, GCompareDataFunc compare_func, gpointer user_data);	# Inserts item into store at a position to be determined by thecompare_func.
	store		# a GListStore 
	item		#  the new item. 
	return:		#  the position at which itemwas inserted 
void g_list_store_append (GListStore *store, gpointer item);	# Appends item to store. item must be of type “item-type” .
	store		# a GListStore 
	item		#  the new item. 
void g_list_store_remove (GListStore *store, guint position);	# Removes the item from store that is at position. position must besmaller than the current length of the list.
	store		# a GListStore 
	position		# the position of the item that is to be removed
void g_list_store_remove_all (GListStore *store);	# Removes all items from store.
	store		# a GListStore 
void g_list_store_splice (GListStore *store, guint position, guint n_removals, gpointer *additions, guint n_additions);	# Changes store by removing n_removals items and adding n_additionsitems to it. additions must contain n_additions items of type“item-type” . NULL is not permitted.
	store		# a GListStore 
	position		# the position at which to make the change
	n_removals		# the number of items to remove
	additions		#  the items to add. 
void g_list_store_sort (GListStore *store, GCompareDataFunc compare_func, gpointer user_data);	# Sort the items in store according to compare_func.
	store		# a GListStore 
	compare_func		#  pairwise comparison function for sorting. 


GWin32RegistrySubkeyIter  *g_win32_registry_subkey_iter_copy (const GWin32RegistrySubkeyIter *iter);	# Creates a dynamically-allocated copy of an iterator. Dynamically-allocatedstate of the iterator is duplicated too.
	iter		# an iterator
	return:		#  a copy of the iter,free with g_win32_registry_subkey_iter_free() .  
void g_win32_registry_subkey_iter_free (GWin32RegistrySubkeyIter *iter);	# Free an iterator allocated on the heap. For iterators that are allocatedon the stack use g_win32_registry_subkey_iter_clear() instead.
	iter		# a dynamically-allocated iterator
void g_win32_registry_subkey_iter_assign (GWin32RegistrySubkeyIter *iter, const GWin32RegistrySubkeyIter *other);	# Assigns the value of other to iter. This functionis not useful in applications, because iterators can be assignedwith GWin32RegistrySubkeyIter i = j;. Thefunction is used by language bindings.
	iter		# a GWin32RegistrySubkeyIter 
	other		# another GWin32RegistrySubkeyIter 
GWin32RegistryValueIter  *g_win32_registry_value_iter_copy (const GWin32RegistryValueIter *iter);	# Creates a dynamically-allocated copy of an iterator. Dynamically-allocatedstate of the iterator is duplicated too.
	iter		# an iterator
	return:		#  a copy of the iter,free with g_win32_registry_value_iter_free() .  
void g_win32_registry_value_iter_free (GWin32RegistryValueIter *iter);	# Free an iterator allocated on the heap. For iterators that are allocatedon the stack use g_win32_registry_value_iter_clear() instead.
	iter		# a dynamically-allocated iterator
void g_win32_registry_value_iter_assign (GWin32RegistryValueIter *iter, const GWin32RegistryValueIter *other);	# Assigns the value of other to iter. This functionis not useful in applications, because iterators can be assignedwith GWin32RegistryValueIter i = j;. Thefunction is used by language bindings.
	iter		# a GWin32RegistryValueIter 
	other		# another GWin32RegistryValueIter 
GWin32RegistryKey  *g_win32_registry_key_new (const gchar *path, GError **error);	# Creates an object that represents a registry key specified by path.path must start with one of the following pre-defined names:
	path		# absolute full name of a key to open (in UTF-8)
	error		#  a pointer to a NULL GError , or NULL . 
	return:		#  a GWin32RegistryKey or NULL if can'tbe opened. Free with g_object_unref() .  
GWin32RegistryKey  *g_win32_registry_key_new_w (const gunichar2 *path, GError **error);	# Creates an object that represents a registry key specified by path.path must start with one of the following pre-defined names:
	path		#  absolute full name of a key to open (in UTF-16). 
	return:		#  a GWin32RegistryKey or NULL if can'tbe opened. Free with g_object_unref() .  
GWin32RegistryKey  *g_win32_registry_key_get_child (GWin32RegistryKey *key, const gchar *subkey, GError **error);	# Opens a subkey of the key.
	key		#  a parent GWin32RegistryKey . 
	return:		#  a GWin32RegistryKey or NULL if can't be opened. Freewith g_object_unref() .  
GWin32RegistryKey  *g_win32_registry_key_get_child_w (GWin32RegistryKey *key, const gunichar2 *subkey, GError **error);	# Opens a subkey of the key.
	key		#  a parent GWin32RegistryKey . 
	return:		#  a GWin32RegistryKey or NULL if can't be opened. Freewith g_object_unref() .  
gboolean g_win32_registry_subkey_iter_init (GWin32RegistrySubkeyIter *iter, GWin32RegistryKey *key, GError **error);	# Initialises (without allocating) a GWin32RegistrySubkeyIter . iter may becompletely uninitialised prior to this call; its old value isignored.
	iter		#  a pointer to a GWin32RegistrySubkeyIter . 
	return:		#  TRUE if iterator was initialized successfully, FALSE on error. 
void g_win32_registry_subkey_iter_clear (GWin32RegistrySubkeyIter *iter);	# Frees internal buffers of a GWin32RegistrySubkeyIter .
	iter		#  a GWin32RegistrySubkeyIter . 
gsize g_win32_registry_subkey_iter_n_subkeys (GWin32RegistrySubkeyIter *iter);	# Queries the number of subkeys items in the key that we areiterating over. This is the total number of subkeys -- not the numberof items remaining.
	iter		#  a GWin32RegistrySubkeyIter . 
	return:		#  the number of subkeys in the key 
gboolean g_win32_registry_subkey_iter_next (GWin32RegistrySubkeyIter *iter, gboolean skip_errors, GError **error);	# Moves iterator to the next subkey.Enumeration errors can be ignored if skip_errors is TRUE 
	iter		#  a GWin32RegistrySubkeyIter . 
	return:		#  TRUE if next subkey info was retrieved, FALSE otherwise. 
gboolean g_win32_registry_subkey_iter_get_name (GWin32RegistrySubkeyIter *iter, gchar **subkey_name, gsize *subkey_name_len, GError **error);	# Gets the name of the subkey at the iter potision.
	iter		#  a GWin32RegistrySubkeyIter . 
	return:		#  TRUE if the name was retrieved, FALSE otherwise. 
gboolean g_win32_registry_subkey_iter_get_name_w (GWin32RegistrySubkeyIter *iter, gunichar2 **subkey_name, gsize *subkey_name_len, GError **error);	# Same as g_win32_registry_subkey_iter_get_next(), but outputs UTF-16-encodeddata, without converting it to UTF-8 first.
	iter		#  a GWin32RegistrySubkeyIter . 
	return:		#  TRUE if the name was retrieved, FALSE otherwise. 
gboolean g_win32_registry_value_iter_init (GWin32RegistryValueIter *iter, GWin32RegistryKey *key, GError **error);	# Initialises (without allocating) a GWin32RegistryValueIter . iter may becompletely uninitialised prior to this call; its old value isignored.
	iter		#  a pointer to a GWin32RegistryValueIter . 
	return:		#  TRUE if iterator was initialized successfully, FALSE on error. 
void g_win32_registry_value_iter_clear (GWin32RegistryValueIter *iter);	# Frees internal buffers of a GWin32RegistryValueIter .
	iter		#  a GWin32RegistryValueIter . 
gsize g_win32_registry_value_iter_n_values (GWin32RegistryValueIter *iter);	# Queries the number of values items in the key that we areiterating over. This is the total number of values -- not the numberof items remaining.
	iter		#  a GWin32RegistryValueIter . 
	return:		#  the number of values in the key 
gboolean g_win32_registry_value_iter_next (GWin32RegistryValueIter *iter, gboolean skip_errors, GError **error);	# Advances iterator to the next value in the key. If no more values remain thenFALSE is returned.Enumeration errors can be ignored if skip_errors is TRUE 
	iter		#  a GWin32RegistryValueIter . 
	return:		#  TRUE if next value info was retrieved, FALSE otherwise. 
gboolean g_win32_registry_value_iter_get_value_type (GWin32RegistryValueIter *iter, GWin32RegistryValueType *value_type, GError **error);	# Stores the type of the value currently being iterated over in value_type.
	iter		#  a GWin32RegistryValueIter . 
	return:		#  TRUE if value type was retrieved, FALSE otherwise. 
gboolean g_win32_registry_value_iter_get_name (GWin32RegistryValueIter *iter, gchar **value_name, gsize *value_name_len, GError **error);	# Stores the name of the value currently being iterated over in value_name,and its length - in value_name_len (if not NULL ).
	iter		#  a GWin32RegistryValueIter . 
	return:		#  TRUE if value name was retrieved, FALSE otherwise. 
gboolean g_win32_registry_value_iter_get_name_w (GWin32RegistryValueIter *iter, gunichar2 **value_name, gsize *value_name_len, GError **error);	# Stores the name of the value currently being iterated over in value_name,and its length - in value_name (if not NULL ).
	iter		#  a GWin32RegistryValueIter . 
	return:		#  TRUE if value name was retrieved, FALSE otherwise. 
gboolean g_win32_registry_value_iter_get_data (GWin32RegistryValueIter *iter, gboolean auto_expand, gpointer *value_data, gsize *value_data_size, GError **error);	# Stores the data of the value currently being iterated over in value_data,and its length - in value_data_len (if not NULL ).
	iter		#  a GWin32RegistryValueIter . 
	return:		#  TRUE if value data was retrieved, FALSE otherwise. 
gboolean g_win32_registry_value_iter_get_data_w (GWin32RegistryValueIter *iter, gboolean auto_expand, gpointer *value_data, gsize *value_data_size, GError **error);	# Stores the data of the value currently being iterated over in value_data,and its length - in value_data_len (if not NULL ).
	iter		#  a GWin32RegistryValueIter . 
	return:		#  TRUE if value data was retrieved, FALSE otherwise. 
gboolean g_win32_registry_key_get_value (GWin32RegistryKey *key, gboolean auto_expand, const gchar *value_name, GWin32RegistryValueType *value_type, gpointer *value_data, gsize *value_data_size, GError **error);	# Get data from a value of a key. String data is guaranteed to beappropriately terminated and will be in UTF-8.
	key		#  a GWin32RegistryKey . 
	value_name		#  name of the value to get (in UTF-8).Empty string means the '(Default)' value. 
	return:		#  TRUE on success, FALSE on failure. 
gboolean g_win32_registry_key_get_value_w (GWin32RegistryKey *key, gboolean auto_expand, const gunichar2 *value_name, GWin32RegistryValueType *value_type, gpointer *value_data, gsize *value_data_size, GError **error);	# Get data from a value of a key.
	key		#  a GWin32RegistryKey . 
	value_name		#  name of the value to get (in UTF-16).Empty string means the '(Default)' value. 
	return:		#  TRUE on success, FALSE on failure. 
gchar  *g_win32_registry_key_get_path (GWin32RegistryKey *key);	# Get full path to the key
	key		#  a GWin32RegistryKey . 
	return:		#  a full path to the key (in UTF-8),or NULL if it can't be converted to UTF-8.  
gunichar2  *g_win32_registry_key_get_path_w (GWin32RegistryKey *key);	# Get full path to the key
	key		#  a GWin32RegistryKey . 
	return:		#  a full path to the key (in UTF-16).  
void <span class="c_punctuation">( *GWin32RegistryKeyWatchCallbackFunc<span class="c_punctuation">) (GWin32RegistryKey *key, gpointer user_data);	# The type of the callback passed to g_win32_registry_key_watch() .
	key		# A GWin32RegistryKey that was watched.
	user_data		# The user_datagpointer passed to 
gboolean g_win32_registry_key_watch (GWin32RegistryKey *key, gboolean watch_children, GWin32RegistryKeyWatcherFlags watch_flags, GWin32RegistryKeyWatchCallbackFunc callback, gpointer user_data, GError **error);	# Puts key under a watch.
	key		#  a GWin32RegistryKey . 
	watch_flags		#  specifies the types of changes to watch for. 
	return:		#  TRUE on success, FALSE on failure. 
gboolean g_win32_registry_key_has_changed (GWin32RegistryKey *key);	# Check the key's status indicator.
	key		#  a GWin32RegistryKey . 
	return:		#  TRUE if the keywas put under watch at some point and has changedsince then, FALSE if it either wasn't changed or wasn't watched at all. 
void g_win32_registry_key_erase_change_indicator (GWin32RegistryKey *key);	# Erases change indicator of the key.
	key		#  a GWin32RegistryKey . 


gboolean g_application_id_is_valid (const gchar *application_id);	# Checks if application_id is a valid application identifier.
	application_id		# a potential application identifier
	return:		#  TRUE if application_idis valid 
GApplication  *g_application_new (const gchar *application_id, GApplicationFlags flags);	#创建对象:GApplication instance.
	application_id		#  the application id. 
	return:		#  a new GApplication instance 
gchar  *g_application_get_application_id (GApplication *application);	# Gets the unique identifier for application.
	application		# a GApplication 
	return:		#  the identifier for application, owned by application 
void g_application_set_application_id (GApplication *application, const gchar *application_id);	# Sets the unique identifier for application.
	application		# a GApplication 
	application_id		#  the identifier for application. 
guint g_application_get_inactivity_timeout (GApplication *application);	# Gets the current inactivity timeout for the application.
	application		# a GApplication 
	return:		#  the timeout, in milliseconds 
void g_application_set_inactivity_timeout (GApplication *application, guint inactivity_timeout);	# Sets the current inactivity timeout for the application.
	application		# a GApplication 
	inactivity_timeout		# the timeout, in milliseconds
GApplicationFlags g_application_get_flags (GApplication *application);	# Gets the flags for application.
	application		# a GApplication 
	return:		#  the flags for application 
void g_application_set_flags (GApplication *application, GApplicationFlags flags);	# Sets the flags for application.
	application		# a GApplication 
	flags		# the flags for application
gchar  *g_application_get_resource_base_path (GApplication *application);	# Gets the resource base path of application.
	application		# a GApplication 
	return:		#  the base resource path, if one is set.  
void g_application_set_resource_base_path (GApplication *application, const gchar *resource_path);	# Sets (or unsets) the base resource path of application.
	application		# a GApplication 
	resource_path		#  the resource path to use. 
GDBusConnection  *g_application_get_dbus_connection (GApplication *application);	# Gets the GDBusConnection being used by the application, or NULL .
	application		# a GApplication 
	return:		#  a GDBusConnection , or NULL .  
gchar  *g_application_get_dbus_object_path (GApplication *application);	# Gets the D-Bus object path being used by the application, or NULL .
	application		# a GApplication 
	return:		#  the object path, or NULL  
void g_application_set_action_group (GApplication *application, GActionGroup *action_group);	# g_application_set_action_group has been deprecated since version 2.32 and should not be used in newly-written code.
	application		# a GApplication 
	action_group		#  a GActionGroup , or NULL . 
gboolean g_application_get_is_registered (GApplication *application);	# Checks if application is registered.
	application		# a GApplication 
	return:		#  TRUE if applicationis registered 
gboolean g_application_get_is_remote (GApplication *application);	# Checks if application is remote.
	application		# a GApplication 
	return:		#  TRUE if applicationis remote 
gboolean g_application_register (GApplication *application, GCancellable *cancellable, GError **error);	# Attempts registration of the application.
	application		# a GApplication 
	cancellable		#  a GCancellable , or NULL . 
	return:		#  TRUE if registration succeeded 
void g_application_hold (GApplication *application);	# Increases the use count of application.
	application		# a GApplication 
void g_application_release (GApplication *application);	# Decrease the use count of application.
	application		# a GApplication 
void g_application_quit (GApplication *application);	# Immediately quits the application.
	application		# a GApplication 
void g_application_activate (GApplication *application);	# Activates the application.
	application		# a GApplication 
void g_application_open (GApplication *application, GFile **files, gint n_files, const gchar *hint);	# Opens the given files.
	application		# a GApplication 
	files		#  an array of GFiles to open. 
void g_application_send_notification (GApplication *application, const gchar *id, GNotification *notification);	# Sends a notification on behalf of application to the desktop shell.There is no guarantee that the notification is displayed immediately,or even at all.
	application		# a GApplication 
	id		#  id of the notification, or NULL . 
void g_application_withdraw_notification (GApplication *application, const gchar *id);	# Withdraws a notification that was sent withg_application_send_notification() .
	application		# a GApplication 
	id		# id of a previously sent notification
int g_application_run (GApplication *application, int argc, char **argv);	# Runs the application.
	application		# a GApplication 
	argc		# the argc from 
	argv		#  the argv from 
	return:		#  the exit status 
void g_application_add_main_option_entries (GApplication *application, const GOptionEntry *entries);	# Adds main option entries to be handled by application.
	application		# a GApplication 
	entries		# (array zero-terminated=1) (element-type GOptionEntry) aNULL -terminated list of GOptionEntrys 
void g_application_add_main_option (GApplication *application, const char *long_name, char short_name, GOptionFlags flags, GOptionArg arg, const char *description, const char *arg_description);	# Add an option to be handled by application.
	application		# the GApplication 
	long_name		# the long name of an option used to specify it in a commandline
	short_name		# the short name of an option
	flags		# flags from GOptionFlags 
	arg		# the type of the option, as a GOptionArg 
	description		# the description for the option in --help output
	arg_description		#  the placeholder to use for the extra argumentparsed by the option in --help output. 
void g_application_add_option_group (GApplication *application, GOptionGroup *group);	# Adds a GOptionGroup to the commandline handling of application.
	application		# the GApplication 
	group		#  a GOptionGroup . 
void g_application_set_default (GApplication *application);	# Sets or unsets the default application for the process, as returnedby g_application_get_default() .
	application		#  the application to set as default, or NULL . 
GApplication  *g_application_get_default (void );	# Returns the default GApplication instance for this process.
	return:		#  the default application for this process, or NULL .  
void g_application_mark_busy (GApplication *application);	# Increases the busy count of application.
	application		# a GApplication 
void g_application_unmark_busy (GApplication *application);	# Decreases the busy count of application.
	application		# a GApplication 
gboolean g_application_get_is_busy (GApplication *application);	# Gets the application's current busy state, as set throughg_application_mark_busy() or g_application_bind_busy_property() .
	application		# a GApplication 
	return:		#  TRUE if applicationis currenty marked as busy 
void g_application_bind_busy_property (GApplication *application, gpointer object, const gchar *property);	# Marks application as busy (see g_application_mark_busy() ) whileproperty on object is TRUE .
	application		# a GApplication 
	object		#  a GObject . 
void g_application_unbind_busy_property (GApplication *application, gpointer object, const gchar *property);	# Destroys a binding between property and the busy state ofapplication that was previously created withg_application_bind_busy_property() .
	application		# a GApplication 
	object		#  a GObject . 
gchar  **g_application_command_line_get_arguments (GApplicationCommandLine *cmdline, int *argc);	# Gets the list of arguments that was passed on the command line.
	cmdline		# a GApplicationCommandLine 
	argc		#  the length of the arguments array, or NULL . 
	return:		#  the string arraycontaining the arguments (the argv).  
gchar  *g_application_command_line_get_cwd (GApplicationCommandLine *cmdline);	# Gets the working directory of the command line invocation.The string may contain non-utf8 data.
	cmdline		# a GApplicationCommandLine 
	return:		#  the current directory, or NULL .  
gchar  * const *g_application_command_line_get_environ (GApplicationCommandLine *cmdline);	# Gets the contents of the 'environ' variable of the command lineinvocation, as would be returned by g_get_environ() , ie as aNULL -terminated list of strings in the form 'NAME=VALUE'.The strings may contain non-utf8 data.
	cmdline		# a GApplicationCommandLine 
	return:		#  the environmentstrings, or NULL if they were not sent.  
GVariantDict  *g_application_command_line_get_options_dict (GApplicationCommandLine *cmdline);	# Gets the options there were passed to g_application_command_line().
	cmdline		# a GApplicationCommandLine 
	return:		#  a GVariantDict with the options.  
GInputStream  *g_application_command_line_get_stdin (GApplicationCommandLine *cmdline);	# Gets the stdin of the invoking process.
	cmdline		# a GApplicationCommandLine 
	return:		#  a GInputStream for stdin.  
GFile  *g_application_command_line_create_file_for_arg (GApplicationCommandLine *cmdline, const gchar *arg);	# Creates a GFile corresponding to a filename that was given as partof the invocation of cmdline.
	cmdline		# a GApplicationCommandLine 
	arg		# an argument from cmdline
	return:		#  a new GFile .  
gchar  *g_application_command_line_getenv (GApplicationCommandLine *cmdline, const gchar *name);	# Gets the value of a particular environment variable of the commandline invocation, as would be returned by g_getenv() . The strings maycontain non-utf8 data.
	cmdline		# a GApplicationCommandLine 
	name		# the environment variable to get
	return:		#  the value of the variable, or NULL if unset or unsent 
gboolean g_application_command_line_get_is_remote (GApplicationCommandLine *cmdline);	# Determines if cmdline represents a remote invocation.
	cmdline		# a GApplicationCommandLine 
	return:		#  TRUE if the invocation was remote 
GVariant  *g_application_command_line_get_platform_data (GApplicationCommandLine *cmdline);	# Gets the platform data associated with the invocation of cmdline.
	cmdline		# GApplicationCommandLine 
	return:		#  the platform data, or NULL .  
void g_application_command_line_set_exit_status (GApplicationCommandLine *cmdline, int exit_status);	# Sets the exit status that will be used when the invoking processexits.
	cmdline		# a GApplicationCommandLine 
	exit_status		# the exit status
int g_application_command_line_get_exit_status (GApplicationCommandLine *cmdline);	# Gets the exit status of cmdline. Seeg_application_command_line_set_exit_status() for more information.
	cmdline		# a GApplicationCommandLine 
	return:		#  the exit status 
void g_application_command_line_print (GApplicationCommandLine *cmdline, const gchar *format, ...);	# Formats a message and prints it using the stdout print handler in theinvoking process.
	cmdline		# a GApplicationCommandLine 
	format		# a printf-style format string
	...		# arguments, as per format
void g_application_command_line_printerr (GApplicationCommandLine *cmdline, const gchar *format, ...);	# Formats a message and prints it using the stderr print handler in theinvoking process.
	cmdline		# a GApplicationCommandLine 
	format		# a printf-style format string
	...		# arguments, as per format
gchar  **g_action_group_list_actions (GActionGroup *action_group);	# Lists the actions contained within action_group.
	action_group		# a GActionGroup 
	return:		#  a NULL -terminated array of the names of theactions in the group.  
gboolean g_action_group_query_action (GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state);	# Queries all aspects of the named action within an action_group.
	action_group		# a GActionGroup 
	action_name		# the name of an action in the group
	enabled		#  if the action is presently enabled. 
	return:		#  TRUE if the action exists, else FALSE  
gboolean g_action_group_has_action (GActionGroup *action_group, const gchar *action_name);	# Checks if the named action exists within action_group.
	action_group		# a GActionGroup 
	action_name		# the name of the action to check for
	return:		#  whether the named action exists 
gboolean g_action_group_get_action_enabled (GActionGroup *action_group, const gchar *action_name);	# Checks if the named action within action_group is currently enabled.
	action_group		# a GActionGroup 
	action_name		# the name of the action to query
	return:		#  whether or not the action is currently enabled 
GVariantType  *g_action_group_get_action_parameter_type (GActionGroup *action_group, const gchar *action_name);	# Queries the type of the parameter that must be given when activatingthe named action within action_group.
	action_group		# a GActionGroup 
	action_name		# the name of the action to query
	return:		#  the parameter type.  
GVariantType  *g_action_group_get_action_state_type (GActionGroup *action_group, const gchar *action_name);	# Queries the type of the state of the named action withinaction_group.
	action_group		# a GActionGroup 
	action_name		# the name of the action to query
	return:		#  the state type, if the action is stateful.  
GVariant  *g_action_group_get_action_state_hint (GActionGroup *action_group, const gchar *action_name);	# Requests a hint about the valid range of values for the state of thenamed action within action_group.
	action_group		# a GActionGroup 
	action_name		# the name of the action to query
	return:		#  the state range hint.  
GVariant  *g_action_group_get_action_state (GActionGroup *action_group, const gchar *action_name);	# Queries the current state of the named action within action_group.
	action_group		# a GActionGroup 
	action_name		# the name of the action to query
	return:		#  the current state of the action.  
void g_action_group_change_action_state (GActionGroup *action_group, const gchar *action_name, GVariant *value);	# Request for the state of the named action within action_group to bechanged to value.
	action_group		# a GActionGroup 
	action_name		# the name of the action to request the change on
	value		# the new state
void g_action_group_activate_action (GActionGroup *action_group, const gchar *action_name, GVariant *parameter);	# Activate the named action within action_group.
	action_group		# a GActionGroup 
	action_name		# the name of the action to activate
	parameter		#  parameters to the activation. 
void g_action_group_action_added (GActionGroup *action_group, const gchar *action_name);	# Emits the “action-added” signal on action_group.
	action_group		# a GActionGroup 
	action_name		# the name of an action in the group
void g_action_group_action_removed (GActionGroup *action_group, const gchar *action_name);	# Emits the “action-removed” signal on action_group.
	action_group		# a GActionGroup 
	action_name		# the name of an action in the group
void g_action_group_action_enabled_changed (GActionGroup *action_group, const gchar *action_name, gboolean enabled);	# Emits the “action-enabled-changed” signal on action_group.
	action_group		# a GActionGroup 
	action_name		# the name of an action in the group
	enabled		# whether or not the action is now enabled
void g_action_group_action_state_changed (GActionGroup *action_group, const gchar *action_name, GVariant *state);	# Emits the “action-state-changed” signal on action_group.
	action_group		# a GActionGroup 
	action_name		# the name of an action in the group
	state		# the new state of the named action
GAction  *g_action_map_lookup_action (GActionMap *action_map, const gchar *action_name);	# Looks up the action with the name action_name in action_map.
	action_map		# a GActionMap 
	action_name		# the name of an action
	return:		#  a GAction , or NULL .  
void g_action_map_add_action_entries (GActionMap *action_map, const GActionEntry *entries, gint n_entries, gpointer user_data);	# A convenience function for creating multiple GSimpleAction instancesand adding them to a GActionMap .
	action_map		# a GActionMap 
	entries		#  a pointer tothe first item in an array of GActionEntry structs. 
	user_data		# the user data for signal connections
void g_action_map_add_action (GActionMap *action_map, GAction *action);	# Adds an action to the action_map.
	action_map		# a GActionMap 
	action		# a GAction 
void g_action_map_remove_action (GActionMap *action_map, const gchar *action_name);	# Removes the named action from the action map.
	action_map		# a GActionMap 
	action_name		# the name of the action
GSimpleActionGroup  *g_simple_action_group_new (void );	# Creates a new, empty, GSimpleActionGroup .
	return:		#  a new GSimpleActionGroup  
GAction  *g_simple_action_group_lookup (GSimpleActionGroup *simple, const gchar *action_name);	# g_simple_action_group_lookup has been deprecated since version 2.38 and should not be used in newly-written code.
	simple		# a GSimpleActionGroup 
	action_name		# the name of an action
	return:		#  a GAction , or NULL .  
void g_simple_action_group_insert (GSimpleActionGroup *simple, GAction *action);	# g_simple_action_group_insert has been deprecated since version 2.38 and should not be used in newly-written code.
	simple		# a GSimpleActionGroup 
	action		# a GAction 
void g_simple_action_group_remove (GSimpleActionGroup *simple, const gchar *action_name);	# g_simple_action_group_remove has been deprecated since version 2.38 and should not be used in newly-written code.
	simple		# a GSimpleActionGroup 
	action_name		# the name of the action
void g_simple_action_group_add_entries (GSimpleActionGroup *simple, const GActionEntry *entries, gint n_entries, gpointer user_data);	# g_simple_action_group_add_entries has been deprecated since version 2.38 and should not be used in newly-written code.
	simple		# a GSimpleActionGroup 
	entries		#  a pointer to the first item inan array of GActionEntry structs. 
gboolean g_action_name_is_valid (const gchar *action_name);	# Checks if action_name is valid.
	action_name		# an potential action name
	return:		#  TRUE if action_nameis valid 
gchar  *g_action_get_name (GAction *action);	# Queries the name of action.
	action		# a GAction 
	return:		#  the name of the action 
GVariantType  *g_action_get_parameter_type (GAction *action);	# Queries the type of the parameter that must be given when activatingaction.
	action		# a GAction 
	return:		#  the parameter type.  
GVariantType  *g_action_get_state_type (GAction *action);	# Queries the type of the state of action.
	action		# a GAction 
	return:		#  the state type, if the action is stateful.  
GVariant  *g_action_get_state_hint (GAction *action);	# Requests a hint about the valid range of values for the state ofaction.
	action		# a GAction 
	return:		#  the state range hint.  
gboolean g_action_get_enabled (GAction *action);	# Checks if action is currently enabled.
	action		# a GAction 
	return:		#  whether the action is enabled 
GVariant  *g_action_get_state (GAction *action);	# Queries the current state of action.
	action		# a GAction 
	return:		#  the current state of the action.  
void g_action_change_state (GAction *action, GVariant *value);	# Request for the state of action to be changed to value.
	action		# a GAction 
	value		# the new state
void g_action_activate (GAction *action, GVariant *parameter);	# Activates the action.
	action		# a GAction 
	parameter		#  the parameter to the activation. 
gboolean g_action_parse_detailed_name (const gchar *detailed_name, gchar **action_name, GVariant **target_value, GError **error);	# Parses a detailed action name into its separate name and targetcomponents.
	detailed_name		# a detailed action name
	action_name		#  the action name. 
	return:		#  TRUE if successful, else FALSE with errorset 
gchar  *g_action_print_detailed_name (const gchar *action_name, GVariant *target_value);	# Formats a detailed action name from action_name and target_value.
	action_name		# a valid action name
	target_value		#  a GVariant target value, or NULL . 
	return:		#  a detailed format string 
GSimpleAction  *g_simple_action_new (const gchar *name, const GVariantType *parameter_type);	#创建对象:action.
	name		# the name of the action
	parameter_type		#  the type of parameter to the activate function. 
	return:		#  a new GSimpleAction  
GSimpleAction  *g_simple_action_new_stateful (const gchar *name, const GVariantType *parameter_type, GVariant *state);	#创建对象:stateful action.
	name		# the name of the action
	parameter_type		#  the type of the parameter to the activate function. 
	return:		#  a new GSimpleAction  
void g_simple_action_set_enabled (GSimpleAction *simple, gboolean enabled);	# Sets the action as enabled or not.
	simple		# a GSimpleAction 
	enabled		# whether the action is enabled
void g_simple_action_set_state (GSimpleAction *simple, GVariant *value);	# Sets the state of the action.
	simple		# a GSimpleAction 
	value		# the new GVariant for the state
void g_simple_action_set_state_hint (GSimpleAction *simple, GVariant *state_hint);	# Sets the state hint for the action.
	simple		# a GSimpleAction 
	state_hint		#  a GVariant representing the state hint. 
GPropertyAction  *g_property_action_new (const gchar *name, gpointer object, const gchar *property_name);	# Creates a GAction corresponding to the value of propertyproperty_name on object.
	name		# the name of the action to create
	object		#  the object that has the propertyto wrap. 
	return:		#  a new GPropertyAction  
void g_remote_action_group_activate_action_full (GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data);	# Activates the remote action.
	remote		# a GDBusActionGroup 
	action_name		# the name of the action to activate
	parameter		#  the optional parameter to the activation. 
void g_remote_action_group_change_action_state_full (GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data);	# Changes the state of a remote action.
	remote		# a GRemoteActionGroup 
	action_name		# the name of the action to change the state of
	value		# the new requested value for the state
	platform_data		# the platform data to send
guint g_dbus_connection_export_action_group (GDBusConnection *connection, const gchar *object_path, GActionGroup *action_group, GError **error);	# Exports action_group on connection at object_path.
	connection		# a GDBusConnection 
	object_path		# a D-Bus object path
	action_group		# a GActionGroup 
	error		# a pointer to a NULL GError , or NULL 
	return:		#  the ID of the export (never zero), or 0 in case of failure 
void g_dbus_connection_unexport_action_group (GDBusConnection *connection, guint export_id);	# Reverses the effect of a previous call tog_dbus_connection_export_action_group() .
	connection		# a GDBusConnection 
	export_id		# the ID from 
GDBusActionGroup  *g_dbus_action_group_get (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path);	# Obtains a GDBusActionGroup for the action group which is exported atthe given bus_name and object_path.
	connection		# A GDBusConnection 
	bus_name		# the bus name which exports the action group
	object_path		# the object path at which the action group is exported
	return:		#  a GDBusActionGroup .  
gboolean g_menu_model_is_mutable (GMenuModel *model);	# Queries if model is mutable.
	model		# a GMenuModel 
	return:		#  TRUE if the model is mutable (ie: "items-changed" may beemitted). 
gint g_menu_model_get_n_items (GMenuModel *model);	# Query the number of items in model.
	model		# a GMenuModel 
	return:		#  the number of items 
GVariant  *g_menu_model_get_item_attribute_value (GMenuModel *model, gint item_index, const gchar *attribute, const GVariantType *expected_type);	# Queries the item at position item_index in model for the attributespecified by attribute.
	model		# a GMenuModel 
	item_index		# the index of the item
	attribute		# the attribute to query
	expected_type		#  the expected type of the attribute, orNULL . 
	return:		#  the value of the attribute.  
gboolean g_menu_model_get_item_attribute (GMenuModel *model, gint item_index, const gchar *attribute, const gchar *format_string, ...);	# Queries item at position item_index in model for the attributespecified by attribute.
	model		# a GMenuModel 
	item_index		# the index of the item
	attribute		# the attribute to query
	format_string		# a GVariant format string
	...		# positional parameters, as per format_string
	return:		#  TRUE if the named attribute was found with the expectedtype 
GMenuModel  *g_menu_model_get_item_link (GMenuModel *model, gint item_index, const gchar *link);	# Queries the item at position item_index in model for the linkspecified by link.
	model		# a GMenuModel 
	item_index		# the index of the item
	link		# the link to query
	return:		#  the linked GMenuModel , or NULL .  
GMenuAttributeIter  *g_menu_model_iterate_item_attributes (GMenuModel *model, gint item_index);	# Creates a GMenuAttributeIter to iterate over the attributes ofthe item at position item_index in model.
	model		# a GMenuModel 
	item_index		# the index of the item
	return:		#  a new GMenuAttributeIter .  
GMenuLinkIter  *g_menu_model_iterate_item_links (GMenuModel *model, gint item_index);	# Creates a GMenuLinkIter to iterate over the links of the item atposition item_index in model.
	model		# a GMenuModel 
	item_index		# the index of the item
	return:		#  a new GMenuLinkIter .  
void g_menu_model_items_changed (GMenuModel *model, gint position, gint removed, gint added);	# Requests emission of the “items-changed” signal on model.
	model		# a GMenuModel 
	position		# the position of the change
	removed		# the number of items removed
	added		# the number of items added
gboolean g_menu_attribute_iter_get_next (GMenuAttributeIter *iter, const gchar **out_name, GVariant **value);	# This function combines g_menu_attribute_iter_next() withg_menu_attribute_iter_get_name() and g_menu_attribute_iter_get_value() .
	iter		# a GMenuAttributeIter 
	out_name		#  the type of the attribute. 
	return:		#  TRUE on success, or FALSE if there is no additionalattribute 
gchar  *g_menu_attribute_iter_get_name (GMenuAttributeIter *iter);	# Gets the name of the attribute at the current iterator position, asa string.
	iter		# a GMenuAttributeIter 
	return:		#  the name of the attribute 
GVariant  *g_menu_attribute_iter_get_value (GMenuAttributeIter *iter);	# Gets the value of the attribute at the current iterator position.
	iter		# a GMenuAttributeIter 
	return:		#  the value of the current attribute.  
gboolean g_menu_attribute_iter_next (GMenuAttributeIter *iter);	# Attempts to advance the iterator to the next (possibly first)attribute.
	iter		# a GMenuAttributeIter 
	return:		#  TRUE on success, or FALSE when there are no more attributes 
gchar  *g_menu_link_iter_get_name (GMenuLinkIter *iter);	# Gets the name of the link at the current iterator position.
	iter		# a GMenuLinkIter 
	return:		#  the type of the link 
gboolean g_menu_link_iter_get_next (GMenuLinkIter *iter, const gchar **out_link, GMenuModel **value);	# This function combines g_menu_link_iter_next() withg_menu_link_iter_get_name() and g_menu_link_iter_get_value() .
	iter		# a GMenuLinkIter 
	out_link		#  the name of the link. 
	return:		#  TRUE on success, or FALSE if there is no additional link 
GMenuModel  *g_menu_link_iter_get_value (GMenuLinkIter *iter);	# Gets the linked GMenuModel at the current iterator position.
	iter		# a GMenuLinkIter 
	return:		#  the GMenuModel that is linked to.  
gboolean g_menu_link_iter_next (GMenuLinkIter *iter);	# Attempts to advance the iterator to the next (possibly first)link.
	iter		# a GMenuLinkIter 
	return:		#  TRUE on success, or FALSE when there are no more links 
GMenu  *g_menu_new (void );	#创建对象:GMenu .
	return:		#  a new GMenu  
void g_menu_freeze (GMenu *menu);	# Marks menu as frozen.
	menu		# a GMenu 
void g_menu_insert (GMenu *menu, gint position, const gchar *label, const gchar *detailed_action);	# Convenience function for inserting a normal menu item into menu.Combine g_menu_item_new() and g_menu_insert_item() for a more flexiblealternative.
	menu		# a GMenu 
	position		# the position at which to insert the item
	label		#  the section label, or NULL . 
void g_menu_prepend (GMenu *menu, const gchar *label, const gchar *detailed_action);	# Convenience function for prepending a normal menu item to the startof menu. Combine g_menu_item_new() and g_menu_insert_item() for a moreflexible alternative.
	menu		# a GMenu 
	label		#  the section label, or NULL . 
void g_menu_append (GMenu *menu, const gchar *label, const gchar *detailed_action);	# Convenience function for appending a normal menu item to the end ofmenu. Combine g_menu_item_new() and g_menu_insert_item() for a moreflexible alternative.
	menu		# a GMenu 
	label		#  the section label, or NULL . 
void g_menu_insert_item (GMenu *menu, gint position, GMenuItem *item);	# Inserts item into menu.
	menu		# a GMenu 
	position		# the position at which to insert the item
	item		# the GMenuItem to insert
void g_menu_append_item (GMenu *menu, GMenuItem *item);	# Appends item to the end of menu.
	menu		# a GMenu 
	item		# a GMenuItem to append
void g_menu_prepend_item (GMenu *menu, GMenuItem *item);	# Prepends item to the start of menu.
	menu		# a GMenu 
	item		# a GMenuItem to prepend
void g_menu_insert_section (GMenu *menu, gint position, const gchar *label, GMenuModel *section);	# Convenience function for inserting a section menu item into menu.Combine g_menu_item_new_section() and g_menu_insert_item() for a moreflexible alternative.
	menu		# a GMenu 
	position		# the position at which to insert the item
	label		#  the section label, or NULL . 
void g_menu_prepend_section (GMenu *menu, const gchar *label, GMenuModel *section);	# Convenience function for prepending a section menu item to the startof menu. Combine g_menu_item_new_section() and g_menu_insert_item() fora more flexible alternative.
	menu		# a GMenu 
	label		#  the section label, or NULL . 
void g_menu_append_section (GMenu *menu, const gchar *label, GMenuModel *section);	# Convenience function for appending a section menu item to the end ofmenu. Combine g_menu_item_new_section() and g_menu_insert_item() for amore flexible alternative.
	menu		# a GMenu 
	label		#  the section label, or NULL . 
void g_menu_append_submenu (GMenu *menu, const gchar *label, GMenuModel *submenu);	# Convenience function for appending a submenu menu item to the end ofmenu. Combine g_menu_item_new_submenu() and g_menu_insert_item() for amore flexible alternative.
	menu		# a GMenu 
	label		#  the section label, or NULL . 
void g_menu_insert_submenu (GMenu *menu, gint position, const gchar *label, GMenuModel *submenu);	# Convenience function for inserting a submenu menu item into menu.Combine g_menu_item_new_submenu() and g_menu_insert_item() for a moreflexible alternative.
	menu		# a GMenu 
	position		# the position at which to insert the item
	label		#  the section label, or NULL . 
void g_menu_prepend_submenu (GMenu *menu, const gchar *label, GMenuModel *submenu);	# Convenience function for prepending a submenu menu item to the startof menu. Combine g_menu_item_new_submenu() and g_menu_insert_item() fora more flexible alternative.
	menu		# a GMenu 
	label		#  the section label, or NULL . 
void g_menu_remove (GMenu *menu, gint position);	# Removes an item from the menu.
	menu		# a GMenu 
	position		# the position of the item to remove
void g_menu_remove_all (GMenu *menu);	# Removes all items in the menu.
	menu		# a GMenu 
GMenuItem  *g_menu_item_new (const gchar *label, const gchar *detailed_action);	#创建对象:GMenuItem .
	label		#  the section label, or NULL . 
	return:		#  a new GMenuItem  
GMenuItem  *g_menu_item_new_section (const gchar *label, GMenuModel *section);	#创建对象:GMenuItem representing a section.
	label		#  the section label, or NULL . 
	return:		#  a new GMenuItem  
GMenuItem  *g_menu_item_new_submenu (const gchar *label, GMenuModel *submenu);	#创建对象:GMenuItem representing a submenu.
	label		#  the section label, or NULL . 
	return:		#  a new GMenuItem  
GMenuItem  *g_menu_item_new_from_model (GMenuModel *model, gint item_index);	# Creates a GMenuItem as an exact copy of an existing menu item in aGMenuModel .
	model		# a GMenuModel 
	item_index		# the index of an item in model
	return:		#  a new GMenuItem . 
void g_menu_item_set_label (GMenuItem *menu_item, const gchar *label);	# Sets or unsets the "label" attribute of menu_item.
	menu_item		# a GMenuItem 
	label		#  the label to set, or NULL to unset. 
void g_menu_item_set_icon (GMenuItem *menu_item, GIcon *icon);	# Sets (or unsets) the icon on menu_item.
	menu_item		# a GMenuItem 
	icon		# a GIcon , or NULL 
void g_menu_item_set_action_and_target_value (GMenuItem *menu_item, const gchar *action, GVariant *target_value);	# Sets or unsets the "action" and "target" attributes of menu_item.
	menu_item		# a GMenuItem 
	action		#  the name of the action for this item. 
void g_menu_item_set_action_and_target (GMenuItem *menu_item, const gchar *action, const gchar *format_string, ...);	# Sets or unsets the "action" and "target" attributes of menu_item.
	menu_item		# a GMenuItem 
	action		#  the name of the action for this item. 
void g_menu_item_set_detailed_action (GMenuItem *menu_item, const gchar *detailed_action);	# Sets the "action" and possibly the "target" attribute of menu_item.
	menu_item		# a GMenuItem 
	detailed_action		# the "detailed" action string
void g_menu_item_set_section (GMenuItem *menu_item, GMenuModel *section);	# Sets or unsets the "section" link of menu_item to section.
	menu_item		# a GMenuItem 
	section		#  a GMenuModel , or NULL . 
void g_menu_item_set_submenu (GMenuItem *menu_item, GMenuModel *submenu);	# Sets or unsets the "submenu" link of menu_item to submenu.
	menu_item		# a GMenuItem 
	submenu		#  a GMenuModel , or NULL . 
GVariant  *g_menu_item_get_attribute_value (GMenuItem *menu_item, const gchar *attribute, const GVariantType *expected_type);	# Queries the named attribute on menu_item.
	menu_item		# a GMenuItem 
	attribute		# the attribute name to query
	expected_type		#  the expected type of the attribute. 
	return:		#  the attribute value, or NULL .  
gboolean g_menu_item_get_attribute (GMenuItem *menu_item, const gchar *attribute, const gchar *format_string, ...);	# Queries the named attribute on menu_item.
	menu_item		# a GMenuItem 
	attribute		# the attribute name to query
	format_string		# a GVariant format string
	...		# positional parameters, as per format_string
	return:		#  TRUE if the named attribute was found with the expectedtype 
GMenuModel  *g_menu_item_get_link (GMenuItem *menu_item, const gchar *link);	# Queries the named link on menu_item.
	menu_item		# a GMenuItem 
	link		# the link name to query
	return:		#  the link, or NULL .  
void g_menu_item_set_attribute_value (GMenuItem *menu_item, const gchar *attribute, GVariant *value);	# Sets or unsets an attribute on menu_item.
	menu_item		# a GMenuItem 
	attribute		# the attribute to set
	value		#  a GVariant to use as the value, or NULL . 
void g_menu_item_set_attribute (GMenuItem *menu_item, const gchar *attribute, const gchar *format_string, ...);	# Sets or unsets an attribute on menu_item.
	menu_item		# a GMenuItem 
	attribute		# the attribute to set
	format_string		#  a GVariant format string, or NULL . 
void g_menu_item_set_link (GMenuItem *menu_item, const gchar *link, GMenuModel *model);	# Creates a link from menu_item to model if non-NULL , or unsets it.
	menu_item		# a GMenuItem 
	link		# type of link to establish or unset
	model		#  the GMenuModel to link to (or NULL to unset). 
guint g_dbus_connection_export_menu_model (GDBusConnection *connection, const gchar *object_path, GMenuModel *menu, GError **error);	# Exports menu on connection at object_path.
	connection		# a GDBusConnection 
	object_path		# a D-Bus object path
	menu		# a GMenuModel 
	error		# return location for an error, or NULL 
	return:		#  the ID of the export (never zero), or 0 in case of failure 
void g_dbus_connection_unexport_menu_model (GDBusConnection *connection, guint export_id);	# Reverses the effect of a previous call tog_dbus_connection_export_menu_model() .
	connection		# a GDBusConnection 
	export_id		# the ID from 
GDBusMenuModel  *g_dbus_menu_model_get (GDBusConnection *connection, const gchar *bus_name, const gchar *object_path);	# Obtains a GDBusMenuModel for the menu model which is exportedat the given bus_name and object_path.
	connection		# a GDBusConnection 
	bus_name		# the bus name which exports the menu model
	object_path		# the object path at which the menu model is exported
	return:		#  a GDBusMenuModel object. Free withg_object_unref() .  
GNotification  *g_notification_new (const gchar *title);	#创建对象:GNotification with title as its title.
	title		# the title of the notification
	return:		#  a new GNotification instance 
void g_notification_set_title (GNotification *notification, const gchar *title);	# Sets the title of notification to title.
	notification		# a GNotification 
	title		# the new title for notification
void g_notification_set_body (GNotification *notification, const gchar *body);	# Sets the body of notification to body.
	notification		# a GNotification 
	body		#  the new body for notification, or NULL . 
void g_notification_set_icon (GNotification *notification, GIcon *icon);	# Sets the icon of notification to icon.
	notification		# a GNotification 
	icon		# the icon to be shown in notification, as a GIcon 
void g_notification_set_priority (GNotification *notification, GNotificationPriority priority);	# Sets the priority of notification to priority. SeeGNotificationPriority for possible values.
	notification		# a GNotification 
	priority		# a GNotificationPriority 
void g_notification_set_urgent (GNotification *notification, gboolean urgent);	# g_notification_set_urgent is deprecated and should not be used in newly-written code.
	notification		# a GNotification 
	urgent		# TRUE if notificationis urgent
void g_notification_set_default_action (GNotification *notification, const gchar *detailed_action);	# Sets the default action of notification to detailed_action. Thisaction is activated when the notification is clicked on.
	notification		# a GNotification 
	detailed_action		# a detailed action name
void g_notification_set_default_action_and_target (GNotification *notification, const gchar *action, const gchar *target_format, ...);	# Sets the default action of notification to action. This action isactivated when the notification is clicked on. It must be anapplication-wide action (it must start with "app.").
	notification		# a GNotification 
	action		# an action name
	target_format		#  a GVariant format string, or NULL . 
void g_notification_set_default_action_and_target_value (GNotification *notification, const gchar *action, GVariant *target);	# Sets the default action of notification to action. This action isactivated when the notification is clicked on. It must be anapplication-wide action (start with "app.").
	notification		# a GNotification 
	action		# an action name
	target		#  a GVariant to use as action's parameter, or NULL . 
void g_notification_add_button (GNotification *notification, const gchar *label, const gchar *detailed_action);	# Adds a button to notification that activates the action indetailed_action when clicked. That action must be anapplication-wide action (starting with "app."). If detailed_actioncontains a target, the action will be activated with that target asits parameter.
	notification		# a GNotification 
	label		# label of the button
	detailed_action		# a detailed action name
void g_notification_add_button_with_target (GNotification *notification, const gchar *label, const gchar *action, const gchar *target_format, ...);	# Adds a button to notification that activates action when clicked.action must be an application-wide action (it must start with "app.").
	notification		# a GNotification 
	label		# label of the button
	action		# an action name
	target_format		#  a GVariant format string, or NULL . 
void g_notification_add_button_with_target_value (GNotification *notification, const gchar *label, const gchar *action, GVariant *target);	# Adds a button to notification that activates action when clicked.action must be an application-wide action (it must start with "app.").
	notification		# a GNotification 
	label		# label of the button
	action		# an action name
	target		#  a GVariant to use as action's parameter, or NULL . 
GFile  *<span class="c_punctuation">( *GVfsFileLookupFunc<span class="c_punctuation">) (GVfs *vfs, const char *identifier, gpointer user_data);	# This function type is used by g_vfs_register_uri_scheme() to make itpossible for a client to associate an URI scheme to a different GFile implementation.
	vfs		# a GVfs 
	identifier		# the identifier to lookup a GFile for. This can eitherbe an URI or a parse name as returned by 
	user_data		# user data passed to the function
	return:		#  a GFile for identifier.  
GFile  *g_vfs_get_file_for_path (GVfs *vfs, const char *path);	# Gets a GFile for path.
	vfs		# a GVfs .
	path		# a string containing a VFS path.
	return:		#  a GFile .Free the returned object with g_object_unref() .  
GFile  *g_vfs_get_file_for_uri (GVfs *vfs, const char *uri);	# Gets a GFile for uri.
	vfs		# aGVfs .
	uri		# a string containing a URI
	return:		#  a GFile .Free the returned object with g_object_unref() .  
GFile  *g_vfs_parse_name (GVfs *vfs, const char *parse_name);	# This operation never fails, but the returned object mightnot support any I/O operations if the parse_name cannotbe parsed by the GVfs module.
	vfs		# a GVfs .
	parse_name		# a string to be parsed by the VFS module.
	return:		#  a GFile for the given parse_name.Free the returned object with g_object_unref() .  
GVfs  *g_vfs_get_default (void );	# Gets the default GVfs for the system.
	return:		#  a GVfs .  
GVfs  *g_vfs_get_local (void );	# Gets the local GVfs for the system.
	return:		#  a GVfs .  
gboolean g_vfs_is_active (GVfs *vfs);	# Checks if the VFS is active.
	vfs		# a GVfs .
	return:		#  TRUE if construction of the vfswas successfuland it is now active. 
gchar  * const *g_vfs_get_supported_uri_schemes (GVfs *vfs);	# Gets a list of URI schemes supported by vfs.
	vfs		# a GVfs .
	return:		#  a NULL -terminated array of strings.The returned array belongs to GIO and mustnot be freed or modified.  
gboolean g_vfs_register_uri_scheme (GVfs *vfs, const char *scheme, GVfsFileLookupFunc uri_func, gpointer uri_data, GDestroyNotify uri_destroy, GVfsFileLookupFunc parse_name_func, gpointer parse_name_data, GDestroyNotify parse_name_destroy);	# Registers uri_func and parse_name_func as the GFile URI and parse namelookup functions for URIs with a scheme matching scheme.Note that scheme is registered only within the running application, asopposed to desktop-wide as it happens with GVfs backends.
	vfs		# a GVfs 
	scheme		# an URI scheme, e.g. "http"
	uri_func		#  a GVfsFileLookupFunc . 
	return:		#  TRUE if schemewas successfully registered, or FALSE if a handlerfor schemealready exists. 
gboolean g_vfs_unregister_uri_scheme (GVfs *vfs, const char *scheme);	# Unregisters the URI handler for scheme previously registered withg_vfs_register_uri_scheme() .
	vfs		# a GVfs 
	scheme		# an URI scheme, e.g. "http"
	return:		#  TRUE if schemewas successfully unregistered, or FALSE if ahandler for schemedoes not exist. 
GIOModule  *g_io_module_new (const gchar *filename);	#创建对象:GIOModule that will load the specificshared library when in use.
	filename		#  filename of the shared library module. 
	return:		#  a GIOModule from given filename,or NULL on error. 
void g_io_module_scope_block (GIOModuleScope *scope, const gchar *basename);	# Block modules with the given basename from being loaded whenthis scope is used with g_io_modules_scan_all_in_directory_with_scope() or g_io_modules_load_all_in_directory_with_scope() .
	scope		# a module loading scope
	basename		# the basename to block
void g_io_module_scope_free (GIOModuleScope *scope);	# Free a module scope.
	scope		# a module loading scope
GIOModuleScope  *g_io_module_scope_new (GIOModuleScopeFlags flags);	# Create a new scope for loading of IO modules. A scope can be used forblocking duplicate modules, or blocking a module you don't want to load.
	flags		# flags for the new scope
	return:		#  the new module scope.  
GList  *g_io_modules_load_all_in_directory (const gchar *dirname);	# Loads all the modules in the specified directory.
	dirname		#  pathname for a directory containing modulesto load. 
	return:		#  a list of GIOModules loadedfrom the directory,All the modules are loaded into memory, if you want tounload them (enabling on-demand loading) you must callg_type_module_unuse() on all the modules. Free the listwith g_list_free() .  
GList  *g_io_modules_load_all_in_directory_with_scope (const gchar *dirname, GIOModuleScope *scope);	# Loads all the modules in the specified directory.
	dirname		#  pathname for a directory containing modulesto load. 
	return:		#  a list of GIOModules loadedfrom the directory,All the modules are loaded into memory, if you want tounload them (enabling on-demand loading) you must callg_type_module_unuse() on all the modules. Free the listwith g_list_free() .  
void g_io_modules_scan_all_in_directory (const char *dirname);	# Scans all the modules in the specified directory, ensuring thatany extension point implemented by a module is registered.
	dirname		#  pathname for a directory containing modulesto scan. 
void g_io_modules_scan_all_in_directory_with_scope (const gchar *dirname, GIOModuleScope *scope);	# Scans all the modules in the specified directory, ensuring thatany extension point implemented by a module is registered.
	dirname		#  pathname for a directory containing modulesto scan. 
void g_io_module_load (GIOModule *module);	# Required API for GIO modules to implement.
	module		# a GIOModule .
void g_io_module_unload (GIOModule *module);	# Required API for GIO modules to implement.
	module		# a GIOModule .
char  **g_io_module_query (void );	# Optional API for GIO modules to implement.
	return:		#  A NULL -terminated array of strings,listing the supported extension points of the module. The arraymust be suitable for freeing with g_strfreev() .  
char  *g_io_extension_get_name (GIOExtension *extension);	# Gets the name under which extension was registered.
	extension		# a GIOExtension 
	return:		#  the name of extension. 
gint g_io_extension_get_priority (GIOExtension *extension);	# Gets the priority with which extension was registered.
	extension		# a GIOExtension 
	return:		#  the priority of extension 
GType g_io_extension_get_type (GIOExtension *extension);	# Gets the type associated with extension.
	extension		# a GIOExtension 
	return:		#  the type of extension 
GIOExtension  *g_io_extension_point_get_extension_by_name (GIOExtensionPoint *extension_point, const char *name);	# Finds a GIOExtension for an extension point by name.
	extension_point		# a GIOExtensionPoint 
	name		# the name of the extension to get
	return:		#  the GIOExtension for extension_pointthat has thegiven name, or NULL if there is no extension with that name.  
GList  *g_io_extension_point_get_extensions (GIOExtensionPoint *extension_point);	# Gets a list of all extensions that implement this extension point.The list is sorted by priority, beginning with the highest priority.
	extension_point		# a GIOExtensionPoint 
	return:		#  a GList ofGIOExtensions . The list is owned by GIO and should not bemodified.  
GType g_io_extension_point_get_required_type (GIOExtensionPoint *extension_point);	# Gets the required type for extension_point.
	extension_point		# a GIOExtensionPoint 
	return:		#  the GType that all implementations must have,or G_TYPE_INVALID if the extension point has no required type 
GIOExtension  *g_io_extension_point_implement (const char *extension_point_name, GType type, const char *extension_name, gint priority);	# Registers type as extension for the extension point with nameextension_point_name. 
	extension_point_name		# the name of the extension point
	type		# the GType to register as extension 
	extension_name		# the name for the extension
	priority		# the priority for the extension
	return:		#  a GIOExtension object for GType .  
GIOExtensionPoint  *g_io_extension_point_lookup (const char *name);	# Looks up an existing extension point.
	name		# the name of the extension point
	return:		#  the GIOExtensionPoint , or NULL if thereis no registered extension point with the given name.  
GIOExtensionPoint  *g_io_extension_point_register (const char *name);	# Registers an extension point.
	name		# The name of the extension point
	return:		#  the new GIOExtensionPoint . This object isowned by GIO and should not be freed.  
void g_io_extension_point_set_required_type (GIOExtensionPoint *extension_point, GType type);	# Sets the required type for extension_point to type. All implementations must henceforth have this type.
	extension_point		# a GIOExtensionPoint 
	type		# the GType to require
GTypeClass  *g_io_extension_ref_class (GIOExtension *extension);	# Gets a reference to the class for the type that is associated with extension.
	extension		# a GIOExtension 
	return:		#  the GTypeClass for the type of extension.  
GTestDBus  *g_test_dbus_new (GTestDBusFlags flags);	# Create a new GTestDBus object.
	flags		# a GTestDBusFlags 
	return:		#  a new GTestDBus .  
GTestDBusFlags g_test_dbus_get_flags (GTestDBus *self);	# Get the flags of the GTestDBus object.
	self		# a GTestDBus 
	return:		#  the value of “flags” property 
gchar  *g_test_dbus_get_bus_address (GTestDBus *self);	# Get the address on which dbus-daemon is running. If g_test_dbus_up() has notbeen called yet, NULL is returned. This can be used withg_dbus_connection_new_for_address() .
	self		# a GTestDBus 
	return:		#  the address of the bus, or NULL .  
void g_test_dbus_add_service_dir (GTestDBus *self, const gchar *path);	# Add a path where dbus-daemon will look up .service files. This can't becalled after g_test_dbus_up() .
	self		# a GTestDBus 
	path		# path to a directory containing .service files
void g_test_dbus_up (GTestDBus *self);	# Start a dbus-daemon instance and set DBUS_SESSION_BUS_ADDRESS. After thiscall, it is safe for unit tests to start sending messages on the session bus.
	self		# a GTestDBus 
void g_test_dbus_stop (GTestDBus *self);	# Stop the session bus started by g_test_dbus_up() .
	self		# a GTestDBus 
void g_test_dbus_down (GTestDBus *self);	# Stop the session bus started by g_test_dbus_up() .
	self		# a GTestDBus 
void g_test_dbus_unset (void );	# Unset DISPLAY and DBUS_SESSION_BUS_ADDRESS env variables to ensure the testwon't use user's session bus.

#.# glib
gchar  *glib_check_version (guint required_major, guint required_minor, guint required_micro);	# Checks that the GLib library in use is compatible with thegiven version. Generally you would pass in the constantsGLIB_MAJOR_VERSION , GLIB_MINOR_VERSION , GLIB_MICRO_VERSION as the three arguments to this function; that producesa check that the library in use is compatible withthe version of GLib the application or module was compiledagainst.
	required_major		# the required major version
	required_minor		# the required minor version
	required_micro		# the required micro version
	return:		#  NULL if the GLib library is compatible with thegiven version, or a string describing the version mismatch.The returned string is owned by GLib and must not be modifiedor freed. 
GLIB_AVAILABLE_IN_ALL gint ();	# Corresponds to the standard C int type.Values of this type can range from G_MININT to G_MAXINT .
GLIB_AVAILABLE_IN_ALL guint ();	# Corresponds to the standard C unsigned int type.Values of this type can range from 0 to G_MAXUINT .
gint g_atomic_int_get (const volatile gint *atomic);	# Gets the current value of atomic.
	atomic		# a pointer to a gint or guint 
	return:		#  the value of the integer 
void g_atomic_int_set (volatile gint *atomic, gint newval);	# Sets the value of atomic to newval.
	atomic		# a pointer to a gint or guint 
	newval		# a new value to store
void g_atomic_int_inc (gint *atomic);	# Increments the value of atomic by 1.
	atomic		# a pointer to a gint or guint 
gboolean g_atomic_int_dec_and_test (gint *atomic);	# Decrements the value of atomic by 1.
	atomic		# a pointer to a gint or guint 
	return:		#  TRUE if the resultant value is zero 
gboolean g_atomic_int_compare_and_exchange (volatile gint *atomic, gint oldval, gint newval);	# Compares atomic to oldval and, if equal, sets it to newval.If atomic was not equal to oldval then no change occurs.
	atomic		# a pointer to a gint or guint 
	oldval		# the value to compare with
	newval		# the value to conditionally replace with
	return:		#  TRUE if the exchange took place 
gint g_atomic_int_add (volatile gint *atomic, gint val);	# Atomically adds val to the value of atomic.
	atomic		# a pointer to a gint or guint 
	val		# the value to add
	return:		#  the value of atomicbefore the add, signed 
guint g_atomic_int_and (volatile guint *atomic, guint val);	# Performs an atomic bitwise 'and' of the value of atomic and val,storing the result back in atomic.
	atomic		# a pointer to a gint or guint 
	val		# the value to 'and'
	return:		#  the value of atomicbefore the operation, unsigned 
guint g_atomic_int_or (volatile guint *atomic, guint val);	# Performs an atomic bitwise 'or' of the value of atomic and val,storing the result back in atomic.
	atomic		# a pointer to a gint or guint 
	val		# the value to 'or'
	return:		#  the value of atomicbefore the operation, unsigned 
guint g_atomic_int_xor (volatile guint *atomic, guint val);	# Performs an atomic bitwise 'xor' of the value of atomic and val,storing the result back in atomic.
	atomic		# a pointer to a gint or guint 
	val		# the value to 'xor'
	return:		#  the value of atomicbefore the operation, unsigned 
gpointer g_atomic_pointer_get (const volatile void *atomic);	# Gets the current value of atomic.
	atomic		#  a pointer to a gpointer-sized value. 
	return:		#  the value of the pointer 
void g_atomic_pointer_set (volatile void *atomic, gpointer newval);	# Sets the value of atomic to newval.
	atomic		#  a pointer to a gpointer-sized value. 
gboolean g_atomic_pointer_compare_and_exchange (volatile void *atomic, gpointer oldval, gpointer newval);	# Compares atomic to oldval and, if equal, sets it to newval.If atomic was not equal to oldval then no change occurs.
	atomic		#  a pointer to a gpointer-sized value. 
	return:		#  TRUE if the exchange took place 
gssize g_atomic_pointer_add (volatile void *atomic, gssize val);	# Atomically adds val to the value of atomic.
	atomic		#  a pointer to a gpointer-sized value. 
	return:		#  the value of atomicbefore the add, signed 
gsize g_atomic_pointer_and (volatile void *atomic, gsize val);	# Performs an atomic bitwise 'and' of the value of atomic and val,storing the result back in atomic.
	atomic		#  a pointer to a gpointer-sized value. 
	return:		#  the value of atomicbefore the operation, unsigned 
gsize g_atomic_pointer_or (volatile void *atomic, gsize val);	# Performs an atomic bitwise 'or' of the value of atomic and val,storing the result back in atomic.
	atomic		#  a pointer to a gpointer-sized value. 
	return:		#  the value of atomicbefore the operation, unsigned 
gsize g_atomic_pointer_xor (volatile void *atomic, gsize val);	# Performs an atomic bitwise 'xor' of the value of atomic and val,storing the result back in atomic.
	atomic		#  a pointer to a gpointer-sized value. 
	return:		#  the value of atomicbefore the operation, unsigned 
gint g_atomic_int_exchange_and_add (volatile gint *atomic, gint val);	# g_atomic_int_exchange_and_add has been deprecated since version 2.30 and should not be used in newly-written code.
	atomic		# a pointer to a gint 
	val		# the value to add
	return:		#  the value of atomicbefore the add, signed 
GMainLoop  *g_main_loop_new (GMainContext *context, gboolean is_running);	#创建对象:GMainLoop structure.
	context		#  a GMainContext (if NULL , the default context will be used). 
	return:		#  a new GMainLoop . 
GMainLoop  *g_main_loop_ref (GMainLoop *loop);	# Increases the reference count on a GMainLoop object by one.
	loop		# a GMainLoop 
	return:		#  loop 
void g_main_loop_unref (GMainLoop *loop);	# Decreases the reference count on a GMainLoop object by one. Ifthe result is zero, free the loop and free all associated memory.
	loop		# a GMainLoop 
void g_main_loop_run (GMainLoop *loop);	# Runs a main loop until g_main_loop_quit() is called on the loop.If this is called for the thread of the loop's GMainContext ,it will process events from the loop, otherwise it willsimply wait.
	loop		# a GMainLoop 
void g_main_loop_quit (GMainLoop *loop);	# Stops a GMainLoop from running. Any calls to g_main_loop_run() for the loop will return. 
	loop		# a GMainLoop 
gboolean g_main_loop_is_running (GMainLoop *loop);	# Checks to see if the main loop is currently being run via g_main_loop_run() .
	loop		# a GMainLoop .
	return:		#  TRUE if the mainloop is currently being run. 
GMainContext  *g_main_loop_get_context (GMainLoop *loop);	# Returns the GMainContext of loop.
	loop		# a GMainLoop .
	return:		#  the GMainContext of loop.  
GMainContext  *g_main_context_new (void );	#创建对象:GMainContext structure.
	return:		#  the new GMainContext  
GMainContext  *g_main_context_ref (GMainContext *context);	# Increases the reference count on a GMainContext object by one.
	context		# a GMainContext 
	return:		#  the contextthat was passed in (since 2.6) 
void g_main_context_unref (GMainContext *context);	# Decreases the reference count on a GMainContext object by one. Ifthe result is zero, free the context and free all associated memory.
	context		# a GMainContext 
GMainContext  *g_main_context_default (void );	# Returns the global default main context. This is the main contextused for main loop functions when a main loop is not explicitlyspecified, and corresponds to the "main" main loop. See alsog_main_context_get_thread_default() .
	return:		#  the global default main context.  
gboolean g_main_context_iteration (GMainContext *context, gboolean may_block);	# Runs a single iteration for the given main loop. This involveschecking to see if any event sources are ready to be processed,then if no events sources are ready and may_block is TRUE , waitingfor a source to become ready, then dispatching the highest priorityevents sources that are ready. Otherwise, if may_block is FALSE sources are not waited to become ready, only those highest priorityevents sources will be dispatched (if any), that are ready at thisgiven moment without further waiting.
	context		#  a GMainContext (if NULL , the default context will be used). 
	return:		#  TRUE if events were dispatched. 
gboolean g_main_context_pending (GMainContext *context);	# Checks if any sources have pending events for the given context.
	context		#  a GMainContext (if NULL , the default context will be used). 
	return:		#  TRUE if events are pending. 
GSource  *g_main_context_find_source_by_id (GMainContext *context, guint source_id);	# Finds a GSource given a pair of context and ID.
	context		#  a GMainContext (if NULL , the default context will be used). 
	return:		#  the GSource .  
GSource  *g_main_context_find_source_by_user_data (GMainContext *context, gpointer user_data);	# Finds a source with the given user data for the callback. Ifmultiple sources exist with the same user data, the firstone found will be returned.
	context		# a GMainContext 
	user_data		# the user_data for the callback.
	return:		#  the source, if one was found, otherwise NULL .  
GSource  *g_main_context_find_source_by_funcs_user_data (GMainContext *context, GSourceFuncs *funcs, gpointer user_data);	# Finds a source with the given source functions and user data. Ifmultiple sources exist with the same source function and user data,the first one found will be returned.
	context		#  a GMainContext (if NULL , the default context will be used). 
	user_data		# the user data from the callback.
	return:		#  the source, if one was found, otherwise NULL .  
void g_main_context_wakeup (GMainContext *context);	# If context is currently blocking in g_main_context_iteration() waiting for a source to become ready, cause it to stop blockingand return. Otherwise, cause the next invocation ofg_main_context_iteration() to return without blocking.
	context		# a GMainContext 
gboolean g_main_context_acquire (GMainContext *context);	# Tries to become the owner of the specified context.If some other thread is the owner of the context,returns FALSE immediately. Ownership is properlyrecursive: the owner can require ownership againand will release ownership when g_main_context_release() is called as many times as g_main_context_acquire() .
	context		# a GMainContext 
	return:		#  TRUE if the operation succeeded, andthis thread is now the owner of context. 
void g_main_context_release (GMainContext *context);	# Releases ownership of a context previously acquired by this threadwith g_main_context_acquire() . If the context was acquired multipletimes, the ownership will be released only when g_main_context_release() is called as many times as it was acquired.
	context		# a GMainContext 
gboolean g_main_context_is_owner (GMainContext *context);	# Determines whether this thread holds the (recursive)ownership of this GMainContext . This is useful toknow before waiting on another thread that may beblocking to get ownership of context.
	context		# a GMainContext 
	return:		#  TRUE if current thread is owner of context. 
gboolean g_main_context_wait (GMainContext *context, GCond *cond, GMutex *mutex);	# Tries to become the owner of the specified context,as with g_main_context_acquire() . But if another threadis the owner, atomically drop mutex and wait on cond until that owner releases ownership or until cond is signaled, thentry again (once) to become the owner.
	context		# a GMainContext 
	cond		# a condition variable
	mutex		# a mutex, currently held
	return:		#  TRUE if the operation succeeded, andthis thread is now the owner of context. 
gboolean g_main_context_prepare (GMainContext *context, gint *priority);	# Prepares to poll sources within a main loop. The resulting informationfor polling is determined by calling g_main_context_query() .
	context		# a GMainContext 
	priority		# location to store priority of highest prioritysource already ready.
	return:		#  TRUE if some source is ready to be dispatchedprior to polling. 
gint g_main_context_query (GMainContext *context, gint max_priority, gint *timeout_, GPollFD *fds, gint n_fds);	# Determines information necessary to poll this main loop.
	context		# a GMainContext 
	max_priority		# maximum priority source to check
	timeout_		#  location to store timeout to be used in polling. 
	return:		#  the number of records actually stored in fds,or, if more than n_fdsrecords need to be stored, the numberof records that need to be stored. 
gboolean g_main_context_check (GMainContext *context, gint max_priority, GPollFD *fds, gint n_fds);	# Passes the results of polling back to the main loop.
	context		# a GMainContext 
	max_priority		# the maximum numerical priority of sources to check
	fds		#  array of GPollFD 's that was passed tothe last call to 
	return:		#  TRUE if some sources are ready to be dispatched. 
void g_main_context_dispatch (GMainContext *context);	# Dispatches all pending sources.
	context		# a GMainContext 
void g_main_context_set_poll_func (GMainContext *context, GPollFunc func);	# Sets the function to use to handle polling of file descriptors. Itwill be used instead of the poll() system call (or GLib's replacement function, which is used where poll() isn't available).
	context		# a GMainContext 
	func		# the function to call to poll all file descriptors
GPollFunc g_main_context_get_poll_func (GMainContext *context);	# Gets the poll function set by g_main_context_set_poll_func() .
	context		# a GMainContext 
	return:		#  the poll function 
gint <span class="c_punctuation">( *GPollFunc<span class="c_punctuation">) (GPollFD *ufds, guint nfsd, gint timeout_);	# Specifies the type of function passed to g_main_context_set_poll_func() .The semantics of the function should match those of the poll() system call.
	ufds		# an array of GPollFD elements
	nfsd		# the number of elements in ufds
	timeout_		# the maximum time to wait for an event of the file descriptors.A negative value indicates an infinite timeout.
	return:		#  the number of GPollFD elements which have events or errorsreported, or -1 if an error occurred. 
void g_main_context_add_poll (GMainContext *context, GPollFD *fd, gint priority);	# Adds a file descriptor to the set of file descriptors polled forthis context. This will very seldom be used directly. Insteada typical event source will use g_source_add_unix_fd() instead.
	context		#  a GMainContext (or NULL for the default context). 
	priority		# the priority for this file descriptor which should bethe same as the priority used for 
void g_main_context_remove_poll (GMainContext *context, GPollFD *fd);	# Removes file descriptor from the set of file descriptors to bepolled for a particular context.
	context		# a GMainContext 
	fd		# a GPollFD descriptor previously added with 
gint g_main_depth (void );	# Returns the depth of the stack of calls tog_main_context_dispatch() on any GMainContext in the current thread. That is, when called from the toplevel, it gives 0. Whencalled from within a callback from g_main_context_iteration() (or g_main_loop_run() , etc.) it returns 1. When called from within a callback to a recursive call to g_main_context_iteration() ,it returns 2. And so forth.
	return:		#  The main loop recursion level in the current thread 
GSource  *g_main_current_source (void );	# Returns the currently firing source for this thread.
	return:		#  The currently firing source or NULL .  
void g_main_context_invoke (GMainContext *context, GSourceFunc function, gpointer data);	# Invokes a function in such a way that context is owned during theinvocation of function.
	context		#  a GMainContext , or NULL . 
void g_main_context_invoke_full (GMainContext *context, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);	# Invokes a function in such a way that context is owned during theinvocation of function.
	context		#  a GMainContext , or NULL . 
GMainContext  *g_main_context_get_thread_default (void );	# Gets the thread-default GMainContext for this thread. Asynchronousoperations that want to be able to be run in contexts other thanthe default one should call this method org_main_context_ref_thread_default() to get a GMainContext to addtheir GSources to. (Note that even in single-threadedprograms applications may sometimes want to temporarily push anon-default context, so it is not safe to assume that this willalways return NULL if you are running in the default thread.)
	return:		#  the thread-default GMainContext , orNULL if the thread-default context is the global default context.  
GMainContext  *g_main_context_ref_thread_default (void );	# Gets the thread-default GMainContext for this thread, as withg_main_context_get_thread_default() , but also adds a reference toit with g_main_context_ref() . In addition, unlikeg_main_context_get_thread_default() , if the thread-default contextis the global default context, this will return that GMainContext (with a ref added to it) rather than returning NULL .
	return:		#  the thread-default GMainContext . Unrefwith g_main_context_unref() when you are done with it.  
void g_main_context_push_thread_default (GMainContext *context);	# Acquires context and sets it as the thread-default context for thecurrent thread. This will cause certain asynchronous operations(such as most gio-based I/O) which arestarted in this thread to run under context and deliver theirresults to its main loop, rather than running under the globaldefault context in the main thread. Note that calling this functionchanges the context returned by g_main_context_get_thread_default() ,not the one returned by g_main_context_default() , so it does not affectthe context used by functions like g_idle_add() .
	context		#  a GMainContext , or NULL for the global default context. 
void g_main_context_pop_thread_default (GMainContext *context);	# Pops context off the thread-default context stack (verifying thatit was on the top of the stack).
	context		#  a GMainContext object, or NULL . 
GSource  *g_timeout_source_new (guint interval);	#创建对象:timeout source.
	interval		# the timeout interval in milliseconds.
	return:		#  the newly-created timeout source 
GSource  *g_timeout_source_new_seconds (guint interval);	#创建对象:timeout source.
	interval		# the timeout interval in seconds
	return:		#  the newly-created timeout source 
guint g_timeout_add (guint interval, GSourceFunc function, gpointer data);	# Sets a function to be called at regular intervals, with the defaultpriority, G_PRIORITY_DEFAULT . The function is called repeatedlyuntil it returns FALSE , at which point the timeout is automaticallydestroyed and the function will not be called again. The first callto the function will be at the end of the first interval.
	interval		# the time between calls to the function, in milliseconds(1/1000ths of a second)
	function		# function to call
	data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source. 
guint g_timeout_add_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);	# Sets a function to be called at regular intervals, with the givenpriority. The function is called repeatedly until it returnsFALSE , at which point the timeout is automatically destroyed andthe function will not be called again. The notify function iscalled when the timeout is destroyed. The first call to thefunction will be at the end of the first interval.
	priority		# the priority of the timeout source. Typically this will be inthe range between G_PRIORITY_DEFAULT and G_PRIORITY_HIGH .
	interval		# the time between calls to the function, in milliseconds(1/1000ths of a second)
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the timeout is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
guint g_timeout_add_seconds (guint interval, GSourceFunc function, gpointer data);	# Sets a function to be called at regular intervals with the defaultpriority, G_PRIORITY_DEFAULT . The function is called repeatedly untilit returns FALSE , at which point the timeout is automatically destroyedand the function will not be called again.
	interval		# the time between calls to the function, in seconds
	function		# function to call
	data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source. 
guint g_timeout_add_seconds_full (gint priority, guint interval, GSourceFunc function, gpointer data, GDestroyNotify notify);	# Sets a function to be called at regular intervals, with priority.The function is called repeatedly until it returns FALSE , at whichpoint the timeout is automatically destroyed and the function willnot be called again.
	priority		# the priority of the timeout source. Typically this will be inthe range between G_PRIORITY_DEFAULT and G_PRIORITY_HIGH .
	interval		# the time between calls to the function, in seconds
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the timeout is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
GSource  *g_idle_source_new (void );	#创建对象:idle source.
	return:		#  the newly-created idle source 
guint g_idle_add (GSourceFunc function, gpointer data);	# Adds a function to be called whenever there are no higher priorityevents pending to the default main loop. The function is given thedefault idle priority, G_PRIORITY_DEFAULT_IDLE . If the functionreturns FALSE it is automatically removed from the list of eventsources and will not be called again.
	function		# function to call 
	data		# data to pass to function.
	return:		#  the ID (greater than 0) of the event source. 
guint g_idle_add_full (gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify);	# Adds a function to be called whenever there are no higher priorityevents pending. If the function returns FALSE it is automaticallyremoved from the list of event sources and will not be called again.
	priority		# the priority of the idle source. Typically this will be in therange between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE .
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the idle is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
gboolean g_idle_remove_by_data (gpointer data);	# Removes the idle function with the given data.
	data		# the data for the idle source's callback.
	return:		#  TRUE if an idle source was found and removed. 
void <span class="c_punctuation">( *GChildWatchFunc<span class="c_punctuation">) (GPid pid, gint status, gpointer user_data);	# Prototype of a GChildWatchSource callback, called when a childprocess has exited. To interpret status, see the documentationfor g_spawn_check_exit_status() .
	pid		# the process id of the child process
	status		# Status information about the child process, encodedin a platform-specific manner
	user_data		# user data passed to 
GSource  *g_child_watch_source_new (GPid pid);	#创建对象:child_watch source.
	pid		# process to watch. On POSIX the positive pid of a child process. OnWindows a handle for a process (which doesn't have to be a child).
	return:		#  the newly-created child watch source 
guint g_child_watch_add (GPid pid, GChildWatchFunc function, gpointer data);	# Sets a function to be called when the child indicated by pid exits, at a default priority, G_PRIORITY_DEFAULT .
	pid		# process id to watch. On POSIX the positive pid of a childprocess. On Windows a handle for a process (which doesn't have to bea child).
	function		# function to call
	data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source. 
guint g_child_watch_add_full (gint priority, GPid pid, GChildWatchFunc function, gpointer data, GDestroyNotify notify);	# Sets a function to be called when the child indicated by pid exits, at the priority priority.
	priority		# the priority of the idle source. Typically this will be in therange between G_PRIORITY_DEFAULT_IDLE and G_PRIORITY_HIGH_IDLE .
	pid		# process to watch. On POSIX the positive pid of a child process. OnWindows a handle for a process (which doesn't have to be a child).
	function		# function to call
	data		# data to pass to function
	notify		#  function to call when the idle is removed, or NULL . 
	return:		#  the ID (greater than 0) of the event source. 
gint g_poll (GPollFD *fds, guint nfds, gint timeout);	# Polls fds, as with the poll() system call, but portably. (Onsystems that don't have poll(), it is emulated using select().)This is used internally by GMainContext , but it can be calleddirectly if you need to block until a file descriptor is ready, butdon't want to run the full main loop.
	fds		# file descriptors to poll
	nfds		# the number of file descriptors in fds
	timeout		# amount of time to wait, in milliseconds, or -1 to wait forever
	return:		#  the number of entries in fdswhose revents fieldswere filled in, or 0 if the operation timed out, or -1 on error orif the call was interrupted. 
void <span class="c_punctuation">( *GSourceDummyMarshal<span class="c_punctuation">) (void );	# This is just a placeholder for GClosureMarshal ,which cannot be used here for dependency reasons.
GSource  *g_source_new (GSourceFuncs *source_funcs, guint struct_size);	#创建对象:GSource structure. The size is specified toallow creating structures derived from GSource that containadditional data. The size passed in must be at leastsizeof (GSource).
	source_funcs		# structure containing functions that implementthe sources behavior.
	struct_size		# size of the GSource structure to create.
	return:		#  the newly-created GSource . 
GSource  *g_source_ref (GSource *source);	# Increases the reference count on a source by one.
	source		# a GSource 
	return:		#  source 
void g_source_unref (GSource *source);	# Decreases the reference count of a source by one. If theresulting reference count is zero the source and associatedmemory will be destroyed.
	source		# a GSource 
void g_source_set_funcs (GSource *source, GSourceFuncs *funcs);	# Sets the source functions (can be used to override default implementations) of an unattached source.
	source		# a GSource 
	funcs		# the new GSourceFuncs 
guint g_source_attach (GSource *source, GMainContext *context);	# Adds a GSource to a context so that it will be executed withinthat context. Remove it by calling g_source_destroy() .
	source		# a GSource 
	context		#  a GMainContext (if NULL , the default context will be used). 
	return:		#  the ID (greater than 0) for the source within theGMainContext .  
void g_source_destroy (GSource *source);	# Removes a source from its GMainContext , if any, and mark it asdestroyed. The source cannot be subsequently added to anothercontext. It is safe to call this on sources which have already beenremoved from their context.
	source		# a GSource 
gboolean g_source_is_destroyed (GSource *source);	# Returns whether source has been destroyed.
	source		# a GSource 
	return:		#  TRUE if the source has been destroyed 
void g_source_set_priority (GSource *source, gint priority);	# Sets the priority of a source. While the main loop is being run, asource will be dispatched if it is ready to be dispatched and nosources at a higher (numerically smaller) priority are ready to bedispatched.
	source		# a GSource 
	priority		# the new priority.
gint g_source_get_priority (GSource *source);	# Gets the priority of a source.
	source		# a GSource 
	return:		#  the priority of the source 
void g_source_set_can_recurse (GSource *source, gboolean can_recurse);	# Sets whether a source can be called recursively. If can_recurse isTRUE , then while the source is being dispatched then this sourcewill be processed normally. Otherwise, all processing of thissource is blocked until the dispatch function returns.
	source		# a GSource 
	can_recurse		# whether recursion is allowed for this source
gboolean g_source_get_can_recurse (GSource *source);	# Checks whether a source is allowed to be called recursively.see g_source_set_can_recurse() .
	source		# a GSource 
	return:		#  whether recursion is allowed. 
guint g_source_get_id (GSource *source);	# Returns the numeric ID for a particular source. The ID of a sourceis a positive integer which is unique within a particular main loop context. The reversemapping from ID to source is done by g_main_context_find_source_by_id() .
	source		# a GSource 
	return:		#  the ID (greater than 0) for the source 
char  *g_source_get_name (GSource *source);	# Gets a name for the source, used in debugging and profiling. Thename may be NULL if it has never been set with g_source_set_name() .
	source		# a GSource 
	return:		#  the name of the source 
void g_source_set_name (GSource *source, const char *name);	# Sets a name for the source, used in debugging and profiling.The name defaults to NULL .
	source		# a GSource 
	name		# debug name for the source
void g_source_set_name_by_id (guint tag, const char *name);	# Sets the name of a source using its ID.
	tag		# a GSource ID
	name		# debug name for the source
GMainContext  *g_source_get_context (GSource *source);	# Gets the GMainContext with which the source is associated.
	source		# a GSource 
	return:		#  the GMainContext with which thesource is associated, or NULL if the context has notyet been added to a source.  
void g_source_set_callback (GSource *source, GSourceFunc func, gpointer data, GDestroyNotify notify);	# Sets the callback function for a source. The callback for a source iscalled from the source's dispatch function.
	source		# the source
	func		# a callback function
	data		# the data to pass to callback function
	notify		#  a function to call when datais no longer in use, or NULL . 
gboolean <span class="c_punctuation">( *GSourceFunc<span class="c_punctuation">) (gpointer user_data);	# Specifies the type of function passed to g_timeout_add() ,g_timeout_add_full() , g_idle_add() , and g_idle_add_full() .
	user_data		# data passed to the function, set when the source wascreated with one of the above functions
	return:		#  FALSE if the source should be removed. G_SOURCE_CONTINUE andG_SOURCE_REMOVE are more memorable names for the return value. 
void g_source_set_callback_indirect (GSource *source, gpointer callback_data, GSourceCallbackFuncs *callback_funcs);	# Sets the callback function storing the data as a refcounted callback"object". This is used internally. Note that calling g_source_set_callback_indirect() assumesan initial reference count on callback_data, and thuscallback_funcs-&gt;unref will eventually be called once morethan callback_funcs-&gt;ref.
	source		# the source
	callback_data		# pointer to callback data "object"
	callback_funcs		# functions for reference counting callback_dataand getting the callback and data
void g_source_set_ready_time (GSource *source, gint64 ready_time);	# Sets a GSource to be dispatched when the given monotonic time isreached (or passed). If the monotonic time is in the past (as italways will be if ready_time is 0) then the source will bedispatched immediately.
	source		# a GSource 
	ready_time		# the monotonic time at which the source will be ready,0 for "immediately", -1 for "never"
gint64 g_source_get_ready_time (GSource *source);	# Gets the "ready time" of source, as set byg_source_set_ready_time() .
	source		# a GSource 
	return:		#  the monotonic ready time, -1 for "never" 
gpointer g_source_add_unix_fd (GSource *source, gint fd, GIOCondition events);	# Monitors fd for the IO events in events.
	source		# a GSource 
	fd		# the fd to monitor
	events		# an event mask
	return:		#  an opaque tag.  
void g_source_remove_unix_fd (GSource *source, gpointer tag);	# Reverses the effect of a previous call to g_source_add_unix_fd() .
	source		# a GSource 
	tag		#  the tag from 
void g_source_modify_unix_fd (GSource *source, gpointer tag, GIOCondition new_events);	# Updates the event mask to watch for the fd identified by tag.
	source		# a GSource 
	tag		#  the tag from 
GIOCondition g_source_query_unix_fd (GSource *source, gpointer tag);	# Queries the events reported for the fd corresponding to tag onsource during the last poll.
	source		# a GSource 
	tag		#  the tag from 
	return:		#  the conditions reported on the fd 
void g_source_add_poll (GSource *source, GPollFD *fd);	# Adds a file descriptor to the set of file descriptors polled forthis source. This is usually combined with g_source_new() to add anevent source. The event source's check function will typically testthe revents field in the GPollFD struct and return TRUE if events needto be processed.
	source		# a GSource 
	fd		# a GPollFD structure holding information about a filedescriptor to watch.
void g_source_remove_poll (GSource *source, GPollFD *fd);	# Removes a file descriptor from the set of file descriptors polled forthis source. 
	source		# a GSource 
	fd		# a GPollFD structure previously passed to 
void g_source_add_child_source (GSource *source, GSource *child_source);	# Adds child_source to source as a "polled" source; when source isadded to a GMainContext , child_source will be automatically addedwith the same priority, when child_source is triggered, it willcause source to dispatch (in addition to calling its owncallback), and when source is destroyed, it will destroychild_source as well. (source will also still be dispatched ifits own prepare/check functions indicate that it is ready.)
	source		# a GSource 
	child_source		# a second GSource that sourceshould "poll"
void g_source_remove_child_source (GSource *source, GSource *child_source);	# Detaches child_source from source and destroys it.
	source		# a GSource 
	child_source		# a GSource previously passed to
gint64 g_source_get_time (GSource *source);	# Gets the time to be used when checking this source. The advantage ofcalling this function over calling g_get_monotonic_time() directly isthat when checking multiple sources, GLib can cache a single valueinstead of having to repeatedly get the system monotonic time.
	source		# a GSource 
	return:		#  the monotonic time in microseconds 
void g_source_get_current_time (GSource *source, GTimeVal *timeval);	# g_source_get_current_time has been deprecated since version 2.28 and should not be used in newly-written code.
	source		# a GSource 
	timeval		# GTimeVal structure in which to store current time.
gboolean g_source_remove (guint tag);	# Removes the source with the given id from the default main context.
	tag		# the ID of the source to remove.
	return:		#  For historical reasons, this function always returns TRUE  
gboolean g_source_remove_by_funcs_user_data (GSourceFuncs *funcs, gpointer user_data);	# Removes a source from the default main loop context given thesource functions and user data. If multiple sources exist with thesame source functions and user data, only one will be destroyed.
	funcs		# The source_funcspassed to 
	user_data		# the user data for the callback
	return:		#  TRUE if a source was found and removed.  
gboolean g_source_remove_by_user_data (gpointer user_data);	# Removes a source from the default main loop context given the userdata for the callback. If multiple sources exist with the same userdata, only one will be destroyed.
	user_data		# the user_data for the callback.
	return:		#  TRUE if a source was found and removed.  
gpointer <span class="c_punctuation">( *GThreadFunc<span class="c_punctuation">) (gpointer data);	# Specifies the type of the func functions passed to g_thread_new() or g_thread_try_new() .
	data		# data passed to the thread
	return:		#  the return value of the thread 
GThread  *g_thread_new (const gchar *name, GThreadFunc func, gpointer data);	# This function创建对象:thread. The new thread starts by invokingfunc with the argument data. The thread will run until func returnsor until g_thread_exit() is called from the new thread. The return valueof func becomes the return value of the thread, which can be obtainedwith g_thread_join() .
	name		#  an (optional) name for the new thread. 
	return:		#  the new GThread  
GThread  *g_thread_try_new (const gchar *name, GThreadFunc func, gpointer data, GError **error);	# This function is the same as g_thread_new() except thatit allows for the possibility of failure.
	name		#  an (optional) name for the new thread. 
	return:		#  the new GThread , or NULL if an error occurred 
GThread  *g_thread_ref (GThread *thread);	# Increase the reference count on thread.
	thread		# a GThread 
	return:		#  a new reference to thread 
void g_thread_unref (GThread *thread);	# Decrease the reference count on thread, possibly freeing allresources associated with it.
	thread		# a GThread 
gpointer g_thread_join (GThread *thread);	# Waits until thread finishes, i.e. the function func, asgiven to g_thread_new() , returns or g_thread_exit() is called.If thread has already terminated, then g_thread_join() returns immediately.
	thread		# a GThread 
	return:		#  the return value of the thread 
void g_thread_yield ();	# Causes the calling thread to voluntarily relinquish the CPU, sothat other threads can run.
void g_thread_exit (gpointer retval);	# Terminates the current thread.
	retval		# the return value of this thread
GThread  *g_thread_self (void );	# This function returns the GThread corresponding to thecurrent thread. Note that this function does not increasethe reference count of the returned struct.
	return:		#  the GThread representing the current thread 
void g_mutex_init (GMutex *mutex);	# Initializes a GMutex so that it can be used.
	mutex		# an uninitialized GMutex 
void g_mutex_clear (GMutex *mutex);	# Frees the resources allocated to a mutex with g_mutex_init() .
	mutex		# an initialized GMutex 
void g_mutex_lock (GMutex *mutex);	# Locks mutex. If mutex is already locked by another thread, thecurrent thread will block until mutex is unlocked by the otherthread.
	mutex		# a GMutex 
gboolean g_mutex_trylock (GMutex *mutex);	# Tries to lock mutex. If mutex is already locked by another thread,it immediately returns FALSE . Otherwise it locks mutex and returnsTRUE .
	mutex		# a GMutex 
	return:		#  TRUE if mutexcould be locked 
void g_mutex_unlock (GMutex *mutex);	# Unlocks mutex. If another thread is blocked in a g_mutex_lock() call for mutex, it will become unblocked and can lock mutex itself.
	mutex		# a GMutex 
GMutexLocker  *g_mutex_locker_new (GMutex *mutex);	# Lock mutex and return a new GMutexLocker . Unlock withg_mutex_locker_free() . Using g_mutex_unlock() on mutexwhile a GMutexLocker exists can lead to undefined behaviour.
	mutex		# a mutex to lock
	return:		#  a GMutexLocker  
void g_mutex_locker_free (GMutexLocker *locker);	# Unlock locker's mutex. See g_mutex_locker_new() for details.
	locker		# a GMutexLocker
void g_rec_mutex_init (GRecMutex *rec_mutex);	# Initializes a GRecMutex so that it can be used.
	rec_mutex		# an uninitialized GRecMutex 
void g_rec_mutex_clear (GRecMutex *rec_mutex);	# Frees the resources allocated to a recursive mutex withg_rec_mutex_init() .
	rec_mutex		# an initialized GRecMutex 
void g_rec_mutex_lock (GRecMutex *rec_mutex);	# Locks rec_mutex. If rec_mutex is already locked by anotherthread, the current thread will block until rec_mutex isunlocked by the other thread. If rec_mutex is already lockedby the current thread, the 'lock count' of rec_mutex is increased.The mutex will only become available again when it is unlockedas many times as it has been locked.
	rec_mutex		# a GRecMutex 
gboolean g_rec_mutex_trylock (GRecMutex *rec_mutex);	# Tries to lock rec_mutex. If rec_mutex is already lockedby another thread, it immediately returns FALSE . Otherwiseit locks rec_mutex and returns TRUE .
	rec_mutex		# a GRecMutex 
	return:		#  TRUE if rec_mutexcould be locked 
void g_rec_mutex_unlock (GRecMutex *rec_mutex);	# Unlocks rec_mutex. If another thread is blocked in ag_rec_mutex_lock() call for rec_mutex, it will become unblockedand can lock rec_mutex itself.
	rec_mutex		# a GRecMutex 
void g_rw_lock_init (GRWLock *rw_lock);	# Initializes a GRWLock so that it can be used.
	rw_lock		# an uninitialized GRWLock 
void g_rw_lock_clear (GRWLock *rw_lock);	# Frees the resources allocated to a lock with g_rw_lock_init() .
	rw_lock		# an initialized GRWLock 
void g_rw_lock_writer_lock (GRWLock *rw_lock);	# Obtain a write lock on rw_lock. If any thread already holdsa read or write lock on rw_lock, the current thread will blockuntil all other threads have dropped their locks on rw_lock.
	rw_lock		# a GRWLock 
gboolean g_rw_lock_writer_trylock (GRWLock *rw_lock);	# Tries to obtain a write lock on rw_lock. If any other thread holdsa read or write lock on rw_lock, it immediately returns FALSE .Otherwise it locks rw_lock and returns TRUE .
	rw_lock		# a GRWLock 
	return:		#  TRUE if rw_lockcould be locked 
void g_rw_lock_writer_unlock (GRWLock *rw_lock);	# Release a write lock on rw_lock.
	rw_lock		# a GRWLock 
void g_rw_lock_reader_lock (GRWLock *rw_lock);	# Obtain a read lock on rw_lock. If another thread currently holdsthe write lock on rw_lock or blocks waiting for it, the currentthread will block. Read locks can be taken recursively.
	rw_lock		# a GRWLock 
gboolean g_rw_lock_reader_trylock (GRWLock *rw_lock);	# Tries to obtain a read lock on rw_lock and returns TRUE ifthe read lock was successfully obtained. Otherwise itreturns FALSE .
	rw_lock		# a GRWLock 
	return:		#  TRUE if rw_lockcould be locked 
void g_rw_lock_reader_unlock (GRWLock *rw_lock);	# Release a read lock on rw_lock.
	rw_lock		# a GRWLock 
void g_cond_init (GCond *cond);	# Initialises a GCond so that it can be used.
	cond		# an uninitialized GCond 
void g_cond_clear (GCond *cond);	# Frees the resources allocated to a GCond with g_cond_init() .
	cond		# an initialised GCond 
void g_cond_wait (GCond *cond, GMutex *mutex);	# Atomically releases mutex and waits until cond is signalled.When this function returns, mutex is locked again and owned by thecalling thread.
	cond		# a GCond 
	mutex		# a GMutex that is currently locked
gboolean g_cond_timed_wait (GCond *cond, GMutex *mutex, GTimeVal *abs_time);	# g_cond_timed_wait has been deprecated since version 2.32 and should not be used in newly-written code.
	cond		# a GCond 
	mutex		# a GMutex that is currently locked
	abs_time		# a GTimeVal , determining the final time
	return:		#  TRUE if condwas signalled, or FALSE on timeout 
gboolean g_cond_wait_until (GCond *cond, GMutex *mutex, gint64 end_time);	# Waits until either cond is signalled or end_time has passed.
	cond		# a GCond 
	mutex		# a GMutex that is currently locked
	end_time		# the monotonic time to wait until
	return:		#  TRUE on a signal, FALSE on a timeout 
void g_cond_signal (GCond *cond);	# If threads are waiting for cond, at least one of them is unblocked.If no threads are waiting for cond, this function has no effect.It is good practice to hold the same lock as the waiting threadwhile calling this function, though not required.
	cond		# a GCond 
void g_cond_broadcast (GCond *cond);	# If threads are waiting for cond, all of them are unblocked.If no threads are waiting for cond, this function has no effect.It is good practice to lock the same mutex as the waiting threadswhile calling this function, though not required.
	cond		# a GCond 
gpointer g_private_get (GPrivate *key);	# Returns the current value of the thread local variable key.
	key		# a GPrivate 
	return:		#  the thread-local value 
void g_private_set (GPrivate *key, gpointer value);	# Sets the thread local variable key to have the value value in thecurrent thread.
	key		# a GPrivate 
	value		# the new value
void g_private_replace (GPrivate *key, gpointer value);	# Sets the thread local variable key to have the value value in thecurrent thread.
	key		# a GPrivate 
	value		# the new value
gboolean g_once_init_enter (volatile void *location);	# Function to be called when starting a critical initializationsection. The argument location must point to a static0-initialized variable that will be set to a value other than 0 atthe end of the initialization section. In combination withg_once_init_leave() and the unique address value_location, it canbe ensured that an initialization section will be executed only onceduring a program's life time, and that concurrent threads areblocked until initialization completed. To be used in constructslike this:
	location		#  location of a static initializable variablecontaining 0. 
	return:		#  TRUE if the initialization section should be entered,FALSE and blocks otherwise 
void g_once_init_leave (volatile void *location, gsize result);	# Counterpart to g_once_init_enter() . Expects a location of a static0-initialized initialization variable, and an initialization valueother than 0. Sets the variable to the initialization value, andreleases concurrent threads blocking in g_once_init_enter() on thisinitialization variable.
	location		#  location of a static initializable variablecontaining 0. 
void g_bit_lock (volatile gint *address, gint lock_bit);	# Sets the indicated lock_bit in address. If the bit is alreadyset, this call will block until g_bit_unlock() unsets thecorresponding bit.
	address		# a pointer to an integer
	lock_bit		# a bit value between 0 and 31
gboolean g_bit_trylock (volatile gint *address, gint lock_bit);	# Sets the indicated lock_bit in address, returning TRUE ifsuccessful. If the bit is already set, returns FALSE immediately.
	address		# a pointer to an integer
	lock_bit		# a bit value between 0 and 31
	return:		#  TRUE if the lock was acquired 
void g_bit_unlock (volatile gint *address, gint lock_bit);	# Clears the indicated lock_bit in address. If another thread iscurrently blocked in g_bit_lock() on this same bit then it will bewoken up.
	address		# a pointer to an integer
	lock_bit		# a bit value between 0 and 31
void g_pointer_bit_lock (volatile void *address, gint lock_bit);	# This is equivalent to g_bit_lock, but working on pointers (or otherpointer-sized values).
	address		#  a pointer to a gpointer-sized value. 
gboolean g_pointer_bit_trylock (volatile void *address, gint lock_bit);	# This is equivalent to g_bit_trylock, but working on pointers (orother pointer-sized values).
	address		#  a pointer to a gpointer-sized value. 
	return:		#  TRUE if the lock was acquired 
void g_pointer_bit_unlock (volatile void *address, gint lock_bit);	# This is equivalent to g_bit_unlock, but working on pointers (or otherpointer-sized values).
	address		#  a pointer to a gpointer-sized value. 
guint g_get_num_processors (void );	# Determine the approximate number of threads that the system willschedule simultaneously for this process. This is intended to beused as a parameter to g_thread_pool_new() for CPU bound tasks andsimilar cases.
	return:		#  Number of schedulable threads, always greater than 0 
GThreadPool  *g_thread_pool_new (GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error);	# This function创建对象:thread pool.
	func		# a function to execute in the threads of the new thread pool
	user_data		# user data that is handed over to funcevery time itis called
	max_threads		# the maximal number of threads to execute concurrentlyin the new thread pool, -1 means no limit
	exclusive		# should this thread pool be exclusive?
	error		# return location for error, or NULL 
	return:		#  the new GThreadPool  
gboolean g_thread_pool_push (GThreadPool *pool, gpointer data, GError **error);	# Inserts data into the list of tasks to be executed by pool.
	pool		# a GThreadPool 
	data		# a new task for pool
	error		# return location for error, or NULL 
	return:		#  TRUE on success, FALSE if an error occurred 
gboolean g_thread_pool_set_max_threads (GThreadPool *pool, gint max_threads, GError **error);	# Sets the maximal allowed number of threads for pool.A value of -1 means that the maximal number of threadsis unlimited. If pool is an exclusive thread pool, settingthe maximal number of threads to -1 is not allowed.
	pool		# a GThreadPool 
	max_threads		# a new maximal number of threads for pool,or -1 for unlimited
	error		# return location for error, or NULL 
	return:		#  TRUE on success, FALSE if an error occurred 
gint g_thread_pool_get_max_threads (GThreadPool *pool);	# Returns the maximal number of threads for pool.
	pool		# a GThreadPool 
	return:		#  the maximal number of threads 
guint g_thread_pool_get_num_threads (GThreadPool *pool);	# Returns the number of threads currently running in pool.
	pool		# a GThreadPool 
	return:		#  the number of threads currently running 
guint g_thread_pool_unprocessed (GThreadPool *pool);	# Returns the number of tasks still unprocessed in pool.
	pool		# a GThreadPool 
	return:		#  the number of unprocessed tasks 
void g_thread_pool_free (GThreadPool *pool, gboolean immediate, gboolean wait_);	# Frees all resources allocated for pool.
	pool		# a GThreadPool 
	immediate		# should poolshut down immediately?
	wait_		# should the function wait for all tasks to be finished?
void g_thread_pool_set_max_unused_threads (gint max_threads);	# Sets the maximal number of unused threads to max_threads.If max_threads is -1, no limit is imposed on the numberof unused threads.
	max_threads		# maximal number of unused threads
gint g_thread_pool_get_max_unused_threads (void );	# Returns the maximal allowed number of unused threads.
	return:		#  the maximal number of unused threads 
guint g_thread_pool_get_num_unused_threads (void );	# Returns the number of currently unused threads.
	return:		#  the number of currently unused threads 
void g_thread_pool_stop_unused_threads (void );	# Stops all currently unused threads. This does not change themaximal number of unused threads. This function can be used toregularly stop all unused threads e.g. from g_timeout_add() .
void g_thread_pool_set_sort_function (GThreadPool *pool, GCompareDataFunc func, gpointer user_data);	# Sets the function used to sort the list of tasks. This allows thetasks to be processed by a priority determined by func, and notjust in the order in which they were added to the pool.
	pool		# a GThreadPool 
	func		# the GCompareDataFunc used to sort the list of tasks.This function is passed two tasks. It should return0 if the order in which they are handled does not matter,a negative value if the first task should be processed beforethe second or a positive value if the second task should beprocessed first.
	user_data		# user data passed to func
void g_thread_pool_set_max_idle_time (guint interval);	# This function will set the maximum interval that a threadwaiting in the pool for new tasks can be idle for beforebeing stopped. This function is similar to callingg_thread_pool_stop_unused_threads() on a regular timeout,except this is done on a per thread basis.
	interval		# the maximum interval(in milliseconds)a thread can be idle
guint g_thread_pool_get_max_idle_time (void );	# This function will return the maximum interval that athread will wait in the thread pool for new tasks beforebeing stopped.
	return:		#  the maximum interval(milliseconds) to waitfor new tasks in the thread pool before stopping thethread 
gboolean g_thread_pool_move_to_front (GThreadPool *pool, gpointer data);	# Moves the item to the front of the queue of unprocesseditems, so that it will be processed next.
	pool		# a GThreadPool 
	data		# an unprocessed item in the pool
	return:		#  TRUE if the item was found and moved 
GAsyncQueue  *g_async_queue_new (void );	#创建对象:asynchronous queue.
	return:		#  a new GAsyncQueue . Free with g_async_queue_unref()  
GAsyncQueue  *g_async_queue_new_full (GDestroyNotify item_free_func);	#创建对象:asynchronous queue and sets up a destroy notifyfunction that is used to free any remaining queue items whenthe queue is destroyed after the final unref.
	item_free_func		# function to free queue elements
	return:		#  a new GAsyncQueue . Free with g_async_queue_unref()  
GAsyncQueue  *g_async_queue_ref (GAsyncQueue *queue);	# Increases the reference count of the asynchronous queue by 1.You do not need to hold the lock to call this function.
	queue		# a GAsyncQueue 
	return:		#  the queuethat was passed in (since 2.6) 
void g_async_queue_unref (GAsyncQueue *queue);	# Decreases the reference count of the asynchronous queue by 1.
	queue		# a GAsyncQueue .
void g_async_queue_push (GAsyncQueue *queue, gpointer data);	# Pushes the data into the queue. data must not be NULL .
	queue		# a GAsyncQueue 
	data		# datato push into the queue
void g_async_queue_push_sorted (GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);	# Inserts data into queue using func to determine the newposition.
	queue		# a GAsyncQueue 
	data		# the datato push into the queue
	func		# the GCompareDataFunc is used to sort queue
	user_data		# user data passed to func.
void g_async_queue_push_front (GAsyncQueue *queue, gpointer item);	# Pushes the item into the queue. item must not be NULL .In contrast to g_async_queue_push() , this functionpushes the new item ahead of the items already in the queue,so that it will be the next one to be popped off the queue.
	queue		# a GAsyncQueue 
	item		# data to push into the queue
gboolean g_async_queue_remove (GAsyncQueue *queue, gpointer item);	# Remove an item from the queue.
	queue		# a GAsyncQueue 
	item		# the data to remove from the queue
	return:		#  TRUE if the item was removed 
gpointer g_async_queue_pop (GAsyncQueue *queue);	# Pops data from the queue. If queue is empty, this functionblocks until data becomes available.
	queue		# a GAsyncQueue 
	return:		#  data from the queue 
gpointer g_async_queue_try_pop (GAsyncQueue *queue);	# Tries to pop data from the queue. If no data is available,NULL is returned.
	queue		# a GAsyncQueue 
	return:		#  data from the queue or NULL , when no data isavailable immediately. 
gpointer g_async_queue_timeout_pop (GAsyncQueue *queue, guint64 timeout);	# Pops data from the queue. If the queue is empty, blocks fortimeout microseconds, or until data becomes available.
	queue		# a GAsyncQueue 
	timeout		# the number of microseconds to wait
	return:		#  data from the queue or NULL , when no data isreceived before the timeout. 
gint g_async_queue_length (GAsyncQueue *queue);	# Returns the length of the queue.
	queue		# a GAsyncQueue .
	return:		#  the length of the queue 
void g_async_queue_sort (GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);	# Sorts queue using func.
	queue		# a GAsyncQueue 
	func		# the GCompareDataFunc is used to sort queue
	user_data		# user data passed to func
void g_async_queue_lock (GAsyncQueue *queue);	# Acquires the queue's lock. If another thread is alreadyholding the lock, this call will block until the lockbecomes available.
	queue		# a GAsyncQueue 
void g_async_queue_unlock (GAsyncQueue *queue);	# Releases the queue's lock.
	queue		# a GAsyncQueue 
void g_async_queue_ref_unlocked (GAsyncQueue *queue);	# g_async_queue_ref_unlocked has been deprecated since version 2.8 and should not be used in newly-written code.
	queue		# a GAsyncQueue 
void g_async_queue_unref_and_unlock (GAsyncQueue *queue);	# g_async_queue_unref_and_unlock has been deprecated since version 2.8 and should not be used in newly-written code.
	queue		# a GAsyncQueue 
void g_async_queue_push_unlocked (GAsyncQueue *queue, gpointer data);	# Pushes the data into the queue. data must not be NULL .
	queue		# a GAsyncQueue 
	data		# datato push into the queue
void g_async_queue_push_sorted_unlocked (GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);	# Inserts data into queue using func to determine the newposition.
	queue		# a GAsyncQueue 
	data		# the datato push into the queue
	func		# the GCompareDataFunc is used to sort queue
	user_data		# user data passed to func.
void g_async_queue_push_front_unlocked (GAsyncQueue *queue, gpointer item);	# Pushes the item into the queue. item must not be NULL .In contrast to g_async_queue_push_unlocked() , this functionpushes the new item ahead of the items already in the queue,so that it will be the next one to be popped off the queue.
	queue		# a GAsyncQueue 
	item		# data to push into the queue
gboolean g_async_queue_remove_unlocked (GAsyncQueue *queue, gpointer item);	# Remove an item from the queue.
	queue		# a GAsyncQueue 
	item		# the data to remove from the queue
	return:		#  TRUE if the item was removed 
gpointer g_async_queue_pop_unlocked (GAsyncQueue *queue);	# Pops data from the queue. If queue is empty, this functionblocks until data becomes available.
	queue		# a GAsyncQueue 
	return:		#  data from the queue. 
gpointer g_async_queue_try_pop_unlocked (GAsyncQueue *queue);	# Tries to pop data from the queue. If no data is available,NULL is returned.
	queue		# a GAsyncQueue 
	return:		#  data from the queue or NULL , when no data isavailable immediately. 
gpointer g_async_queue_timeout_pop_unlocked (GAsyncQueue *queue, guint64 timeout);	# Pops data from the queue. If the queue is empty, blocks fortimeout microseconds, or until data becomes available.
	queue		# a GAsyncQueue 
	timeout		# the number of microseconds to wait
	return:		#  data from the queue or NULL , when no data isreceived before the timeout. 
gint g_async_queue_length_unlocked (GAsyncQueue *queue);	# Returns the length of the queue.
	queue		# a GAsyncQueue 
	return:		#  the length of the queue. 
void g_async_queue_sort_unlocked (GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data);	# Sorts queue using func.
	queue		# a GAsyncQueue 
	func		# the GCompareDataFunc is used to sort queue
	user_data		# user data passed to func
gpointer g_async_queue_timed_pop (GAsyncQueue *queue, GTimeVal *end_time);	# g_async_queue_timed_pop is deprecated and should not be used in newly-written code.
	queue		# a GAsyncQueue 
	end_time		# a GTimeVal , determining the final time
	return:		#  data from the queue or NULL , when no data isreceived before end_time. 
gpointer g_async_queue_timed_pop_unlocked (GAsyncQueue *queue, GTimeVal *end_time);	# g_async_queue_timed_pop_unlocked is deprecated and should not be used in newly-written code.
	queue		# a GAsyncQueue 
	end_time		# a GTimeVal , determining the final time
	return:		#  data from the queue or NULL , when no data isreceived before end_time. 
gboolean g_module_supported (void );	# Checks if modules are supported on the current platform.
	return:		#  TRUE if modules are supported 
gchar  *g_module_build_path (const gchar *directory, const gchar *module_name);	# A portable way to build the filename of a module. The platform-specificprefix and suffix are added to the filename, if needed, and the resultis added to the directory, using the correct separator character.
	directory		#  the directory where the module is. This can beNULL or the empty string to indicate that the standard platform-specificdirectories will be used, though that is not recommended. 
	return:		#  the complete path of the module, including the standard libraryprefix and suffix. This should be freed when no longer needed 
GModule  *g_module_open (const gchar *file_name, GModuleFlags flags);	# Opens a module. If the module has already been opened,its reference count is incremented.
	file_name		#  the name of the file containing the module, or NULL to obtain a GModule representing the main program itself. 
	return:		#  a GModule on success, or NULL on failure 
gboolean g_module_symbol (GModule *module, const gchar *symbol_name, gpointer *symbol);	# Gets a symbol pointer from a module, such as one exportedby G_MODULE_EXPORT . Note that a valid symbol can be NULL .
	module		# a GModule 
	symbol_name		# the name of the symbol to find
	symbol		#  returns the pointer to the symbol value. 
	return:		#  TRUE on success 
gchar  *g_module_name (GModule *module);	# Returns the filename that the module was opened with.
	module		# a GModule 
	return:		#  the filename of the module.  
void g_module_make_resident (GModule *module);	# Ensures that a module will never be unloaded.Any future g_module_close() calls on the module will be ignored.
	module		# a GModule to make permanently resident
gboolean g_module_close (GModule *module);	# Closes a module.
	module		# a GModule to close
	return:		#  TRUE on success 
gchar  *g_module_error (void );	# Gets a string describing the last module error.
	return:		#  a string describing the last module error 
gchar  *<span class="c_punctuation">( *GModuleCheckInit<span class="c_punctuation">) (GModule *module);	# Specifies the type of the module initialization function.If a module contains a function named g_module_check_init() it is calledautomatically when the module is loaded. It is passed the GModule structureand should return NULL on success or a string describing the initializationerror.
	module		# the GModule corresponding to the module which has just been loaded
	return:		#  NULL on success, or a string describing the initialization error 
void <span class="c_punctuation">( *GModuleUnload<span class="c_punctuation">) (GModule *module);	# Specifies the type of the module function called when it is unloaded.If a module contains a function named g_module_unload() it is calledautomatically when the module is unloaded.It is passed the GModule structure.
	module		# the GModule about to be unloaded
gpointer g_malloc (gsize n_bytes);	# Allocates n_bytes bytes of memory.If n_bytes is 0 it returns NULL .
	n_bytes		# the number of bytes to allocate
	return:		#  a pointer to the allocated memory 
gpointer g_malloc0 (gsize n_bytes);	# Allocates n_bytes bytes of memory, initialized to 0's.If n_bytes is 0 it returns NULL .
	n_bytes		# the number of bytes to allocate
	return:		#  a pointer to the allocated memory 
gpointer g_realloc (gpointer mem, gsize n_bytes);	# Reallocates the memory pointed to by mem, so that it now has space forn_bytes bytes of memory. It returns the new address of the memory, which mayhave been moved. mem may be NULL , in which case it's considered tohave zero-length. n_bytes may be 0, in which case NULL will be returnedand mem will be freed unless it is NULL .
	mem		#  the memory to reallocate. 
	return:		#  the new address of the allocated memory 
gpointer g_try_malloc (gsize n_bytes);	# Attempts to allocate n_bytes, and returns NULL on failure.Contrast with g_malloc() , which aborts the program on failure.
	n_bytes		# number of bytes to allocate.
	return:		#  the allocated memory, or NULL . 
gpointer g_try_malloc0 (gsize n_bytes);	# Attempts to allocate n_bytes, initialized to 0's, and returns NULL onfailure. Contrast with g_malloc0() , which aborts the program on failure.
	n_bytes		# number of bytes to allocate
	return:		#  the allocated memory, or NULL  
gpointer g_try_realloc (gpointer mem, gsize n_bytes);	# Attempts to realloc mem to a new size, n_bytes, and returns NULL on failure. Contrast with g_realloc() , which aborts the programon failure.
	mem		#  previously-allocated memory, or NULL . 
	return:		#  the allocated memory, or NULL . 
gpointer g_malloc_n (gsize n_blocks, gsize n_block_bytes);	# This function is similar to g_malloc() , allocating (n_blocks * n_block_bytes) bytes,but care is taken to detect possible overflow during multiplication.
	n_blocks		# the number of blocks to allocate
	n_block_bytes		# the size of each block in bytes
	return:		#  a pointer to the allocated memory 
gpointer g_malloc0_n (gsize n_blocks, gsize n_block_bytes);	# This function is similar to g_malloc0() , allocating (n_blocks * n_block_bytes) bytes,but care is taken to detect possible overflow during multiplication.
	n_blocks		# the number of blocks to allocate
	n_block_bytes		# the size of each block in bytes
	return:		#  a pointer to the allocated memory 
gpointer g_realloc_n (gpointer mem, gsize n_blocks, gsize n_block_bytes);	# This function is similar to g_realloc() , allocating (n_blocks * n_block_bytes) bytes,but care is taken to detect possible overflow during multiplication.
	mem		#  the memory to reallocate. 
	return:		#  the new address of the allocated memory 
gpointer g_try_malloc_n (gsize n_blocks, gsize n_block_bytes);	# This function is similar to g_try_malloc() , allocating (n_blocks * n_block_bytes) bytes,but care is taken to detect possible overflow during multiplication.
	n_blocks		# the number of blocks to allocate
	n_block_bytes		# the size of each block in bytes
	return:		#  the allocated memory, or NULL . 
gpointer g_try_malloc0_n (gsize n_blocks, gsize n_block_bytes);	# This function is similar to g_try_malloc0() , allocating (n_blocks * n_block_bytes) bytes,but care is taken to detect possible overflow during multiplication.
	n_blocks		# the number of blocks to allocate
	n_block_bytes		# the size of each block in bytes
	return:		#  the allocated memory, or NULL  
gpointer g_try_realloc_n (gpointer mem, gsize n_blocks, gsize n_block_bytes);	# This function is similar to g_try_realloc() , allocating (n_blocks * n_block_bytes) bytes,but care is taken to detect possible overflow during multiplication.
	mem		#  previously-allocated memory, or NULL . 
	return:		#  the allocated memory, or NULL . 
void g_free (gpointer mem);	# Frees the memory pointed to by mem.
	mem		#  the memory to free. 
void g_clear_pointer (gpointer *pp, GDestroyNotify destroy);	# Clears a reference to a variable.
	pp		#  a pointer to a variable, struct member etc. holding apointer. 
gpointer g_steal_pointer (gpointer pp);	# Sets pp to NULL , returning the value that was there before.
	pp		#  a pointer to a pointer. 
gpointer g_memdup (gconstpointer mem, guint byte_size);	# Allocates byte_size bytes of memory, and copies byte_size bytes into itfrom mem. If mem is NULL it returns NULL .
	mem		# the memory to copy.
	byte_size		# the number of bytes to copy.
	return:		#  a pointer to the newly-allocated copy of the memory, or NULL if memis NULL . 
void g_mem_set_vtable (GMemVTable *vtable);	# g_mem_set_vtable has been deprecated since version 2.46 and should not be used in newly-written code.
	vtable		# table of memory allocation routines.
gboolean g_mem_is_system_malloc (void );	# g_mem_is_system_malloc has been deprecated since version 2.46 and should not be used in newly-written code.
	return:		#  if TRUE , malloc() and g_malloc() can be mixed. 
void g_mem_profile (void );	# g_mem_profile has been deprecated since version 2.46 and should not be used in newly-written code.
gpointer g_slice_alloc (gsize block_size);	# Allocates a block of memory from the slice allocator.The block adress handed out can be expected to be alignedto at least 1 * sizeof (void*),though in general slices are 2 * sizeof (void*) bytes aligned,if a malloc() fallback implementation is used instead,the alignment may be reduced in a libc dependent fashion.Note that the underlying slice allocation mechanism canbe changed with the G_SLICE=always-malloc environment variable.
	block_size		# the number of bytes to allocate
	return:		#  a pointer to the allocated memory block, which will be NULL if andonly if mem_sizeis 0 
gpointer g_slice_alloc0 (gsize block_size);	# Allocates a block of memory via g_slice_alloc() and initializesthe returned memory to 0. Note that the underlying slice allocationmechanism can be changed with the G_SLICE=always-malloc environment variable.
	block_size		# the number of bytes to allocate
	return:		#  a pointer to the allocated block, which will be NULL if and onlyif mem_sizeis 0 
gpointer g_slice_copy (gsize block_size, gconstpointer mem_block);	# Allocates a block of memory from the slice allocatorand copies block_size bytes into it from mem_block.
	block_size		# the number of bytes to allocate
	mem_block		# the memory to copy
	return:		#  a pointer to the allocated memory block, which will be NULL if andonly if mem_sizeis 0 
void g_slice_free1 (gsize block_size, gpointer mem_block);	# Frees a block of memory.
	block_size		# the size of the block
	mem_block		# a pointer to the block to free
void g_slice_free_chain_with_offset (gsize block_size, gpointer mem_chain, gsize next_offset);	# Frees a linked list of memory blocks of structure type type.
	block_size		# the size of the blocks
	mem_chain		# a pointer to the first block of the chain
	next_offset		# the offset of the nextfield in the blocks
GIOChannel  *g_io_channel_unix_new (int fd);	#创建对象:GIOChannel given a file descriptor. On UNIX systemsthis works for plain files, pipes, and sockets.
	fd		# a file descriptor.
	return:		#  a new GIOChannel . 
gint g_io_channel_unix_get_fd (GIOChannel *channel);	# Returns the file descriptor of the GIOChannel .
	channel		# a GIOChannel , created with 
	return:		#  the file descriptor of the GIOChannel . 
GIOChannel  *g_io_channel_win32_new_fd (gint fd);	#创建对象:GIOChannel given a file descriptor on Windows. Thisworks for file descriptors from the C runtime.
	fd		# a C library file descriptor.
	return:		#  a new GIOChannel . 
GIOChannel  *g_io_channel_win32_new_socket (gint socket);	#创建对象:GIOChannel given a socket on Windows.
	socket		# a Winsock socket
	return:		#  a new GIOChannel  
GIOChannel  *g_io_channel_win32_new_messages (gsize hwnd);	#创建对象:GIOChannel given a window handle on Windows.
	hwnd		# a window handle.
	return:		#  a new GIOChannel . 
void g_io_channel_init (GIOChannel *channel);	# Initializes a GIOChannel struct. 
	channel		# a GIOChannel 
GIOChannel  *g_io_channel_new_file (const gchar *filename, const gchar *mode, GError **error);	# Open a file filename as a GIOChannel using mode mode. Thischannel will be closed when the last reference to it is dropped,so there is no need to call g_io_channel_close() (though doingso will not cause problems, as long as no attempt is made toaccess the channel after it is closed).
	filename		#  A string containing the name of a file. 
	return:		#  A GIOChannel on success, NULL on failure. 
GIOStatus g_io_channel_read_chars (GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **error);	# Replacement for g_io_channel_read() with the new API.
	channel		# a GIOChannel 
	buf		#  a buffer to read data into. 
	return:		#  the status of the operation. 
GIOStatus g_io_channel_read_unichar (GIOChannel *channel, gunichar *thechar, GError **error);	# Reads a Unicode character from channel.This function cannot be called on a channel with NULL encoding.
	channel		# a GIOChannel 
	thechar		#  a location to return a character. 
	return:		#  a GIOStatus  
GIOStatus g_io_channel_read_line (GIOChannel *channel, gchar **str_return, gsize *length, gsize *terminator_pos, GError **error);	# Reads a line, including the terminating character(s),from a GIOChannel into a newly-allocated string.str_return will contain allocated memory if the returnis G_IO_STATUS_NORMAL .
	channel		# a GIOChannel 
	str_return		#  The line read from the GIOChannel , including theline terminator. This data should be freed with 
	return:		#  the status of the operation. 
GIOStatus g_io_channel_read_line_string (GIOChannel *channel, GString *buffer, gsize *terminator_pos, GError **error);	# Reads a line from a GIOChannel , using a GString as a buffer.
	channel		# a GIOChannel 
	buffer		# a GString into which the line will be written.If bufferalready contains data, the old data willbe overwritten.
	terminator_pos		#  location to store position of line terminator, or NULL . 
	return:		#  the status of the operation. 
GIOStatus g_io_channel_read_to_end (GIOChannel *channel, gchar **str_return, gsize *length, GError **error);	# Reads all the remaining data from the file.
	channel		# a GIOChannel 
	str_return		#  Location tostore a pointer to a string holding the remaining data in theGIOChannel . This data should be freed with 
	return:		#  G_IO_STATUS_NORMAL on success.This function never returns G_IO_STATUS_EOF . 
GIOStatus g_io_channel_write_chars (GIOChannel *channel, const gchar *buf, gssize count, gsize *bytes_written, GError **error);	# Replacement for g_io_channel_write() with the new API.
	channel		# a GIOChannel 
	buf		#  a buffer to write data from. 
	return:		#  the status of the operation. 
GIOStatus g_io_channel_write_unichar (GIOChannel *channel, gunichar thechar, GError **error);	# Writes a Unicode character to channel.This function cannot be called on a channel with NULL encoding.
	channel		# a GIOChannel 
	thechar		# a character
	error		# location to return an error of type GConvertError or GIOChannelError 
	return:		#  a GIOStatus  
GIOStatus g_io_channel_flush (GIOChannel *channel, GError **error);	# Flushes the write buffer for the GIOChannel.
	channel		# a GIOChannel 
	error		# location to store an error of type GIOChannelError 
	return:		#  the status of the operation: One ofG_IO_STATUS_NORMAL , G_IO_STATUS_AGAIN , orG_IO_STATUS_ERROR . 
GIOStatus g_io_channel_seek_position (GIOChannel *channel, gint64 offset, GSeekType type, GError **error);	# Replacement for g_io_channel_seek() with the new API.
	channel		# a GIOChannel 
	offset		# The offset in bytes from the position specified by type
	type		# a GSeekType . The type G_SEEK_CUR is only allowed in thosecases where a call to 
	error		# A location to return an error of type GIOChannelError 
	return:		#  the status of the operation. 
GIOStatus g_io_channel_shutdown (GIOChannel *channel, gboolean flush, GError **err);	# Close an IO channel. Any pending data to be written will beflushed if flush is TRUE . The channel will not be freed until thelast reference is dropped using g_io_channel_unref() .
	channel		# a GIOChannel 
	flush		# if TRUE , flush pending
	err		# location to store a GIOChannelError 
	return:		#  the status of the operation. 
GIOChannelError g_io_channel_error_from_errno (gint en);	# Converts an errno error number to a GIOChannelError .
	en		# an errno error number, e.g. EINVAL
	return:		#  a GIOChannelError error number, e.g.G_IO_CHANNEL_ERROR_INVAL . 
GIOChannel  *g_io_channel_ref (GIOChannel *channel);	# Increments the reference count of a GIOChannel .
	channel		# a GIOChannel 
	return:		#  the channelthat was passed in (since 2.6) 
void g_io_channel_unref (GIOChannel *channel);	# Decrements the reference count of a GIOChannel .
	channel		# a GIOChannel 
GSource  *g_io_create_watch (GIOChannel *channel, GIOCondition condition);	# Creates a GSource that's dispatched when condition is met for the given channel. For example, if condition is G_IO_IN , the source will be dispatched when there's data available for reading.
	channel		# a GIOChannel to watch
	condition		# conditions to watch for
	return:		#  a new GSource  
guint g_io_add_watch (GIOChannel *channel, GIOCondition condition, GIOFunc func, gpointer user_data);	# Adds the GIOChannel into the default main loop contextwith the default priority.
	channel		# a GIOChannel 
	condition		# the condition to watch for
	func		# the function to call when the condition is satisfied
	user_data		# user data to pass to func
	return:		#  the event source id 
guint g_io_add_watch_full (GIOChannel *channel, gint priority, GIOCondition condition, GIOFunc func, gpointer user_data, GDestroyNotify notify);	# Adds the GIOChannel into the default main loop contextwith the given priority.
	channel		# a GIOChannel 
	priority		# the priority of the GIOChannel source
	condition		# the condition to watch for
	func		# the function to call when the condition is satisfied
	user_data		# user data to pass to func
	notify		# the function to call when the source is removed
	return:		#  the event source id 
gboolean <span class="c_punctuation">( *GIOFunc<span class="c_punctuation">) (GIOChannel *source, GIOCondition condition, gpointer data);	# Specifies the type of function passed to g_io_add_watch() org_io_add_watch_full() , which is called when the requested conditionon a GIOChannel is satisfied.
	source		# the GIOChannel event source
	condition		# the condition which has been satisfied
	data		# user data set in 
	return:		#  the function should return FALSE if the event sourceshould be removed 
gsize g_io_channel_get_buffer_size (GIOChannel *channel);	# Gets the buffer size.
	channel		# a GIOChannel 
	return:		#  the size of the buffer. 
void g_io_channel_set_buffer_size (GIOChannel *channel, gsize size);	# Sets the buffer size.
	channel		# a GIOChannel 
	size		# the size of the buffer, or 0 to let GLib pick a good size
GIOCondition g_io_channel_get_buffer_condition (GIOChannel *channel);	# This function returns a GIOCondition depending on whether thereis data to be read/space to write data in the internal buffers in the GIOChannel . Only the flags G_IO_IN and G_IO_OUT may be set.
	channel		# A GIOChannel 
	return:		#  A GIOCondition  
GIOFlags g_io_channel_get_flags (GIOChannel *channel);	# Gets the current flags for a GIOChannel , including read-onlyflags such as G_IO_FLAG_IS_READABLE .
	channel		# a GIOChannel 
	return:		#  the flags which are set on the channel 
GIOStatus g_io_channel_set_flags (GIOChannel *channel, GIOFlags flags, GError **error);	# Sets the (writeable) flags in channel to (flags &amp; G_IO_FLAG_SET_MASK ).
	channel		# a GIOChannel 
	flags		# the flags to set on the IO channel
	error		# A location to return an error of type GIOChannelError 
	return:		#  the status of the operation.  
gchar  *g_io_channel_get_line_term (GIOChannel *channel, gint *length);	# This returns the string that GIOChannel uses to determinewhere in the file a line break occurs. A value of NULL indicates autodetection.
	channel		# a GIOChannel 
	length		# a location to return the length of the line terminator
	return:		#  The line termination string. This valueis owned by GLib and must not be freed. 
void g_io_channel_set_line_term (GIOChannel *channel, const gchar *line_term, gint length);	# This sets the string that GIOChannel uses to determinewhere in the file a line break occurs.
	channel		# a GIOChannel 
	line_term		#  The line termination string. Use NULL forautodetect. Autodetection breaks on "
", "
", "
", "\00",and the Unicode paragraph separator. Autodetection should not beused for anything other than file-based channels. 
	length		# The length of the termination string. If -1 is passed, thestring is assumed to be nul-terminated. This option allowstermination strings with embedded nuls.
gboolean g_io_channel_get_buffered (GIOChannel *channel);	# Returns whether channel is buffered.
	channel		# a GIOChannel 
	return:		#  TRUE if the channelis buffered.  
void g_io_channel_set_buffered (GIOChannel *channel, gboolean buffered);	# The buffering state can only be set if the channel's encodingis NULL . For any other encoding, the channel must be buffered.
	channel		# a GIOChannel 
	buffered		# whether to set the channel buffered or unbuffered
gchar  *g_io_channel_get_encoding (GIOChannel *channel);	# Gets the encoding for the input/output of the channel. The internal encoding is always UTF-8. The encoding NULL makes the channel safe for binary data.
	channel		# a GIOChannel 
	return:		#  A string containing the encoding, this string isowned by GLib and must not be freed. 
GIOStatus g_io_channel_set_encoding (GIOChannel *channel, const gchar *encoding, GError **error);	# Sets the encoding for the input/output of the channel. The internal encoding is always UTF-8. The default encoding for the external file is UTF-8.
	channel		# a GIOChannel 
	encoding		#  the encoding type. 
	return:		#  G_IO_STATUS_NORMAL if the encoding was successfully set 
gboolean g_io_channel_get_close_on_unref (GIOChannel *channel);	# Returns whether the file/socket/whatever associated with channelwill be closed when channel receives its final unref and isdestroyed. The default value of this is TRUE for channels createdby g_io_channel_new_file() , and FALSE for all other channels.
	channel		# a GIOChannel .
	return:		#  Whether the channel will be closed on the final unref ofthe GIOChannel data structure. 
void g_io_channel_set_close_on_unref (GIOChannel *channel, gboolean do_close);	# Setting this flag to TRUE for a channel you have already closedcan cause problems.
	channel		# a GIOChannel 
	do_close		# Whether to close the channel on the final unref ofthe GIOChannel data structure. The default value ofthis is TRUE for channels created by 
GIOError g_io_channel_read (GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read);	# g_io_channel_read has been deprecated since version 2.2 and should not be used in newly-written code.
	channel		# a GIOChannel 
	buf		# a buffer to read the data into (which should be at leastcount bytes long)
	count		# the number of bytes to read from the GIOChannel 
	bytes_read		# returns the number of bytes actually read
	return:		#  G_IO_ERROR_NONE if the operation was successful.  
GIOError g_io_channel_write (GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written);	# g_io_channel_write has been deprecated since version 2.2 and should not be used in newly-written code.
	channel		# a GIOChannel 
	buf		# the buffer containing the data to write
	count		# the number of bytes to write
	bytes_written		# the number of bytes actually written
	return:		#  G_IO_ERROR_NONE if the operation was successful. 
GIOError g_io_channel_seek (GIOChannel *channel, gint64 offset, GSeekType type);	# g_io_channel_seek has been deprecated since version 2.2 and should not be used in newly-written code.
	channel		# a GIOChannel 
	offset		# an offset, in bytes, which is added to the position specifiedby type
	type		# the position in the file, which can be G_SEEK_CUR (the currentposition), G_SEEK_SET (the start of the file), or G_SEEK_END (the end of the file)
	return:		#  G_IO_ERROR_NONE if the operation was successful. 
void g_io_channel_close (GIOChannel *channel);	# g_io_channel_close has been deprecated since version 2.2 and should not be used in newly-written code.
	channel		# A GIOChannel 
GError  *g_error_new (GQuark domain, gint code, const gchar *format, ...);	#创建对象:GError with the given domain and code,and a message formatted with format.
	domain		# error domain
	code		# error code
	format		# printf()-style format for error message
	...		# parameters for message format
	return:		#  a new GError  
GError  *g_error_new_literal (GQuark domain, gint code, const gchar *message);	#创建对象:GError ; unlike g_error_new() , message isnot a printf()-style format string. Use this function ifmessage contains text you don't have control over,that could include printf() escape sequences.
	domain		# error domain
	code		# error code
	message		# error message
	return:		#  a new GError  
GError  *g_error_new_valist (GQuark domain, gint code, const gchar *format, va_list args);	#创建对象:GError with the given domain and code,and a message formatted with format.
	domain		# error domain
	code		# error code
	format		# printf()-style format for error message
	args		# va_list of parameters for the message format
	return:		#  a new GError  
void g_error_free (GError *error);	# Frees a GError and associated resources.
	error		# a GError 
GError  *g_error_copy (const GError *error);	# Makes a copy of error.
	error		# a GError 
	return:		#  a new GError  
gboolean g_error_matches (const GError *error, GQuark domain, gint code);	# Returns TRUE if error matches domain and code, FALSE otherwise. In particular, when error is NULL , FALSE willbe returned.
	error		#  a GError . 
	return:		#  whether errorhas domainand code 
void g_set_error (GError **err, GQuark domain, gint code, const gchar *format, ...);	# Does nothing if err is NULL ; if err is non-NULL , then *errmust be NULL . A new GError is created and assigned to *err.
	err		#  a return location for a GError . 
	domain		# error domain
	code		# error code
	format		# printf()-style format
	...		# args for format
void g_set_error_literal (GError **err, GQuark domain, gint code, const gchar *message);	# Does nothing if err is NULL ; if err is non-NULL , then *errmust be NULL . A new GError is created and assigned to *err.Unlike g_set_error() , message is not a printf()-style format string.Use this function if message contains text you don't have control over,that could include printf() escape sequences.
	err		#  a return location for a GError . 
void g_propagate_error (GError **dest, GError *src);	# If dest is NULL , free src; otherwise, moves src into *dest.The error variable dest points to must be NULL .
	dest		#  error return location. 
	src		#  error to move into the return location. 
void g_clear_error (GError **err);	# If err or *err is NULL , does nothing. Otherwise,calls g_error_free() on *err and sets *err to NULL .
	err		# a GError return location
void g_prefix_error (GError **err, const gchar *format, ...);	# Formats a string according to format and prefix it to an existingerror message. If err is NULL (ie: no error variable) then donothing.
	err		#  a return location for a GError . 
void g_propagate_prefixed_error (GError **dest, GError *src, const gchar *format, ...);	# If dest is NULL , free src; otherwise, moves src into *dest.*dest must be NULL . After the move, add a prefix as withg_prefix_error() .
	dest		# error return location
	src		# error to move into the return location
	format		# printf()-style format string
	...		# arguments to format
void g_print (const gchar *format, ...);	# Outputs a formatted message via the print handler.The default print handler simply outputs the message to stdout, withoutappending a trailing new-line character. Typically, format should end withits own new-line character.
	format		# the message format. See the 
	...		# the parameters to insert into the format string
GPrintFunc g_set_print_handler (GPrintFunc func);	# Sets the print handler.
	func		# the new print handler
	return:		#  the old print handler 
void <span class="c_punctuation">( *GPrintFunc<span class="c_punctuation">) (const gchar *string);	# Specifies the type of the print handler functions.These are called with the complete formatted string to output.
	string		# the message to output
void g_printerr (const gchar *format, ...);	# Outputs a formatted message via the error message handler.The default handler simply outputs the message to stderr, without appendinga trailing new-line character. Typically, format should end with its ownnew-line character.
	format		# the message format. See the 
	...		# the parameters to insert into the format string
GPrintFunc g_set_printerr_handler (GPrintFunc func);	# Sets the handler for printing error messages.
	func		# the new error message handler
	return:		#  the old error message handler 
void g_on_error_query (const gchar *prg_name);	# Prompts the user with[E]xit, [H]alt, show [S]tack trace or [P]roceed.This function is intended to be used for debugging use only.The following example shows how it can be used together withthe g_log() functions.
	prg_name		# the program name, needed by gdb for the "[S]tack trace"option. If prg_nameis NULL , 
void g_on_error_stack_trace (const gchar *prg_name);	# Invokes gdb, which attaches to the current process and shows astack trace. Called by g_on_error_query() when the "[S]tack trace"option is selected. You can get the current process's program namewith g_get_prgname() , assuming that you have called gtk_init() orgdk_init().
	prg_name		# the program name, needed by gdb for the "[S]tack trace"option
void <span class="c_punctuation">( *GLogFunc<span class="c_punctuation">) (const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer user_data);	# Specifies the prototype of log handler functions.
	log_domain		# the log domain of the message
	log_level		# the log level of the message (including thefatal and recursion flags)
	message		# the message to process
	user_data		# user data, set in 
void g_log (const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, ...);	# Logs an error or debugging message.
	log_domain		#  the log domain, usually G_LOG_DOMAIN , or NULL for the default. 
	format		# the message format. See the 
	...		# the parameters to insert into the format string
void g_logv (const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, va_list args);	# Logs an error or debugging message.
	log_domain		#  the log domain, or NULL for the default ""application domain. 
	log_level		# the log level
	format		# the message format. See the 
	args		# the parameters to insert into the format string
guint g_log_set_handler (const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data);	# Sets the log handler for a domain and a set of log levels.To handle fatal and recursive messages the log_levels parametermust be combined with the G_LOG_FLAG_FATAL and G_LOG_FLAG_RECURSION bit flags.
	log_domain		#  the log domain, or NULL for the default ""application domain. 
	log_func		# the log handler function
	user_data		# data passed to the log handler
	return:		#  the id of the new handler 
guint g_log_set_handler_full (const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy);	# Like g_log_sets_handler(), but takes a destroy notify for the user_data.
	log_domain		#  the log domain, or NULL for the default ""application domain. 
	log_func		# the log handler function
	user_data		# data passed to the log handler
	destroy		# destroy notify for user_data, or NULL 
	return:		#  the id of the new handler 
void g_log_remove_handler (const gchar *log_domain, guint handler_id);	# Removes the log handler.
	log_domain		# the log domain
	handler_id		# the id of the handler, which was returnedin 
GLogLevelFlags g_log_set_always_fatal (GLogLevelFlags fatal_mask);	# Sets the message levels which are always fatal, in any log domain.When a message with any of these levels is logged the program terminates.You can only set the levels defined by GLib to be fatal.G_LOG_LEVEL_ERROR is always fatal.
	fatal_mask		# the mask containing bits set for each levelof error which is to be fatal
	return:		#  the old fatal mask 
GLogLevelFlags g_log_set_fatal_mask (const gchar *log_domain, GLogLevelFlags fatal_mask);	# Sets the log levels which are fatal in the given domain.G_LOG_LEVEL_ERROR is always fatal.
	log_domain		# the log domain
	fatal_mask		# the new fatal mask
	return:		#  the old fatal mask for the log domain 
void g_log_default_handler (const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data);	# The default log handler set up by GLib; g_log_set_default_handler() allows to install an alternate default log handler.This is used if no log handler has been set for the particular logdomain and log level combination. It outputs the message to stderror stdout and if the log level is fatal it calls abort(). It automaticallyprints a new-line character after the message, so one does not need to bemanually included in message.
	log_domain		#  the log domain of the message, or NULL for thedefault "" application domain. 
GLogFunc g_log_set_default_handler (GLogFunc log_func, gpointer user_data);	# Installs a default log handler which is used if nolog handler has been set for the particular log domainand log level combination. By default, GLib usesg_log_default_handler() as default log handler.
	log_func		# the log handler function
	user_data		# data passed to the log handler
	return:		#  the previous default log handler 
void g_log_structured (const gchar *log_domain, GLogLevelFlags log_level, ...);	# Log a message with structured data. The message will be passed through tothe log writer set by the application using g_log_set_writer_func() . If themessage is fatal (i.e. its log level is G_LOG_LEVEL_ERROR ), the program willbe aborted at the end of this function. If the log writer returnsG_LOG_WRITER_UNHANDLED (failure), no other fallback writers will be tried.See the documentation for GLogWriterFunc for information on chainingwriters.
	log_domain		# log domain, usually G_LOG_DOMAIN 
	log_level		# log level, either from GLogLevelFlags , or a user-definedlevel
	...		# key-value pairs of structured data to add to the log entry, followedby the key "MESSAGE", followed by a 
void g_log_variant (const gchar *log_domain, GLogLevelFlags log_level, GVariant *fields);	# Log a message with structured data, accepting the data within a GVariant . Thisversion is especially useful for use in other languages, via introspection.
	log_domain		#  log domain, usually G_LOG_DOMAIN . 
	fields		# a dictionary (GVariant of the type G_VARIANT_TYPE_VARDICT )containing the key-value pairs of message data.
void g_log_structured_array (GLogLevelFlags log_level, const GLogField *fields, gsize n_fields);	# Log a message with structured data. The message will be passed through to thelog writer set by the application using g_log_set_writer_func() . If themessage is fatal (i.e. its log level is G_LOG_LEVEL_ERROR ), the program willbe aborted at the end of this function.
	log_level		# log level, either from GLogLevelFlags , or a user-definedlevel
	fields		#  key–value pairs of structured data to addto the log message. 
GLogWriterOutput <span class="c_punctuation">( *GLogWriterFunc<span class="c_punctuation">) (GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);	# Writer function for log entries. A log entry is a collection of one or moreGLogFields , using the standard field names from journalspecification .See g_log_structured() for more information.
	log_level		# log level of the message
	fields		#  fields forming the message. 
	return:		#  G_LOG_WRITER_HANDLED if the log entry was handled successfully;G_LOG_WRITER_UNHANDLED otherwise 
void g_log_set_writer_func (GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free);	# Set a writer function which will be called to format and write out each logmessage. Each program should set a writer function, or the default writer(g_log_writer_default() ) will be used.
	func		# log writer function, which must not be NULL 
	user_data		#  user data to pass to func. 
gboolean g_log_writer_supports_color (gint output_fd);	# Check whether the given output_fd file descriptor supports ANSI colorescape sequences. If so, they can safely be used when formatting logmessages.
	output_fd		# output file descriptor to check
	return:		#  TRUE if ANSI color escapes are supported, FALSE otherwise 
gboolean g_log_writer_is_journald (gint output_fd);	# Check whether the given output_fd file descriptor is a connection to thesystemd journal, or something else (like a log file or stdout orstderr).
	output_fd		# output file descriptor to check
	return:		#  TRUE if output_fdpoints to the journal, FALSE otherwise 
gchar  *g_log_writer_format_fields (GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gboolean use_color);	# Format a structured log message as a string suitable for outputting to theterminal (or elsewhere). This will include the values of all fields it knowshow to interpret, which includes MESSAGE and GLIB_DOMAIN (see thedocumentation for g_log_structured() ). It does not include values fromunknown fields.
	log_level		# log level, either from GLogLevelFlags , or a user-definedlevel
	fields		#  key–value pairs of structured data formingthe log message. 
	return:		#  string containing the formatted log message, inthe character set of the current locale.  
GLogWriterOutput g_log_writer_journald (GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);	# Format a structured log message and send it to the systemd journal as a setof key–value pairs. All fields are sent to the journal, but if a field haslength zero (indicating program-specific data) then only its key will besent.
	log_level		# log level, either from GLogLevelFlags , or a user-definedlevel
	fields		#  key–value pairs of structured data formingthe log message. 
	return:		#  G_LOG_WRITER_HANDLED on success, G_LOG_WRITER_UNHANDLED otherwise 
GLogWriterOutput g_log_writer_standard_streams (GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);	# Format a structured log message and print it to either stdout or stderr,depending on its log level. G_LOG_LEVEL_INFO and G_LOG_LEVEL_DEBUG messagesare sent to stdout; all other log levels are sent to stderr. Only fieldswhich are understood by this function are included in the formatted stringwhich is printed.
	log_level		# log level, either from GLogLevelFlags , or a user-definedlevel
	fields		#  key–value pairs of structured data formingthe log message. 
	return:		#  G_LOG_WRITER_HANDLED on success, G_LOG_WRITER_UNHANDLED otherwise 
GLogWriterOutput g_log_writer_default (GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data);	# Format a structured log message and output it to the default log destinationfor the platform. On Linux, this is typically the systemd journal, fallingback to stdout or stderr if running from the terminal or if output isbeing redirected to a file.
	log_level		# log level, either from GLogLevelFlags , or a user-definedlevel
	fields		#  key–value pairs of structured data formingthe log message. 
	return:		#  G_LOG_WRITER_HANDLED on success, G_LOG_WRITER_UNHANDLED otherwise 
gchar  *g_strdup (const gchar *str);	# Duplicates a string. If str is NULL it returns NULL .The returned string should be freed with g_free() when no longer needed.
	str		#  the string to duplicate. 
	return:		#  a newly-allocated copy of str 
gchar  *g_strndup (const gchar *str, gsize n);	# Duplicates the first n bytes of a string, returning a newly-allocatedbuffer n + 1 bytes long which will always be nul-terminated. If stris less than n bytes long the buffer is padded with nuls. If str isNULL it returns NULL . The returned value should be freed when no longerneeded.
	str		# the string to duplicate
	n		# the maximum number of bytes to copy from str
	return:		#  a newly-allocated buffer containing the first nbytesof str, nul-terminated 
gchar  **g_strdupv (gchar **str_array);	# Copies NULL -terminated array of strings. The copy is a deep copy;the new array should be freed by first freeing each string, thenthe array itself. g_strfreev() does this for you. If calledon a NULL value, g_strdupv() simply returns NULL .
	str_array		#  a NULL -terminated array of strings. 
	return:		#  a new NULL -terminated array of strings.  
gchar  *g_strnfill (gsize length, gchar fill_char);	#创建对象:string length bytes long filled with fill_char.The returned string should be freed when no longer needed.
	length		# the length of the new string
	fill_char		# the byte to fill the string with
	return:		#  a newly-allocated string filled the fill_char 
gchar  *g_stpcpy (gchar *dest, const char *src);	# Copies a nul-terminated string into the dest buffer, include thetrailing nul, and return a pointer to the trailing nul byte.This is useful for concatenating multiple strings togetherwithout having to repeatedly scan for the end.
	dest		# destination buffer.
	src		# source string.
	return:		#  a pointer to trailing nul byte. 
gchar  *g_strstr_len (const gchar *haystack, gssize haystack_len, const gchar *needle);	# Searches the string haystack for the first occurrenceof the string needle, limiting the length of the searchto haystack_len.
	haystack		# a string
	haystack_len		# the maximum length of haystack. Note that -1 isa valid length, if haystackis nul-terminated, meaning it willsearch through the whole string.
	needle		# the string to search for
	return:		#  a pointer to the found occurrence, orNULL if not found. 
gchar  *g_strrstr (const gchar *haystack, const gchar *needle);	# Searches the string haystack for the last occurrenceof the string needle.
	haystack		# a nul-terminated string
	needle		# the nul-terminated string to search for
	return:		#  a pointer to the found occurrence, orNULL if not found. 
gchar  *g_strrstr_len (const gchar *haystack, gssize haystack_len, const gchar *needle);	# Searches the string haystack for the last occurrenceof the string needle, limiting the length of the searchto haystack_len.
	haystack		# a nul-terminated string
	haystack_len		# the maximum length of haystack
	needle		# the nul-terminated string to search for
	return:		#  a pointer to the found occurrence, orNULL if not found. 
gboolean g_str_has_prefix (const gchar *str, const gchar *prefix);	# Looks whether the string str begins with prefix.
	str		# a nul-terminated string
	prefix		# the nul-terminated prefix to look for
	return:		#  TRUE if strbegins with prefix, FALSE otherwise. 
gboolean g_str_has_suffix (const gchar *str, const gchar *suffix);	# Looks whether the string str ends with suffix.
	str		# a nul-terminated string
	suffix		# the nul-terminated suffix to look for
	return:		#  TRUE if strend with suffix, FALSE otherwise. 
int g_strcmp0 (const char *str1, const char *str2);	# Compares str1 and str2 like strcmp(). Handles NULL gracefully by sorting it before non-NULL strings.Comparing two NULL pointers returns 0.
	str1		#  a C string or NULL . 
	return:		#  an integer less than, equal to, or greater than zero, if str1is &lt;, == or &gt; than str2. 
gchar  *g_str_to_ascii (const gchar *str, const gchar *from_locale);	# Transliterate str to plain ASCII.
	str		# a string, in UTF-8
	from_locale		#  the source locale, if known. 
	return:		#  a string in plain ASCII 
gchar  **g_str_tokenize_and_fold (const gchar *string, const gchar *translit_locale, gchar ***ascii_alternates);	# Tokenises string and performs folding on each token.
	string		# a string
	translit_locale		#  the language code (like 'de' or'en_GB') from which stringoriginates. 
	return:		#  the folded tokens.  
gboolean g_str_match_string (const gchar *search_term, const gchar *potential_hit, gboolean accept_alternates);	# Checks if a search conducted for search_term should matchpotential_hit.
	search_term		# the search term from the user
	potential_hit		# the text that may be a hit
	accept_alternates		# TRUE to accept ASCII alternates
	return:		#  TRUE if potential_hitis a hit 
gsize g_strlcpy (gchar *dest, const gchar *src, gsize dest_size);	# Portability wrapper that calls strlcpy() on systems which have it,and emulates strlcpy() otherwise. Copies src to dest; dest isguaranteed to be nul-terminated; src must be nul-terminated;dest_size is the buffer size, not the number of bytes to copy.
	dest		# destination buffer
	src		# source buffer
	dest_size		# length of destin bytes
	return:		#  length of src 
gsize g_strlcat (gchar *dest, const gchar *src, gsize dest_size);	# Portability wrapper that calls strlcat() on systems which have it,and emulates it otherwise. Appends nul-terminated src string to dest,guaranteeing nul-termination for dest. The total size of dest won'texceed dest_size.
	dest		# destination buffer, already containing one nul-terminated string
	src		# source buffer
	dest_size		# length of destbuffer in bytes (not length of existing stringinside dest)
	return:		#  size of attempted result, which is MIN (dest_size, strlen(original dest)) + strlen (src), so if retval &gt;= dest_size,truncation occurred. 
gchar  *g_strdup_printf (const gchar *format, ...);	# Similar to the standard C sprintf() function but safer, since itcalculates the maximum space required and allocates memory to holdthe result. The returned string should be freed with g_free() when nolonger needed.
	format		# a standard 
	...		# the parameters to insert into the format string
	return:		#  a newly-allocated string holding the result 
gchar  *g_strdup_vprintf (const gchar *format, va_list args);	# Similar to the standard C vsprintf() function but safer, since itcalculates the maximum space required and allocates memory to holdthe result. The returned string should be freed with g_free() whenno longer needed.
	format		# a standard 
	args		# the list of parameters to insert into the format string
	return:		#  a newly-allocated string holding the result 
gint g_printf (gchar const *format, ...);	# An implementation of the standard printf() function which supports positional parameters, as specified in the Single Unix Specification.
	format		# a standard 
	...		# the arguments to insert in the output.
	return:		#  the number of bytes printed. 
gint g_vprintf (gchar const *format, va_list args);	# An implementation of the standard vprintf() function which supports positional parameters, as specified in the Single Unix Specification.
	format		# a standard 
	args		# the list of arguments to insert in the output.
	return:		#  the number of bytes printed. 
gint g_fprintf (FILE *file, gchar const *format, ...);	# An implementation of the standard fprintf() function which supports positional parameters, as specified in the Single Unix Specification.
	file		#  the stream to write to. 
	...		# the arguments to insert in the output.
	return:		#  the number of bytes printed. 
gint g_vfprintf (FILE *file, gchar const *format, va_list args);	# An implementation of the standard fprintf() function which supports positional parameters, as specified in the Single Unix Specification.
	file		#  the stream to write to. 
	args		# the list of arguments to insert in the output.
	return:		#  the number of bytes printed. 
gint g_sprintf (gchar *string, gchar const *format, ...);	# An implementation of the standard sprintf() function which supportspositional parameters, as specified in the Single Unix Specification.
	string		# A pointer to a memory buffer to contain the resulting string. Itis up to the caller to ensure that the allocated buffer is largeenough to hold the formatted result
	format		# a standard 
	...		# the arguments to insert in the output.
	return:		#  the number of bytes printed. 
gint g_vsprintf (gchar *string, gchar const *format, va_list args);	# An implementation of the standard vsprintf() function which supports positional parameters, as specified in the Single Unix Specification.
	string		# the buffer to hold the output.
	format		# a standard 
	args		# the list of arguments to insert in the output.
	return:		#  the number of bytes printed. 
gint g_snprintf (gchar *string, gulong n, gchar const *format, ...);	# A safer form of the standard sprintf() function. The output is guaranteedto not exceed n characters (including the terminating nul character), soit is easy to ensure that a buffer overflow cannot occur.
	string		# the buffer to hold the output.
	n		# the maximum number of bytes to produce (including theterminating nul character).
	format		# a standard 
	...		# the arguments to insert in the output.
	return:		#  the number of bytes which would be produced if the bufferwas large enough. 
gint g_vsnprintf (gchar *string, gulong n, gchar const *format, va_list args);	# A safer form of the standard vsprintf() function. The output is guaranteedto not exceed n characters (including the terminating nul character), so it is easy to ensure that a buffer overflow cannot occur.
	string		# the buffer to hold the output.
	n		# the maximum number of bytes to produce (including theterminating nul character).
	format		# a standard 
	args		# the list of arguments to insert in the output.
	return:		#  the number of bytes which would be produced if the bufferwas large enough. 
gint g_vasprintf (gchar **string, gchar const *format, va_list args);	# An implementation of the GNU vasprintf() function which supports positional parameters, as specified in the Single Unix Specification.This function is similar to g_vsprintf() , except that it allocates a string to hold the output, instead of putting the output in a buffer you allocate in advance.
	string		# the return location for the newly-allocated string.
	format		# a standard 
	args		# the list of arguments to insert in the output.
	return:		#  the number of bytes printed. 
gsize g_printf_string_upper_bound (const gchar *format, va_list args);	# Calculates the maximum space needed to store the outputof the sprintf() function.
	format		# the format string. See the 
	args		# the parameters to be inserted into the format string
	return:		#  the maximum space needed to store the formatted string 
gboolean g_str_is_ascii (const gchar *str);	# Determines if a string is pure ASCII. A string is pure ASCII if itcontains no bytes with the high bit set.
	str		# a string
	return:		#  TRUE if stris ASCII 
gboolean g_ascii_isalnum (gchar c);	# Determines whether a character is alphanumeric.
	c		# any character
	return:		#  TRUE if cis an ASCII alphanumeric character 
gboolean g_ascii_isalpha (gchar c);	# Determines whether a character is alphabetic (i.e. a letter).
	c		# any character
	return:		#  TRUE if cis an ASCII alphabetic character 
gboolean g_ascii_iscntrl (gchar c);	# Determines whether a character is a control character.
	c		# any character
	return:		#  TRUE if cis an ASCII control character. 
gboolean g_ascii_isdigit (gchar c);	# Determines whether a character is digit (0-9).
	c		# any character
	return:		#  TRUE if cis an ASCII digit. 
gboolean g_ascii_isgraph (gchar c);	# Determines whether a character is a printing character and not a space.
	c		# any character
	return:		#  TRUE if cis an ASCII printing character other than space. 
gboolean g_ascii_islower (gchar c);	# Determines whether a character is an ASCII lower case letter.
	c		# any character
	return:		#  TRUE if cis an ASCII lower case letter 
gboolean g_ascii_isprint (gchar c);	# Determines whether a character is a printing character.
	c		# any character
	return:		#  TRUE if cis an ASCII printing character. 
gboolean g_ascii_ispunct (gchar c);	# Determines whether a character is a punctuation character.
	c		# any character
	return:		#  TRUE if cis an ASCII punctuation character. 
gboolean g_ascii_isspace (gchar c);	# Determines whether a character is a white-space character.
	c		# any character
	return:		#  TRUE if cis an ASCII white-space character 
gboolean g_ascii_isupper (gchar c);	# Determines whether a character is an ASCII upper case letter.
	c		# any character
	return:		#  TRUE if cis an ASCII upper case letter 
gboolean g_ascii_isxdigit (gchar c);	# Determines whether a character is a hexadecimal-digit character.
	c		# any character
	return:		#  TRUE if cis an ASCII hexadecimal-digit character. 
gint g_ascii_digit_value (gchar c);	# Determines the numeric value of a character as a decimal digit.Differs from g_unichar_digit_value() because it takes a char, sothere's no worry about sign extension if characters are signed.
	c		# an ASCII character
	return:		#  If cis a decimal digit (according to g_ascii_isdigit() ),its numeric value. Otherwise, -1. 
gint g_ascii_xdigit_value (gchar c);	# Determines the numeric value of a character as a hexidecimaldigit. Differs from g_unichar_xdigit_value() because it takesa char, so there's no worry about sign extension if charactersare signed.
	c		# an ASCII character.
	return:		#  If cis a hex digit (according to g_ascii_isxdigit() ),its numeric value. Otherwise, -1. 
gint g_ascii_strcasecmp (const gchar *s1, const gchar *s2);	# Compare two strings, ignoring the case of ASCII characters.
	s1		# string to compare with s2
	s2		# string to compare with s1
	return:		#  0 if the strings match, a negative value if s1&lt; s2,or a positive value if s1&gt; s2. 
gint g_ascii_strncasecmp (const gchar *s1, const gchar *s2, gsize n);	# Compare s1 and s2, ignoring the case of ASCII characters and anycharacters after the first n in each string.
	s1		# string to compare with s2
	s2		# string to compare with s1
	n		# number of characters to compare
	return:		#  0 if the strings match, a negative value if s1&lt; s2,or a positive value if s1&gt; s2. 
gchar  *g_ascii_strup (const gchar *str, gssize len);	# Converts all lower case ASCII letters to upper case ASCII letters.
	str		# a string
	len		# length of strin bytes, or -1 if stris nul-terminated
	return:		#  a newly allocated string, with all the lower casecharacters in strconverted to upper case, with semantics thatexactly match g_ascii_toupper() . (Note that this is unlike theold g_strup() , which modified the string in place.) 
gchar  *g_ascii_strdown (const gchar *str, gssize len);	# Converts all upper case ASCII letters to lower case ASCII letters.
	str		# a string
	len		# length of strin bytes, or -1 if stris nul-terminated
	return:		#  a newly-allocated string, with all the upper casecharacters in strconverted to lower case, with semantics thatexactly match g_ascii_tolower() . (Note that this is unlike theold g_strdown() , which modified the string in place.) 
gchar g_ascii_tolower (gchar c);	# Convert a character to ASCII lower case.
	c		# any character
	return:		#  the result of converting cto lower case. If cisnot an ASCII upper case letter, cis returned unchanged. 
gchar g_ascii_toupper (gchar c);	# Convert a character to ASCII upper case.
	c		# any character
	return:		#  the result of converting cto upper case. If cis notan ASCII lower case letter, cis returned unchanged. 
GString  *g_string_ascii_up (GString *string);	# Converts all lowercase ASCII letters to uppercase ASCII letters.
	string		# a GString
	return:		#  passed-in stringpointer, with all thelowercase characters converted to uppercase in place,with semantics that exactly match g_ascii_toupper() .  
GString  *g_string_ascii_down (GString *string);	# Converts all uppercase ASCII letters to lowercase ASCII letters.
	string		# a GString
	return:		#  passed-in stringpointer, with all theuppercase characters converted to lowercase in place,with semantics that exactly match g_ascii_tolower() .  
gchar  *g_strup (gchar *string);	# g_strup has been deprecated since version 2.2 and should not be used in newly-written code.
	string		# the string to convert
	return:		#  the string 
gchar  *g_strdown (gchar *string);	# g_strdown has been deprecated since version 2.2 and should not be used in newly-written code.
	string		# the string to convert.
	return:		#  the string 
gint g_strcasecmp (const gchar *s1, const gchar *s2);	# g_strcasecmp has been deprecated since version 2.2 and should not be used in newly-written code.
	s1		# a string
	s2		# a string to compare with s1
	return:		#  0 if the strings match, a negative value if s1&lt; s2,or a positive value if s1&gt; s2. 
gint g_strncasecmp (const gchar *s1, const gchar *s2, guint n);	# g_strncasecmp has been deprecated since version 2.2 and should not be used in newly-written code.
	s1		# a string
	s2		# a string to compare with s1
	n		# the maximum number of characters to compare
	return:		#  0 if the strings match, a negative value if s1&lt; s2,or a positive value if s1&gt; s2. 
gchar  *g_strreverse (gchar *string);	# Reverses all of the bytes in a string. For example,g_strreverse ("abcdef") will result in "fedcba".
	string		# the string to reverse
	return:		#  the same pointer passed in as string 
gint64 g_ascii_strtoll (const gchar *nptr, gchar **endptr, guint base);	# Converts a string to a gint64 value.This function behaves like the standard strtoll() functiondoes in the C locale. It does this without actuallychanging the current locale, since that would not bethread-safe.
	nptr		# the string to convert to a numeric value.
	endptr		#  if non-NULL , it returns thecharacter after the last character used in the conversion. 
	return:		#  the gint64 value or zero on error. 
guint64 g_ascii_strtoull (const gchar *nptr, gchar **endptr, guint base);	# Converts a string to a guint64 value.This function behaves like the standard strtoull() functiondoes in the C locale. It does this without actuallychanging the current locale, since that would not bethread-safe.
	nptr		# the string to convert to a numeric value.
	endptr		#  if non-NULL , it returns thecharacter after the last character used in the conversion. 
	return:		#  the guint64 value or zero on error. 
gdouble g_ascii_strtod (const gchar *nptr, gchar **endptr);	# Converts a string to a gdouble value.
	nptr		# the string to convert to a numeric value.
	endptr		#  if non-NULL , it returns thecharacter after the last character used in the conversion. 
	return:		#  the gdouble value. 
gchar  *g_ascii_dtostr (gchar *buffer, gint buf_len, gdouble d);	# Converts a gdouble to a string, using the '.' asdecimal point.
	buffer		# A buffer to place the resulting string in
	buf_len		# The length of the buffer.
	d		# The gdouble to convert
	return:		#  The pointer to the buffer with the converted string. 
gchar  *g_ascii_formatd (gchar *buffer, gint buf_len, const gchar *format, gdouble d);	# Converts a gdouble to a string, using the '.' asdecimal point. To format the number you pass ina printf()-style format string. Allowed conversionspecifiers are 'e', 'E', 'f', 'F', 'g' and 'G'.
	buffer		# A buffer to place the resulting string in
	buf_len		# The length of the buffer.
	format		# The 
	d		# The gdouble to convert
	return:		#  The pointer to the buffer with the converted string. 
gdouble g_strtod (const gchar *nptr, gchar **endptr);	# Converts a string to a gdouble value.It calls the standard strtod() function to handle the conversion, butif the string is not completely converted it attempts the conversionagain with g_ascii_strtod() , and returns the best match.
	nptr		# the string to convert to a numeric value.
	endptr		#  if non-NULL , it returns thecharacter after the last character used in the conversion. 
	return:		#  the gdouble value. 
gboolean g_ascii_string_to_signed (const gchar *str, guint base, gint64 min, gint64 max, gint64 *out_num, GError **error);	# A convenience function for converting a string to a signed number.
	str		# a string
	base		# base of a parsed number
	min		# a lower bound (inclusive)
	max		# an upper bound (inclusive)
	out_num		#  a return location for a number. 
	return:		#  TRUE if strwas a number, otherwise FALSE . 
gboolean g_ascii_string_to_unsigned (const gchar *str, guint base, guint64 min, guint64 max, guint64 *out_num, GError **error);	# A convenience function for converting a string to an unsigned number.
	str		# a string
	base		# base of a parsed number
	min		# a lower bound (inclusive)
	max		# an upper bound (inclusive)
	out_num		#  a return location for a number. 
	return:		#  TRUE if strwas a number, otherwise FALSE . 
gchar  *g_strchug (gchar *string);	# Removes leading whitespace from a string, by moving the restof the characters forward.
	string		# a string to remove the leading whitespace from
	return:		#  string 
gchar  *g_strchomp (gchar *string);	# Removes trailing whitespace from a string.
	string		# a string to remove the trailing whitespace from
	return:		#  string 
gchar  *g_strdelimit (gchar *string, const gchar *delimiters, gchar new_delimiter);	# Converts any delimiter characters in string to new_delimiter.Any characters in string which are found in delimiters arechanged to the new_delimiter character. Modifies string in place,and returns string itself, not a copy. The return value is toallow nesting such as
	string		# the string to convert
	delimiters		#  a string containing the current delimiters,or NULL to use the standard delimiters defined in G_STR_DELIMITERS . 
	return:		#  string 
gchar  *g_strescape (const gchar *source, const gchar *exceptions);	# Escapes the special characters '\b', '\f', '\n', '\r', '\t', '\v', '\'and '"' in the string source by inserting a '\' beforethem. Additionally all characters in the range 0x01-0x1F (everythingbelow SPACE) and in the range 0x7F-0xFF (all non-ASCII chars) arereplaced with a '\' followed by their octal representation.Characters supplied in exceptions are not escaped.
	source		# a string to escape
	exceptions		#  a string of characters not to escape in source. 
	return:		#  a newly-allocated copy of sourcewith certaincharacters escaped. See above. 
gchar  *g_strcompress (const gchar *source);	# Replaces all escaped characters with their one byte equivalent.
	source		# a string to compress
	return:		#  a newly-allocated copy of sourcewith all escapedcharacter compressed 
gchar  *g_strcanon (gchar *string, const gchar *valid_chars, gchar substitutor);	# For each character in string, if the character is not in valid_chars,replaces the character with substitutor. Modifies string in place,and return string itself, not a copy. The return value is to allownesting such as
	string		# a nul-terminated array of bytes
	valid_chars		# bytes permitted in string
	substitutor		# replacement character for disallowed bytes
	return:		#  string 
gchar  **g_strsplit (const gchar *string, const gchar *delimiter, gint max_tokens);	# Splits a string into a maximum of max_tokens pieces, using the givendelimiter. If max_tokens is reached, the remainder of string isappended to the last token.
	string		# a string to split
	delimiter		# a string which specifies the places at which to splitthe string. The delimiter is not included in any of the resultingstrings, unless max_tokensis reached.
	max_tokens		# the maximum number of pieces to split stringinto.If this is less than 1, the string is split completely.
	return:		#  a newly-allocated NULL -terminated array of strings. Useg_strfreev() to free it. 
gchar  **g_strsplit_set (const gchar *string, const gchar *delimiters, gint max_tokens);	# Splits string into a number of tokens not containing any of the charactersin delimiter. A token is the (possibly empty) longest string that does notcontain any of the characters in delimiters. If max_tokens is reached, theremainder is appended to the last token.
	string		# The string to be tokenized
	delimiters		# A nul-terminated string containing bytes that are usedto split the string.
	max_tokens		# The maximum number of tokens to split stringinto.If this is less than 1, the string is split completely
	return:		#  a newly-allocated NULL -terminated array of strings. Useg_strfreev() to free it. 
void g_strfreev (gchar **str_array);	# Frees a NULL -terminated array of strings, as well as eachstring it contains.
	str_array		#  a NULL -terminated array of strings to free. 
gchar  *g_strconcat (const gchar *string1, ...);	# Concatenates all of the given strings into one long string. Thereturned string should be freed with g_free() when no longer needed.
	string1		# the first string to add, which must not be NULL 
	...		# a NULL -terminated list of strings to append to the string
	return:		#  a newly-allocated string containing all the string arguments 
gchar  *g_strjoin (const gchar *separator, ...);	# Joins a number of strings together to form one long string, with theoptional separator inserted between each of them. The returned stringshould be freed with g_free() .
	separator		#  a string to insert between each of thestrings, or NULL . 
	return:		#  a newly-allocated string containing all of the strings joinedtogether, with separatorbetween them 
gchar  *g_strjoinv (const gchar *separator, gchar **str_array);	# Joins a number of strings together to form one long string, with theoptional separator inserted between each of them. The returned stringshould be freed with g_free() .
	separator		#  a string to insert between each of thestrings, or NULL . 
	return:		#  a newly-allocated string containing all of the strings joinedtogether, with separatorbetween them 
guint g_strv_length (gchar **str_array);	# Returns the length of the given NULL -terminatedstring array str_array.
	str_array		# a NULL -terminated array of strings
	return:		#  length of str_array. 
gboolean g_strv_contains (const gchar * const *strv, const gchar *str);	# Checks if strv contains str. strv must not be NULL .
	strv		# a NULL -terminated array of strings
	str		# a string
	return:		#  TRUE if stris an element of strv, according to g_str_equal() . 
gchar  *g_strerror (gint errnum);	# Returns a string corresponding to the given error code, e.g. "nosuch process". Unlike strerror(), this always returns a string inUTF-8 encoding, and the pointer is guaranteed to remain valid forthe lifetime of the process.
	errnum		# the system error number. See the standard C errnodocumentation
	return:		#  a UTF-8 string describing the error code. If the error codeis unknown, it returns a string like "unknown error (&lt;code&gt;)". 
gchar  *g_strsignal (gint signum);	# Returns a string describing the given signal, e.g. "Segmentation fault".You should use this function in preference to strsignal(), because itreturns a string in UTF-8 encoding, and since not all platforms supportthe strsignal() function.
	signum		# the signal number. See the signal documentation
	return:		#  a UTF-8 string describing the signal. If the signal is unknown,it returns "unknown signal (&lt;signum&gt;)". 
gchar  *g_convert (const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string from one character set to another.
	str		# the string to convert
	len		# the length of the string in bytes, or -1 if the string isnul-terminated (Note that some encodings may allow nulbytes to occur inside strings. In that case, using -1for the lenparameter is unsafe)
	to_codeset		# name of character set into which to convert str
	from_codeset		# character set of str.
	bytes_read		#  location to store the number of bytes in theinput string that were successfully converted, or NULL .Even if the conversion was successful, this may beless than lenif there were partial charactersat the end of the input. If the errorG_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the valuestored will the byte offset after the last validinput sequence. 
	return:		#  If the conversion was successful, a newly allocatednul-terminated string, which must be freed withg_free() . Otherwise NULL and errorwill be set. 
gchar  *g_convert_with_fallback (const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string from one character set to another, possiblyincluding fallback sequences for characters not representablein the output. Note that it is not guaranteed that the specificationfor the fallback sequences in fallback will be honored. Somesystems may do an approximate conversion from from_codesetto to_codeset in their iconv() functions, in which case GLib will simply return that approximate conversion.
	str		# the string to convert
	len		# the length of the string in bytes, or -1 if the string isnul-terminated (Note that some encodings may allow nulbytes to occur inside strings. In that case, using -1for the lenparameter is unsafe)
	to_codeset		# name of character set into which to convert str
	from_codeset		# character set of str.
	fallback		# UTF-8 string to use in place of character notpresent in the target encoding. (The string must berepresentable in the target encoding).If NULL , characters not in the target encoding willbe represented as Unicode escapes \uxxxx or \Uxxxxyyyy.
	bytes_read		# location to store the number of bytes in theinput string that were successfully converted, or NULL .Even if the conversion was successful, this may beless than lenif there were partial charactersat the end of the input.
	bytes_written		# the number of bytes stored in the output buffer (notincluding the terminating nul).
	error		# location to store the error occurring, or NULL to ignoreerrors. Any of the errors in GConvertError may occur.
	return:		#  If the conversion was successful, a newly allocatednul-terminated string, which must be freed withg_free() . Otherwise NULL and errorwill be set. 
gchar  *g_convert_with_iconv (const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string from one character set to another. 
	str		# the string to convert
	len		# the length of the string in bytes, or -1 if the string isnul-terminated (Note that some encodings may allow nulbytes to occur inside strings. In that case, using -1for the lenparameter is unsafe)
	converter		# conversion descriptor from 
	bytes_read		# location to store the number of bytes in theinput string that were successfully converted, or NULL .Even if the conversion was successful, this may beless than lenif there were partial charactersat the end of the input. If the errorG_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the valuestored will the byte offset after the last validinput sequence.
	bytes_written		# the number of bytes stored in the output buffer (notincluding the terminating nul).
	error		# location to store the error occurring, or NULL to ignoreerrors. Any of the errors in GConvertError may occur.
	return:		#  If the conversion was successful, a newly allocatednul-terminated string, which must be freed withg_free() . Otherwise NULL and errorwill be set. 
GIConv g_iconv_open (const gchar *to_codeset, const gchar *from_codeset);	# Same as the standard UNIX routine iconv_open(), butmay be implemented via libiconv on UNIX flavors that lacka native implementation.
	to_codeset		# destination codeset
	from_codeset		# source codeset
	return:		#  a "conversion descriptor", or (GIConv)-1 ifopening the converter failed. 
gsize g_iconv (GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left);	# Same as the standard UNIX routine iconv(), butmay be implemented via libiconv on UNIX flavors that lacka native implementation.
	converter		# conversion descriptor from 
	inbuf		# bytes to convert
	inbytes_left		# inout parameter, bytes remaining to convert in inbuf
	outbuf		# converted output bytes
	outbytes_left		# inout parameter, bytes available to fill in outbuf
	return:		#  count of non-reversible conversions, or -1 on error 
gint g_iconv_close (GIConv converter);	# Same as the standard UNIX routine iconv_close(), butmay be implemented via libiconv on UNIX flavors that lacka native implementation. Should be called to clean upthe conversion descriptor from g_iconv_open() whenyou are done converting things.
	converter		# a conversion descriptor from 
	return:		#  -1 on error, 0 on success 
gchar  *g_locale_to_utf8 (const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string which is in the encoding used for strings bythe C runtime (usually the same as that used by the operatingsystem) in the current locale into a UTF-8 string.
	opsysstring		# a string in the encoding of the current locale. On Windowsthis means the system codepage.
	len		# the length of the string, or -1 if the string isnul-terminated (Note that some encodings may allow nulbytes to occur inside strings. In that case, using -1for the lenparameter is unsafe)
	bytes_read		#  location to store the number of bytes in theinput string that were successfully converted, or NULL .Even if the conversion was successful, this may beless than lenif there were partial charactersat the end of the input. If the errorG_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the valuestored will the byte offset after the last validinput sequence. 
	return:		#  A newly-allocated buffer containing the converted string,or NULL on an error, and error will be set. 
gchar  *g_filename_to_utf8 (const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string which is in the encoding used by GLib forfilenames into a UTF-8 string. Note that on Windows GLib uses UTF-8for filenames; on other platforms, this function indirectly depends on the current locale .
	opsysstring		#  a string in the encoding for filenames. 
	return:		#  The converted string, or NULL on an error. 
gchar  *g_filename_from_utf8 (const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string from UTF-8 to the encoding GLib uses forfilenames. Note that on Windows GLib uses UTF-8 for filenames;on other platforms, this function indirectly depends on the current locale .
	utf8string		# a UTF-8 encoded string.
	len		# the length of the string, or -1 if the string isnul-terminated.
	bytes_read		#  location to store the number of bytes inthe input string that were successfully converted, or NULL .Even if the conversion was successful, this may beless than lenif there were partial charactersat the end of the input. If the errorG_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the valuestored will the byte offset after the last validinput sequence. 
	return:		#  The converted string, or NULL on an error.  
gboolean g_get_filename_charsets (const gchar ***charsets);	# Determines the preferred character sets used for filenames.The first character set from the charsets is the filename encoding, thesubsequent character sets are used when trying to generate a displayablerepresentation of a filename, see g_filename_display_name() .
	charsets		# return location for the NULL -terminated list of encoding names
	return:		#  TRUE if the filename encoding is UTF-8. 
gchar  *g_filename_display_name (const gchar *filename);	# Converts a filename into a valid UTF-8 string. The conversion is not necessarily reversible, so you should keep the original around and use the return value of this function only for display purposes.Unlike g_filename_to_utf8() , the result is guaranteed to be non-NULL even if the filename actually isn't in the GLib file name encoding.
	filename		#  a pathname hopefully in theGLib file name encoding. 
	return:		#  a newly allocated string containinga rendition of the filename in valid UTF-8 
gchar  *g_filename_display_basename (const gchar *filename);	# Returns the display basename for the particular filename, guaranteedto be valid UTF-8. The display name might not be identical to the filename,for instance there might be problems converting it to UTF-8, and some filescan be translated in the display.
	filename		#  an absolute pathname in theGLib file name encoding. 
	return:		#  a newly allocated string containinga rendition of the basename of the filename in valid UTF-8 
gchar  *g_locale_from_utf8 (const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error);	# Converts a string from UTF-8 to the encoding used for strings bythe C runtime (usually the same as that used by the operatingsystem) in the current locale . On Windows this meansthe system codepage.
	utf8string		# a UTF-8 encoded string 
	len		# the length of the string, or -1 if the string isnul-terminated (Note that some encodings may allow nulbytes to occur inside strings. In that case, using -1for the lenparameter is unsafe)
	bytes_read		#  location to store the number of bytes in theinput string that were successfully converted, or NULL .Even if the conversion was successful, this may beless than lenif there were partial charactersat the end of the input. If the errorG_CONVERT_ERROR_ILLEGAL_SEQUENCE occurs, the valuestored will the byte offset after the last validinput sequence. 
	return:		#  A newly-allocated buffer containing the converted string,or NULL on an error, and error will be set. 
gboolean g_get_charset (const char **charset);	# Obtains the character set for the current locale ; youmight use this character set as an argument to g_convert() , to convertfrom the current locale's encoding to some other encoding. (Frequentlyg_locale_to_utf8() and g_locale_from_utf8() are nice shortcuts, though.)
	charset		#  return location for character setname, or NULL . 
	return:		#  TRUE if the returned charset is UTF-8 
gchar  *g_get_codeset (void );	# Gets the character set for the current locale.
	return:		#  a newly allocated string containing the nameof the character set. This string must be freed with g_free() . 
gboolean g_unichar_validate (gunichar ch);	# Checks whether ch is a valid Unicode character. Some possibleinteger values of ch will not be valid. 0 is considered a validcharacter, though it's normally a string terminator.
	ch		# a Unicode character
	return:		#  TRUE if chis a valid Unicode character 
gboolean g_unichar_isalnum (gunichar c);	# Determines whether a character is alphanumeric.Given some UTF-8 text, obtain a character valuewith g_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis an alphanumeric character 
gboolean g_unichar_isalpha (gunichar c);	# Determines whether a character is alphabetic (i.e. a letter).Given some UTF-8 text, obtain a character value withg_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis an alphabetic character 
gboolean g_unichar_iscntrl (gunichar c);	# Determines whether a character is a control character.Given some UTF-8 text, obtain a character value withg_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis a control character 
gboolean g_unichar_isdefined (gunichar c);	# Determines if a given character is assigned in the Unicodestandard.
	c		# a Unicode character
	return:		#  TRUE if the character has an assigned value 
gboolean g_unichar_isdigit (gunichar c);	# Determines whether a character is numeric (i.e. a digit). Thiscovers ASCII 0-9 and also digits in other languages/scripts. Givensome UTF-8 text, obtain a character value with g_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis a digit 
gboolean g_unichar_isgraph (gunichar c);	# Determines whether a character is printable and not a space(returns FALSE for control characters, format characters, andspaces). g_unichar_isprint() is similar, but returns TRUE forspaces. Given some UTF-8 text, obtain a character value withg_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis printable unless it's a space 
gboolean g_unichar_islower (gunichar c);	# Determines whether a character is a lowercase letter.Given some UTF-8 text, obtain a character value withg_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis a lowercase letter 
gboolean g_unichar_ismark (gunichar c);	# Determines whether a character is a mark (non-spacing mark,combining mark, or enclosing mark in Unicode speak).Given some UTF-8 text, obtain a character valuewith g_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis a mark character 
gboolean g_unichar_isprint (gunichar c);	# Determines whether a character is printable.Unlike g_unichar_isgraph() , returns TRUE for spaces.Given some UTF-8 text, obtain a character value withg_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis printable 
gboolean g_unichar_ispunct (gunichar c);	# Determines whether a character is punctuation or a symbol.Given some UTF-8 text, obtain a character value withg_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis a punctuation or symbol character 
gboolean g_unichar_isspace (gunichar c);	# Determines whether a character is a space, tab, or line separator(newline, carriage return, etc.). Given some UTF-8 text, obtain acharacter value with g_utf8_get_char() .
	c		# a Unicode character
	return:		#  TRUE if cis a space character 
gboolean g_unichar_istitle (gunichar c);	# Determines if a character is titlecase. Some characters inUnicode which are composites, such as the DZ digraphhave three case variants instead of just two. The titlecaseform is used at the beginning of a word where only thefirst letter is capitalized. The titlecase form of the DZdigraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.
	c		# a Unicode character
	return:		#  TRUE if the character is titlecase 
gboolean g_unichar_isupper (gunichar c);	# Determines if a character is uppercase.
	c		# a Unicode character
	return:		#  TRUE if cis an uppercase character 
gboolean g_unichar_isxdigit (gunichar c);	# Determines if a character is a hexidecimal digit.
	c		# a Unicode character.
	return:		#  TRUE if the character is a hexadecimal digit 
gboolean g_unichar_iswide (gunichar c);	# Determines if a character is typically rendered in a double-widthcell.
	c		# a Unicode character
	return:		#  TRUE if the character is wide 
gboolean g_unichar_iswide_cjk (gunichar c);	# Determines if a character is typically rendered in a double-widthcell under legacy East Asian locales. If a character is wide according tog_unichar_iswide() , then it is also reported wide with this function, butthe converse is not necessarily true. See theUnicode Standard Annex 11 for details.
	c		# a Unicode character
	return:		#  TRUE if the character is wide in legacy East Asian locales 
gboolean g_unichar_iszerowidth (gunichar c);	# Determines if a given character typically takes zero width when rendered.The return value is TRUE for all non-spacing and enclosing marks(e.g., combining accents), format characters, zero-widthspace, but not U+00AD SOFT HYPHEN.
	c		# a Unicode character
	return:		#  TRUE if the character has zero width 
gunichar g_unichar_toupper (gunichar c);	# Converts a character to uppercase.
	c		# a Unicode character
	return:		#  the result of converting cto uppercase.If cis not an lowercase or titlecase character,or has no upper case equivalent cis returned unchanged. 
gunichar g_unichar_tolower (gunichar c);	# Converts a character to lower case.
	c		# a Unicode character.
	return:		#  the result of converting cto lower case.If cis not an upperlower or titlecase character,or has no lowercase equivalent cis returned unchanged. 
gunichar g_unichar_totitle (gunichar c);	# Converts a character to the titlecase.
	c		# a Unicode character
	return:		#  the result of converting cto titlecase.If cis not an uppercase or lowercase character,cis returned unchanged. 
gint g_unichar_digit_value (gunichar c);	# Determines the numeric value of a character as a decimaldigit.
	c		# a Unicode character
	return:		#  If cis a decimal digit (according tog_unichar_isdigit() ), its numeric value. Otherwise, -1. 
gint g_unichar_xdigit_value (gunichar c);	# Determines the numeric value of a character as a hexidecimaldigit.
	c		# a Unicode character
	return:		#  If cis a hex digit (according tog_unichar_isxdigit() ), its numeric value. Otherwise, -1. 
gboolean g_unichar_compose (gunichar a, gunichar b, gunichar *ch);	# Performs a single composition step of theUnicode canonical composition algorithm.
	a		# a Unicode character
	b		# a Unicode character
	ch		# return location for the composed character
	return:		#  TRUE if the characters could be composed 
gboolean g_unichar_decompose (gunichar ch, gunichar *a, gunichar *b);	# Performs a single decomposition step of theUnicode canonical decomposition algorithm.
	ch		# a Unicode character
	a		# return location for the first component of ch
	b		# return location for the second component of ch
	return:		#  TRUE if the character could be decomposed 
gsize g_unichar_fully_decompose (gunichar ch, gboolean compat, gunichar *result, gsize result_len);	# Computes the canonical or compatibility decomposition of aUnicode character. For compatibility decomposition,pass TRUE for compat; for canonical decompositionpass FALSE for compat.
	ch		# a Unicode character.
	compat		# whether perform canonical or compatibility decomposition
	result		#  location to store decomposed result, or NULL . 
	return:		#  the length of the full decomposition. 
GUnicodeType g_unichar_type (gunichar c);	# Classifies a Unicode character by type.
	c		# a Unicode character
	return:		#  the type of the character. 
GUnicodeBreakType g_unichar_break_type (gunichar c);	# Determines the break type of c. c should be a Unicode character(to derive a character from UTF-8 encoded text, useg_utf8_get_char() ). The break type is used to find word and linebreaks ("text boundaries"), Pango implements the Unicode boundaryresolution algorithms and normally you would use a function suchas pango_break() instead of caring about break types yourself.
	c		# a Unicode character
	return:		#  the break type of c 
gint g_unichar_combining_class (gunichar uc);	# Determines the canonical combining class of a Unicode character.
	uc		# a Unicode character
	return:		#  the combining class of the character 
void g_unicode_canonical_ordering (gunichar *string, gsize len);	# Computes the canonical ordering of a string in-place. This rearranges decomposed characters in the string according to their combining classes. See the Unicode manual for more information.
	string		# a UCS-4 encoded string.
	len		# the maximum length of stringto use.
gunichar  *g_unicode_canonical_decomposition (gunichar ch, gsize *result_len);	# g_unicode_canonical_decomposition has been deprecated since version 2.30 and should not be used in newly-written code.
	ch		# a Unicode character.
	result_len		# location to store the length of the return value.
	return:		#  a newly allocated string of Unicode characters.result_lenis set to the resulting length of the string. 
gboolean g_unichar_get_mirror_char (gunichar ch, gunichar *mirrored_ch);	# In Unicode, some characters are "mirrored". This means that theirimages are mirrored horizontally in text that is laid out from rightto left. For instance, "(" would become its mirror image, ")", inright-to-left text.
	ch		# a Unicode character
	mirrored_ch		# location to store the mirrored character
	return:		#  TRUE if chhas a mirrored character, FALSE otherwise 
GUnicodeScript g_unichar_get_script (gunichar ch);	# Looks up the GUnicodeScript for a particular character (as defined by Unicode Standard Annex #24). No check is made for ch being avalid Unicode character; if you pass in invalid character, theresult is undefined.
	ch		# a Unicode character
	return:		#  the GUnicodeScript for the character. 
GUnicodeScript g_unicode_script_from_iso15924 (guint32 iso15924);	# Looks up the Unicode script for iso15924. ISO 15924 assigns four-lettercodes to scripts. For example, the code for Arabic is 'Arab'.This function accepts four letter codes encoded as a guint32 in abig-endian fashion. That is, the code expected for Arabic is0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).
	iso15924		# a Unicode script
	return:		#  the Unicode script for iso15924, orof G_UNICODE_SCRIPT_INVALID_CODE if iso15924is zero andG_UNICODE_SCRIPT_UNKNOWN if iso15924is unknown. 
guint32 g_unicode_script_to_iso15924 (GUnicodeScript script);	# Looks up the ISO 15924 code for script. ISO 15924 assigns four-lettercodes to scripts. For example, the code for Arabic is 'Arab'. Thefour letter codes are encoded as a guint32 by this function in abig-endian fashion. That is, the code returned for Arabic is0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).
	script		# a Unicode script
	return:		#  the ISO 15924 code for script, encoded as an integer,of zero if scriptis G_UNICODE_SCRIPT_INVALID_CODE orISO 15924 code 'Zzzz' (script code for UNKNOWN) if scriptis not understood. 
gunichar g_utf8_get_char (const gchar *p);	# Converts a sequence of bytes encoded as UTF-8 to a Unicode character.
	p		# a pointer to Unicode character encoded as UTF-8
	return:		#  the resulting character 
gunichar g_utf8_get_char_validated (const gchar *p, gssize max_len);	# Convert a sequence of bytes encoded as UTF-8 to a Unicode character.This function checks for incomplete characters, for invalid characterssuch as characters that are out of the range of Unicode, and foroverlong encodings of valid characters.
	p		# a pointer to Unicode character encoded as UTF-8
	max_len		# the maximum number of bytes to read, or -1 if pis nul-terminated
	return:		#  the resulting character. If ppoints to a partialsequence at the end of a string that could begin a validcharacter (or if max_lenis zero), returns (gunichar)-2;otherwise, if pdoes not point to a valid UTF-8 encodedUnicode character, returns (gunichar)-1. 
gchar  *g_utf8_offset_to_pointer (const gchar *str, glong offset);	# Converts from an integer character offset to a pointer to a positionwithin the string.
	str		# a UTF-8 encoded string
	offset		# a character offset within str
	return:		#  the resulting pointer 
glong g_utf8_pointer_to_offset (const gchar *str, const gchar *pos);	# Converts from a pointer to position within a string to a integercharacter offset.
	str		# a UTF-8 encoded string
	pos		# a pointer to a position within str
	return:		#  the resulting character offset 
gchar  *g_utf8_prev_char (const gchar *p);	# Finds the previous UTF-8 character in the string before p.
	p		# a pointer to a position within a UTF-8 encoded string
	return:		#  a pointer to the found character 
gchar  *g_utf8_find_next_char (const gchar *p, const gchar *end);	# Finds the start of the next UTF-8 character in the string after p.
	p		# a pointer to a position within a UTF-8 encoded string
	end		#  a pointer to the byte following the end of the string,or NULL to indicate that the string is nul-terminated. 
	return:		#  a pointer to the found character or NULL  
gchar  *g_utf8_find_prev_char (const gchar *str, const gchar *p);	# Given a position p with a UTF-8 encoded string str, find the startof the previous UTF-8 character starting before p. Returns NULL if noUTF-8 characters are present in str before p.
	str		# pointer to the beginning of a UTF-8 encoded string
	p		# pointer to some position within str
	return:		#  a pointer to the found character or NULL . 
glong g_utf8_strlen (const gchar *p, gssize max);	# Computes the length of the string in characters, not includingthe terminating nul character. If the max'th byte falls in themiddle of a character, the last (partial) character is not counted.
	p		# pointer to the start of a UTF-8 encoded string
	max		# the maximum number of bytes to examine. If maxis less than 0, then the string is assumed to benul-terminated. If maxis 0, pwill not be examined andmay be NULL . If maxis greater than 0, up to maxbytes are examined
	return:		#  the length of the string in characters 
gchar  *g_utf8_strncpy (gchar *dest, const gchar *src, gsize n);	# Like the standard C strncpy() function, but copies a given numberof characters instead of a given number of bytes. The src stringmust be valid UTF-8 encoded text. (Use g_utf8_validate() on alltext before trying to use UTF-8 utility functions with it.)
	dest		# buffer to fill with characters from src
	src		# UTF-8 encoded string
	n		# character count
	return:		#  dest 
gchar  *g_utf8_strchr (const gchar *p, gssize len, gunichar c);	# Finds the leftmost occurrence of the given Unicode characterin a UTF-8 encoded string, while limiting the search to len bytes.If len is -1, allow unbounded search.
	p		# a nul-terminated UTF-8 encoded string
	len		# the maximum length of p
	c		# a Unicode character
	return:		#  NULL if the string does not contain the character,otherwise, a pointer to the start of the leftmost occurrenceof the character in the string. 
gchar  *g_utf8_strrchr (const gchar *p, gssize len, gunichar c);	# Find the rightmost occurrence of the given Unicode characterin a UTF-8 encoded string, while limiting the search to len bytes.If len is -1, allow unbounded search.
	p		# a nul-terminated UTF-8 encoded string
	len		# the maximum length of p
	c		# a Unicode character
	return:		#  NULL if the string does not contain the character,otherwise, a pointer to the start of the rightmost occurrenceof the character in the string. 
gchar  *g_utf8_strreverse (const gchar *str, gssize len);	# Reverses a UTF-8 string. str must be valid UTF-8 encoded text. (Use g_utf8_validate() on all text before trying to use UTF-8 utility functions with it.)
	str		# a UTF-8 encoded string
	len		# the maximum length of strto use, in bytes. If len&lt; 0,then the string is nul-terminated.
	return:		#  a newly-allocated string which is the reverse of str 
gchar  *g_utf8_substring (const gchar *str, glong start_pos, glong end_pos);	# Copies a substring out of a UTF-8 encoded string.The substring will contain end_pos - start_pos characters.
	str		# a UTF-8 encoded string
	start_pos		# a character offset within str
	end_pos		# another character offset within str
	return:		#  a newly allocated copy of the requestedsubstring. Free with g_free() when no longer needed. 
gboolean g_utf8_validate (const gchar *str, gssize max_len, const gchar **end);	# Validates UTF-8 encoded text. str is the text to validate;if str is nul-terminated, then max_len can be -1, otherwisemax_len should be the number of bytes to validate.If end is non-NULL , then the end of the valid rangewill be stored there (i.e. the start of the first invalid character if some bytes were invalid, or the end of the text being validated otherwise).
	str		#  a pointer to character data. 
	return:		#  TRUE if the text was valid UTF-8 
gchar  *g_utf8_make_valid (const gchar *str, gssize len);	# If the provided string is valid UTF-8, return a copy of it. If not,return a copy in which bytes that could not be interpreted as valid Unicodeare replaced with the Unicode replacement character (U+FFFD).
	str		# string to coerce into UTF-8
	len		# the maximum length of strto use, in bytes. If len&lt; 0,then the string is nul-terminated.
	return:		#  a valid UTF-8 string whose content resembles str.  
gchar  *g_utf8_strup (const gchar *str, gssize len);	# Converts all Unicode characters in the string that have a caseto uppercase. The exact manner that this is done dependson the current locale, and may result in the number ofcharacters in the string increasing. (For instance, theGerman ess-zet will be changed to SS.)
	str		# a UTF-8 encoded string
	len		# length of str, in bytes, or -1 if stris nul-terminated.
	return:		#  a newly allocated string, with all charactersconverted to uppercase.  
gchar  *g_utf8_strdown (const gchar *str, gssize len);	# Converts all Unicode characters in the string that have a caseto lowercase. The exact manner that this is done dependson the current locale, and may result in the number ofcharacters in the string changing.
	str		# a UTF-8 encoded string
	len		# length of str, in bytes, or -1 if stris nul-terminated.
	return:		#  a newly allocated string, with all charactersconverted to lowercase.  
gchar  *g_utf8_casefold (const gchar *str, gssize len);	# Converts a string into a form that is independent of case. Theresult will not correspond to any particular case, but can becompared for equality or ordered with the results of callingg_utf8_casefold() on other strings.
	str		# a UTF-8 encoded string
	len		# length of str, in bytes, or -1 if stris nul-terminated.
	return:		#  a newly allocated string, that is acase independent form of str. 
gchar  *g_utf8_normalize (const gchar *str, gssize len, GNormalizeMode mode);	# Converts a string into canonical form, standardizingsuch issues as whether a character with an accentis represented as a base character and combiningaccent or as a single precomposed character. Thestring has to be valid UTF-8, otherwise NULL isreturned. You should generally call g_utf8_normalize() before comparing two Unicode strings.
	str		# a UTF-8 encoded string.
	len		# length of str, in bytes, or -1 if stris nul-terminated.
	mode		# the type of normalization to perform.
	return:		#  a newly allocated string, that is thenormalized form of str, or NULL if stris notvalid UTF-8. 
gint g_utf8_collate (const gchar *str1, const gchar *str2);	# Compares two strings for ordering using the linguisticallycorrect rules for the current locale .When sorting a large number of strings, it will be significantly faster to obtain collation keys with g_utf8_collate_key() and compare the keys with strcmp() when sorting instead of sorting the original strings.
	str1		# a UTF-8 encoded string
	str2		# a UTF-8 encoded string
	return:		#  &lt; 0 if str1compares before str2,0 if they compare equal, &gt; 0 if str1compares after str2. 
gchar  *g_utf8_collate_key (const gchar *str, gssize len);	# Converts a string into a collation key that can be comparedwith other collation keys produced by the same function using strcmp(). 
	str		# a UTF-8 encoded string.
	len		# length of str, in bytes, or -1 if stris nul-terminated.
	return:		#  a newly allocated string. This string shouldbe freed with g_free() when you are done with it. 
gchar  *g_utf8_collate_key_for_filename (const gchar *str, gssize len);	# Converts a string into a collation key that can be comparedwith other collation keys produced by the same function using strcmp(). 
	str		# a UTF-8 encoded string.
	len		# length of str, in bytes, or -1 if stris nul-terminated.
	return:		#  a newly allocated string. This string shouldbe freed with g_free() when you are done with it. 
gunichar2  *g_utf8_to_utf16 (const gchar *str, glong len, glong *items_read, glong *items_written, GError **error);	# Convert a string from UTF-8 to UTF-16. A 0 character will beadded to the result after the converted text.
	str		# a UTF-8 encoded string
	len		# the maximum length (number of bytes) of strto use.If len&lt; 0, then the string is nul-terminated.
	items_read		#  location to store number ofbytes read, or NULL . If NULL , then G_CONVERT_ERROR_PARTIAL_INPUT willbe returned in case strcontains a trailing partial character. Ifan error occurs then the index of the invalid input is stored here. 
	return:		#  a pointer to a newly allocated UTF-16 string.This value must be freed with g_free() . If an error occurs,NULL will be returned and errorset. 
gunichar  *g_utf8_to_ucs4 (const gchar *str, glong len, glong *items_read, glong *items_written, GError **error);	# Convert a string from UTF-8 to a 32-bit fixed widthrepresentation as UCS-4. A trailing 0 character will be added to thestring after the converted text.
	str		# a UTF-8 encoded string
	len		# the maximum length of strto use, in bytes. If len&lt; 0,then the string is nul-terminated.
	items_read		#  location to store number ofbytes read, or NULL .If NULL , then G_CONVERT_ERROR_PARTIAL_INPUT will bereturned in case strcontains a trailing partialcharacter. If an error occurs then the index of theinvalid input is stored here. 
	return:		#  a pointer to a newly allocated UCS-4 string.This value must be freed with g_free() . If an error occurs,NULL will be returned and errorset. 
gunichar  *g_utf8_to_ucs4_fast (const gchar *str, glong len, glong *items_written);	# Convert a string from UTF-8 to a 32-bit fixed widthrepresentation as UCS-4, assuming valid UTF-8 input.This function is roughly twice as fast as g_utf8_to_ucs4() but does no error checking on the input. A trailing 0 characterwill be added to the string after the converted text.
	str		# a UTF-8 encoded string
	len		# the maximum length of strto use, in bytes. If len&lt; 0,then the string is nul-terminated.
	items_written		#  location to store thenumber of characters in the result, or NULL . 
	return:		#  a pointer to a newly allocated UCS-4 string.This value must be freed with g_free() . 
gunichar  *g_utf16_to_ucs4 (const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error);	# Convert a string from UTF-16 to UCS-4. The result will benul-terminated.
	str		# a UTF-16 encoded string
	len		# the maximum length (number of gunichar2 ) of strto use.If len&lt; 0, then the string is nul-terminated.
	items_read		#  location to store number ofwords read, or NULL . If NULL , then G_CONVERT_ERROR_PARTIAL_INPUT willbe returned in case strcontains a trailing partial character. Ifan error occurs then the index of the invalid input is stored here. 
	return:		#  a pointer to a newly allocated UCS-4 string.This value must be freed with g_free() . If an error occurs,NULL will be returned and errorset. 
gchar  *g_utf16_to_utf8 (const gunichar2 *str, glong len, glong *items_read, glong *items_written, GError **error);	# Convert a string from UTF-16 to UTF-8. The result will beterminated with a 0 byte.
	str		# a UTF-16 encoded string
	len		# the maximum length (number of gunichar2 ) of strto use.If len&lt; 0, then the string is nul-terminated.
	items_read		#  location to store number ofwords read, or NULL . If NULL , then G_CONVERT_ERROR_PARTIAL_INPUT willbe returned in case strcontains a trailing partial character. Ifan error occurs then the index of the invalid input is stored here. 
	return:		#  a pointer to a newly allocated UTF-8 string.This value must be freed with g_free() . If an error occurs,NULL will be returned and errorset. 
gunichar2  *g_ucs4_to_utf16 (const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error);	# Convert a string from UCS-4 to UTF-16. A 0 character will beadded to the result after the converted text.
	str		# a UCS-4 encoded string
	len		# the maximum length (number of characters) of strto use.If len&lt; 0, then the string is nul-terminated.
	items_read		#  location to store number ofbytes read, or NULL . If an error occurs then the index of the invalidinput is stored here. 
	return:		#  a pointer to a newly allocated UTF-16 string.This value must be freed with g_free() . If an error occurs,NULL will be returned and errorset. 
gchar  *g_ucs4_to_utf8 (const gunichar *str, glong len, glong *items_read, glong *items_written, GError **error);	# Convert a string from a 32-bit fixed width representation as UCS-4.to UTF-8. The result will be terminated with a 0 byte.
	str		# a UCS-4 encoded string
	len		# the maximum length (number of characters) of strto use.If len&lt; 0, then the string is nul-terminated.
	items_read		#  location to store number ofcharacters read, or NULL . 
	return:		#  a pointer to a newly allocated UTF-8 string.This value must be freed with g_free() . If an error occurs,NULL will be returned and errorset. In that case, items_readwill be set to the position of the first invalid input character. 
gint g_unichar_to_utf8 (gunichar c, gchar *outbuf);	# Converts a single character to UTF-8.
	c		# a Unicode character code
	outbuf		#  output buffer, must have atleast 6 bytes of space. If NULL , the length will be computed andreturned and nothing will be written to outbuf. 
	return:		#  number of bytes written 
gsize g_base64_encode_step (const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save);	# Incrementally encode a sequence of binary data into its Base-64 stringifiedrepresentation. By calling this function multiple times you can convertdata in chunks to avoid having to have the full encoded data in memory.
	in		#  the binary data to encode. 
	return:		#  The number of bytes of output that was written 
gsize g_base64_encode_close (gboolean break_lines, gchar *out, gint *state, gint *save);	# Flush the status from a sequence of calls to g_base64_encode_step() .
	break_lines		# whether to break long lines
	out		#  pointer to destination buffer. 
	return:		#  The number of bytes of output that was written 
gchar  *g_base64_encode (const guchar *data, gsize len);	# Encode a sequence of binary data into its Base-64 stringifiedrepresentation.
	data		#  the binary data to encode. 
	return:		#  a newly allocated, zero-terminated Base-64encoded string representing data. The returned string mustbe freed with g_free() .  
gsize g_base64_decode_step (const gchar *in, gsize len, guchar *out, gint *state, guint *save);	# Incrementally decode a sequence of binary data from its Base-64 stringifiedrepresentation. By calling this function multiple times you can convertdata in chunks to avoid having to have the full encoded data in memory.
	in		#  binary input data. 
	return:		#  The number of bytes of output that was written 
guchar  *g_base64_decode (const gchar *text, gsize *out_len);	# Decode a sequence of Base-64 encoded text into binary data. Notethat the returned binary data is not necessarily zero-terminated,so it should not be used as a character string.
	text		# zero-terminated string with base64 text to decode
	out_len		#  The length of the decoded data is written here. 
	return:		#  newly allocated buffer containing the binary datathat textrepresents. The returned buffer mustbe freed with g_free() .  
guchar  *g_base64_decode_inplace (gchar *text, gsize *out_len);	# Decode a sequence of Base-64 encoded text into binary databy overwriting the input data.
	text		#  zero-terminatedstring with base64 text to decode. 
	return:		#  The binary data that textresponds. This pointeris the same as the input text.  
gssize g_checksum_type_get_length (GChecksumType checksum_type);	# Gets the length in bytes of digests of type checksum_type
	checksum_type		# a GChecksumType 
	return:		#  the checksum length, or -1 if checksum_typeisnot supported. 
GChecksum  *g_checksum_new (GChecksumType checksum_type);	#创建对象:GChecksum , using the checksum algorithm checksum_type.If the checksum_type is not known, NULL is returned.A GChecksum can be used to compute the checksum, or digest, of anarbitrary binary blob, using different hashing algorithms.
	checksum_type		# the desired type of checksum
	return:		#  the newly created GChecksum , or NULL .Use g_checksum_free() to free the memory allocated by it.  
GChecksum  *g_checksum_copy (const GChecksum *checksum);	# Copies a GChecksum . If checksum has been closed, by callingg_checksum_get_string() or g_checksum_get_digest() , the copiedchecksum will be closed as well.
	checksum		# the GChecksum to copy
	return:		#  the copy of the passed GChecksum . Use g_checksum_free() when finished using it. 
void g_checksum_free (GChecksum *checksum);	# Frees the memory allocated for checksum.
	checksum		# a GChecksum 
void g_checksum_reset (GChecksum *checksum);	# Resets the state of the checksum back to its initial state.
	checksum		# the GChecksum to reset
void g_checksum_update (GChecksum *checksum, const guchar *data, gssize length);	# Feeds data into an existing GChecksum . The checksum must still beopen, that is g_checksum_get_string() or g_checksum_get_digest() mustnot have been called on checksum.
	checksum		# a GChecksum 
	data		#  buffer used to compute the checksum. 
gchar  *g_checksum_get_string (GChecksum *checksum);	# Gets the digest as an hexadecimal string.
	checksum		# a GChecksum 
	return:		#  the hexadecimal representation of the checksum. Thereturned string is owned by the checksum and should not be modifiedor freed. 
void g_checksum_get_digest (GChecksum *checksum, guint8 *buffer, gsize *digest_len);	# Gets the digest from checksum as a raw binary vector and places itinto buffer. The size of the digest depends on the type of checksum.
	checksum		# a GChecksum 
	buffer		# output buffer
	digest_len		# an inout parameter. The caller initializes it to the size of buffer.After the call it contains the length of the digest.
gchar  *g_compute_checksum_for_data (GChecksumType checksum_type, const guchar *data, gsize length);	# Computes the checksum for a binary data of length. This is aconvenience wrapper for g_checksum_new() , g_checksum_get_string() and g_checksum_free() .
	checksum_type		# a GChecksumType 
	data		#  binary blob to compute the digest of. 
	return:		#  the digest of the binary data as a string in hexadecimal.The returned string should be freed with g_free() when done using it. 
gchar  *g_compute_checksum_for_string (GChecksumType checksum_type, const gchar *str, gssize length);	# Computes the checksum of a string.
	checksum_type		# a GChecksumType 
	str		# the string to compute the checksum of
	length		# the length of the string, or -1 if the string is null-terminated.
	return:		#  the checksum as a hexadecimal string. The returned stringshould be freed with g_free() when done using it. 
gchar  *g_compute_checksum_for_bytes (GChecksumType checksum_type, GBytes *data);	# Computes the checksum for a binary data. This is aconvenience wrapper for g_checksum_new() , g_checksum_get_string() and g_checksum_free() .
	checksum_type		# a GChecksumType 
	data		# binary blob to compute the digest of
	return:		#  the digest of the binary data as a string in hexadecimal.The returned string should be freed with g_free() when done using it. 
GHmac  *g_hmac_new (GChecksumType digest_type, const guchar *key, gsize key_len);	#创建对象:GHmac , using the digest algorithm digest_type.If the digest_type is not known, NULL is returned.A GHmac can be used to compute the HMAC of a key and anarbitrary binary blob, using different hashing algorithms.
	digest_type		# the desired type of digest
	key		#  the key for the HMAC. 
	return:		#  the newly created GHmac , or NULL .Use g_hmac_unref() to free the memory allocated by it. 
GHmac  *g_hmac_copy (const GHmac *hmac);	# Copies a GHmac . If hmac has been closed, by callingg_hmac_get_string() or g_hmac_get_digest() , the copiedHMAC will be closed as well.
	hmac		# the GHmac to copy
	return:		#  the copy of the passed GHmac . Use g_hmac_unref() when finished using it. 
GHmac  *g_hmac_ref (GHmac *hmac);	# Atomically increments the reference count of hmac by one.
	hmac		# a valid GHmac 
	return:		#  the passed in GHmac . 
void g_hmac_unref (GHmac *hmac);	# Atomically decrements the reference count of hmac by one.
	hmac		# a GHmac 
void g_hmac_update (GHmac *hmac, const guchar *data, gssize length);	# Feeds data into an existing GHmac .
	hmac		# a GHmac 
	data		#  buffer used to compute the checksum. 
gchar  *g_hmac_get_string (GHmac *hmac);	# Gets the HMAC as an hexadecimal string.
	hmac		# a GHmac 
	return:		#  the hexadecimal representation of the HMAC. Thereturned string is owned by the HMAC and should not be modifiedor freed. 
void g_hmac_get_digest (GHmac *hmac, guint8 *buffer, gsize *digest_len);	# Gets the digest from checksum as a raw binary array and places itinto buffer. The size of the digest depends on the type of checksum.
	hmac		# a GHmac 
	buffer		# output buffer
	digest_len		# an inout parameter. The caller initializes it to thesize of buffer. After the call it contains the length of the digest
gchar  *g_compute_hmac_for_data (GChecksumType digest_type, const guchar *key, gsize key_len, const guchar *data, gsize length);	# Computes the HMAC for a binary data of length. This is aconvenience wrapper for g_hmac_new() , g_hmac_get_string() and g_hmac_unref() .
	digest_type		# a GChecksumType to use for the HMAC
	key		#  the key to use in the HMAC. 
	return:		#  the HMAC of the binary data as a string in hexadecimal.The returned string should be freed with g_free() when done using it. 
gchar  *g_compute_hmac_for_string (GChecksumType digest_type, const guchar *key, gsize key_len, const gchar *str, gssize length);	# Computes the HMAC for a string.
	digest_type		# a GChecksumType to use for the HMAC
	key		#  the key to use in the HMAC. 
	return:		#  the HMAC as a hexadecimal string.The returned string should be freed with g_free() when done using it. 
gchar  *g_compute_hmac_for_bytes (GChecksumType digest_type, GBytes *key, GBytes *data);	# Computes the HMAC for a binary data. This is aconvenience wrapper for g_hmac_new() , g_hmac_get_string() and g_hmac_unref() .
	digest_type		# a GChecksumType to use for the HMAC
	key		# the key to use in the HMAC
	data		# binary blob to compute the HMAC of
	return:		#  the HMAC of the binary data as a string in hexadecimal.The returned string should be freed with g_free() when done using it. 
gchar  *g_dgettext (const gchar *domain, const gchar *msgid);	# This function is a wrapper of dgettext() which does not translatethe message if the default domain as set with textdomain() has notranslations for the current locale.
	domain		#  the translation domain to use, or NULL to usethe domain set with 
	return:		#  The translated string 
gchar  *g_dcgettext (const gchar *domain, const gchar *msgid, gint category);	# This is a variant of g_dgettext() that allows specifying a localecategory instead of always using LC_MESSAGES. See g_dgettext() formore information about how this functions differs from callingdcgettext() directly.
	domain		#  the translation domain to use, or NULL to usethe domain set with 
	return:		#  the translated string for the given locale category 
gchar  *g_dngettext (const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n);	# This function is a wrapper of dngettext() which does not translatethe message if the default domain as set with textdomain() has notranslations for the current locale.
	domain		#  the translation domain to use, or NULL to usethe domain set with 
	return:		#  The translated string 
gchar  *g_dpgettext (const gchar *domain, const gchar *msgctxtid, gsize msgidoffset);	# This function is a variant of g_dgettext() which supportsa disambiguating message context. GNU gettext uses the'\004' character to separate the message context andmessage id in msgctxtid.If 0 is passed as msgidoffset, this function will fall back totrying to use the deprecated convention of using "|" as a separationcharacter.
	domain		#  the translation domain to use, or NULL to usethe domain set with 
	return:		#  The translated string 
gchar  *g_dpgettext2 (const gchar *domain, const gchar *context, const gchar *msgid);	# This function is a variant of g_dgettext() which supportsa disambiguating message context. GNU gettext uses the'\004' character to separate the message context andmessage id in msgctxtid.
	domain		#  the translation domain to use, or NULL to usethe domain set with 
	return:		#  The translated string 
gchar  *g_strip_context (const gchar *msgid, const gchar *msgval);	# An auxiliary function for gettext() support (see Q_() ).
	msgid		# a string
	msgval		# another string
	return:		#  msgval, unless msgvalis identical to msgidand contains a '|' character, in which case a pointer tothe substring of msgid after the first '|' character is returned. 
gchar  * const *g_get_language_names (void );	# Computes a list of applicable locale names, which can be used toe.g. construct locale-dependent filenames or search paths. The returnedlist is sorted from most desirable to least desirable and always containsthe default locale "C".
	return:		#  a NULL -terminated array of strings owned by GLibthat must not be modified or freed.  
gchar  **g_get_locale_variants (const gchar *locale);	# Returns a list of derived variants of locale, which can be used toe.g. construct locale-dependent filenames or search paths. The returnedlist is sorted from most desirable to least desirable.This function handles territory, charset and extra locale modifiers.
	locale		# a locale identifier
	return:		#  a newlyallocated array of newly allocated strings with the locale variants. Free withg_strfreev() .  
void g_get_current_time (GTimeVal *result);	# Equivalent to the UNIX gettimeofday() function, but portable.
	result		# GTimeVal structure in which to store current time.
void g_usleep (gulong microseconds);	# Pauses the current thread for the given number of microseconds.
	microseconds		# number of microseconds to pause
void g_time_val_add (GTimeVal *time_, glong microseconds);	# Adds the given number of microseconds to time_. microseconds canalso be negative to decrease the value of time_.
	time_		# a GTimeVal 
	microseconds		# number of microseconds to add to time
gboolean g_time_val_from_iso8601 (const gchar *iso_date, GTimeVal *time_);	# Converts a string containing an ISO 8601 encoded date and timeto a GTimeVal and puts it into time_.
	iso_date		# an ISO 8601 encoded date string
	time_		#  a GTimeVal . 
	return:		#  TRUE if the conversion was successful. 
gchar  *g_time_val_to_iso8601 (GTimeVal *time_);	# Converts time_ into an RFC 3339 encoded string, relative to theCoordinated Universal Time (UTC). This is one of the many formatsallowed by ISO 8601.
	time_		# a GTimeVal 
	return:		#  a newly allocated string containing an ISO 8601 date,or NULL if time_was too large.  
gint64 g_get_monotonic_time (void );	# Queries the system monotonic time.
	return:		#  the monotonic time, in microseconds 
gint64 g_get_real_time (void );	# Queries the system wall-clock time.
	return:		#  the number of microseconds since January 1, 1970 UTC. 
GDate  *g_date_new (void );	# Allocates a GDate and initializesit to a sane state. The new date willbe cleared (as if you'd called g_date_clear() ) but invalid (it won'trepresent an existing day). Free the return value with g_date_free() .
	return:		#  a newly-allocated GDate  
GDate  *g_date_new_dmy (GDateDay day, GDateMonth month, GDateYear year);	# Like g_date_new() , but also sets the value of the date. Assuming theday-month-year triplet you pass in represents an existing day, thereturned date will be valid.
	day		# day of the month
	month		# month of the year
	year		# year
	return:		#  a newly-allocated GDate initialized with day, month, and year 
GDate  *g_date_new_julian (guint32 julian_day);	# Like g_date_new() , but also sets the value of the date. Assuming theJulian day number you pass in is valid (greater than 0, less than anunreasonably large number), the returned date will be valid.
	julian_day		# days since January 1, Year 1
	return:		#  a newly-allocated GDate initialized with julian_day 
void g_date_clear (GDate *date, guint n_dates);	# Initializes one or more GDate structs to a sane but invalidstate. The cleared dates will not represent an existing date, but willnot contain garbage. Useful to init a date declared on the stack.Validity can be tested with g_date_valid() .
	date		# pointer to one or more dates to clear
	n_dates		# number of dates to clear
void g_date_free (GDate *date);	# Frees a GDate returned from g_date_new() .
	date		# a GDate to free
void g_date_set_day (GDate *date, GDateDay day);	# Sets the day of the month for a GDate . If the resultingday-month-year triplet is invalid, the date will be invalid.
	date		# a GDate 
	day		# day to set
void g_date_set_month (GDate *date, GDateMonth month);	# Sets the month of the year for a GDate . If the resultingday-month-year triplet is invalid, the date will be invalid.
	date		# a GDate 
	month		# month to set
void g_date_set_year (GDate *date, GDateYear year);	# Sets the year for a GDate . If the resulting day-month-yeartriplet is invalid, the date will be invalid.
	date		# a GDate 
	year		# year to set
void g_date_set_dmy (GDate *date, GDateDay day, GDateMonth month, GDateYear y);	# Sets the value of a GDate from a day, month, and year.The day-month-year triplet must be valid; if you aren'tsure it is, call g_date_valid_dmy() to check before youset it.
	date		# a GDate 
	day		# day
	month		# month
	y		# year
void g_date_set_julian (GDate *date, guint32 julian_date);	# Sets the value of a GDate from a Julian day number.
	date		# a GDate 
	julian_date		# Julian day number (days since January 1, Year 1)
void g_date_set_time (GDate *date, GTime time_);	# g_date_set_time has been deprecated since version 2.10 and should not be used in newly-written code.
	date		# a GDate .
	time_		# GTime value to set.
void g_date_set_time_t (GDate *date, time_t timet);	# Sets the value of a date to the date corresponding to a time specified as a time_t. The time to date conversion is done using the user's current timezone.
	date		# a GDate 
	timet		# time_t value to set
void g_date_set_time_val (GDate *date, GTimeVal *timeval);	# Sets the value of a date from a GTimeVal value. Note that thetv_usec member is ignored, because GDate can't make use of theadditional precision.
	date		# a GDate 
	timeval		# GTimeVal value to set
void g_date_set_parse (GDate *date, const gchar *str);	# Parses a user-inputted string str, and try to figure out what date itrepresents, taking the current locale into account. If thestring is successfully parsed, the date will be valid after the call.Otherwise, it will be invalid. You should check using g_date_valid() to see whether the parsing succeeded.
	date		# a GDate to fill in
	str		# string to parse
void g_date_add_days (GDate *date, guint n_days);	# Increments a date some number of days.To move forward by weeks, add weeks*7 days.The date must be valid.
	date		# a GDate to increment
	n_days		# number of days to move the date forward
void g_date_subtract_days (GDate *date, guint n_days);	# Moves a date some number of days into the past.To move by weeks, just move by weeks*7 days.The date must be valid.
	date		# a GDate to decrement
	n_days		# number of days to move
void g_date_add_months (GDate *date, guint n_months);	# Increments a date by some number of months.If the day of the month is greater than 28,this routine may change the day of the month(because the destination month may not havethe current day in it). The date must be valid.
	date		# a GDate to increment
	n_months		# number of months to move forward
void g_date_subtract_months (GDate *date, guint n_months);	# Moves a date some number of months into the past.If the current day of the month doesn't exist inthe destination month, the day of the monthmay change. The date must be valid.
	date		# a GDate to decrement
	n_months		# number of months to move
void g_date_add_years (GDate *date, guint n_years);	# Increments a date by some number of years.If the date is February 29, and the destinationyear is not a leap year, the date will be changedto February 28. The date must be valid.
	date		# a GDate to increment
	n_years		# number of years to move forward
void g_date_subtract_years (GDate *date, guint n_years);	# Moves a date some number of years into the past.If the current day doesn't exist in the destinationyear (i.e. it's February 29 and you move to a non-leap-year)then the day is changed to February 29. The datemust be valid.
	date		# a GDate to decrement
	n_years		# number of years to move
gint g_date_days_between (const GDate *date1, const GDate *date2);	# Computes the number of days between two dates.If date2 is prior to date1, the returned value is negative.Both dates must be valid.
	date1		# the first date
	date2		# the second date
	return:		#  the number of days between date1and date2 
gint g_date_compare (const GDate *lhs, const GDate *rhs);	# qsort()-style comparison function for dates.Both dates must be valid.
	lhs		# first date to compare
	rhs		# second date to compare
	return:		#  0 for equal, less than zero if lhsis less than rhs,greater than zero if lhsis greater than rhs 
void g_date_clamp (GDate *date, const GDate *min_date, const GDate *max_date);	# If date is prior to min_date, sets date equal to min_date.If date falls after max_date, sets date equal to max_date.Otherwise, date is unchanged.Either of min_date and max_date may be NULL .All non-NULL dates must be valid.
	date		# a GDate to clamp
	min_date		# minimum accepted value for date
	max_date		# maximum accepted value for date
void g_date_order (GDate *date1, GDate *date2);	# Checks if date1 is less than or equal to date2,and swap the values if this is not the case.
	date1		# the first date
	date2		# the second date
GDateDay g_date_get_day (const GDate *date);	# Returns the day of the month. The date must be valid.
	date		# a GDate to extract the day of the month from
	return:		#  day of the month 
GDateMonth g_date_get_month (const GDate *date);	# Returns the month of the year. The date must be valid.
	date		# a GDate to get the month from
	return:		#  month of the year as a GDateMonth  
GDateYear g_date_get_year (const GDate *date);	# Returns the year of a GDate . The date must be valid.
	date		# a GDate 
	return:		#  year in which the date falls 
guint32 g_date_get_julian (const GDate *date);	# Returns the Julian day or "serial number" of the GDate . TheJulian day is simply the number of days since January 1, Year 1; i.e.,January 1, Year 1 is Julian day 1; January 2, Year 1 is Julian day 2,etc. The date must be valid.
	date		# a GDate to extract the Julian day from
	return:		#  Julian day 
GDateWeekday g_date_get_weekday (const GDate *date);	# Returns the day of the week for a GDate . The date must be valid.
	date		# a GDate 
	return:		#  day of the week as a GDateWeekday . 
guint g_date_get_day_of_year (const GDate *date);	# Returns the day of the year, where Jan 1 is the first day of theyear. The date must be valid.
	date		# a GDate to extract day of year from
	return:		#  day of the year 
guint8 g_date_get_days_in_month (GDateMonth month, GDateYear year);	# Returns the number of days in a month, taking leapyears into account.
	month		# month
	year		# year
	return:		#  number of days in monthduring the year 
gboolean g_date_is_first_of_month (const GDate *date);	# Returns TRUE if the date is on the first of a month.The date must be valid.
	date		# a GDate to check
	return:		#  TRUE if the date is the first of the month 
gboolean g_date_is_last_of_month (const GDate *date);	# Returns TRUE if the date is the last day of the month.The date must be valid.
	date		# a GDate to check
	return:		#  TRUE if the date is the last day of the month 
gboolean g_date_is_leap_year (GDateYear year);	# Returns TRUE if the year is a leap year.
	year		# year to check
	return:		#  TRUE if the year is a leap year 
guint g_date_get_monday_week_of_year (const GDate *date);	# Returns the week of the year, where weeks are understood to start onMonday. If the date is before the first Monday of the year, return 0.The date must be valid.
	date		# a GDate 
	return:		#  week of the year 
guint8 g_date_get_monday_weeks_in_year (GDateYear year);	# Returns the number of weeks in the year, where weeksare taken to start on Monday. Will be 52 or 53. Thedate must be valid. (Years always have 52 7-day periods,plus 1 or 2 extra days depending on whether it's a leapyear. This function is basically telling you how manyMondays are in the year, i.e. there are 53 Mondays ifone of the extra days happens to be a Monday.)
	year		# a year
	return:		#  number of Mondays in the year 
guint g_date_get_sunday_week_of_year (const GDate *date);	# Returns the week of the year during which this date falls, ifweeks are understood to begin on Sunday. The date must be valid.Can return 0 if the day is before the first Sunday of the year.
	date		# a GDate 
	return:		#  week number 
guint8 g_date_get_sunday_weeks_in_year (GDateYear year);	# Returns the number of weeks in the year, where weeksare taken to start on Sunday. Will be 52 or 53. Thedate must be valid. (Years always have 52 7-day periods,plus 1 or 2 extra days depending on whether it's a leapyear. This function is basically telling you how manySundays are in the year, i.e. there are 53 Sundays ifone of the extra days happens to be a Sunday.)
	year		# year to count weeks in
	return:		#  the number of weeks in year 
guint g_date_get_iso8601_week_of_year (const GDate *date);	# Returns the week of the year, where weeks are interpreted accordingto ISO 8601.
	date		# a valid GDate 
	return:		#  ISO 8601 week number of the year. 
gsize g_date_strftime (gchar *s, gsize slen, const gchar *format, const GDate *date);	# Generates a printed representation of the date, in alocale -specific way.Works just like the platform's C library strftime() function,but only accepts date-related formats; time-related formatsgive undefined results. Date must be valid. Unlike strftime()(which uses the locale encoding), works on a UTF-8 formatstring and stores a UTF-8 result.
	s		# destination buffer
	slen		# buffer size
	format		# format string
	date		# valid GDate 
	return:		#  number of characters written to the buffer, or 0 the buffer was too small 
void g_date_to_struct_tm (const GDate *date, struct tm *tm);	# Fills in the date-related bits of a struct tm using the date value.Initializes the non-date parts with something sane but meaningless.
	date		# a GDate to set the struct tm from
	tm		#  struct tm to fill. 
gboolean g_date_valid (const GDate *date);	# Returns TRUE if the GDate represents an existing day. The date must notcontain garbage; it should have been initialized with g_date_clear() if it wasn't allocated by one of the g_date_new() variants.
	date		# a GDate to check
	return:		#  Whether the date is valid 
gboolean g_date_valid_day (GDateDay day);	# Returns TRUE if the day of the month is valid (a day is valid if it'sbetween 1 and 31 inclusive).
	day		# day to check
	return:		#  TRUE if the day is valid 
gboolean g_date_valid_month (GDateMonth month);	# Returns TRUE if the month value is valid. The 12 GDateMonth enumeration values are the only valid months.
	month		# month
	return:		#  TRUE if the month is valid 
gboolean g_date_valid_year (GDateYear year);	# Returns TRUE if the year is valid. Any year greater than 0 is valid,though there is a 16-bit limit to what GDate will understand.
	year		# year
	return:		#  TRUE if the year is valid 
gboolean g_date_valid_dmy (GDateDay day, GDateMonth month, GDateYear year);	# Returns TRUE if the day-month-year triplet forms a valid, existing dayin the range of days GDate understands (Year 1 or later, no more thana few thousand years in the future).
	day		# day
	month		# month
	year		# year
	return:		#  TRUE if the date is a valid one 
gboolean g_date_valid_julian (guint32 julian_date);	# Returns TRUE if the Julian day is valid. Anything greater than zerois basically a valid Julian, though there is a 32-bit limit.
	julian_date		# Julian day to check
	return:		#  TRUE if the Julian day is valid 
gboolean g_date_valid_weekday (GDateWeekday weekday);	# Returns TRUE if the weekday is valid. The seven GDateWeekday enumerationvalues are the only valid weekdays.
	weekday		# weekday
	return:		#  TRUE if the weekday is valid 
void g_time_zone_unref (GTimeZone *tz);	# Decreases the reference count on tz.
	tz		# a GTimeZone 
GTimeZone  *g_time_zone_ref (GTimeZone *tz);	# Increases the reference count on tz.
	tz		# a GTimeZone 
	return:		#  a new reference to tz. 
GTimeZone  *g_time_zone_new (const gchar *identifier);	# Creates a GTimeZone corresponding to identifier.
	identifier		#  a timezone identifier. 
	return:		#  the requested timezone 
GTimeZone  *g_time_zone_new_local (void );	# Creates a GTimeZone corresponding to local time. The local timezone may change between invocations to this function; for example,if the system administrator changes it.
	return:		#  the local timezone 
GTimeZone  *g_time_zone_new_utc (void );	# Creates a GTimeZone corresponding to UTC.
	return:		#  the universal timezone 
gint g_time_zone_find_interval (GTimeZone *tz, GTimeType type, gint64 time_);	# Finds an the interval within tz that corresponds to the given time_.The meaning of time_ depends on type.
	tz		# a GTimeZone 
	type		# the GTimeType of time_
	time_		# a number of seconds since January 1, 1970
	return:		#  the interval containing time_, or -1 in case of failure 
gint g_time_zone_adjust_time (GTimeZone *tz, GTimeType type, gint64 *time_);	# Finds an interval within tz that corresponds to the given time_,possibly adjusting time_ if required to fit into an interval.The meaning of time_ depends on type.
	tz		# a GTimeZone 
	type		# the GTimeType of time_
	time_		# a pointer to a number of seconds since January 1, 1970
	return:		#  the interval containing time_, never -1 
gchar  *g_time_zone_get_abbreviation (GTimeZone *tz, gint interval);	# Determines the time zone abbreviation to be used during a particularinterval of time in the time zone tz.
	tz		# a GTimeZone 
	interval		# an interval within the timezone
	return:		#  the time zone abbreviation, which belongs to tz 
gint32 g_time_zone_get_offset (GTimeZone *tz, gint interval);	# Determines the offset to UTC in effect during a particular intervalof time in the time zone tz.
	tz		# a GTimeZone 
	interval		# an interval within the timezone
	return:		#  the number of seconds that should be added to UTC to get thelocal time in tz 
gboolean g_time_zone_is_dst (GTimeZone *tz, gint interval);	# Determines if daylight savings time is in effect during a particularinterval of time in the time zone tz.
	tz		# a GTimeZone 
	interval		# an interval within the timezone
	return:		#  TRUE if daylight savings time is in effect 
void g_date_time_unref (GDateTime *datetime);	# Atomically decrements the reference count of datetime by one.
	datetime		# a GDateTime 
GDateTime  *g_date_time_ref (GDateTime *datetime);	# Atomically increments the reference count of datetime by one.
	datetime		# a GDateTime 
	return:		#  the GDateTime with the reference count increased 
GDateTime  *g_date_time_new_now (GTimeZone *tz);	# Creates a GDateTime corresponding to this exact instant in the giventime zone tz. The time is as accurate as the system allows, to amaximum accuracy of 1 microsecond.
	tz		# a GTimeZone 
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_now_local (void );	# Creates a GDateTime corresponding to this exact instant in the localtime zone.
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_now_utc (void );	# Creates a GDateTime corresponding to this exact instant in UTC.
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_from_unix_local (gint64 t);	# Creates a GDateTime corresponding to the given Unix time t in thelocal time zone.
	t		# the Unix time
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_from_unix_utc (gint64 t);	# Creates a GDateTime corresponding to the given Unix time t in UTC.
	t		# the Unix time
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_from_timeval_local (const GTimeVal *tv);	# Creates a GDateTime corresponding to the given GTimeVal tv in thelocal time zone.
	tv		# a GTimeVal 
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_from_timeval_utc (const GTimeVal *tv);	# Creates a GDateTime corresponding to the given GTimeVal tv in UTC.
	tv		# a GTimeVal 
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new (GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);	#创建对象:GDateTime corresponding to the given date and time inthe time zone tz.
	tz		# a GTimeZone 
	year		# the year component of the date
	month		# the month component of the date
	day		# the day component of the date
	hour		# the hour component of the date
	minute		# the minute component of the date
	seconds		# the number of seconds past the minute
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_new_local (gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);	#创建对象:GDateTime corresponding to the given date and time inthe local time zone.
	year		# the year component of the date
	month		# the month component of the date
	day		# the day component of the date
	hour		# the hour component of the date
	minute		# the minute component of the date
	seconds		# the number of seconds past the minute
	return:		#  a GDateTime , or NULL  
GDateTime  *g_date_time_new_utc (gint year, gint month, gint day, gint hour, gint minute, gdouble seconds);	#创建对象:GDateTime corresponding to the given date and time inUTC.
	year		# the year component of the date
	month		# the month component of the date
	day		# the day component of the date
	hour		# the hour component of the date
	minute		# the minute component of the date
	seconds		# the number of seconds past the minute
	return:		#  a GDateTime , or NULL  
GDateTime  *g_date_time_add (GDateTime *datetime, GTimeSpan timespan);	# Creates a copy of datetime and adds the specified timespan to the copy.
	datetime		# a GDateTime 
	timespan		# a GTimeSpan 
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_years (GDateTime *datetime, gint years);	# Creates a copy of datetime and adds the specified number of years to thecopy. Add negative values to subtract years.
	datetime		# a GDateTime 
	years		# the number of years
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_months (GDateTime *datetime, gint months);	# Creates a copy of datetime and adds the specified number of months to thecopy. Add negative values to subtract months.
	datetime		# a GDateTime 
	months		# the number of months
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_weeks (GDateTime *datetime, gint weeks);	# Creates a copy of datetime and adds the specified number of weeks to thecopy. Add negative values to subtract weeks.
	datetime		# a GDateTime 
	weeks		# the number of weeks
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_days (GDateTime *datetime, gint days);	# Creates a copy of datetime and adds the specified number of days to thecopy. Add negative values to subtract days.
	datetime		# a GDateTime 
	days		# the number of days
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_hours (GDateTime *datetime, gint hours);	# Creates a copy of datetime and adds the specified number of hours.Add negative values to subtract hours.
	datetime		# a GDateTime 
	hours		# the number of hours to add
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_minutes (GDateTime *datetime, gint minutes);	# Creates a copy of datetime adding the specified number of minutes.Add negative values to subtract minutes.
	datetime		# a GDateTime 
	minutes		# the number of minutes to add
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_seconds (GDateTime *datetime, gdouble seconds);	# Creates a copy of datetime and adds the specified number of seconds.Add negative values to subtract seconds.
	datetime		# a GDateTime 
	seconds		# the number of seconds to add
	return:		#  the newly created GDateTime which should be freed withg_date_time_unref() . 
GDateTime  *g_date_time_add_full (GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds);	#创建对象:GDateTime adding the specified values to the current date andtime in datetime. Add negative values to subtract.
	datetime		# a GDateTime 
	years		# the number of years to add
	months		# the number of months to add
	days		# the number of days to add
	hours		# the number of hours to add
	minutes		# the number of minutes to add
	seconds		# the number of seconds to add
	return:		#  the newly created GDateTime that should be freed withg_date_time_unref() . 
gint g_date_time_compare (gconstpointer dt1, gconstpointer dt2);	# A comparison function for GDateTimes that is suitableas a GCompareFunc . Both GDateTimes must be non-NULL .
	dt1		#  first GDateTime to compare. 
	return:		#  -1, 0 or 1 if dt1is less than, equal to or greaterthan dt2. 
GTimeSpan g_date_time_difference (GDateTime *end, GDateTime *begin);	# Calculates the difference in time between end and begin. TheGTimeSpan that is returned is effectively end - begin (ie:positive if the first parameter is larger).
	end		# a GDateTime 
	begin		# a GDateTime 
	return:		#  the difference between the two GDateTime , as a timespan expressed in microseconds. 
guint g_date_time_hash (gconstpointer datetime);	# Hashes datetime into a guint , suitable for use within GHashTable .
	datetime		#  a GDateTime . 
	return:		#  a guint containing the hash 
gboolean g_date_time_equal (gconstpointer dt1, gconstpointer dt2);	# Checks to see if dt1 and dt2 are equal.
	dt1		#  a GDateTime . 
	return:		#  TRUE if dt1and dt2are equal 
void g_date_time_get_ymd (GDateTime *datetime, gint *year, gint *month, gint *day);	# Retrieves the Gregorian day, month, and year of a given GDateTime .
	datetime		# a GDateTime .
	year		#  the return location for the gregorian year, or NULL . 
gint g_date_time_get_year (GDateTime *datetime);	# Retrieves the year represented by datetime in the Gregorian calendar.
	datetime		# A GDateTime 
	return:		#  the year represented by datetime 
gint g_date_time_get_month (GDateTime *datetime);	# Retrieves the month of the year represented by datetime in the Gregoriancalendar.
	datetime		# a GDateTime 
	return:		#  the month represented by datetime 
gint g_date_time_get_day_of_month (GDateTime *datetime);	# Retrieves the day of the month represented by datetime in the gregoriancalendar.
	datetime		# a GDateTime 
	return:		#  the day of the month 
gint g_date_time_get_week_numbering_year (GDateTime *datetime);	# Returns the ISO 8601 week-numbering year in which the week containingdatetime falls.
	datetime		# a GDateTime 
	return:		#  the ISO 8601 week-numbering year for datetime 
gint g_date_time_get_week_of_year (GDateTime *datetime);	# Returns the ISO 8601 week number for the week containing datetime.The ISO 8601 week number is the same for every day of the week (fromModay through Sunday). That can produce some unusual results(described below).
	datetime		# a GDateTime 
	return:		#  the ISO 8601 week number for datetime. 
gint g_date_time_get_day_of_week (GDateTime *datetime);	# Retrieves the ISO 8601 day of the week on which datetime falls (1 isMonday, 2 is Tuesday... 7 is Sunday).
	datetime		# a GDateTime 
	return:		#  the day of the week 
gint g_date_time_get_day_of_year (GDateTime *datetime);	# Retrieves the day of the year represented by datetime in the Gregoriancalendar.
	datetime		# a GDateTime 
	return:		#  the day of the year 
gint g_date_time_get_hour (GDateTime *datetime);	# Retrieves the hour of the day represented by datetime
	datetime		# a GDateTime 
	return:		#  the hour of the day 
gint g_date_time_get_minute (GDateTime *datetime);	# Retrieves the minute of the hour represented by datetime
	datetime		# a GDateTime 
	return:		#  the minute of the hour 
gint g_date_time_get_second (GDateTime *datetime);	# Retrieves the second of the minute represented by datetime
	datetime		# a GDateTime 
	return:		#  the second represented by datetime 
gint g_date_time_get_microsecond (GDateTime *datetime);	# Retrieves the microsecond of the date represented by datetime
	datetime		# a GDateTime 
	return:		#  the microsecond of the second 
gdouble g_date_time_get_seconds (GDateTime *datetime);	# Retrieves the number of seconds since the start of the last minute,including the fractional part.
	datetime		# a GDateTime 
	return:		#  the number of seconds 
gint64 g_date_time_to_unix (GDateTime *datetime);	# Gives the Unix time corresponding to datetime, rounding down to thenearest second.
	datetime		# a GDateTime 
	return:		#  the Unix time corresponding to datetime 
gboolean g_date_time_to_timeval (GDateTime *datetime, GTimeVal *tv);	# Stores the instant in time that datetime represents into tv.
	datetime		# a GDateTime 
	tv		# a GTimeVal to modify
	return:		#  TRUE if successful, else FALSE  
GTimeSpan g_date_time_get_utc_offset (GDateTime *datetime);	# Determines the offset to UTC in effect at the time and in the timezone of datetime.
	datetime		# a GDateTime 
	return:		#  the number of microseconds that should be added to UTC toget the local time 
gchar  *g_date_time_get_timezone_abbreviation (GDateTime *datetime);	# Determines the time zone abbreviation to be used at the time and inthe time zone of datetime.
	datetime		# a GDateTime 
	return:		#  the time zone abbreviation. The returnedstring is owned by the GDateTime and it should not bemodified or freed.  
gboolean g_date_time_is_daylight_savings (GDateTime *datetime);	# Determines if daylight savings time is in effect at the time and inthe time zone of datetime.
	datetime		# a GDateTime 
	return:		#  TRUE if daylight savings time is in effect 
GDateTime  *g_date_time_to_timezone (GDateTime *datetime, GTimeZone *tz);	# Create a new GDateTime corresponding to the same instant in time asdatetime, but in the time zone tz.
	datetime		# a GDateTime 
	tz		# the new GTimeZone 
	return:		#  a new GDateTime , or NULL  
GDateTime  *g_date_time_to_local (GDateTime *datetime);	#创建对象:GDateTime corresponding to the same instant in time asdatetime, but in the local time zone.
	datetime		# a GDateTime 
	return:		#  the newly created GDateTime  
GDateTime  *g_date_time_to_utc (GDateTime *datetime);	#创建对象:GDateTime corresponding to the same instant in time asdatetime, but in UTC.
	datetime		# a GDateTime 
	return:		#  the newly created GDateTime  
gchar  *g_date_time_format (GDateTime *datetime, const gchar *format);	# Creates a newly allocated string representing the requested format.
	datetime		# A GDateTime 
	format		# a valid UTF-8 string, containing the format for theGDateTime 
	return:		#  a newly allocated string formatted to the requested formator NULL in the case that there was an error. The stringshould be freed with g_free() . 
GRand  *g_rand_new_with_seed (guint32 seed);	#创建对象:random number generator initialized with seed.
	seed		# a value to initialize the random number generator
	return:		#  the new GRand  
GRand  *g_rand_new_with_seed_array (const guint32 *seed, guint seed_length);	#创建对象:random number generator initialized with seed.
	seed		# an array of seeds to initialize the random number generator
	seed_length		# an array of seeds to initialize the random numbergenerator
	return:		#  the new GRand  
GRand  *g_rand_new (void );	#创建对象:random number generator initialized with a seed takeneither from /dev/urandom (if existing) or from the current time(as a fallback).
	return:		#  the new GRand  
GRand  *g_rand_copy (GRand *rand_);	# Copies a GRand into a new one with the same exact state as before.This way you can take a snapshot of the random number generator forreplaying later.
	rand_		# a GRand 
	return:		#  the new GRand  
void g_rand_free (GRand *rand_);	# Frees the memory allocated for the GRand .
	rand_		# a GRand 
void g_rand_set_seed (GRand *rand_, guint32 seed);	# Sets the seed for the random number generator GRand to seed.
	rand_		# a GRand 
	seed		# a value to reinitialize the random number generator
void g_rand_set_seed_array (GRand *rand_, const guint32 *seed, guint seed_length);	# Initializes the random number generator by an array of longs.Array can be of arbitrary size, though only the first 624 valuesare taken. This function is useful if you have many low entropyseeds, or if you require more then 32 bits of actual entropy foryour application.
	rand_		# a GRand 
	seed		# array to initialize with
	seed_length		# length of array
guint32 g_rand_int (GRand *rand_);	# Returns the next random guint32 from rand_ equally distributed overthe range [0..2^32-1].
	rand_		# a GRand 
	return:		#  a random number 
gint32 g_rand_int_range (GRand *rand_, gint32 begin, gint32 end);	# Returns the next random gint32 from rand_ equally distributed overthe range [begin..end-1].
	rand_		# a GRand 
	begin		# lower closed bound of the interval
	end		# upper open bound of the interval
	return:		#  a random number 
gdouble g_rand_double (GRand *rand_);	# Returns the next random gdouble from rand_ equally distributed overthe range [0..1).
	rand_		# a GRand 
	return:		#  a random number 
gdouble g_rand_double_range (GRand *rand_, gdouble begin, gdouble end);	# Returns the next random gdouble from rand_ equally distributed overthe range [begin..end).
	rand_		# a GRand 
	begin		# lower closed bound of the interval
	end		# upper open bound of the interval
	return:		#  a random number 
void g_random_set_seed (guint32 seed);	# Sets the seed for the global random number generator, which is usedby the g_random_* functions, to seed.
	seed		# a value to reinitialize the global random number generator
guint32 g_random_int (void );	# Return a random guint32 equally distributed over the range[0..2^32-1].
	return:		#  a random number 
gint32 g_random_int_range (gint32 begin, gint32 end);	# Returns a random gint32 equally distributed over the range[begin..end-1].
	begin		# lower closed bound of the interval
	end		# upper open bound of the interval
	return:		#  a random number 
gdouble g_random_double (void );	# Returns a random gdouble equally distributed over the range [0..1).
	return:		#  a random number 
gdouble g_random_double_range (gdouble begin, gdouble end);	# Returns a random gdouble equally distributed over the range[begin..end).
	begin		# lower closed bound of the interval
	end		# upper open bound of the interval
	return:		#  a random number 
void <span class="c_punctuation">( *GHookFinalizeFunc<span class="c_punctuation">) (GHookList *hook_list, GHook *hook);	# Defines the type of function to be called when a hook in alist of hooks gets finalized.
	hook_list		# a GHookList 
	hook		# the hook in hook_listthat gets finalized
void <span class="c_punctuation">( *GHookFunc<span class="c_punctuation">) (gpointer data);	# Defines the type of a hook function that can be invokedby g_hook_list_invoke() .
	data		# the data field of the GHook is passed to the hook function here
gboolean <span class="c_punctuation">( *GHookCheckFunc<span class="c_punctuation">) (gpointer data);	# Defines the type of a hook function that can be invokedby g_hook_list_invoke_check() .
	data		# the data field of the GHook is passed to the hook function here
	return:		#  FALSE if the GHook should be destroyed 
void g_hook_list_init (GHookList *hook_list, guint hook_size);	# Initializes a GHookList .This must be called before the GHookList is used.
	hook_list		# a GHookList 
	hook_size		# the size of each element in the GHookList ,typically sizeof (GHook).
void g_hook_list_invoke (GHookList *hook_list, gboolean may_recurse);	# Calls all of the GHook functions in a GHookList .
	hook_list		# a GHookList 
	may_recurse		# TRUE if functions which are already running(e.g. in another thread) can be called. If set to FALSE ,these are skipped
void g_hook_list_invoke_check (GHookList *hook_list, gboolean may_recurse);	# Calls all of the GHook functions in a GHookList .Any function which returns FALSE is removed from the GHookList .
	hook_list		# a GHookList 
	may_recurse		# TRUE if functions which are already running(e.g. in another thread) can be called. If set to FALSE ,these are skipped
void g_hook_list_marshal (GHookList *hook_list, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data);	# Calls a function on each valid GHook .
	hook_list		# a GHookList 
	may_recurse		# TRUE if hooks which are currently running(e.g. in another thread) are considered valid. If set to FALSE ,these are skipped
	marshaller		# the function to call for each GHook 
	marshal_data		# data to pass to marshaller
void <span class="c_punctuation">( *GHookMarshaller<span class="c_punctuation">) (GHook *hook, gpointer marshal_data);	# Defines the type of function used by g_hook_list_marshal() .
	hook		# a GHook 
	marshal_data		# user data
void g_hook_list_marshal_check (GHookList *hook_list, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data);	# Calls a function on each valid GHook and destroys it if thefunction returns FALSE .
	hook_list		# a GHookList 
	may_recurse		# TRUE if hooks which are currently running(e.g. in another thread) are considered valid. If set to FALSE ,these are skipped
	marshaller		# the function to call for each GHook 
	marshal_data		# data to pass to marshaller
gboolean <span class="c_punctuation">( *GHookCheckMarshaller<span class="c_punctuation">) (GHook *hook, gpointer marshal_data);	# Defines the type of function used by g_hook_list_marshal_check() .
	hook		# a GHook 
	marshal_data		# user data
	return:		#  FALSE if hookshould be destroyed 
void g_hook_list_clear (GHookList *hook_list);	# Removes all the GHook elements from a GHookList .
	hook_list		# a GHookList 
GHook  *g_hook_alloc (GHookList *hook_list);	# Allocates space for a GHook and initializes it.
	hook_list		# a GHookList 
	return:		#  a new GHook  
void g_hook_prepend (GHookList *hook_list, GHook *hook);	# Prepends a GHook on the start of a GHookList .
	hook_list		# a GHookList 
	hook		# the GHook to add to the start of hook_list
void g_hook_insert_before (GHookList *hook_list, GHook *sibling, GHook *hook);	# Inserts a GHook into a GHookList , before a given GHook .
	hook_list		# a GHookList 
	sibling		#  the GHook to insert the new GHook before. 
void g_hook_insert_sorted (GHookList *hook_list, GHook *hook, GHookCompareFunc func);	# Inserts a GHook into a GHookList , sorted by the given function.
	hook_list		# a GHookList 
	hook		# the GHook to insert
	func		# the comparison function used to sort the GHook elements
gint <span class="c_punctuation">( *GHookCompareFunc<span class="c_punctuation">) (GHook *new_hook, GHook *sibling);	# Defines the type of function used to compare GHook elements ing_hook_insert_sorted() .
	new_hook		# the GHook being inserted
	sibling		# the GHook to compare with new_hook
	return:		#  a value &lt;= 0 if new_hookshould be before sibling 
gint g_hook_compare_ids (GHook *new_hook, GHook *sibling);	# Compares the ids of two GHook elements, returning a negative valueif the second id is greater than the first.
	new_hook		# a GHook 
	sibling		# a GHook to compare with new_hook
	return:		#  a value &lt;= 0 if the id of siblingis &gt;= the id of new_hook 
GHook  *g_hook_get (GHookList *hook_list, gulong hook_id);	# Returns the GHook with the given id, or NULL if it is not found.
	hook_list		# a GHookList 
	hook_id		# a hook id
	return:		#  the GHook with the given id, or NULL if it is not found 
GHook  *g_hook_find (GHookList *hook_list, gboolean need_valids, GHookFindFunc func, gpointer data);	# Finds a GHook in a GHookList using the given function totest for a match.
	hook_list		# a GHookList 
	need_valids		# TRUE if GHook elements which have been destroyedshould be skipped
	func		# the function to call for each GHook , which should returnTRUE when the GHook has been found
	data		# the data to pass to func
	return:		#  the found GHook or NULL if no matching GHook is found 
gboolean <span class="c_punctuation">( *GHookFindFunc<span class="c_punctuation">) (GHook *hook, gpointer data);	# Defines the type of the function passed to g_hook_find() .
	hook		# a GHook 
	data		# user data passed to 
	return:		#  TRUE if the required GHook has been found 
GHook  *g_hook_find_data (GHookList *hook_list, gboolean need_valids, gpointer data);	# Finds a GHook in a GHookList with the given data.
	hook_list		# a GHookList 
	need_valids		# TRUE if GHook elements which have been destroyedshould be skipped
	data		# the data to find
	return:		#  the GHook with the given dataor NULL if no matchingGHook is found 
GHook  *g_hook_find_func (GHookList *hook_list, gboolean need_valids, gpointer func);	# Finds a GHook in a GHookList with the given function.
	hook_list		# a GHookList 
	need_valids		# TRUE if GHook elements which have been destroyedshould be skipped
	func		# the function to find
	return:		#  the GHook with the given funcor NULL if no matchingGHook is found 
GHook  *g_hook_find_func_data (GHookList *hook_list, gboolean need_valids, gpointer func, gpointer data);	# Finds a GHook in a GHookList with the given function and data.
	hook_list		# a GHookList 
	need_valids		# TRUE if GHook elements which have been destroyedshould be skipped
	func		#  the function to find. 
	return:		#  the GHook with the given funcand dataor NULL ifno matching GHook is found 
GHook  *g_hook_first_valid (GHookList *hook_list, gboolean may_be_in_call);	# Returns the first GHook in a GHookList which has not been destroyed.The reference count for the GHook is incremented, so you must callg_hook_unref() to restore it when no longer needed. (Or callg_hook_next_valid() if you are stepping through the GHookList .)
	hook_list		# a GHookList 
	may_be_in_call		# TRUE if hooks which are currently running(e.g. in another thread) are considered valid. If set to FALSE ,these are skipped
	return:		#  the first valid GHook , or NULL if none are valid 
GHook  *g_hook_next_valid (GHookList *hook_list, GHook *hook, gboolean may_be_in_call);	# Returns the next GHook in a GHookList which has not been destroyed.The reference count for the GHook is incremented, so you must callg_hook_unref() to restore it when no longer needed. (Or continue to callg_hook_next_valid() until NULL is returned.)
	hook_list		# a GHookList 
	hook		# the current GHook 
	may_be_in_call		# TRUE if hooks which are currently running(e.g. in another thread) are considered valid. If set to FALSE ,these are skipped
	return:		#  the next valid GHook , or NULL if none are valid 
GHook  *g_hook_ref (GHookList *hook_list, GHook *hook);	# Increments the reference count for a GHook .
	hook_list		# a GHookList 
	hook		# the GHook to increment the reference count of
	return:		#  the hookthat was passed in (since 2.6) 
void g_hook_unref (GHookList *hook_list, GHook *hook);	# Decrements the reference count of a GHook .If the reference count falls to 0, the GHook is removedfrom the GHookList and g_hook_free() is called to free it.
	hook_list		# a GHookList 
	hook		# the GHook to unref
void g_hook_free (GHookList *hook_list, GHook *hook);	# Calls the GHookList finalize_hook function if it exists,and frees the memory allocated for the GHook .
	hook_list		# a GHookList 
	hook		# the GHook to free
gboolean g_hook_destroy (GHookList *hook_list, gulong hook_id);	# Destroys a GHook , given its ID.
	hook_list		# a GHookList 
	hook_id		# a hook ID
	return:		#  TRUE if the GHook was found in the GHookList and destroyed 
void g_hook_destroy_link (GHookList *hook_list, GHook *hook);	# Removes one GHook from a GHookList , marking itinactive and calling g_hook_unref() on it.
	hook_list		# a GHookList 
	hook		# the GHook to remove
gchar  *g_get_application_name (void );	# Gets a human-readable name for the application, as set byg_set_application_name() . This name should be localized ifpossible, and is intended for display to the user. Contrast withg_get_prgname() , which gets a non-localized name. Ifg_set_application_name() has not been called, returns the result ofg_get_prgname() (which may be NULL if g_set_prgname() has also notbeen called).
	return:		#  human-readable application name. may return NULL  
void g_set_application_name (const gchar *application_name);	# Sets a human-readable name for the application. This name should belocalized if possible, and is intended for display to the user.Contrast with g_set_prgname() , which sets a non-localized name.g_set_prgname() will be called automatically by gtk_init() ,but g_set_application_name() will not.
	application_name		# localized name of the application
gchar  *g_get_prgname (void );	# Gets the name of the program. This name should not be localized,in contrast to g_get_application_name() .
	return:		#  the name of the program. The returned string belongsto GLib and must not be modified or freed. 
void g_set_prgname (const gchar *prgname);	# Sets the name of the program. This name should not be localized,in contrast to g_set_application_name() .
	prgname		# the name of the program.
gchar  **g_get_environ (void );	# Gets the list of environment variables for the current process.
	return:		#  the list ofenvironment variables.  
gchar  *g_environ_getenv (gchar **envp, const gchar *variable);	# Returns the value of the environment variable variable in theprovided list envp.
	envp		#  an environmentlist (eg, as returned from 
	return:		#  the value of the environment variable, or NULL ifthe environment variable is not set in envp. The returnedstring is owned by envp, and will be freed if variableisset or unset again. 
gchar  **g_environ_setenv (gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite);	# Sets the environment variable variable in the provided listenvp to value.
	envp		#  anenvironment list that can be freed using 
	return:		#  theupdated environment list. Free it using g_strfreev() .  
gchar  **g_environ_unsetenv (gchar **envp, const gchar *variable);	# Removes the environment variable variable from the providedenvironment envp.
	envp		#  an environmentlist that can be freed using 
	return:		#  theupdated environment list. Free it using g_strfreev() .  
gchar  *g_getenv (const gchar *variable);	# Returns the value of an environment variable.
	variable		# the environment variable to get
	return:		#  the value of the environment variable, or NULL ifthe environment variable is not found. The returned stringmay be overwritten by the next call to g_getenv() , g_setenv() or g_unsetenv() . 
gboolean g_setenv (const gchar *variable, const gchar *value, gboolean overwrite);	# Sets an environment variable. On UNIX, both the variable's name andvalue can be arbitrary byte strings, except that the variable's namecannot contain '='. On Windows, they should be in UTF-8.
	variable		# the environment variable to set, must not contain '='.
	value		# the value for to set the variable to.
	overwrite		# whether to change the variable if it already exists.
	return:		#  FALSE if the environment variable couldn't be set. 
void g_unsetenv (const gchar *variable);	# Removes an environment variable from the environment.
	variable		# the environment variable to remove, must not contain '='
gchar  **g_listenv (void );	# Gets the names of all variables set in the environment.
	return:		#  a NULL -terminatedlist of strings which must be freed with g_strfreev() .  
gchar  *g_get_user_name (void );	# Gets the user name of the current user. The encoding of the returnedstring is system-defined. On UNIX, it might be the preferred file nameencoding, or something else, and there is no guarantee that it is evenconsistent on a machine. On Windows, it is always UTF-8.
	return:		#  the user name of the current user.  
gchar  *g_get_real_name (void );	# Gets the real name of the user. This usually comes from the user'sentry in the passwd file. The encoding of the returned string issystem-defined. (On Windows, it is, however, always UTF-8.) If thereal user name cannot be determined, the string "Unknown" is returned.
	return:		#  the user's real name.  
gchar  *g_get_user_cache_dir (void );	# Returns a base directory in which to store non-essential, cacheddata specific to particular user.
	return:		#  a string owned by GLib that must not be modifiedor freed.  
gchar  *g_get_user_data_dir (void );	# Returns a base directory in which to access application data suchas icons that is customized for a particular user. 
	return:		#  a string owned by GLib that must not be modifiedor freed.  
gchar  *g_get_user_config_dir (void );	# Returns a base directory in which to store user-specific application configuration information such as user preferences and settings. 
	return:		#  a string owned by GLib that must not be modifiedor freed.  
gchar  *g_get_user_runtime_dir (void );	# Returns a directory that is unique to the current user on the localsystem.
	return:		#  a string owned by GLib that must not bemodified or freed.  
gchar  *g_get_user_special_dir (GUserDirectory directory);	# Returns the full path of a special directory using its logical id.
	directory		# the logical id of special directory
	return:		#  the path to the specified special directory, orNULL if the logical id was not found. The returned string is owned byGLib and should not be modified or freed.  
gchar  * const *g_get_system_data_dirs (void );	# Returns an ordered list of base directories in which to access system-wide application data.
	return:		#  a NULL -terminated array of strings owned by GLib that must not bemodified or freed.  
gchar  * const *g_get_system_config_dirs (void );	# Returns an ordered list of base directories in which to access system-wide configuration information.
	return:		#  a NULL -terminated array of strings owned by GLib that must not bemodified or freed.  
void g_reload_user_special_dirs_cache (void );	# Resets the cache used for g_get_user_special_dir() , sothat the latest on-disk version is used. Call this onlyif you just changed the data on disk yourself.
gchar  *g_get_host_name (void );	# Return a name for the machine. 
	return:		#  the host name of the machine. 
gchar  *g_get_home_dir (void );	# Gets the current user's home directory.
	return:		#  the current user's home directory.  
gchar  *g_get_tmp_dir (void );	# Gets the directory to use for temporary files.
	return:		#  the directory to use for temporary files.  
gchar  *g_get_current_dir (void );	# Gets the current directory.
	return:		#  the current directory.  
gchar  *g_basename (const gchar *file_name);	# g_basename has been deprecated since version 2.2 and should not be used in newly-written code.
	file_name		#  the name of the file. 
	return:		#  the name of the file without any leadingdirectory components.  
gboolean g_path_is_absolute (const gchar *file_name);	# Returns TRUE if the given file_name is an absolute file name.Note that this is a somewhat vague concept on Windows.
	file_name		#  a file name. 
	return:		#  TRUE if file_nameis absolute 
gchar  *g_path_skip_root (const gchar *file_name);	# Returns a pointer into file_name after the root component,i.e. after the "/" in UNIX or "C:\" under Windows. If file_nameis not an absolute path it returns NULL .
	file_name		#  a file name. 
	return:		#  a pointer into file_nameafter theroot component.  
gchar  *g_path_get_basename (const gchar *file_name);	# Gets the last component of the filename.
	file_name		#  the name of the file. 
	return:		#  a newly allocated string containing the lastcomponent of the filename.  
gchar  *g_path_get_dirname (const gchar *file_name);	# Gets the directory components of a file name.
	file_name		#  the name of the file. 
	return:		#  the directory components of the file.  
gchar  *g_build_filename (const gchar *first_element, ...);	# Creates a filename from a series of elements using the correctseparator for filenames.
	first_element		#  the first element in the path. 
	return:		#  a newly-allocated string that must be freed withg_free() .  
gchar  *g_build_filenamev (gchar **args);	# Behaves exactly like g_build_filename() , but takes the path elements as a string array, instead of varargs. This function is mainlymeant for language bindings.
	args		#  NULL -terminatedarray of strings containing the path elements. 
	return:		#  a newly-allocated string that must be freedwith g_free() .  
gchar  *g_build_path (const gchar *separator, const gchar *first_element, ...);	# Creates a path from a series of elements using separator as theseparator between elements. At the boundary between two elements,any trailing occurrences of separator in the first element, orleading occurrences of separator in the second element are removedand exactly one copy of the separator is inserted.
	separator		#  a string used to separator the elements of the path. 
	return:		#  a newly-allocated string that must be freed withg_free() .  
gchar  *g_build_pathv (const gchar *separator, gchar **args);	# Behaves exactly like g_build_path() , but takes the path elements as a string array, instead of varargs. This function is mainlymeant for language bindings.
	separator		# a string used to separator the elements of the path.
	args		#  NULL -terminatedarray of strings containing the path elements. 
	return:		#  a newly-allocated string that must be freedwith g_free() .  
gchar  *g_format_size (guint64 size);	# Formats a size (for example the size of a file) into a human readablestring. Sizes are rounded to the nearest size prefix (kB, MB, GB)and are displayed rounded to the nearest tenth. E.g. the file size3292528 bytes will be converted into the string "3.2 MB".
	size		# a size in bytes
	return:		#  a newly-allocated formatted string containing a human readablefile size 
gchar  *g_format_size_full (guint64 size, GFormatSizeFlags flags);	# Formats a size.
	size		# a size in bytes
	flags		# GFormatSizeFlags to modify the output
	return:		#  a newly-allocated formatted string containing a humanreadable file size 
gchar  *g_format_size_for_display (goffset size);	# g_format_size_for_display has been deprecated since version 2.30 and should not be used in newly-written code.
	size		# a size in bytes
	return:		#  a newly-allocated formatted string containing a humanreadable file size 
gchar  *g_find_program_in_path (const gchar *program);	# Locates the first executable named program in the user's path, in thesame way that execvp() would locate it. Returns an allocated stringwith the absolute path name, or NULL if the program is not found inthe path. If program is already an absolute path, returns a copy ofprogram if program exists and is executable, and NULL otherwise.
	program		#  a program name in the GLib file name encoding. 
	return:		#  a newly-allocated string with the absolute path,or NULL .  
guint g_spaced_primes_closest (guint num);	# Gets the smallest prime number from a built-in array of primes whichis larger than num. This is used within GLib to calculate the optimumsize of a GHashTable .
	num		# a guint 
	return:		#  the smallest prime number from a built-in array of primeswhich is larger than num 
void g_atexit (GVoidFunc func);	# g_atexit has been deprecated since version 2.32 and should not be used in newly-written code.
	func		#  the function to call on normal program termination. 
guint g_parse_debug_string (const gchar *string, const GDebugKey *keys, guint nkeys);	# Parses a string containing debugging optionsinto a guint containing bit flags. This is usedwithin GDK and GTK+ to parse the debug options passed on thecommand line or through environment variables.
	string		#  a list of debug options separated by colons, spaces, orcommas, or NULL . 
	return:		#  the combined set of bit flags. 
void <span class="c_punctuation">( *GVoidFunc<span class="c_punctuation">) (void );	# GVoidFunc is deprecated and should not be used in newly-written code.
void <span class="c_punctuation">( *GFreeFunc<span class="c_punctuation">) (gpointer data);	# Declares a type of function which takes an arbitrarydata pointer argument and has no return value. It isnot currently used in GLib or GTK+.
	data		# a data pointer
void g_qsort_with_data (gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data);	# This is just like the standard C qsort() function, butthe comparison routine accepts a user data argument.
	pbase		#  start of array to sort. 
	total_elems		# elements in the array
	size		# size of each element
	compare_func		# function to compare elements
	user_data		# data to pass to compare_func
void g_nullify_pointer (gpointer *nullify_location);	# Set the pointer at the specified location to NULL .
	nullify_location		#  the memory address of the pointer. 
GScanner  *g_scanner_new (const GScannerConfig *config_templ);	#创建对象:GScanner .
	config_templ		# the initial scanner settings
	return:		#  the new GScanner  
void g_scanner_destroy (GScanner *scanner);	# Frees all memory used by the GScanner .
	scanner		# a GScanner 
void g_scanner_input_file (GScanner *scanner, gint input_fd);	# Prepares to scan a file.
	scanner		# a GScanner 
	input_fd		# a file descriptor
void g_scanner_sync_file_offset (GScanner *scanner);	# Rewinds the filedescriptor to the current buffer positionand blows the file read ahead buffer. This is useful forthird party uses of the scanners filedescriptor, which hooksonto the current scanning position.
	scanner		# a GScanner 
void g_scanner_input_text (GScanner *scanner, const gchar *text, guint text_len);	# Prepares to scan a text buffer.
	scanner		# a GScanner 
	text		# the text buffer to scan
	text_len		# the length of the text buffer
GTokenType g_scanner_peek_next_token (GScanner *scanner);	# Parses the next token, without removing it from the input stream.The token data is placed in the next_token, next_value, next_line,and next_position fields of the GScanner structure.
	scanner		# a GScanner 
	return:		#  the type of the token 
GTokenType g_scanner_get_next_token (GScanner *scanner);	# Parses the next token just like g_scanner_peek_next_token() and also removes it from the input stream. The token data isplaced in the token, value, line, and position fields ofthe GScanner structure.
	scanner		# a GScanner 
	return:		#  the type of the token 
gboolean g_scanner_eof (GScanner *scanner);	# Returns TRUE if the scanner has reached the end ofthe file or text buffer.
	scanner		# a GScanner 
	return:		#  TRUE if the scanner has reached the end ofthe file or text buffer 
guint g_scanner_cur_line (GScanner *scanner);	# Returns the current line in the input stream (countingfrom 1). This is the line of the last token parsed viag_scanner_get_next_token() .
	scanner		# a GScanner 
	return:		#  the current line 
guint g_scanner_cur_position (GScanner *scanner);	# Returns the current position in the current line (countingfrom 0). This is the position of the last token parsed viag_scanner_get_next_token() .
	scanner		# a GScanner 
	return:		#  the current position on the line 
GTokenType g_scanner_cur_token (GScanner *scanner);	# Gets the current token type. This is simply the tokenfield in the GScanner structure.
	scanner		# a GScanner 
	return:		#  the current token type 
GTokenValue g_scanner_cur_value (GScanner *scanner);	# Gets the current token value. This is simply the valuefield in the GScanner structure.
	scanner		# a GScanner 
	return:		#  the current token value 
guint g_scanner_set_scope (GScanner *scanner, guint scope_id);	# Sets the current scope.
	scanner		# a GScanner 
	scope_id		# the new scope id
	return:		#  the old scope id 
void g_scanner_scope_add_symbol (GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value);	# Adds a symbol to the given scope.
	scanner		# a GScanner 
	scope_id		# the scope id
	symbol		# the symbol to add
	value		# the value of the symbol
void g_scanner_scope_foreach_symbol (GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data);	# Calls the given function for each of the symbol/value pairsin the given scope of the GScanner . The function is passedthe symbol and value of each pair, and the given user_dataparameter.
	scanner		# a GScanner 
	scope_id		# the scope id
	func		# the function to call for each symbol/value pair
	user_data		# user data to pass to the function
gpointer g_scanner_scope_lookup_symbol (GScanner *scanner, guint scope_id, const gchar *symbol);	# Looks up a symbol in a scope and return its value. If thesymbol is not bound in the scope, NULL is returned.
	scanner		# a GScanner 
	scope_id		# the scope id
	symbol		# the symbol to look up
	return:		#  the value of symbolin the given scope, or NULL if symbolis not bound in the given scope. 
void g_scanner_scope_remove_symbol (GScanner *scanner, guint scope_id, const gchar *symbol);	# Removes a symbol from a scope.
	scanner		# a GScanner 
	scope_id		# the scope id
	symbol		# the symbol to remove
gpointer g_scanner_lookup_symbol (GScanner *scanner, const gchar *symbol);	# Looks up a symbol in the current scope and return its value.If the symbol is not bound in the current scope, NULL isreturned.
	scanner		# a GScanner 
	symbol		# the symbol to look up
	return:		#  the value of symbolin the current scope, or NULL if symbolis not bound in the current scope 
void g_scanner_warn (GScanner *scanner, const gchar *format, ...);	# Outputs a warning message, via the GScanner message handler.
	scanner		# a GScanner 
	format		# the message format. See the 
	...		# the parameters to insert into the format string
void g_scanner_error (GScanner *scanner, const gchar *format, ...);	# Outputs an error message, via the GScanner message handler.
	scanner		# a GScanner 
	format		# the message format. See the 
	...		# the parameters to insert into the format string
void g_scanner_unexp_token (GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error);	# Outputs a message through the scanner's msg_handler,resulting from an unexpected token in the input stream.Note that you should not call g_scanner_peek_next_token() followed by g_scanner_unexp_token() without an intermediatecall to g_scanner_get_next_token() , as g_scanner_unexp_token() evaluates the scanner's current token (not the peeked token)to construct part of the message.
	scanner		# a GScanner 
	expected_token		# the expected token
	identifier_spec		# a string describing how the scanner's userrefers to identifiers (NULL defaults to "identifier").This is used if expected_tokenis G_TOKEN_IDENTIFIER orG_TOKEN_IDENTIFIER_NULL .
	symbol_spec		# a string describing how the scanner's user refersto symbols (NULL defaults to "symbol"). This is used ifexpected_tokenis G_TOKEN_SYMBOL or any token value greaterthan G_TOKEN_LAST.
	symbol_name		# the name of the symbol, if the scanner's currenttoken is a symbol.
	message		# a message string to output at the end of thewarning/error, or NULL .
	is_error		# if TRUE it is output as an error. If FALSE it isoutput as a warning.
void <span class="c_punctuation">( *GScannerMsgFunc<span class="c_punctuation">) (GScanner *scanner, gchar *message, gboolean error);	# Specifies the type of the message handler function.
	scanner		# a GScanner 
	message		# the message
	error		# TRUE if the message signals an error,FALSE if it signals a warning.
GTimer  *g_timer_new (void );	#创建对象:timer, and starts timing (i.e. g_timer_start() isimplicitly called for you).
	return:		#  a new GTimer . 
void g_timer_start (GTimer *timer);	# Marks a start time, so that future calls to g_timer_elapsed() willreport the time since g_timer_start() was called. g_timer_new() automatically marks the start time, so no need to callg_timer_start() immediately after creating the timer.
	timer		# a GTimer .
void g_timer_stop (GTimer *timer);	# Marks an end time, so calls to g_timer_elapsed() will return thedifference between this end time and the start time.
	timer		# a GTimer .
void g_timer_continue (GTimer *timer);	# Resumes a timer that has previously been stopped withg_timer_stop() . g_timer_stop() must be called before using thisfunction.
	timer		# a GTimer .
gdouble g_timer_elapsed (GTimer *timer, gulong *microseconds);	# If timer has been started but not stopped, obtains the time sincethe timer was started. If timer has been stopped, obtains theelapsed time between the time it was started and the time it wasstopped. The return value is the number of seconds elapsed,including any fractional part. The microseconds out parameter isessentially useless.
	timer		# a GTimer .
	microseconds		# return location for the fractional part of secondselapsed, in microseconds (that is, the total numberof microseconds elapsed, modulo 1000000), or NULL 
	return:		#  seconds elapsed as a floating point value, including anyfractional part. 
void g_timer_reset (GTimer *timer);	# This function is useless; it's fine to call g_timer_start() on analready-started timer to reset the start time, so g_timer_reset() serves no purpose.
	timer		# a GTimer .
void g_timer_destroy (GTimer *timer);	# Destroys a timer, freeing associated resources.
	timer		# a GTimer to destroy.
void <span class="c_punctuation">( *GSpawnChildSetupFunc<span class="c_punctuation">) (gpointer user_data);	# Specifies the type of the setup function passed to g_spawn_async() ,g_spawn_sync() and g_spawn_async_with_pipes() , which can, in verylimited ways, be used to affect the child's execution.
	user_data		# user data to pass to the function.
gboolean g_spawn_async_with_pipes (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error);	# Executes a child program asynchronously (your program will notblock waiting for the child to exit). The child program isspecified by the only argument that must be provided, argv.argv should be a NULL -terminated array of strings, to be passedas the argument vector for the child. The first string in argvis of course the name of the program to execute. By default, thename of the program must be a full path. If flags contains theG_SPAWN_SEARCH_PATH flag, the PATH environment variable isused to search for the executable. If flags contains theG_SPAWN_SEARCH_PATH_FROM_ENVP flag, the PATH variable from envp is used to search for the executable. If both theG_SPAWN_SEARCH_PATH and G_SPAWN_SEARCH_PATH_FROM_ENVP flagsare set, the PATH variable from envp takes precedence overthe environment variable.
	working_directory		#  child's current working directory, or NULL to inherit parent's, in the GLib file name encoding. 
	child_setup		#  function to run in the child just before 
	return:		#  TRUE on success, FALSE if an error was set 
gboolean g_spawn_async (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error);	# See g_spawn_async_with_pipes() for a full description; this functionsimply calls the g_spawn_async_with_pipes() without any pipes.
	working_directory		#  child's current working directory, or NULL to inherit parent's. 
	child_setup		#  function to run in the child just before 
	return:		#  TRUE on success, FALSE if error is set 
gboolean g_spawn_sync (const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *exit_status, GError **error);	# Executes a child synchronously (waits for the child to exit before returning).All output from the child is stored in standard_output and standard_error,if those parameters are non-NULL . Note that you must set the G_SPAWN_STDOUT_TO_DEV_NULL and G_SPAWN_STDERR_TO_DEV_NULL flags whenpassing NULL for standard_output and standard_error.
	working_directory		#  child's current working directory, or NULL to inherit parent's. 
	child_setup		#  function to run in the child just before 
	return:		#  TRUE on success, FALSE if an error was set 
gboolean g_spawn_check_exit_status (gint exit_status, GError **error);	# Set error if exit_status indicates the child exited abnormally(e.g. with a nonzero exit code, or via a fatal signal).
	exit_status		# An exit code as returned from 
	error		# a GError 
	return:		#  TRUE if child exited successfully, FALSE otherwise (anderrorwill be set) 
gboolean g_spawn_command_line_async (const gchar *command_line, GError **error);	# A simple version of g_spawn_async() that parses a command line withg_shell_parse_argv() and passes it to g_spawn_async() . Runs acommand line in the background. Unlike g_spawn_async() , theG_SPAWN_SEARCH_PATH flag is enabled, other flags are not. Notethat G_SPAWN_SEARCH_PATH can have security implications, soconsider using g_spawn_async() directly if appropriate. Possibleerrors are those from g_shell_parse_argv() and g_spawn_async() .
	command_line		# a command line
	error		# return location for errors
	return:		#  TRUE on success, FALSE if error is set 
gboolean g_spawn_command_line_sync (const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *exit_status, GError **error);	# A simple version of g_spawn_sync() with little-used parametersremoved, taking a command line instead of an argument vector. Seeg_spawn_sync() for full details. command_line will be parsed byg_shell_parse_argv() . Unlike g_spawn_sync() , the G_SPAWN_SEARCH_PATH flagis enabled. Note that G_SPAWN_SEARCH_PATH can have securityimplications, so consider using g_spawn_sync() directly ifappropriate. Possible errors are those from g_spawn_sync() and thosefrom g_shell_parse_argv() .
	command_line		# a command line 
	standard_output		#  return location for child output. 
	return:		#  TRUE on success, FALSE if an error was set 
void g_spawn_close_pid (GPid pid);	# On some platforms, notably Windows, the GPid type represents a resourcewhich must be closed to prevent resource leaking. g_spawn_close_pid() is provided for this purpose. It should be used on all platforms, eventhough it doesn't do anything under UNIX.
	pid		# The process reference to close
GFileError g_file_error_from_errno (gint err_no);	# Gets a GFileError constant based on the passed-in err_no.For example, if you pass in EEXIST this function returnsG_FILE_ERROR_EXIST . Unlike errno values, you can portablyassume that all GFileError values will exist.
	err_no		# an "errno" value
	return:		#  GFileError corresponding to the given errno 
gboolean g_file_get_contents (const gchar *filename, gchar **contents, gsize *length, GError **error);	# Reads an entire file into allocated memory, with good errorchecking.
	filename		#  name of a file to read contents from, in the GLib file name encoding. 
	return:		#  TRUE on success, FALSE if an error occurred 
gboolean g_file_set_contents (const gchar *filename, const gchar *contents, gssize length, GError **error);	# Writes all of contents to a file named filename, with good error checking.If a file called filename already exists it will be overwritten.
	filename		#  name of a file to write contentsto, in the GLib file nameencoding. 
	return:		#  TRUE on success, FALSE if an error occurred 
gboolean g_file_test (const gchar *filename, GFileTest test);	# Returns TRUE if any of the tests in the bitfield test areTRUE . For example, (G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR)will return TRUE if the file exists; the check whether it's adirectory doesn't matter since the existence test is TRUE . Withthe current set of available tests, there's no point passing inmore than one test at a time.
	filename		#  a filename to test in theGLib file name encoding. 
	return:		#  whether a test was TRUE  
gint g_mkstemp (gchar *tmpl);	# Opens a temporary file. See the mkstemp() documentationon most UNIX-like systems.
	tmpl		#  template filename. 
	return:		#  A file handle (as from open()) to the fileopened for reading and writing. The file is opened in binarymode on platforms where there is a difference. The file handleshould be closed with close(). In case of errors, -1 isreturned and errno will be set. 
gint g_mkstemp_full (gchar *tmpl, gint flags, gint mode);	# Opens a temporary file. See the mkstemp() documentationon most UNIX-like systems.
	tmpl		#  template filename. 
	return:		#  A file handle (as from open()) to the fileopened for reading and writing. The file handle should beclosed with close(). In case of errors, -1 is returnedand errno will be set. 
gint g_file_open_tmp (const gchar *tmpl, gchar **name_used, GError **error);	# Opens a file for writing in the preferred directory for temporaryfiles (as returned by g_get_tmp_dir() ).
	tmpl		#  Template for file name, as in
	return:		#  A file handle (as from open()) to the file opened forreading and writing. The file is opened in binary mode on platformswhere there is a difference. The file handle should be closed withclose(). In case of errors, -1 is returned and errorwill be set. 
gchar  *g_file_read_link (const gchar *filename, GError **error);	# Reads the contents of the symbolic link filename like the POSIXreadlink() function. The returned string is in the encoding usedfor filenames. Use g_filename_to_utf8() to convert it to UTF-8.
	filename		#  the symbolic link. 
	return:		#  A newly-allocated string with the contents ofthe symbolic link, or NULL if an error occurred.  
gint g_mkdir_with_parents (const gchar *pathname, gint mode);	# Create a directory if it doesn't already exist. Create intermediateparent directories as needed, too.
	pathname		#  a pathname in the GLib file name encoding. 
	return:		#  0 if the directory already exists, or was successfullycreated. Returns -1 if an error occurred, with errno set. 
gchar  *g_mkdtemp (gchar *tmpl);	# Creates a temporary directory. See the mkdtemp() documentationon most UNIX-like systems.
	tmpl		#  template directory name. 
	return:		#  A pointer to tmpl, which has beenmodified to hold the directory name. In case of errors, NULL isreturned and errno will be set.  
gchar  *g_mkdtemp_full (gchar *tmpl, gint mode);	# Creates a temporary directory. See the mkdtemp() documentationon most UNIX-like systems.
	tmpl		#  template directory name. 
	return:		#  A pointer to tmpl, which has beenmodified to hold the directory name. In case of errors, NULL isreturned, and errno will be set.  
gchar  *g_dir_make_tmp (const gchar *tmpl, GError **error);	# Creates a subdirectory in the preferred directory for temporaryfiles (as returned by g_get_tmp_dir() ).
	tmpl		#  Template for directory name,as in 
	return:		#  The actual name used. This stringshould be freed with g_free() when not needed any longer and isis in the GLib file name encoding. In case of errors, NULL isreturned and errorwill be set.  
GDir  *g_dir_open (const gchar *path, guint flags, GError **error);	# Opens a directory for reading. The names of the files in thedirectory can then be retrieved using g_dir_read_name() . Notethat the ordering is not defined.
	path		# the path to the directory you are interested in. On Unixin the on-disk encoding. On Windows in UTF-8
	flags		# Currently must be set to 0. Reserved for future use.
	error		# return location for a GError , or NULL .If non-NULL , an error will be set if and only if
	return:		#  a newly allocated GDir on success, NULL on failure.If non-NULL , you must free the result with g_dir_close() when you are finished with it. 
gchar  *g_dir_read_name (GDir *dir);	# Retrieves the name of another entry in the directory, or NULL .The order of entries returned from this function is not defined,and may vary by file system or other operating-system dependentfactors.
	dir		# a GDir * created by 
	return:		#  The entry's name or NULL if there are nomore entries. The return value is owned by GLib andmust not be modified or freed.  
void g_dir_rewind (GDir *dir);	# Resets the given directory. The next call to g_dir_read_name() will return the first entry again.
	dir		# a GDir * created by 
void g_dir_close (GDir *dir);	# Closes the directory and deallocates all related resources.
	dir		# a GDir * created by 
GMappedFile  *g_mapped_file_new (const gchar *filename, gboolean writable, GError **error);	# Maps a file into memory. On UNIX, this is using the mmap() function.
	filename		#  The path of the file to load, in the GLibfilename encoding. 
	return:		#  a newly allocated GMappedFile which must be unref'dwith g_mapped_file_unref() , or NULL if the mapping failed. 
GMappedFile  *g_mapped_file_new_from_fd (gint fd, gboolean writable, GError **error);	# Maps a file into memory. On UNIX, this is using the mmap() function.
	fd		# The file descriptor of the file to load
	writable		# whether the mapping should be writable
	error		# return location for a GError , or NULL 
	return:		#  a newly allocated GMappedFile which must be unref'dwith g_mapped_file_unref() , or NULL if the mapping failed. 
GMappedFile  *g_mapped_file_ref (GMappedFile *file);	# Increments the reference count of file by one. It is safe to callthis function from any thread.
	file		# a GMappedFile 
	return:		#  the passed in GMappedFile . 
void g_mapped_file_unref (GMappedFile *file);	# Decrements the reference count of file by one. If the reference countdrops to 0, unmaps the buffer of file and frees it.
	file		# a GMappedFile 
void g_mapped_file_free (GMappedFile *file);	# g_mapped_file_free has been deprecated since version 2.22 and should not be used in newly-written code.
	file		# a GMappedFile 
gsize g_mapped_file_get_length (GMappedFile *file);	# Returns the length of the contents of a GMappedFile .
	file		# a GMappedFile 
	return:		#  the length of the contents of file. 
gchar  *g_mapped_file_get_contents (GMappedFile *file);	# Returns the contents of a GMappedFile . 
	file		# a GMappedFile 
	return:		#  the contents of file, or NULL . 
GBytes  *g_mapped_file_get_bytes (GMappedFile *file);	#创建对象:GBytes which references the data mapped from file.The mapped contents of the file must not be modified after creating thisbytes object, because a GBytes should be immutable.
	file		# a GMappedFile 
	return:		#  A newly allocated GBytes referencing datafrom file.  
int g_open (const gchar *filename, int flags, int mode);	# A wrapper for the POSIX open() function. The open() function isused to convert a pathname into a file descriptor.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  a new file descriptor, or -1 if an error occurred.The return value can be used exactly like the return valuefrom open(). 
int g_rename (const gchar *oldfilename, const gchar *newfilename);	# A wrapper for the POSIX rename() function. The rename() function renames a file, moving it between directories if required.
	oldfilename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the renaming succeeded, -1 if an error occurred 
int g_mkdir (const gchar *filename, int mode);	# A wrapper for the POSIX mkdir() function. The mkdir() function attempts to create a directory with the given name and permissions.The mode argument is ignored on Windows.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the directory was successfully created, -1 if an erroroccurred 
int g_stat (const gchar *filename, GStatBuf *buf);	# A wrapper for the POSIX stat() function. The stat() functionreturns information about a file. On Windows the stat() function inthe C library checks only the FAT-style READONLY attribute and doesnot look at the ACL at all. Thus on Windows the protection bits inthe st_mode field are a fabrication of little use.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the information was successfully retrieved,-1 if an error occurred 
int g_lstat (const gchar *filename, GStatBuf *buf);	# A wrapper for the POSIX lstat() function. The lstat() function islike stat() except that in the case of symbolic links, it returnsinformation about the symbolic link itself and not the file that itrefers to. If the system does not support symbolic links g_lstat() is identical to g_stat() .
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the information was successfully retrieved,-1 if an error occurred 
int g_unlink (const gchar *filename);	# A wrapper for the POSIX unlink() function. The unlink() function deletes a name from the filesystem. If this was the last link to the file and no processes have it opened, the diskspace occupied by thefile is freed.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the name was successfully deleted, -1 if an erroroccurred 
int g_remove (const gchar *filename);	# A wrapper for the POSIX remove() function. The remove() functiondeletes a name from the filesystem.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the file was successfully removed, -1 if an erroroccurred 
int g_rmdir (const gchar *filename);	# A wrapper for the POSIX rmdir() function. The rmdir() functiondeletes a directory from the filesystem.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the directory was successfully removed, -1 if an erroroccurred 
FILE  *g_fopen (const gchar *filename, const gchar *mode);	# A wrapper for the stdio fopen() function. The fopen() functionopens a file and associates a new stream with it.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  A FILE* if the file was successfully opened, or NULL ifan error occurred 
FILE  *g_freopen (const gchar *filename, const gchar *mode, FILE *stream);	# A wrapper for the POSIX freopen() function. The freopen() functionopens a file and associates it with an existing stream.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  A FILE* if the file was successfully opened, or NULL ifan error occurred. 
int g_chmod (const gchar *filename, int mode);	# A wrapper for the POSIX chmod() function. The chmod() function isused to set the permissions of a file system object.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the operation succeeded, -1 on error 
int g_access (const gchar *filename, int mode);	# A wrapper for the POSIX access() function. This function is used totest a pathname for one or several of read, write or executepermissions, or just existence.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  zero if the pathname refers to an existing file systemobject that has all the tested permissions, or -1 otherwiseor on error. 
int g_creat (const gchar *filename, int mode);	# A wrapper for the POSIX creat() function. The creat() function isused to convert a pathname into a file descriptor, creating a fileif necessary.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  a new file descriptor, or -1 if an error occurred.The return value can be used exactly like the return valuefrom creat(). 
int g_chdir (const gchar *path);	# A wrapper for the POSIX chdir() function. The function changes thecurrent directory of the process to path.
	path		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 on success, -1 if an error occurred. 
int g_utime (const gchar *filename, struct utimbuf *utb);	# A wrapper for the POSIX utime() function. The utime() functionsets the access and modification timestamps of a file.
	filename		#  a pathname in the GLib file name encoding(UTF-8 on Windows). 
	return:		#  0 if the operation was successful, -1 if an error occurred 
gboolean g_close (gint fd, GError **error);	# This wraps the close() call; in case of error, errno will bepreserved, but the error will also be stored as a GError in error.
	fd		# A file descriptor
	error		# a GError 
	return:		#  TRUE on success, FALSE if there was an error. 
char  *g_uri_parse_scheme (const char *uri);	# Gets the scheme portion of a URI string. RFC 3986 decodes the scheme as:
	uri		# a valid URI.
	return:		#  The "Scheme" component of the URI, or NULL on error.The returned string should be freed when no longer needed. 
char  *g_uri_escape_string (const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8);	# Escapes a string for use in a URI.
	unescaped		# the unescaped input string.
	reserved_chars_allowed		#  a string of reserved characters thatare allowed to be used, or NULL . 
	return:		#  an escaped version of unescaped. The returned string should befreed when no longer needed. 
char  *g_uri_unescape_string (const char *escaped_string, const char *illegal_characters);	# Unescapes a whole escaped string.
	escaped_string		# an escaped string to be unescaped.
	illegal_characters		#  a string of illegal characters not to beallowed, or NULL . 
	return:		#  an unescaped version of escaped_string. The returned stringshould be freed when no longer needed. 
char  *g_uri_unescape_segment (const char *escaped_string, const char *escaped_string_end, const char *illegal_characters);	# Unescapes a segment of an escaped string.
	escaped_string		#  A string, may be NULL . 
	return:		#  an unescaped version of escaped_stringor NULL on error.The returned string should be freed when no longer needed. As aspecial case if NULL is given for escaped_string, this functionwill return NULL . 
gchar  **g_uri_list_extract_uris (const gchar *uri_list);	# Splits an URI list conforming to the text/uri-listmime type defined in RFC 2483 into individual URIs,discarding any comments. The URIs are not validated.
	uri_list		# an URI list 
	return:		#  a newly allocated NULL -terminated listof strings holding the individual URIs. The array should be freedwith g_strfreev() .  
gchar  *g_filename_from_uri (const gchar *uri, gchar **hostname, GError **error);	# Converts an escaped ASCII-encoded URI to a local filename in theencoding used for filenames.
	uri		# a uri describing a filename (escaped, encoded in ASCII).
	hostname		#  Location to store hostname for the URI.If there is no hostname in the URI, NULL will bestored in this location. 
	return:		#  a newly-allocated string holdingthe resulting filename, or NULL on an error.  
gchar  *g_filename_to_uri (const gchar *filename, const gchar *hostname, GError **error);	# Converts an absolute filename to an escaped ASCII-encoded URI, with the pathcomponent following Section 3.3. of RFC 2396.
	filename		#  an absolute filename specified in the GLib filename encoding, which is the on-disk file name bytes on Unix, and UTF-8on Windows. 
	return:		#  a newly-allocated string holding the resultingURI, or NULL on an error. 
gchar  *g_hostname_to_ascii (const gchar *hostname);	# Converts hostname to its canonical ASCII form; an ASCII-onlystring containing no uppercase letters and not ending with atrailing dot.
	hostname		# a valid UTF-8 or ASCII hostname
	return:		#  an ASCII hostname, which must be freed, or NULL ifhostnameis in some way invalid. 
gchar  *g_hostname_to_unicode (const gchar *hostname);	# Converts hostname to its canonical presentation form; a UTF-8string in Unicode normalization form C, containing no uppercaseletters, no forbidden characters, and no ASCII-encoded segments,and not ending with a trailing dot.
	hostname		# a valid UTF-8 or ASCII hostname
	return:		#  a UTF-8 hostname, which must be freed, or NULL ifhostnameis in some way invalid. 
gboolean g_hostname_is_non_ascii (const gchar *hostname);	# Tests if hostname contains Unicode characters. If this returnsTRUE , you need to encode the hostname with g_hostname_to_ascii() before using it in non-IDN-aware contexts.
	hostname		# a hostname
	return:		#  TRUE if hostnamecontains any non-ASCII characters 
gboolean g_hostname_is_ascii_encoded (const gchar *hostname);	# Tests if hostname contains segments with an ASCII-compatibleencoding of an Internationalized Domain Name. If this returnsTRUE , you should decode the hostname with g_hostname_to_unicode() before displaying it to the user.
	hostname		# a hostname
	return:		#  TRUE if hostnamecontains any ASCII-encodedsegments. 
gboolean g_hostname_is_ip_address (const gchar *hostname);	# Tests if hostname is the string form of an IPv4 or IPv6 address.(Eg, "192.168.0.1".)
	hostname		# a hostname (or IP address in string form)
	return:		#  TRUE if hostnameis an IP address 
gboolean g_shell_parse_argv (const gchar *command_line, gint *argcp, gchar ***argvp, GError **error);	# Parses a command line into an argument vector, in much the same waythe shell would, but without many of the expansions the shell wouldperform (variable expansion, globs, operators, filename expansion,etc. are not supported). The results are defined to be the same asthose you would get from a UNIX98 /bin/sh, as long as the inputcontains none of the unsupported shell expansions. If the inputdoes contain such expansions, they are passed throughliterally. Possible errors are those from the G_SHELL_ERROR domain. Free the returned vector with g_strfreev() .
	command_line		# command line to parse
	argcp		#  return location for number of args. 
	return:		#  TRUE on success, FALSE if error set 
gchar  *g_shell_quote (const gchar *unquoted_string);	# Quotes a string so that the shell (/bin/sh) will interpret thequoted string to mean unquoted_string. If you pass a filename tothe shell, for example, you should first quote it with thisfunction. The return value must be freed with g_free() . Thequoting style used is undefined (single or double quotes may beused).
	unquoted_string		# a literal string
	return:		#  quoted string 
gchar  *g_shell_unquote (const gchar *quoted_string, GError **error);	# Unquotes a string as the shell (/bin/sh) would. Only handlesquotes; if a string contains file globs, arithmetic operators,variables, backticks, redirections, or other special-to-the-shellfeatures, the result will be different from the result a real shellwould produce (the variables, backticks, etc. will be passedthrough literally instead of being expanded). This function isguaranteed to succeed if applied to the result ofg_shell_quote() . If it fails, it returns NULL and sets theerror. The quoted_string need not actually contain quoted orescaped text; g_shell_unquote() simply goes through the string andunquotes/unescapes anything that the shell would. Both single anddouble quotes are handled, as are escapes including escapednewlines. The return value must be freed with g_free() . Possibleerrors are in the G_SHELL_ERROR domain.
	quoted_string		# shell-quoted string
	error		# error return location or NULL
	return:		#  an unquoted string 
gboolean <span class="c_punctuation">( *GOptionArgFunc<span class="c_punctuation">) (const gchar *option_name, const gchar *value, gpointer data, GError **error);	# The type of function to be passed as callback for G_OPTION_ARG_CALLBACK options.
	option_name		# The name of the option being parsed. This will be either asingle dash followed by a single letter (for a short name) or two dashesfollowed by a long option name.
	value		# The value to be parsed.
	data		# User data added to the GOptionGroup containing the option when itwas created with 
	error		# A return location for errors. The error code G_OPTION_ERROR_FAILED is intended to be used for errors in GOptionArgFunc callbacks.
	return:		#  TRUE if the option was successfully parsed, FALSE if an erroroccurred, in which case errorshould be set with g_set_error()  
GOptionContext  *g_option_context_new (const gchar *parameter_string);	#创建对象:option context.
	parameter_string		#  a string which is displayed inthe first line of --help output, after the usage summaryprogramname [OPTION...]. 
	return:		#  a newly created GOptionContext , which must befreed with g_option_context_free() after use. 
void g_option_context_set_summary (GOptionContext *context, const gchar *summary);	# Adds a string to be displayed in --help output before the listof options. This is typically a summary of the program functionality.
	context		# a GOptionContext 
	summary		#  a string to be shown in --help outputbefore the list of options, or NULL . 
gchar  *g_option_context_get_summary (GOptionContext *context);	# Returns the summary. See g_option_context_set_summary() .
	context		# a GOptionContext 
	return:		#  the summary 
void g_option_context_set_description (GOptionContext *context, const gchar *description);	# Adds a string to be displayed in --help output after the listof options. This text often includes a bug reporting address.
	context		# a GOptionContext 
	description		#  a string to be shown in --help outputafter the list of options, or NULL . 
gchar  *g_option_context_get_description (GOptionContext *context);	# Returns the description. See g_option_context_set_description() .
	context		# a GOptionContext 
	return:		#  the description 
gchar  *<span class="c_punctuation">( *GTranslateFunc<span class="c_punctuation">) (const gchar *str, gpointer data);	# The type of functions which are used to translate user-visiblestrings, for &lt;option&gt;--help&lt;/option&gt; output.
	str		# the untranslated string
	data		# user data specified when installing the function, e.g.in 
	return:		#  a translation of the string for the current locale.The returned string is owned by GLib and must not be freed. 
void g_option_context_set_translate_func (GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);	# Sets the function which is used to translate the contextsuser-visible strings, for --help output. If func is NULL ,strings are not translated.
	context		# a GOptionContext 
	func		#  the GTranslateFunc , or NULL . 
void g_option_context_set_translation_domain (GOptionContext *context, const gchar *domain);	# A convenience function to use gettext() for translatinguser-visible strings.
	context		# a GOptionContext 
	domain		# the domain to use
void g_option_context_free (GOptionContext *context);	# Frees context and all the groups which have beenadded to it.
	context		# a GOptionContext 
gboolean g_option_context_parse (GOptionContext *context, gint *argc, gchar ***argv, GError **error);	# Parses the command line arguments, recognizing optionswhich have been added to context. A side-effect ofcalling this function is that g_set_prgname() will becalled.
	context		# a GOptionContext 
	argc		#  a pointer to the number of command line arguments. 
	return:		#  TRUE if the parsing was successful,FALSE if an error occurred 
gboolean g_option_context_parse_strv (GOptionContext *context, gchar ***arguments, GError **error);	# Parses the command line arguments.
	context		# a GOptionContext 
	arguments		#  a pointer to thecommand line arguments (which must be in UTF-8 on Windows). 
	return:		#  TRUE if the parsing was successful,FALSE if an error occurred 
void g_option_context_set_help_enabled (GOptionContext *context, gboolean help_enabled);	# Enables or disables automatic generation of --help output.By default, g_option_context_parse() recognizes --help, -h,-?, --help-all and --help-groupname and creates suitableoutput to stdout.
	context		# a GOptionContext 
	help_enabled		# TRUE to enable --help, FALSE to disable it
gboolean g_option_context_get_help_enabled (GOptionContext *context);	# Returns whether automatic --help generationis turned on for context. See g_option_context_set_help_enabled() .
	context		# a GOptionContext 
	return:		#  TRUE if automatic help generation is turned on. 
void g_option_context_set_ignore_unknown_options (GOptionContext *context, gboolean ignore_unknown);	# Sets whether to ignore unknown options or not. If an argument isignored, it is left in the argv array after parsing. By default,g_option_context_parse() treats unknown options as error.
	context		# a GOptionContext 
	ignore_unknown		# TRUE to ignore unknown options, FALSE to producean error when unknown options are met
gboolean g_option_context_get_ignore_unknown_options (GOptionContext *context);	# Returns whether unknown options are ignored or not. Seeg_option_context_set_ignore_unknown_options() .
	context		# a GOptionContext 
	return:		#  TRUE if unknown options are ignored. 
gchar  *g_option_context_get_help (GOptionContext *context, gboolean main_help, GOptionGroup *group);	# Returns a formatted, translated help text for the given context.To obtain the text produced by --help, callg_option_context_get_help (context, TRUE, NULL).To obtain the text produced by --help-all, callg_option_context_get_help (context, FALSE, NULL).To obtain the help text for an option group, callg_option_context_get_help (context, FALSE, group).
	context		# a GOptionContext 
	main_help		# if TRUE , only include the main group
	group		#  the GOptionGroup to create help for, or NULL . 
	return:		#  A newly allocated string containing the help text 
gboolean g_option_context_get_strict_posix (GOptionContext *context);	# Returns whether strict POSIX code is enabled.
	context		# a GoptionContext 
	return:		#  TRUE if strict POSIX is enabled, FALSE otherwise. 
void g_option_context_set_strict_posix (GOptionContext *context, gboolean strict_posix);	# Sets strict POSIX mode.
	context		# a GoptionContext 
	strict_posix		# the new value
void g_option_context_add_main_entries (GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain);	# A convenience function which creates a main group if it doesn'texist, adds the entries to it and sets the translation domain.
	context		# a GOptionContext 
	entries		# a NULL -terminated array of GOptionEntrys 
	translation_domain		#  a translation domain to use for translatingthe --help output for the options in entrieswith 
void g_option_context_add_group (GOptionContext *context, GOptionGroup *group);	# Adds a GOptionGroup to the context, so that parsing with contextwill recognize the options in the group. Note that this will takeownership of the group and thus the group should not be freed.
	context		# a GOptionContext 
	group		#  the group to add. 
void g_option_context_set_main_group (GOptionContext *context, GOptionGroup *group);	# Sets a GOptionGroup as main group of the context.This has the same effect as calling g_option_context_add_group() ,the only difference is that the options in the main group aretreated differently when generating --help output.
	context		# a GOptionContext 
	group		#  the group to set as main group. 
GOptionGroup  *g_option_context_get_main_group (GOptionContext *context);	# Returns a pointer to the main group of context.
	context		# a GOptionContext 
	return:		#  the main group of context, or NULL ifcontextdoesn't have a main group. Note that group belongs tocontextand should not be modified or freed.  
GOptionGroup  *g_option_group_new (const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy);	#创建对象:GOptionGroup .
	name		# the name for the option group, this is used to providehelp for the options in this group with --help-name
	description		# a description for this group to be shown in--help. This string is translated using the translationdomain or translation function of the group
	help_description		# a description for the --help-nameoption.This string is translated using the translation domain or translation functionof the group
	user_data		#  user data that will be passed to the pre- and post-parse hooks,the error hook and to callbacks of G_OPTION_ARG_CALLBACK options, or NULL . 
	return:		#  a newly created option group. It should be addedto a GOptionContext or freed with g_option_group_unref() . 
GOptionGroup  *g_option_group_ref (GOptionGroup *group);	# Increments the reference count of group by one.
	group		# a GOptionGroup 
	return:		#  a GoptionGroup  
void g_option_group_unref (GOptionGroup *group);	# Decrements the reference count of group by one.If the reference count drops to 0, the group will be freed.and all memory allocated by the group is released.
	group		# a GOptionGroup 
void g_option_group_free (GOptionGroup *group);	# g_option_group_free has been deprecated since version 2.44 and should not be used in newly-written code.
	group		# a GOptionGroup 
void g_option_group_add_entries (GOptionGroup *group, const GOptionEntry *entries);	# Adds the options specified in entries to group.
	group		# a GOptionGroup 
	entries		# a NULL -terminated array of GOptionEntrys 
gboolean <span class="c_punctuation">( *GOptionParseFunc<span class="c_punctuation">) (GOptionContext *context, GOptionGroup *group, gpointer data, GError **error);	# The type of function that can be called before and after parsing.
	context		# The active GOptionContext 
	group		# The group to which the function belongs
	data		# User data added to the GOptionGroup containing the option when itwas created with 
	error		# A return location for error details
	return:		#  TRUE if the function completed successfully, FALSE if an erroroccurred, in which case errorshould be set with g_set_error()  
void g_option_group_set_parse_hooks (GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func);	# Associates two functions with group which will be calledfrom g_option_context_parse() before the first option is parsedand after the last option has been parsed, respectively.
	group		# a GOptionGroup 
	pre_parse_func		#  a function to call before parsing, or NULL . 
void <span class="c_punctuation">( *GOptionErrorFunc<span class="c_punctuation">) (GOptionContext *context, GOptionGroup *group, gpointer data, GError **error);	# The type of function to be used as callback when a parse error occurs.
	context		# The active GOptionContext 
	group		# The group to which the function belongs
	data		# User data added to the GOptionGroup containing the option when itwas created with 
	error		# The GError containing details about the parse error
void g_option_group_set_error_hook (GOptionGroup *group, GOptionErrorFunc error_func);	# Associates a function with group which will be calledfrom g_option_context_parse() when an error occurs.
	group		# a GOptionGroup 
	error_func		# a function to call when an error occurs
void g_option_group_set_translate_func (GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify);	# Sets the function which is used to translate user-visible strings,for --help output. Different groups can use differentGTranslateFuncs . If func is NULL , strings are not translated.
	group		# a GOptionGroup 
	func		#  the GTranslateFunc , or NULL . 
void g_option_group_set_translation_domain (GOptionGroup *group, const gchar *domain);	# A convenience function to use gettext() for translatinguser-visible strings.
	group		# a GOptionGroup 
	domain		# the domain to use
GPatternSpec  *g_pattern_spec_new (const gchar *pattern);	# Compiles a pattern to a GPatternSpec .
	pattern		# a zero-terminated UTF-8 encoded string
	return:		#  a newly-allocated GPatternSpec  
void g_pattern_spec_free (GPatternSpec *pspec);	# Frees the memory allocated for the GPatternSpec .
	pspec		# a GPatternSpec 
gboolean g_pattern_spec_equal (GPatternSpec *pspec1, GPatternSpec *pspec2);	# Compares two compiled pattern specs and returns whether they willmatch the same set of strings.
	pspec1		# a GPatternSpec 
	pspec2		# another GPatternSpec 
	return:		#  Whether the compiled patterns are equal 
gboolean g_pattern_match (GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed);	# Matches a string against a compiled pattern. Passing the correctlength of the string given is mandatory. The reversed string can beomitted by passing NULL , this is more efficient if the reversedversion of the string to be matched is not at hand, asg_pattern_match() will only construct it if the compiled patternrequires reverse matches.
	pspec		# a GPatternSpec 
	string_length		# the length of string(in bytes, i.e. 
	string		# the UTF-8 encoded string to match
	string_reversed		#  the reverse of stringor NULL . 
	return:		#  TRUE if stringmatches pspec 
gboolean g_pattern_match_string (GPatternSpec *pspec, const gchar *string);	# Matches a string against a compiled pattern. If the string is to bematched against more than one pattern, consider usingg_pattern_match() instead while supplying the reversed string.
	pspec		# a GPatternSpec 
	string		# the UTF-8 encoded string to match
	return:		#  TRUE if stringmatches pspec 
gboolean g_pattern_match_simple (const gchar *pattern, const gchar *string);	# Matches a string against a pattern given as a string. If thisfunction is to be called in a loop, it's more efficient to compilethe pattern once with g_pattern_spec_new() and callg_pattern_match_string() repeatedly.
	pattern		# the UTF-8 encoded pattern
	string		# the UTF-8 encoded string to match
	return:		#  TRUE if stringmatches pspec 
gboolean <span class="c_punctuation">( *GRegexEvalCallback<span class="c_punctuation">) (const GMatchInfo *match_info, GString *result, gpointer user_data);	# Specifies the type of the function passed to g_regex_replace_eval() .It is called for each occurrence of the pattern in the string passedto g_regex_replace_eval() , and it should append the replacement toresult.
	match_info		# the GMatchInfo generated by the match.Use 
	result		# a GString containing the new string
	user_data		# user data passed to 
	return:		#  FALSE to continue the replacement process, TRUE to stop it 
GRegex  *g_regex_new (const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error);	# Compiles the regular expression to an internal form, and doesthe initial setup of the GRegex structure.
	pattern		# the regular expression
	compile_options		# compile options for the regular expression, or 0
	match_options		# match options for the regular expression, or 0
	error		# return location for a GError 
	return:		#  a GRegex structure or NULL if an error occured. Callg_regex_unref() when you are done with it.  
GRegex  *g_regex_ref (GRegex *regex);	# Increases reference count of regex by 1.
	regex		# a GRegex 
	return:		#  regex 
void g_regex_unref (GRegex *regex);	# Decreases reference count of regex by 1. When reference count dropsto zero, it frees all the memory associated with the regex structure.
	regex		# a GRegex 
gchar  *g_regex_get_pattern (const GRegex *regex);	# Gets the pattern string associated with regex, i.e. a copy ofthe string passed to g_regex_new() .
	regex		# a GRegex structure
	return:		#  the pattern of regex 
gint g_regex_get_max_backref (const GRegex *regex);	# Returns the number of the highest back referencein the pattern, or 0 if the pattern does not containback references.
	regex		# a GRegex 
	return:		#  the number of the highest back reference 
gint g_regex_get_capture_count (const GRegex *regex);	# Returns the number of capturing subpatterns in the pattern.
	regex		# a GRegex 
	return:		#  the number of capturing subpatterns 
gboolean g_regex_get_has_cr_or_lf (const GRegex *regex);	# Checks whether the pattern contains explicit CR or LF references.
	regex		# a GRegex structure
	return:		#  TRUE if the pattern contains explicit CR or LF references 
gint g_regex_get_max_lookbehind (const GRegex *regex);	# Gets the number of characters in the longest lookbehind assertion in thepattern. This information is useful when doing multi-segment matching usingthe partial matching facilities.
	regex		# a GRegex structure
	return:		#  the number of characters in the longest lookbehind assertion. 
gint g_regex_get_string_number (const GRegex *regex, const gchar *name);	# Retrieves the number of the subexpression named name.
	regex		# GRegex structure
	name		# name of the subexpression
	return:		#  The number of the subexpression or -1 if namedoes not exists 
GRegexCompileFlags g_regex_get_compile_flags (const GRegex *regex);	# Returns the compile options that regex was created with.
	regex		# a GRegex 
	return:		#  flags from GRegexCompileFlags  
GRegexMatchFlags g_regex_get_match_flags (const GRegex *regex);	# Returns the match options that regex was created with.
	regex		# a GRegex 
	return:		#  flags from GRegexMatchFlags  
gchar  *g_regex_escape_string (const gchar *string, gint length);	# Escapes the special characters used for regular expressionsin string, for instance "a.b*c" becomes "a.b*c". Thisfunction is useful to dynamically generate regular expressions.
	string		#  the string to escape. 
	return:		#  a newly-allocated escaped string 
gchar  *g_regex_escape_nul (const gchar *string, gint length);	# Escapes the nul characters in string to "\x00". It can be usedto compile a regex with embedded nul characters.
	string		# the string to escape
	length		# the length of string
	return:		#  a newly-allocated escaped string 
gboolean g_regex_match_simple (const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);	# Scans for a match in string for pattern.
	pattern		# the regular expression
	string		# the string to scan for matches
	compile_options		# compile options for the regular expression, or 0
	match_options		# match options, or 0
	return:		#  TRUE if the string matched, FALSE otherwise 
gboolean g_regex_match (const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);	# Scans for a match in string for the pattern in regex.The match_options are combined with the match options specifiedwhen the regex structure was created, letting you have moreflexibility in reusing GRegex structures.
	regex		# a GRegex structure from 
	string		# the string to scan for matches
	match_options		# match options
	match_info		#  pointer to location where to storethe GMatchInfo , or NULL if you do not need it. 
	return:		#  TRUE is the string matched, FALSE otherwise 
gboolean g_regex_match_full (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);	# Scans for a match in string for the pattern in regex.The match_options are combined with the match options specifiedwhen the regex structure was created, letting you have moreflexibility in reusing GRegex structures.
	regex		# a GRegex structure from 
	string		#  the string to scan for matches. 
	return:		#  TRUE is the string matched, FALSE otherwise 
gboolean g_regex_match_all (const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info);	# Using the standard algorithm for regular expression matching onlythe longest match in the string is retrieved. This function usesa different algorithm so it can retrieve all the possible matches.For more documentation see g_regex_match_all_full() .
	regex		# a GRegex structure from 
	string		# the string to scan for matches
	match_options		# match options
	match_info		#  pointer to location where to storethe GMatchInfo , or NULL if you do not need it. 
	return:		#  TRUE is the string matched, FALSE otherwise 
gboolean g_regex_match_all_full (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error);	# Using the standard algorithm for regular expression matching onlythe longest match in the string is retrieved, it is not possibleto obtain all the available matches. For instance matching"&lt;a&gt; &lt;b&gt; &lt;c&gt;" against the pattern "&lt;.*&gt;"you get "&lt;a&gt; &lt;b&gt; &lt;c&gt;".
	regex		# a GRegex structure from 
	string		#  the string to scan for matches. 
	return:		#  TRUE is the string matched, FALSE otherwise 
gchar  **g_regex_split_simple (const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options);	# Breaks the string on the pattern, and returns an array ofthe tokens. If the pattern contains capturing parentheses,then the text for each of the substrings will also be returned.If the pattern does not match anywhere in the string, then thewhole string is returned as the first token.
	pattern		# the regular expression
	string		# the string to scan for matches
	compile_options		# compile options for the regular expression, or 0
	match_options		# match options, or 0
	return:		#  a NULL -terminated array of strings. Freeit using g_strfreev() .  
gchar  **g_regex_split (const GRegex *regex, const gchar *string, GRegexMatchFlags match_options);	# Breaks the string on the pattern, and returns an array of the tokens.If the pattern contains capturing parentheses, then the text for eachof the substrings will also be returned. If the pattern does not matchanywhere in the string, then the whole string is returned as the firsttoken.
	regex		# a GRegex structure
	string		# the string to split with the pattern
	match_options		# match time option flags
	return:		#  a NULL -terminated gchar ** array. Freeit using g_strfreev() .  
gchar  **g_regex_split_full (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error);	# Breaks the string on the pattern, and returns an array of the tokens.If the pattern contains capturing parentheses, then the text for eachof the substrings will also be returned. If the pattern does not matchanywhere in the string, then the whole string is returned as the firsttoken.
	regex		# a GRegex structure
	string		#  the string to split with the pattern. 
	return:		#  a NULL -terminated gchar ** array. Freeit using g_strfreev() .  
gchar  *g_regex_replace (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);	# Replaces all occurrences of the pattern in regex with thereplacement text. Backreferences of the form '\number' or'\g&lt;number&gt;' in the replacement text are interpolated by thenumber-th captured subexpression of the match, '\g&lt;name&gt;' refersto the captured subexpression with the given name. '\0' refersto the complete match, but '\0' followed by a number is the octalrepresentation of a character. To include a literal '\' in thereplacement, write '\'.
	regex		# a GRegex structure
	string		#  the string to perform matches against. 
	return:		#  a newly allocated string containing the replacements 
gchar  *g_regex_replace_literal (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error);	# Replaces all occurrences of the pattern in regex with thereplacement text. replacement is replaced literally, toinclude backreferences use g_regex_replace() .
	regex		# a GRegex structure
	string		#  the string to perform matches against. 
	return:		#  a newly allocated string containing the replacements 
gchar  *g_regex_replace_eval (const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error);	# Replaces occurrences of the pattern in regex with the output ofeval for that occurrence.
	regex		# a GRegex structure from 
	string		#  string to perform matches against. 
	return:		#  a newly allocated string containing the replacements 
gboolean g_regex_check_replacement (const gchar *replacement, gboolean *has_references, GError **error);	# Checks whether replacement is a valid replacement string(see g_regex_replace() ), i.e. that all escape sequences init are valid.
	replacement		# the replacement string
	has_references		#  location to store information aboutreferences in replacementor NULL . 
	return:		#  whether replacementis a valid replacement string 
GRegex  *g_match_info_get_regex (const GMatchInfo *match_info);	# Returns GRegex object used in match_info. It belongs to Gliband must not be freed. Use g_regex_ref() if you need to keep itafter you free match_info object.
	match_info		# a GMatchInfo 
	return:		#  GRegex object used in match_info 
gchar  *g_match_info_get_string (const GMatchInfo *match_info);	# Returns the string searched with match_info. This is thestring passed to g_regex_match() or g_regex_replace() soyou may not free it before calling this function.
	match_info		# a GMatchInfo 
	return:		#  the string searched with match_info 
GMatchInfo  *g_match_info_ref (GMatchInfo *match_info);	# Increases reference count of match_info by 1.
	match_info		# a GMatchInfo 
	return:		#  match_info 
void g_match_info_unref (GMatchInfo *match_info);	# Decreases reference count of match_info by 1. When reference count dropsto zero, it frees all the memory associated with the match_info structure.
	match_info		# a GMatchInfo 
void g_match_info_free (GMatchInfo *match_info);	# If match_info is not NULL , calls g_match_info_unref() ; otherwise doesnothing.
	match_info		#  a GMatchInfo , or NULL . 
gboolean g_match_info_matches (const GMatchInfo *match_info);	# Returns whether the previous match operation succeeded.
	match_info		# a GMatchInfo structure
	return:		#  TRUE if the previous match operation succeeded,FALSE otherwise 
gboolean g_match_info_next (GMatchInfo *match_info, GError **error);	# Scans for the next match using the same parameters of the previouscall to g_regex_match_full() or g_regex_match() that returnedmatch_info.
	match_info		# a GMatchInfo structure
	error		# location to store the error occurring, or NULL to ignore errors
	return:		#  TRUE is the string matched, FALSE otherwise 
gint g_match_info_get_match_count (const GMatchInfo *match_info);	# Retrieves the number of matched substrings (including substring 0,that is the whole matched text), so 1 is returned if the patternhas no substrings in it and 0 is returned if the match failed.
	match_info		# a GMatchInfo structure
	return:		#  Number of matched substrings, or -1 if an error occurred 
gboolean g_match_info_is_partial_match (const GMatchInfo *match_info);	# Usually if the string passed to g_regex_match*() matches as far asit goes, but is too short to match the entire pattern, FALSE isreturned. There are circumstances where it might be helpful todistinguish this case from other cases in which there is no match.
	match_info		# a GMatchInfo structure
	return:		#  TRUE if the match was partial, FALSE otherwise 
gchar  *g_match_info_expand_references (const GMatchInfo *match_info, const gchar *string_to_expand, GError **error);	# Returns a new string containing the text in string_to_expand withreferences and escape sequences expanded. References refer to the lastmatch done with string against regex and have the same syntax used byg_regex_replace() .
	match_info		#  a GMatchInfo or NULL . 
	return:		#  the expanded string, or NULL if an error occurred.  
gchar  *g_match_info_fetch (const GMatchInfo *match_info, gint match_num);	# Retrieves the text matching the match_num'th capturingparentheses. 0 is the full text of the match, 1 is the first parenset, 2 the second, and so on.
	match_info		# GMatchInfo structure
	match_num		# number of the sub expression
	return:		#  The matched substring, or NULL if an erroroccurred. You have to free the string yourself.  
gboolean g_match_info_fetch_pos (const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos);	# Retrieves the position in bytes of the match_num'th capturingparentheses. 0 is the full text of the match, 1 is the firstparen set, 2 the second, and so on.
	match_info		# GMatchInfo structure
	match_num		# number of the sub expression
	start_pos		#  pointer to location where to storethe start position, or NULL . 
	return:		#  TRUE if the position was fetched, FALSE otherwise. Ifthe position cannot be fetched, start_posand end_posare leftunchanged 
gchar  *g_match_info_fetch_named (const GMatchInfo *match_info, const gchar *name);	# Retrieves the text matching the capturing parentheses named name.
	match_info		# GMatchInfo structure
	name		# name of the subexpression
	return:		#  The matched substring, or NULL if an erroroccurred. You have to free the string yourself.  
gboolean g_match_info_fetch_named_pos (const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos);	# Retrieves the position in bytes of the capturing parentheses named name.
	match_info		# GMatchInfo structure
	name		# name of the subexpression
	start_pos		#  pointer to location where to storethe start position, or NULL . 
	return:		#  TRUE if the position was fetched, FALSE otherwise.If the position cannot be fetched, start_posand end_posare left unchanged. 
gchar  **g_match_info_fetch_all (const GMatchInfo *match_info);	# Bundles up pointers to each of the matching substrings from a matchand stores them in an array of gchar pointers. The first element inthe returned array is the match number 0, i.e. the entire matchedtext.
	match_info		# a GMatchInfo structure
	return:		#  a NULL -terminated array of gchar *pointers. It must be freed using g_strfreev() . If the previousmatch failed NULL is returned.  
gchar  *g_markup_escape_text (const gchar *text, gssize length);	# Escapes text so that the markup parser will parse it verbatim.Less than, greater than, ampersand, etc. are replaced with thecorresponding entities. This function would typically be usedwhen writing out a file to be parsed with the markup parser.
	text		# some valid UTF-8 text
	length		# length of textin bytes, or -1 if the text is nul-terminated
	return:		#  a newly allocated string with the escaped text 
gchar  *g_markup_printf_escaped (const char *format, ...);	# Formats arguments according to format, escapingall string and character arguments in the fashionof g_markup_escape_text() . This is useful when youwant to insert literal strings into XML-style markupoutput, without having to worry that the stringsmight themselves contain markup.
	format		# printf() style format string
	...		# the arguments to insert in the format string
	return:		#  newly allocated result from formattingoperation. Free with g_free() . 
gchar  *g_markup_vprintf_escaped (const char *format, va_list args);	# Formats the data in args according to format, escapingall string and character arguments in the fashionof g_markup_escape_text() . See g_markup_printf_escaped() .
	format		# printf() style format string
	args		# variable argument list, similar to 
	return:		#  newly allocated result from formattingoperation. Free with g_free() . 
GMarkupParseContext  *g_markup_parse_context_new (const GMarkupParser *parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify);	#创建对象:parse context. A parse context is used to parsemarked-up documents. You can feed any number of documents intoa context, as long as no errors occur; once an error occurs,the parse context can't continue to parse text (you have tofree it and create a new parse context).
	parser		# a GMarkupParser 
	flags		# one or more GMarkupParseFlags 
	user_data		# user data to pass to GMarkupParser functions
	user_data_dnotify		# user data destroy notifier called whenthe parse context is freed
	return:		#  a new GMarkupParseContext  
gboolean g_markup_parse_context_parse (GMarkupParseContext *context, const gchar *text, gssize text_len, GError **error);	# Feed some data to the GMarkupParseContext .
	context		# a GMarkupParseContext 
	text		# chunk of text to parse
	text_len		# length of textin bytes
	error		# return location for a GError 
	return:		#  FALSE if an error occurred, TRUE on success 
gboolean g_markup_parse_context_end_parse (GMarkupParseContext *context, GError **error);	# Signals to the GMarkupParseContext that all data has beenfed into the parse context with g_markup_parse_context_parse() .
	context		# a GMarkupParseContext 
	error		# return location for a GError 
	return:		#  TRUE on success, FALSE if an error was set 
void g_markup_parse_context_free (GMarkupParseContext *context);	# Frees a GMarkupParseContext .
	context		# a GMarkupParseContext 
void g_markup_parse_context_get_position (GMarkupParseContext *context, gint *line_number, gint *char_number);	# Retrieves the current line number and the number of the character onthat line. Intended for use in error messages; there are no strictsemantics for what constitutes the "current" line number other than"the best number we could come up with for error messages."
	context		# a GMarkupParseContext 
	line_number		#  return location for a line number, or NULL . 
gchar  *g_markup_parse_context_get_element (GMarkupParseContext *context);	# Retrieves the name of the currently open element.
	context		# a GMarkupParseContext 
	return:		#  the name of the currently open element, or NULL  
GSList  *g_markup_parse_context_get_element_stack (GMarkupParseContext *context);	# Retrieves the element stack from the internal state of the parser.
	context		# a GMarkupParseContext 
	return:		#  the element stack, which must not be modified 
gpointer g_markup_parse_context_get_user_data (GMarkupParseContext *context);	# Returns the user_data associated with context.
	context		# a GMarkupParseContext 
	return:		#  the provided user_data. The returned data belongs tothe markup context and will be freed wheng_markup_parse_context_free() is called. 
void g_markup_parse_context_push (GMarkupParseContext *context, const GMarkupParser *parser, gpointer user_data);	# Temporarily redirects markup data to a sub-parser.
	context		# a GMarkupParseContext 
	parser		# a GMarkupParser 
	user_data		# user data to pass to GMarkupParser functions
gpointer g_markup_parse_context_pop (GMarkupParseContext *context);	# Completes the process of a temporary sub-parser redirection.
	context		# a GMarkupParseContext 
	return:		#  the user data passed to g_markup_parse_context_push()  
GMarkupParseContext  *g_markup_parse_context_ref (GMarkupParseContext *context);	# Increases the reference count of context.
	context		# a GMarkupParseContext 
	return:		#  the same context 
void g_markup_parse_context_unref (GMarkupParseContext *context);	# Decreases the reference count of context. When its reference countdrops to 0, it is freed.
	context		# a GMarkupParseContext 
gboolean g_markup_collect_attributes (const gchar *element_name, const gchar **attribute_names, const gchar **attribute_values, GError **error, GMarkupCollectType first_type, const gchar *first_attr, ...);	# Collects the attributes of the element from the data passed to theGMarkupParser start_element function, dealing with common errorconditions and supporting boolean values.
	element_name		# the current tag name
	attribute_names		# the attribute names
	attribute_values		# the attribute values
	error		# a pointer to a GError or NULL 
	first_type		# the GMarkupCollectType of the first attribute
	first_attr		# the name of the first attribute
	...		# a pointer to the storage location of the first attribute(or NULL ), followed by more types names and pointers, endingwith G_MARKUP_COLLECT_INVALID 
	return:		#  TRUE if successful 
GKeyFile  *g_key_file_new (void );	#创建对象:empty GKeyFile object. Useg_key_file_load_from_file() , g_key_file_load_from_data() ,g_key_file_load_from_dirs() or g_key_file_load_from_data_dirs() toread an existing key file.
	return:		#  an empty GKeyFile .  
void g_key_file_free (GKeyFile *key_file);	# Clears all keys and groups from key_file, and decreases thereference count by 1. If the reference count reaches zero,frees the key file and all its allocated memory.
	key_file		# a GKeyFile 
GKeyFile  *g_key_file_ref (GKeyFile *key_file);	# Increases the reference count of key_file.
	key_file		# a GKeyFile 
	return:		#  the same key_file. 
void g_key_file_unref (GKeyFile *key_file);	# Decreases the reference count of key_file by 1. If the reference countreaches zero, frees the key file and all its allocated memory.
	key_file		# a GKeyFile 
void g_key_file_set_list_separator (GKeyFile *key_file, gchar separator);	# Sets the character which is used to separatevalues in lists. Typically ';' or ',' are usedas separators. The default list separator is ';'.
	key_file		# a GKeyFile 
	separator		# the separator
gboolean g_key_file_load_from_file (GKeyFile *key_file, const gchar *file, GKeyFileFlags flags, GError **error);	# Loads a key file into an empty GKeyFile structure.
	key_file		# an empty GKeyFile struct
	file		#  the path of a filename to load, in the GLib filename encoding. 
	error		# return location for a GError , or NULL 
	return:		#  TRUE if a key file could be loaded, FALSE otherwise 
gboolean g_key_file_load_from_data (GKeyFile *key_file, const gchar *data, gsize length, GKeyFileFlags flags, GError **error);	# Loads a key file from memory into an empty GKeyFile structure. If the object cannot be created then error is set to a GKeyFileError .
	key_file		# an empty GKeyFile struct
	data		# key file loaded in memory
	length		# the length of datain bytes (or (gsize)-1 if data is nul-terminated)
	flags		# flags from GKeyFileFlags 
	error		# return location for a GError , or NULL 
	return:		#  TRUE if a key file could be loaded, FALSE otherwise 
gboolean g_key_file_load_from_bytes (GKeyFile *key_file, GBytes *bytes, GKeyFileFlags flags, GError **error);	# Loads a key file from the data in bytes into an empty GKeyFile structure.If the object cannot be created then error is set to a GKeyFileError .
	key_file		# an empty GKeyFile struct
	bytes		# a GBytes 
	flags		# flags from GKeyFileFlags 
	error		# return location for a GError , or NULL 
	return:		#  TRUE if a key file could be loaded, FALSE otherwise 
gboolean g_key_file_load_from_data_dirs (GKeyFile *key_file, const gchar *file, gchar **full_path, GKeyFileFlags flags, GError **error);	# This function looks for a key file named file in the paths returned from g_get_user_data_dir() and g_get_system_data_dirs() , loads the file into key_file and returns the file's full path in full_path. If the file could not be loaded then an error isset to either a GFileError or GKeyFileError .
	key_file		# an empty GKeyFile struct
	file		#  a relative path to a filename to open and parse. 
	error		# return location for a GError , or NULL 
	return:		#  TRUE if a key file could be loaded, FALSE othewise 
gboolean g_key_file_load_from_dirs (GKeyFile *key_file, const gchar *file, const gchar **search_dirs, gchar **full_path, GKeyFileFlags flags, GError **error);	# This function looks for a key file named file in the pathsspecified in search_dirs, loads the file into key_file andreturns the file's full path in full_path.
	key_file		# an empty GKeyFile struct
	file		#  a relative path to a filename to open and parse. 
	error		# return location for a GError , or NULL 
	return:		#  TRUE if a key file could be loaded, FALSE otherwise 
gchar  *g_key_file_to_data (GKeyFile *key_file, gsize *length, GError **error);	# This function outputs key_file as a string. 
	key_file		# a GKeyFile 
	length		#  return location for the length of thereturned string, or NULL . 
	return:		#  a newly allocated string holdingthe contents of the GKeyFile  
gboolean g_key_file_save_to_file (GKeyFile *key_file, const gchar *filename, GError **error);	# Writes the contents of key_file to filename usingg_file_set_contents() .
	key_file		# a GKeyFile 
	filename		# the name of the file to write to
	error		# a pointer to a NULL GError , or NULL 
	return:		#  TRUE if successful, else FALSE with errorset 
gchar  *g_key_file_get_start_group (GKeyFile *key_file);	# Returns the name of the start group of the file.
	key_file		# a GKeyFile 
	return:		#  The start group of the key file. 
gchar  **g_key_file_get_groups (GKeyFile *key_file, gsize *length);	# Returns all groups in the key file loaded with key_file. The array of returned groups will be NULL -terminated, so length may optionally be NULL .
	key_file		# a GKeyFile 
	length		#  return location for the number of returned groups, or NULL . 
	return:		#  a newly-allocated NULL -terminated array of strings.Use g_strfreev() to free it.  
gchar  **g_key_file_get_keys (GKeyFile *key_file, const gchar *group_name, gsize *length, GError **error);	# Returns all keys for the group name group_name. The array ofreturned keys will be NULL -terminated, so length mayoptionally be NULL . In the event that the group_name cannotbe found, NULL is returned and error is set toG_KEY_FILE_ERROR_GROUP_NOT_FOUND .
	key_file		# a GKeyFile 
	group_name		# a group name
	length		#  return location for the number of keys returned, or NULL . 
	return:		#  a newly-allocated NULL -terminated array of strings.Use g_strfreev() to free it.  
gboolean g_key_file_has_group (GKeyFile *key_file, const gchar *group_name);	# Looks whether the key file has the group group_name.
	key_file		# a GKeyFile 
	group_name		# a group name
	return:		#  TRUE if group_nameis a part of key_file, FALSE otherwise. 
gboolean g_key_file_has_key (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Looks whether the key file has the key key in the groupgroup_name.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key name
	error		# return location for a GError 
	return:		#  TRUE if keyis a part of group_name, FALSE otherwise 
gchar  *g_key_file_get_value (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the raw value associated with key under group_name. Use g_key_file_get_string() to retrieve an unescaped UTF-8 string. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	error		# return location for a GError , or NULL 
	return:		#  a newly allocated string or NULL if the specifiedkey cannot be found. 
gchar  *g_key_file_get_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the string value associated with key under group_name.Unlike g_key_file_get_value() , this function handles escape sequenceslike \s.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	error		# return location for a GError , or NULL 
	return:		#  a newly allocated string or NULL if the specifiedkey cannot be found. 
gchar  *g_key_file_get_locale_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, GError **error);	# Returns the value associated with key under group_nametranslated in the given locale if available. If locale isNULL then the current locale is assumed. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	locale		#  a locale identifier or NULL . 
	return:		#  a newly allocated string or NULL if the specifiedkey cannot be found. 
gboolean g_key_file_get_boolean (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the value associated with key under group_name as aboolean. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	error		# return location for a GError 
	return:		#  the value associated with the key as a boolean,or FALSE if the key was not found or could not be parsed. 
gint g_key_file_get_integer (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the value associated with key under group_name as aninteger. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	error		# return location for a GError 
	return:		#  the value associated with the key as an integer, or0 if the key was not found or could not be parsed. 
gint64 g_key_file_get_int64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the value associated with key under group_name as a signed64-bit integer. This is similar to g_key_file_get_integer() but can return64-bit results without truncation.
	key_file		# a non-NULL GKeyFile 
	group_name		# a non-NULL group name
	key		# a non-NULL key
	error		# return location for a GError 
	return:		#  the value associated with the key as a signed 64-bit integer, or0 if the key was not found or could not be parsed. 
guint64 g_key_file_get_uint64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the value associated with key under group_name as an unsigned64-bit integer. This is similar to g_key_file_get_integer() but can returnlarge positive results without truncation.
	key_file		# a non-NULL GKeyFile 
	group_name		# a non-NULL group name
	key		# a non-NULL key
	error		# return location for a GError 
	return:		#  the value associated with the key as an unsigned 64-bit integer,or 0 if the key was not found or could not be parsed. 
gdouble g_key_file_get_double (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Returns the value associated with key under group_name as adouble. If group_name is NULL , the start_group is used.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	error		# return location for a GError 
	return:		#  the value associated with the key as a double, or0.0 if the key was not found or could not be parsed. 
gchar  **g_key_file_get_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);	# Returns the values associated with key under group_name.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	length		#  return location for the number of returned strings, or NULL . 
	return:		#  a NULL -terminated string array or NULL if the specifiedkey cannot be found. The array should be freed with g_strfreev() .  
gchar  **g_key_file_get_locale_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, gsize *length, GError **error);	# Returns the values associated with key under group_nametranslated in the given locale if available. If locale isNULL then the current locale is assumed.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	locale		#  a locale identifier or NULL . 
	return:		#  a newly allocated NULL -terminated string arrayor NULL if the key isn't found. The string array should be freedwith g_strfreev() .  
gboolean  *g_key_file_get_boolean_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);	# Returns the values associated with key under group_name asbooleans. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	length		#  the number of booleans returned. 
	return:		#  the values associated with the key as a list of booleans, or NULL if thekey was not found or could not be parsed. The returned list of booleansshould be freed with g_free() when no longer needed.  
gint  *g_key_file_get_integer_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);	# Returns the values associated with key under group_name asintegers. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	length		#  the number of integers returned. 
	return:		#  the values associated with the key as a list of integers, or NULL ifthe key was not found or could not be parsed. The returned list ofintegers should be freed with g_free() when no longer needed.  
gdouble  *g_key_file_get_double_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gsize *length, GError **error);	# Returns the values associated with key under group_name asdoubles. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	length		#  the number of doubles returned. 
	return:		#  the values associated with the key as a list of doubles, or NULL if thekey was not found or could not be parsed. The returned list of doublesshould be freed with g_free() when no longer needed.  
gchar  *g_key_file_get_comment (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Retrieves a comment above key from group_name.If key is NULL then comment will be read from abovegroup_name. If both key and group_name are NULL , thencomment will be read from above the first group in the file.
	key_file		# a GKeyFile 
	group_name		#  a group name, or NULL . 
	return:		#  a comment that should be freed with g_free()  
void g_key_file_set_value (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *value);	# Associates a new value with key under group_name. 
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	value		# a string
void g_key_file_set_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *string);	# Associates a new string value with key under group_name. If key cannot be found then it is created. If group_name cannot be found then it is created.Unlike g_key_file_set_value() , this function handles charactersthat need escaping, such as newlines.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	string		# a string
void g_key_file_set_locale_string (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar *string);	# Associates a string value for key and locale under group_name.If the translation for key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	locale		# a locale identifier
	string		# a string
void g_key_file_set_boolean (GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean value);	# Associates a new boolean value with key under group_name.If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	value		# TRUE or FALSE 
void g_key_file_set_integer (GKeyFile *key_file, const gchar *group_name, const gchar *key, gint value);	# Associates a new integer value with key under group_name.If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	value		# an integer value
void g_key_file_set_int64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, gint64 value);	# Associates a new integer value with key under group_name.If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	value		# an integer value
void g_key_file_set_uint64 (GKeyFile *key_file, const gchar *group_name, const gchar *key, guint64 value);	# Associates a new integer value with key under group_name.If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	value		# an integer value
void g_key_file_set_double (GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble value);	# Associates a new double value with key under group_name.If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	value		# an double value
void g_key_file_set_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar * const list[], gsize length);	# Associates a list of string values for key under group_name.If key cannot be found then it is created.If group_name cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	list		#  an array of string values. 
void g_key_file_set_locale_string_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *locale, const gchar * const list[], gsize length);	# Associates a list of string values for key and locale undergroup_name. If the translation for key cannot be found thenit is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	locale		# a locale identifier
	list		#  a NULL -terminated array of locale string values. 
void g_key_file_set_boolean_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gboolean list[], gsize length);	# Associates a list of boolean values with key under group_name. If key cannot be found then it is created.If group_name is NULL , the start_group is used.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	list		#  an array of boolean values. 
void g_key_file_set_integer_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gint list[], gsize length);	# Associates a list of integer values with key under group_name. If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	list		#  an array of integer values. 
void g_key_file_set_double_list (GKeyFile *key_file, const gchar *group_name, const gchar *key, gdouble list[], gsize length);	# Associates a list of double values with key undergroup_name. If key cannot be found then it is created.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key
	list		#  an array of double values. 
gboolean g_key_file_set_comment (GKeyFile *key_file, const gchar *group_name, const gchar *key, const gchar *comment, GError **error);	# Places a comment above key from group_name.
	key_file		# a GKeyFile 
	group_name		#  a group name, or NULL . 
	return:		#  TRUE if the comment was written, FALSE otherwise 
gboolean g_key_file_remove_group (GKeyFile *key_file, const gchar *group_name, GError **error);	# Removes the specified group, group_name, from the key file.
	key_file		# a GKeyFile 
	group_name		# a group name
	error		# return location for a GError or NULL 
	return:		#  TRUE if the group was removed, FALSE otherwise 
gboolean g_key_file_remove_key (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Removes key in group_name from the key file.
	key_file		# a GKeyFile 
	group_name		# a group name
	key		# a key name to remove
	error		# return location for a GError or NULL 
	return:		#  TRUE if the key was removed, FALSE otherwise 
gboolean g_key_file_remove_comment (GKeyFile *key_file, const gchar *group_name, const gchar *key, GError **error);	# Removes a comment above key from group_name.If key is NULL then comment will be removed above group_name. If both key and group_name are NULL , then comment willbe removed above the first group in the file.
	key_file		# a GKeyFile 
	group_name		#  a group name, or NULL . 
	return:		#  TRUE if the comment was removed, FALSE otherwise 
GBookmarkFile  *g_bookmark_file_new (void );	#创建对象:empty GBookmarkFile object.
	return:		#  an empty GBookmarkFile  
void g_bookmark_file_free (GBookmarkFile *bookmark);	# Frees a GBookmarkFile .
	bookmark		# a GBookmarkFile 
gboolean g_bookmark_file_load_from_file (GBookmarkFile *bookmark, const gchar *filename, GError **error);	# Loads a desktop bookmark file into an empty GBookmarkFile structure.If the file could not be loaded then error is set to either a GFileError or GBookmarkFileError .
	bookmark		# an empty GBookmarkFile struct
	filename		#  the path of a filename to load, in theGLib file name encoding. 
	return:		#  TRUE if a desktop bookmark file could be loaded 
gboolean g_bookmark_file_load_from_data (GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error);	# Loads a bookmark file from memory into an empty GBookmarkFile structure. If the object cannot be created then error is set to aGBookmarkFileError .
	bookmark		# an empty GBookmarkFile struct
	data		# desktop bookmarks loaded in memory
	length		# the length of datain bytes
	error		# return location for a GError , or NULL 
	return:		#  TRUE if a desktop bookmark could be loaded. 
gboolean g_bookmark_file_load_from_data_dirs (GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error);	# This function looks for a desktop bookmark file named file in thepaths returned from g_get_user_data_dir() and g_get_system_data_dirs() , loads the file into bookmark and returns the file's full path in full_path. If the file could not be loaded then an error isset to either a GFileError or GBookmarkFileError .
	bookmark		# a GBookmarkFile 
	file		#  a relative path to a filename to open and parse. 
	return:		#  TRUE if a key file could be loaded, FALSE otherwise 
gchar  *g_bookmark_file_to_data (GBookmarkFile *bookmark, gsize *length, GError **error);	# This function outputs bookmark as a string.
	bookmark		# a GBookmarkFile 
	length		#  return location for the length of the returned string, or NULL . 
	return:		#  a newly allocated string holdingthe contents of the GBookmarkFile  
gboolean g_bookmark_file_to_file (GBookmarkFile *bookmark, const gchar *filename, GError **error);	# This function outputs bookmark into a file. The write process isguaranteed to be atomic by using g_file_set_contents() internally.
	bookmark		# a GBookmarkFile 
	filename		#  path of the output file. 
	return:		#  TRUE if the file was successfully written. 
gboolean g_bookmark_file_has_item (GBookmarkFile *bookmark, const gchar *uri);	# Looks whether the desktop bookmark has an item with its URI set to uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	return:		#  TRUE if uriis inside bookmark, FALSE otherwise 
gboolean g_bookmark_file_has_group (GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);	# Checks whether group appears in the list of groups to whichthe bookmark for uri belongs to.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	group		# the group name to be searched
	error		# return location for a GError , or NULL 
	return:		#  TRUE if groupwas found. 
gboolean g_bookmark_file_has_application (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);	# Checks whether the bookmark for uri inside bookmark has beenregistered by application name.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	name		# the name of the application
	error		# return location for a GError or NULL 
	return:		#  TRUE if the application namewas found 
gint g_bookmark_file_get_size (GBookmarkFile *bookmark);	# Gets the number of bookmarks inside bookmark.
	bookmark		# a GBookmarkFile 
	return:		#  the number of bookmarks 
gchar  **g_bookmark_file_get_uris (GBookmarkFile *bookmark, gsize *length);	# Returns all URIs of the bookmarks in the bookmark file bookmark.The array of returned URIs will be NULL -terminated, so length mayoptionally be NULL .
	bookmark		# a GBookmarkFile 
	length		#  return location for the number of returned URIs, or NULL . 
	return:		#  a newly allocated NULL -terminated array of strings.Use g_strfreev() to free it.  
gchar  *g_bookmark_file_get_title (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Returns the title of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		#  a valid URI or NULL . 
	return:		#  a newly allocated string or NULL if the specifiedURI cannot be found. 
gchar  *g_bookmark_file_get_description (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Retrieves the description of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  a newly allocated string or NULL if the specifiedURI cannot be found. 
gchar  *g_bookmark_file_get_mime_type (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Retrieves the MIME type of the resource pointed by uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  a newly allocated string or NULL if the specifiedURI cannot be found. 
gboolean g_bookmark_file_get_is_private (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Gets whether the private flag of the bookmark for uri is set.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  TRUE if the private flag is set, FALSE otherwise. 
gboolean g_bookmark_file_get_icon (GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error);	# Gets the icon of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	href		#  return location for the icon's location or NULL . 
	return:		#  TRUE if the icon for the bookmark for the URI was found.You should free the returned strings. 
time_t g_bookmark_file_get_added (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Gets the time the bookmark for uri was added to bookmark
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  a timestamp 
time_t g_bookmark_file_get_modified (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Gets the time when the bookmark for uri was last modified.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  a timestamp 
time_t g_bookmark_file_get_visited (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Gets the time the bookmark for uri was last visited.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  a timestamp. 
gchar  **g_bookmark_file_get_groups (GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error);	# Retrieves the list of group names of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	length		#  return location for the length of the returned string, or NULL . 
	return:		#  a newly allocated NULL -terminated array of group names.Use g_strfreev() to free it.  
gchar  **g_bookmark_file_get_applications (GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error);	# Retrieves the names of the applications that have registered thebookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	length		#  return location of the length of the returned list, or NULL . 
	return:		#  a newly allocated NULL -terminated array of strings.Use g_strfreev() to free it.  
gboolean g_bookmark_file_get_app_info (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error);	# Gets the registration informations of app_name for the bookmark foruri. See g_bookmark_file_set_app_info() for more informations aboutthe returned data.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	name		# an application's name
	exec		#  return location for the command line of the application, or NULL . 
	return:		#  TRUE on success. 
void g_bookmark_file_set_title (GBookmarkFile *bookmark, const gchar *uri, const gchar *title);	# Sets title as the title of the bookmark for uri inside thebookmark file bookmark.
	bookmark		# a GBookmarkFile 
	uri		#  a valid URI or NULL . 
void g_bookmark_file_set_description (GBookmarkFile *bookmark, const gchar *uri, const gchar *description);	# Sets description as the description of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		#  a valid URI or NULL . 
void g_bookmark_file_set_mime_type (GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type);	# Sets mime_type as the MIME type of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	mime_type		# a MIME type
void g_bookmark_file_set_is_private (GBookmarkFile *bookmark, const gchar *uri, gboolean is_private);	# Sets the private flag of the bookmark for uri.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	is_private		# TRUE if the bookmark should be marked as private
void g_bookmark_file_set_icon (GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type);	# Sets the icon for the bookmark for uri. If href is NULL , unsetsthe currently set icon. href can either be a full URL for the iconfile or the icon name following the Icon Naming specification.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	href		#  the URI of the icon for the bookmark, or NULL . 
void g_bookmark_file_set_added (GBookmarkFile *bookmark, const gchar *uri, time_t added);	# Sets the time the bookmark for uri was added into bookmark.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	added		# a timestamp or -1 to use the current time
void g_bookmark_file_set_groups (GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length);	# Sets a list of group names for the item with URI uri. Each previouslyset group name list is removed.
	bookmark		# a GBookmarkFile 
	uri		# an item's URI
	groups		#  an array of group names, or NULL to remove all groups. 
void g_bookmark_file_set_modified (GBookmarkFile *bookmark, const gchar *uri, time_t modified);	# Sets the last time the bookmark for uri was last modified.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	modified		# a timestamp or -1 to use the current time
void g_bookmark_file_set_visited (GBookmarkFile *bookmark, const gchar *uri, time_t visited);	# Sets the time the bookmark for uri was last visited.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	visited		# a timestamp or -1 to use the current time
gboolean g_bookmark_file_set_app_info (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error);	# Sets the meta-data of application name inside the list ofapplications that have registered a bookmark for uri insidebookmark.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	name		# an application's name
	exec		# an application's command line
	count		# the number of registrations done for this application
	stamp		# the time of the last registration for this application
	error		# return location for a GError or NULL 
	return:		#  TRUE if the application's meta-data was successfullychanged. 
void g_bookmark_file_add_group (GBookmarkFile *bookmark, const gchar *uri, const gchar *group);	# Adds group to the list of groups to which the bookmark for uribelongs to.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	group		# the group name to be added
void g_bookmark_file_add_application (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec);	# Adds the application with name and exec to the list ofapplications that have registered a bookmark for uri intobookmark.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	name		#  the name of the application registering the bookmarkor NULL . 
gboolean g_bookmark_file_remove_group (GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error);	# Removes group from the list of groups to which the bookmarkfor uri belongs to.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	group		# the group name to be removed
	error		# return location for a GError , or NULL 
	return:		#  TRUE if groupwas successfully removed. 
gboolean g_bookmark_file_remove_application (GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error);	# Removes application registered with name from the list of applicationsthat have registered a bookmark for uri inside bookmark.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	name		# the name of the application
	error		# return location for a GError or NULL 
	return:		#  TRUE if the application was successfully removed. 
gboolean g_bookmark_file_remove_item (GBookmarkFile *bookmark, const gchar *uri, GError **error);	# Removes the bookmark for uri from the bookmark file bookmark.
	bookmark		# a GBookmarkFile 
	uri		# a valid URI
	error		# return location for a GError , or NULL 
	return:		#  TRUE if the bookmark was removed successfully. 
gboolean g_bookmark_file_move_item (GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error);	# Changes the URI of a bookmark item from old_uri to new_uri. Anyexisting bookmark for new_uri will be overwritten. If new_uri isNULL , then the bookmark is removed.
	bookmark		# a GBookmarkFile 
	old_uri		# a valid URI
	new_uri		#  a valid URI, or NULL . 
	return:		#  TRUE if the URI was successfully changed 
void g_test_minimized_result (double minimized_quantity, const char *format, ...);	# Report the result of a performance or measurement test.The test should generally strive to minimize the reportedquantities (smaller values are better than larger ones),this and minimized_quantity can determine sortingorder for test result reports.
	minimized_quantity		# the reported value
	format		# the format string of the report message
	...		# arguments to pass to the 
void g_test_maximized_result (double maximized_quantity, const char *format, ...);	# Report the result of a performance or measurement test.The test should generally strive to maximize the reportedquantities (larger values are better than smaller ones),this and maximized_quantity can determine sortingorder for test result reports.
	maximized_quantity		# the reported value
	format		# the format string of the report message
	...		# arguments to pass to the 
void g_test_init (int *argc, char ***argv, ...);	# Initialize the GLib testing framework, e.g. by seeding thetest random number generator, the name for g_get_prgname() and parsing test related command line args.
	argc		# Address of the argcparameter of the 
	argv		# Address of the argvparameter of 
	...		# NULL -terminated list of special options. Currently the onlydefined option is "no_g_set_prgname", whichwill cause 
gboolean g_test_subprocess (void );	# Returns TRUE (after g_test_init() has been called) if the testprogram is running under g_test_trap_subprocess() .
	return:		#  TRUE if the test program is running underg_test_trap_subprocess() . 
int g_test_run (void );	# Runs all tests under the toplevel suite which can be retrievedwith g_test_get_root() . Similar to g_test_run_suite() , the testcases to be run are filtered according to test path arguments(-p testpath and -s testpath) as parsed by g_test_init() .g_test_run_suite() or g_test_run() may only be called once in aprogram.
	return:		#  0 on success, 1 on failure (assuming it returns at all),0 or 77 if all tests were skipped with g_test_skip()  
void <span class="c_punctuation">( *GTestFunc<span class="c_punctuation">) (void );	# The type used for test case functions.
void g_test_add_func (const char *testpath, GTestFunc test_func);	# Create a new test case, similar to g_test_create_case() . Howeverthe test is assumed to use no fixture, and test suites are automaticallycreated on the fly and added to the root fixture, based on theslash-separated portions of testpath.
	testpath		# /-separated test case path name for the test.
	test_func		#  The test function to invoke for this test. 
void <span class="c_punctuation">( *GTestDataFunc<span class="c_punctuation">) (gconstpointer user_data);	# The type used for test case functions that take an extra pointerargument.
	user_data		# the data provided when registering the test
void g_test_add_data_func (const char *testpath, gconstpointer test_data, GTestDataFunc test_func);	# Create a new test case, similar to g_test_create_case() . Howeverthe test is assumed to use no fixture, and test suites are automaticallycreated on the fly and added to the root fixture, based on theslash-separated portions of testpath. The test_data argumentwill be passed as first argument to test_func.
	testpath		# /-separated test case path name for the test.
	test_data		# Test data argument for the test function.
	test_func		#  The test function to invoke for this test. 
void g_test_add_data_func_full (const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func);	# Create a new test case, as with g_test_add_data_func() , but freeingtest_data after the test run is complete.
	testpath		# /-separated test case path name for the test.
	test_data		# Test data argument for the test function.
	test_func		# The test function to invoke for this test.
	data_free_func		# GDestroyNotify for test_data.
gchar  *g_test_build_filename (GTestFileType file_type, const gchar *first_path, ...);	# Creates the pathname to a data file that is required for a test.
	file_type		# the type of file (built vs. distributed)
	first_path		# the first segment of the pathname
	...		# NULL -terminated additional path segments
	return:		#  the path of the file, to be freed using g_free()  
gchar  *g_test_get_filename (GTestFileType file_type, const gchar *first_path, ...);	# Gets the pathname to a data file that is required for a test.
	file_type		# the type of file (built vs. distributed)
	first_path		# the first segment of the pathname
	...		# NULL -terminated additional path segments
	return:		#  the path, automatically freed at the end of the testcase 
gchar  *g_test_get_dir (GTestFileType file_type);	# Gets the pathname of the directory containing test files of the typespecified by file_type.
	file_type		# the type of file (built vs. distributed)
	return:		#  the path of the directory, owned by GLib.  
void g_test_fail (void );	# Indicates that a test failed. This function can be calledmultiple times from the same test. You can use this functionif your test failed in a recoverable way.
void g_test_skip (const gchar *msg);	# Indicates that a test was skipped.
	msg		#  explanation. 
void g_test_incomplete (const gchar *msg);	# Indicates that a test failed because of some incompletefunctionality. This function can be called multiple timesfrom the same test.
	msg		#  explanation. 
gboolean g_test_failed (void );	# Returns whether a test has already failed. This willbe the case when g_test_fail() , g_test_incomplete() or g_test_skip() have been called, but also if anassertion has failed.
	return:		#  TRUE if the test has failed 
void g_test_message (const char *format, ...);	# Add a message to the test report.
	format		# the format string
	...		# printf-like arguments to format
void g_test_bug_base (const char *uri_pattern);	# Specify the base URI for bug reports.
	uri_pattern		# the base pattern for bug URIs
void g_test_bug (const char *bug_uri_snippet);	# This function adds a message to test reports thatassociates a bug URI with a test case.Bug URIs are constructed from a base URI set with g_test_bug_base() and bug_uri_snippet.
	bug_uri_snippet		# Bug specific bug tracker URI portion.
gboolean <span class="c_punctuation">( *GTestLogFatalFunc<span class="c_punctuation">) (const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer user_data);	# Specifies the prototype of fatal log handler functions.
	log_domain		# the log domain of the message
	log_level		# the log level of the message (including the fatal and recursion flags)
	message		# the message to process
	user_data		# user data, set in 
	return:		#  TRUE if the program should abort, FALSE otherwise 
void g_test_log_set_fatal_handler (GTestLogFatalFunc log_func, gpointer user_data);	# Installs a non-error fatal log handler which can beused to decide whether log messages which are countedas fatal abort the program.
	log_func		# the log handler function.
	user_data		# data passed to the log handler.
void g_test_timer_start (void );	# Start a timing test. Call g_test_timer_elapsed() when the task is supposedto be done. Call this function again to restart the timer.
double g_test_timer_elapsed (void );	# Get the time since the last start of the timer with g_test_timer_start() .
	return:		#  the time since the last start of the timer, as a double 
double g_test_timer_last (void );	# Report the last result of g_test_timer_elapsed() .
	return:		#  the last result of g_test_timer_elapsed() , as a double 
void g_test_queue_free (gpointer gfree_pointer);	# Enqueue a pointer to be released with g_free() during the nextteardown phase. This is equivalent to calling g_test_queue_destroy() with a destroy callback of g_free() .
	gfree_pointer		# the pointer to be stored.
void g_test_queue_destroy (GDestroyNotify destroy_func, gpointer destroy_data);	# This function enqueus a callback destroy_func to be executedduring the next test case teardown phase. This is most usefulto auto destruct allocated test resources at the end of a test run.Resources are released in reverse queue order, that means enqueueingcallback A before callback B will cause B() to be called beforeA() during teardown.
	destroy_func		# Destroy callback for teardown phase.
	destroy_data		# Destroy callback data.
void g_test_expect_message (const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern);	# Indicates that a message with the given log_domain and log_level,with text matching pattern, is expected to be logged. When thismessage is logged, it will not be printed, and the test case willnot abort.
	log_domain		#  the log domain of the message. 
void g_test_trap_subprocess (const char *test_path, guint64 usec_timeout, GTestSubprocessFlags test_flags);	# Respawns the test program to run only test_path in a subprocess.This can be used for a test case that might not return, or thatmight abort.
	test_path		#  Test to run in a subprocess. 
gboolean g_test_trap_has_passed (void );	# Check the result of the last g_test_trap_subprocess() call.
	return:		#  TRUE if the last test subprocess terminated successfully. 
gboolean g_test_trap_reached_timeout (void );	# Check the result of the last g_test_trap_subprocess() call.
	return:		#  TRUE if the last test subprocess got killed due to a timeout. 
gboolean g_test_trap_fork (guint64 usec_timeout, GTestTrapFlags test_trap_flags);	# g_test_trap_fork is deprecated and should not be used in newly-written code.
	usec_timeout		# Timeout for the forked test in micro seconds.
	test_trap_flags		# Flags to modify forking behaviour.
	return:		#  TRUE for the forked child and FALSE for the executing parent process. 
gint32 g_test_rand_int (void );	# Get a reproducible random integer number.
	return:		#  a random number from the seeded random number generator. 
gint32 g_test_rand_int_range (gint32 begin, gint32 end);	# Get a reproducible random integer number out of a specified range,see g_test_rand_int() for details on test case random numbers.
	begin		# the minimum value returned by this function
	end		# the smallest value not to be returned by this function
	return:		#  a number with begin&lt;= number &lt; end. 
double g_test_rand_double (void );	# Get a reproducible random floating point number,see g_test_rand_int() for details on test case random numbers.
	return:		#  a random number from the seeded random number generator. 
double g_test_rand_double_range (double range_start, double range_end);	# Get a reproducible random floating pointer number out of a specified range,see g_test_rand_int() for details on test case random numbers.
	range_start		# the minimum value returned by this function
	range_end		# the minimum value not returned by this function
	return:		#  a number with range_start&lt;= number &lt; range_end. 
void g_test_set_nonfatal_assertions (void );	# Changes the behaviour of g_assert_cmpstr() , g_assert_cmpint() ,g_assert_cmpuint() , g_assert_cmphex() , g_assert_cmpfloat() ,g_assert_true() , g_assert_false() , g_assert_null() , g_assert_no_error() ,g_assert_error() , g_test_assert_expected_messages() and the variousg_test_trap_assert_*() macros to not abort to program, but insteadcall g_test_fail() and continue. (This also changes the behavior ofg_test_fail() so that it will not cause the test program to abortafter completing the failed test.)
void <span class="c_punctuation">( *GTestFixtureFunc<span class="c_punctuation">) (gpointer fixture, gconstpointer user_data);	# The type used for functions that operate on test fixtures. This isused for the fixture setup and teardown functions as well as for thetestcases themselves.
	fixture		#  the test fixture. 
GTestCase  *g_test_create_case (const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown);	# Create a new GTestCase , named test_name, this API is fairlylow level, calling g_test_add() or g_test_add_func() is preferable.When this test is executed, a fixture structure of size data_sizewill be automatically allocated and filled with zeros. Then data_setup iscalled to initialize the fixture. After fixture setup, the actual testfunction data_test is called. Once the test run completes, thefixture structure is torn down by calling data_teardown andafter that the memory is automatically released by the test framework.
	test_name		# the name for the test case
	data_size		# the size of the fixture data structure
	test_data		# test data argument for the test functions
	data_setup		#  the function to set up the fixture data. 
	return:		#  a newly allocated GTestCase . 
GTestSuite  *g_test_create_suite (const char *suite_name);	# Create a new test suite with the name suite_name.
	suite_name		# a name for the suite
	return:		#  A newly allocated GTestSuite instance. 
GTestSuite  *g_test_get_root (void );	# Get the toplevel test suite for the test path API.
	return:		#  the toplevel GTestSuite  
void g_test_suite_add (GTestSuite *suite, GTestCase *test_case);	# Adds test_case to suite.
	suite		# a GTestSuite 
	test_case		# a GTestCase 
void g_test_suite_add_suite (GTestSuite *suite, GTestSuite *nestedsuite);	# Adds nestedsuite to suite.
	suite		# a GTestSuite 
	nestedsuite		# another GTestSuite 
int g_test_run_suite (GTestSuite *suite);	# Execute the tests within suite and all nested GTestSuites .The test suites to be executed are filtered according totest path arguments (-p testpath and -s testpath) as parsed byg_test_init() . See the g_test_run() documentation for moreinformation on the order that tests are run in.
	suite		# a GTestSuite 
	return:		#  0 on success 
gboolean g_unix_open_pipe (gint *fds, gint flags, GError **error);	# Similar to the UNIX pipe() call, but on modern systems like Linuxuses the pipe2() system call, which atomically creates a pipe withthe configured flags. The only supported flag currently isFD_CLOEXEC. If for example you want to configure O_NONBLOCK, thatmust still be done separately with fcntl().
	fds		# Array of two integers
	flags		# Bitfield of file descriptor flags, as for 
	error		# a GError 
	return:		#  TRUE on success, FALSE if not (and errno will be set). 
gboolean g_unix_set_fd_nonblocking (gint fd, gboolean nonblock, GError **error);	# Control the non-blocking state of the given file descriptor,according to nonblock. On most systems this uses O_NONBLOCK, buton some older ones may use O_NDELAY.
	fd		# A file descriptor
	nonblock		# If TRUE , set the descriptor to be non-blocking
	error		# a GError 
	return:		#  TRUE if successful 
guint g_unix_signal_add (gint signum, GSourceFunc handler, gpointer user_data);	# A convenience function for g_unix_signal_source_new() , whichattaches to the default GMainContext . You can remove the watchusing g_source_remove() .
	signum		# Signal number
	handler		# Callback
	user_data		# Data for handler
	return:		#  An ID (greater than 0) for the event source 
guint g_unix_signal_add_full (gint priority, gint signum, GSourceFunc handler, gpointer user_data, GDestroyNotify notify);	# A convenience function for g_unix_signal_source_new() , whichattaches to the default GMainContext . You can remove the watchusing g_source_remove() .
	priority		# the priority of the signal source. Typically this will be inthe range between G_PRIORITY_DEFAULT and G_PRIORITY_HIGH .
	signum		# Signal number
	handler		# Callback
	user_data		# Data for handler
	notify		# GDestroyNotify for handler
	return:		#  An ID (greater than 0) for the event source 
GSource  *g_unix_signal_source_new (gint signum);	# Create a GSource that will be dispatched upon delivery of the UNIXsignal signum. In GLib versions before 2.36, only SIGHUP, SIGINT,SIGTERM can be monitored. In GLib 2.36, SIGUSR1 and SIGUSR2were added. In GLib 2.54, SIGWINCH was added.
	signum		# A signal number
	return:		#  A newly created GSource  
gboolean <span class="c_punctuation">( *GUnixFDSourceFunc<span class="c_punctuation">) (gint fd, GIOCondition condition, gpointer user_data);	# The type of functions to be called when a UNIX fd watch sourcetriggers.
	fd		# the fd that triggered the event
	condition		# the IO conditions reported on fd
	user_data		# user data passed to 
	return:		#  FALSE if the source should be removed 
guint g_unix_fd_add (gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data);	# Sets a function to be called when the IO condition, as specified bycondition becomes true for fd.
	fd		# a file descriptor
	condition		# IO conditions to watch for on fd
	function		# a GPollFDFunc 
	user_data		# data to pass to function
	return:		#  the ID (greater than 0) of the event source 
guint g_unix_fd_add_full (gint priority, gint fd, GIOCondition condition, GUnixFDSourceFunc function, gpointer user_data, GDestroyNotify notify);	# Sets a function to be called when the IO condition, as specified bycondition becomes true for fd.
	priority		# the priority of the source
	fd		# a file descriptor
	condition		# IO conditions to watch for on fd
	function		# a GUnixFDSourceFunc 
	user_data		# data to pass to function
	notify		# function to call when the idle is removed, or NULL 
	return:		#  the ID (greater than 0) of the event source 
GSource  *g_unix_fd_source_new (gint fd, GIOCondition condition);	# Creates a GSource to watch for a particular IO condition on a filedescriptor.
	fd		# a file descriptor
	condition		# IO conditions to watch for on fd
	return:		#  the newly created GSource  
gboolean g_win32_check_windows_version (const gint major, const gint minor, const gint spver, const GWin32OSType os_type);	# Returns whether the version of the Windows operating system thecode is running on is at least the specified major, minor andservice pack versions. See MSDN documentation for the OperatingSystem Version. Software that needs even more detailed version andfeature information should use the Win32 API VerifyVersionInfo()directly.
	major		# major version of Windows
	minor		# minor version of Windows
	spver		# Windows Service Pack Level, 0 if none
	os_type		# Type of Windows OS
	return:		#  TRUE if the Windows Version is the same or greater thanthe specified major, minor and service pack versions, andwhether the running Windows is a workstation or server editionof Windows, if specifically specified. 
gchar  **g_win32_get_command_line (void );	# Gets the command line arguments, on Windows, in the GLib filenameencoding (ie: UTF-8).
	return:		#  the commandline arguments in the GLibfilename encoding (ie: UTF-8).  
gchar  *g_win32_error_message (gint error);	# Translate a Win32 error code (as returned by GetLastError() orWSAGetLastError()) into the corresponding message. The message iseither language neutral, or in the thread's language, or the user'slanguage, the system's language, or US English (see docs forFormatMessage()). The returned string is in UTF-8. It should bedeallocated with g_free() .
	error		# error code.
	return:		#  newly-allocated error message 
gchar  *g_win32_getlocale (void );	# The setlocale() function in the Microsoft C library uses localenames of the form "English_United States.1252" etc. We want theUNIXish standard form "en_US", "zh_TW" etc. This function gets thecurrent thread locale from Windows - without any encoding info -and returns it as a string of the above form for use in formingfile names etc. The returned string should be deallocated withg_free() .
	return:		#  newly-allocated locale name. 
gchar  *g_win32_get_package_installation_directory (const gchar *package, const gchar *dll_name);	# g_win32_get_package_installation_directory has been deprecated since version 2.18 and should not be used in newly-written code.
	package		#  You should pass NULL for this. 
	return:		#  a string containing the installation directory forpackage. The string is in the GLib file name encoding,i.e. UTF-8. The return value should be freed with g_free() when notneeded any longer. If the function fails NULL is returned. 
gchar  *g_win32_get_package_installation_directory_of_module (gpointer hmodule);	# This function tries to determine the installation directory of asoftware package based on the location of a DLL of the softwarepackage.
	hmodule		#  The Win32 handle for a DLL loaded into the current process, or NULL . 
	return:		#  a string containing the guessed installation directory forthe software package hmoduleis from. The string is in the GLibfile name encoding, i.e. UTF-8. The return value should be freedwith g_free() when not needed any longer. If the function failsNULL is returned. 
gchar  *g_win32_get_package_installation_subdirectory (const gchar *package, const gchar *dll_name, const gchar *subdir);	# g_win32_get_package_installation_subdirectory has been deprecated since version 2.18 and should not be used in newly-written code.
	package		#  You should pass NULL for this. 
	return:		#  a string containing the complete path to subdirinsidethe installation directory of package. The returned string is inthe GLib file name encoding, i.e. UTF-8. The return value should befreed with g_free() when no longer needed. If something goes wrong,NULL is returned. 
guint g_win32_get_windows_version (void );	# g_win32_get_windows_version has been deprecated since version 2.44 and should not be used in newly-written code.
	return:		#  The version information. 
gchar  *g_win32_locale_filename_from_utf8 (const gchar *utf8filename);	# Converts a filename from UTF-8 to the system codepage.
	utf8filename		# a UTF-8 encoded filename.
	return:		#  The converted filename, or NULL on conversionfailure and lack of short names. 
gboolean g_uuid_string_is_valid (const gchar *str);	# Parses the string str and verify if it is a UUID.
	str		# a string representing a UUID
	return:		#  TRUE if stris a valid UUID, FALSE otherwise. 
gchar  *g_uuid_string_random (void );	# Generates a random UUID (RFC 4122 version 4) as a string.
	return:		#  A string that should be freed with g_free() .  
GList  *g_list_append (GList *list, gpointer data);	# Adds a new element on to the end of the list.
	list		# a pointer to a GList 
	data		# the data for the new element
	return:		#  either listor the new start of the GList if listwas NULL  
GList  *g_list_prepend (GList *list, gpointer data);	# Prepends a new element on to the start of the list.
	list		# a pointer to a GList , this must point to the top of the list
	data		# the data for the new element
	return:		#  a pointer to the newly prepended element, which is the newstart of the GList  
GList  *g_list_insert (GList *list, gpointer data, gint position);	# Inserts a new element into the list at the given position.
	list		# a pointer to a GList , this must point to the top of the list
	data		# the data for the new element
	position		# the position to insert the element. If this isnegative, or is larger than the number of elements in thelist, the new element is added on to the end of the list.
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_insert_before (GList *list, GList *sibling, gpointer data);	# Inserts a new element into the list before the given position.
	list		# a pointer to a GList , this must point to the top of the list
	sibling		# the list element before which the new elementis inserted or NULL to insert at the end of the list
	data		# the data for the new element
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_insert_sorted (GList *list, gpointer data, GCompareFunc func);	# Inserts a new element into the list, using the given comparison function to determine its position.
	list		# a pointer to a GList , this must point to the top of thealready sorted list
	data		# the data for the new element
	func		# the function to compare elements in the list. It shouldreturn a number &gt; 0 if the first parameter comes after thesecond parameter in the sort order.
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_remove (GList *list, gconstpointer data);	# Removes an element from a GList .If two elements contain the same data, only the first is removed.If none of the elements contain the data, the GList is unchanged.
	list		# a GList , this must point to the top of the list
	data		# the data of the element to remove
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_remove_link (GList *list, GList *llink);	# Removes an element from a GList , without freeing the element.The removed element's prev and next links are set to NULL , so that it becomes a self-contained list with one element.
	list		# a GList , this must point to the top of the list
	llink		# an element in the GList 
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_delete_link (GList *list, GList *link_);	# Removes the node link_ from the list and frees it. Compare this to g_list_remove_link() which removes the node without freeing it.
	list		# a GList , this must point to the top of the list
	link_		# node to delete from list
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_remove_all (GList *list, gconstpointer data);	# Removes all list nodes with data equal to data.Returns the new head of the list. Contrast withg_list_remove() which removes only the first nodematching the given data.
	list		# a GList , this must point to the top of the list
	data		# data to remove
	return:		#  the (possibly changed) start of the GList  
void g_list_free (GList *list);	# Frees all of the memory used by a GList .The freed elements are returned to the slice allocator.
	list		# a GList 
void g_list_free_full (GList *list, GDestroyNotify free_func);	# Convenience method, which frees all the memory used by a GList ,and calls free_func on every element's data.
	list		# a pointer to a GList 
	free_func		# the function to be called to free each element's data
GList  *g_list_alloc (void );	# Allocates space for one GList element. It is called byg_list_append() , g_list_prepend() , g_list_insert() andg_list_insert_sorted() and so is rarely used on its own.
	return:		#  a pointer to the newly-allocated GList element 
void g_list_free_1 (GList *list);	# Frees one GList element, but does not update links from the next andprevious elements in the list, so you should not call this function on anelement that is currently part of a list.
	list		# a GList element
guint g_list_length (GList *list);	# Gets the number of elements in a GList .
	list		# a GList , this must point to the top of the list
	return:		#  the number of elements in the GList  
GList  *g_list_copy (GList *list);	# Copies a GList .
	list		# a GList , this must point to the top of the list
	return:		#  the start of the new list that holds the same data as list 
GList  *g_list_copy_deep (GList *list, GCopyFunc func, gpointer user_data);	# Makes a full (deep) copy of a GList .
	list		# a GList , this must point to the top of the list
	func		# a copy function used to copy every element in the list
	user_data		# user data passed to the copy function func, or NULL 
	return:		#  the start of the new list that holds a full copy of list,use g_list_free_full() to free it 
GList  *g_list_reverse (GList *list);	# Reverses a GList .It simply switches the next and prev pointers of each element.
	list		# a GList , this must point to the top of the list
	return:		#  the start of the reversed GList  
GList  *g_list_sort (GList *list, GCompareFunc compare_func);	# Sorts a GList using the given comparison function. The algorithm used is a stable sort.
	list		# a GList , this must point to the top of the list
	compare_func		# the comparison function used to sort the GList .This function is passed the data from 2 elements of the GList and should return 0 if they are equal, a negative value if thefirst element comes before the second, or a positive value ifthe first element comes after the second.
	return:		#  the (possibly changed) start of the GList  
gint <span class="c_punctuation">( *GCompareFunc<span class="c_punctuation">) (gconstpointer a, gconstpointer b);	# Specifies the type of a comparison function used to compare twovalues. The function should return a negative integer if the firstvalue comes before the second, 0 if they are equal, or a positiveinteger if the first value comes after the second.
	a		# a value
	b		# a value to compare with
	return:		#  negative value if a&lt; b; zero if a= b; positivevalue if a&gt; b 
GList  *g_list_insert_sorted_with_data (GList *list, gpointer data, GCompareDataFunc func, gpointer user_data);	# Inserts a new element into the list, using the given comparison function to determine its position.
	list		# a pointer to a GList , this must point to the top of thealready sorted list
	data		# the data for the new element
	func		# the function to compare elements in the list. It shouldreturn a number &gt; 0 if the first parameter comes after thesecond parameter in the sort order.
	user_data		# user data to pass to comparison function
	return:		#  the (possibly changed) start of the GList  
GList  *g_list_sort_with_data (GList *list, GCompareDataFunc compare_func, gpointer user_data);	# Like g_list_sort() , but the comparison function accepts a user data argument.
	list		# a GList , this must point to the top of the list
	compare_func		# comparison function
	user_data		# user data to pass to comparison function
	return:		#  the (possibly changed) start of the GList  
gint <span class="c_punctuation">( *GCompareDataFunc<span class="c_punctuation">) (gconstpointer a, gconstpointer b, gpointer user_data);	# Specifies the type of a comparison function used to compare twovalues. The function should return a negative integer if the firstvalue comes before the second, 0 if they are equal, or a positiveinteger if the first value comes after the second.
	a		# a value
	b		# a value to compare with
	user_data		# user data
	return:		#  negative value if a&lt; b; zero if a= b; positivevalue if a&gt; b 
GList  *g_list_concat (GList *list1, GList *list2);	# Adds the second GList onto the end of the first GList .Note that the elements of the second GList are not copied.They are used directly.
	list1		# a GList , this must point to the top of the list
	list2		# the GList to add to the end of the first GList ,this must point to the top of the list
	return:		#  the start of the new GList , which equals list1if not NULL  
void g_list_foreach (GList *list, GFunc func, gpointer user_data);	# Calls a function for each element of a GList .
	list		# a GList , this must point to the top of the list
	func		# the function to call with each element's data
	user_data		# user data to pass to the function
void <span class="c_punctuation">( *GFunc<span class="c_punctuation">) (gpointer data, gpointer user_data);	# Specifies the type of functions passed to g_list_foreach() andg_slist_foreach() .
	data		# the element's data
	user_data		# user data passed to 
GList  *g_list_first (GList *list);	# Gets the first element in a GList .
	list		# any GList element
	return:		#  the first element in the GList ,or NULL if the GList has no elements 
GList  *g_list_last (GList *list);	# Gets the last element in a GList .
	list		# any GList element
	return:		#  the last element in the GList ,or NULL if the GList has no elements 
GList  *g_list_nth (GList *list, guint n);	# Gets the element at the given position in a GList .
	list		# a GList , this must point to the top of the list
	n		# the position of the element, counting from 0
	return:		#  the element, or NULL if the position is offthe end of the GList  
gpointer g_list_nth_data (GList *list, guint n);	# Gets the data of the element at the given position.
	list		# a GList , this must point to the top of the list
	n		# the position of the element
	return:		#  the element's data, or NULL if the positionis off the end of the GList  
GList  *g_list_nth_prev (GList *list, guint n);	# Gets the element n places before list.
	list		# a GList 
	n		# the position of the element, counting from 0
	return:		#  the element, or NULL if the position isoff the end of the GList  
GList  *g_list_find (GList *list, gconstpointer data);	# Finds the element in a GList which contains the given data.
	list		# a GList , this must point to the top of the list
	data		# the element data to find
	return:		#  the found GList element, or NULL if it is not found 
GList  *g_list_find_custom (GList *list, gconstpointer data, GCompareFunc func);	# Finds an element in a GList , using a supplied function to find the desired element. It iterates over the list, calling the given function which should return 0 when the desired element is found. The function takes two gconstpointer arguments, the GList element's data as the first argument and the given user data.
	list		# a GList , this must point to the top of the list
	data		# user data passed to the function
	func		# the function to call for each element.It should return 0 when the desired element is found
	return:		#  the found GList element, or NULL if it is not found 
gint g_list_position (GList *list, GList *llink);	# Gets the position of the given element in the GList (starting from 0).
	list		# a GList , this must point to the top of the list
	llink		# an element in the GList 
	return:		#  the position of the element in the GList ,or -1 if the element is not found 
gint g_list_index (GList *list, gconstpointer data);	# Gets the position of the element containing the given data (starting from 0).
	list		# a GList , this must point to the top of the list
	data		# the data to find
	return:		#  the index of the element containing the data,or -1 if the data is not found 
GSList  *g_slist_alloc (void );	# Allocates space for one GSList element. It is called by theg_slist_append() , g_slist_prepend() , g_slist_insert() andg_slist_insert_sorted() functions and so is rarely used on its own.
	return:		#  a pointer to the newly-allocated GSList element. 
GSList  *g_slist_append (GSList *list, gpointer data);	# Adds a new element on to the end of the list.
	list		# a GSList 
	data		# the data for the new element
	return:		#  the new start of the GSList  
GSList  *g_slist_prepend (GSList *list, gpointer data);	# Adds a new element on to the start of the list.
	list		# a GSList 
	data		# the data for the new element
	return:		#  the new start of the GSList  
GSList  *g_slist_insert (GSList *list, gpointer data, gint position);	# Inserts a new element into the list at the given position.
	list		# a GSList 
	data		# the data for the new element
	position		# the position to insert the element.If this is negative, or is larger than the numberof elements in the list, the new element is added onto the end of the list.
	return:		#  the new start of the GSList  
GSList  *g_slist_insert_before (GSList *slist, GSList *sibling, gpointer data);	# Inserts a node before sibling containing data.
	slist		# a GSList 
	sibling		# node to insert databefore
	data		# data to put in the newly-inserted node
	return:		#  the new head of the list. 
GSList  *g_slist_insert_sorted (GSList *list, gpointer data, GCompareFunc func);	# Inserts a new element into the list, using the givencomparison function to determine its position.
	list		# a GSList 
	data		# the data for the new element
	func		# the function to compare elements in the list.It should return a number &gt; 0 if the first parametercomes after the second parameter in the sort order.
	return:		#  the new start of the GSList  
GSList  *g_slist_remove (GSList *list, gconstpointer data);	# Removes an element from a GSList .If two elements contain the same data, only the first is removed.If none of the elements contain the data, the GSList is unchanged.
	list		# a GSList 
	data		# the data of the element to remove
	return:		#  the new start of the GSList  
GSList  *g_slist_remove_link (GSList *list, GSList *link_);	# Removes an element from a GSList , withoutfreeing the element. The removed element's nextlink is set to NULL , so that it becomes aself-contained list with one element.
	list		# a GSList 
	link_		# an element in the GSList 
	return:		#  the new start of the GSList , without the element 
GSList  *g_slist_delete_link (GSList *list, GSList *link_);	# Removes the node link_ from the list and frees it.Compare this to g_slist_remove_link() which removes the nodewithout freeing it.
	list		# a GSList 
	link_		# node to delete
	return:		#  the new head of list 
GSList  *g_slist_remove_all (GSList *list, gconstpointer data);	# Removes all list nodes with data equal to data.Returns the new head of the list. Contrast withg_slist_remove() which removes only the first nodematching the given data.
	list		# a GSList 
	data		# data to remove
	return:		#  new head of list 
void g_slist_free (GSList *list);	# Frees all of the memory used by a GSList .The freed elements are returned to the slice allocator.
	list		# a GSList 
void g_slist_free_full (GSList *list, GDestroyNotify free_func);	# Convenience method, which frees all the memory used by a GSList , andcalls the specified destroy function on every element's data.
	list		# a pointer to a GSList 
	free_func		# the function to be called to free each element's data
void g_slist_free_1 (GSList *list);	# Frees one GSList element.It is usually used after g_slist_remove_link() .
	list		# a GSList element
guint g_slist_length (GSList *list);	# Gets the number of elements in a GSList .
	list		# a GSList 
	return:		#  the number of elements in the GSList  
GSList  *g_slist_copy (GSList *list);	# Copies a GSList .
	list		# a GSList 
	return:		#  a copy of list 
GSList  *g_slist_copy_deep (GSList *list, GCopyFunc func, gpointer user_data);	# Makes a full (deep) copy of a GSList .
	list		# a GSList 
	func		# a copy function used to copy every element in the list
	user_data		# user data passed to the copy function func, or NULL 
	return:		#  a full copy of list, use g_slist_free_full to free it 
GSList  *g_slist_reverse (GSList *list);	# Reverses a GSList .
	list		# a GSList 
	return:		#  the start of the reversed GSList  
GSList  *g_slist_insert_sorted_with_data (GSList *list, gpointer data, GCompareDataFunc func, gpointer user_data);	# Inserts a new element into the list, using the givencomparison function to determine its position.
	list		# a GSList 
	data		# the data for the new element
	func		# the function to compare elements in the list.It should return a number &gt; 0 if the first parametercomes after the second parameter in the sort order.
	user_data		# data to pass to comparison function
	return:		#  the new start of the GSList  
GSList  *g_slist_sort (GSList *list, GCompareFunc compare_func);	# Sorts a GSList using the given comparison function.
	list		# a GSList 
	compare_func		# the comparison function used to sort the GSList .This function is passed the data from 2 elements of the GSList and should return 0 if they are equal, a negative value if thefirst element comes before the second, or a positive value ifthe first element comes after the second.
	return:		#  the start of the sorted GSList  
GSList  *g_slist_sort_with_data (GSList *list, GCompareDataFunc compare_func, gpointer user_data);	# Like g_slist_sort() , but the sort function accepts a user data argument.
	list		# a GSList 
	compare_func		# comparison function
	user_data		# data to pass to comparison function
	return:		#  new head of the list 
GSList  *g_slist_concat (GSList *list1, GSList *list2);	# Adds the second GSList onto the end of the first GSList .Note that the elements of the second GSList are not copied.They are used directly.
	list1		# a GSList 
	list2		# the GSList to add to the end of the first GSList 
	return:		#  the start of the new GSList  
void g_slist_foreach (GSList *list, GFunc func, gpointer user_data);	# Calls a function for each element of a GSList .
	list		# a GSList 
	func		# the function to call with each element's data
	user_data		# user data to pass to the function
GSList  *g_slist_last (GSList *list);	# Gets the last element in a GSList .
	list		# a GSList 
	return:		#  the last element in the GSList ,or NULL if the GSList has no elements 
GSList  *g_slist_nth (GSList *list, guint n);	# Gets the element at the given position in a GSList .
	list		# a GSList 
	n		# the position of the element, counting from 0
	return:		#  the element, or NULL if the position is offthe end of the GSList  
gpointer g_slist_nth_data (GSList *list, guint n);	# Gets the data of the element at the given position.
	list		# a GSList 
	n		# the position of the element
	return:		#  the element's data, or NULL if the positionis off the end of the GSList  
GSList  *g_slist_find (GSList *list, gconstpointer data);	# Finds the element in a GSList whichcontains the given data.
	list		# a GSList 
	data		# the element data to find
	return:		#  the found GSList element,or NULL if it is not found 
GSList  *g_slist_find_custom (GSList *list, gconstpointer data, GCompareFunc func);	# Finds an element in a GSList , using a supplied function tofind the desired element. It iterates over the list, callingthe given function which should return 0 when the desiredelement is found. The function takes two gconstpointer arguments,the GSList element's data as the first argument and thegiven user data.
	list		# a GSList 
	data		# user data passed to the function
	func		# the function to call for each element.It should return 0 when the desired element is found
	return:		#  the found GSList element, or NULL if it is not found 
gint g_slist_position (GSList *list, GSList *llink);	# Gets the position of the given elementin the GSList (starting from 0).
	list		# a GSList 
	llink		# an element in the GSList 
	return:		#  the position of the element in the GSList ,or -1 if the element is not found 
gint g_slist_index (GSList *list, gconstpointer data);	# Gets the position of the element containingthe given data (starting from 0).
	list		# a GSList 
	data		# the data to find
	return:		#  the index of the element containing the data,or -1 if the data is not found 
GQueue  *g_queue_new (void );	#创建对象:GQueue .
	return:		#  a newly allocated GQueue  
void g_queue_free (GQueue *queue);	# Frees the memory allocated for the GQueue . Only call this functionif queue was created with g_queue_new() . If queue elements containdynamically-allocated memory, they should be freed first.
	queue		# a GQueue 
void g_queue_free_full (GQueue *queue, GDestroyNotify free_func);	# Convenience method, which frees all the memory used by a GQueue ,and calls the specified destroy function on every element's data.
	queue		# a pointer to a GQueue 
	free_func		# the function to be called to free each element's data
void g_queue_init (GQueue *queue);	# A statically-allocated GQueue must be initialized with this functionbefore it can be used. Alternatively you can initialize it withG_QUEUE_INIT . It is not necessary to initialize queues created withg_queue_new() .
	queue		# an uninitialized GQueue 
void g_queue_clear (GQueue *queue);	# Removes all the elements in queue. If queue elements containdynamically-allocated memory, they should be freed first.
	queue		# a GQueue 
gboolean g_queue_is_empty (GQueue *queue);	# Returns TRUE if the queue is empty.
	queue		# a GQueue .
	return:		#  TRUE if the queue is empty 
guint g_queue_get_length (GQueue *queue);	# Returns the number of items in queue.
	queue		# a GQueue 
	return:		#  the number of items in queue 
void g_queue_reverse (GQueue *queue);	# Reverses the order of the items in queue.
	queue		# a GQueue 
GQueue  *g_queue_copy (GQueue *queue);	# Copies a queue. Note that is a shallow copy. If the elements in thequeue consist of pointers to data, the pointers are copied, but theactual data is not.
	queue		# a GQueue 
	return:		#  a copy of queue 
void g_queue_foreach (GQueue *queue, GFunc func, gpointer user_data);	# Calls func for each element in the queue passing user_data to thefunction.
	queue		# a GQueue 
	func		# the function to call for each element's data
	user_data		# user data to pass to func
GList  *g_queue_find (GQueue *queue, gconstpointer data);	# Finds the first link in queue which contains data.
	queue		# a GQueue 
	data		# data to find
	return:		#  the first link in queuewhich contains data 
GList  *g_queue_find_custom (GQueue *queue, gconstpointer data, GCompareFunc func);	# Finds an element in a GQueue , using a supplied function to find thedesired element. It iterates over the queue, calling the given functionwhich should return 0 when the desired element is found. The functiontakes two gconstpointer arguments, the GQueue element's data as thefirst argument and the given user data as the second argument.
	queue		# a GQueue 
	data		# user data passed to func
	func		# a GCompareFunc to call for each element. It should return 0when the desired element is found
	return:		#  the found link, or NULL if it wasn't found 
void g_queue_sort (GQueue *queue, GCompareDataFunc compare_func, gpointer user_data);	# Sorts queue using compare_func.
	queue		# a GQueue 
	compare_func		# the GCompareDataFunc used to sort queue. This functionis passed two elements of the queue and should return 0 if they areequal, a negative value if the first comes before the second, anda positive value if the second comes before the first.
	user_data		# user data passed to compare_func
void g_queue_push_head (GQueue *queue, gpointer data);	# Adds a new element at the head of the queue.
	queue		# a GQueue .
	data		# the data for the new element.
void g_queue_push_tail (GQueue *queue, gpointer data);	# Adds a new element at the tail of the queue.
	queue		# a GQueue 
	data		# the data for the new element
void g_queue_push_nth (GQueue *queue, gpointer data, gint n);	# Inserts a new element into queue at the given position.
	queue		# a GQueue 
	data		# the data for the new element
	n		# the position to insert the new element. If nis negative orlarger than the number of elements in the queue, the element isadded to the end of the queue.
gpointer g_queue_pop_head (GQueue *queue);	# Removes the first element of the queue and returns its data.
	queue		# a GQueue 
	return:		#  the data of the first element in the queue, or NULL if the queue is empty 
gpointer g_queue_pop_tail (GQueue *queue);	# Removes the last element of the queue and returns its data.
	queue		# a GQueue 
	return:		#  the data of the last element in the queue, or NULL if the queue is empty 
gpointer g_queue_pop_nth (GQueue *queue, guint n);	# Removes the n'th element of queue and returns its data.
	queue		# a GQueue 
	n		# the position of the element
	return:		#  the element's data, or NULL if nis off the end of queue 
gpointer g_queue_peek_head (GQueue *queue);	# Returns the first element of the queue.
	queue		# a GQueue 
	return:		#  the data of the first element in the queue, or NULL if the queue is empty 
gpointer g_queue_peek_tail (GQueue *queue);	# Returns the last element of the queue.
	queue		# a GQueue 
	return:		#  the data of the last element in the queue, or NULL if the queue is empty 
gpointer g_queue_peek_nth (GQueue *queue, guint n);	# Returns the n'th element of queue.
	queue		# a GQueue 
	n		# the position of the element
	return:		#  the data for the n'th element of queue,or NULL if nis off the end of queue 
gint g_queue_index (GQueue *queue, gconstpointer data);	# Returns the position of the first element in queue which contains data.
	queue		# a GQueue 
	data		# the data to find
	return:		#  the position of the first element in queuewhichcontains data, or -1 if no element in queuecontains data 
gboolean g_queue_remove (GQueue *queue, gconstpointer data);	# Removes the first element in queue that contains data.
	queue		# a GQueue 
	data		# the data to remove
	return:		#  TRUE if datawas found and removed from queue 
guint g_queue_remove_all (GQueue *queue, gconstpointer data);	# Remove all elements whose data equals data from queue.
	queue		# a GQueue 
	data		# the data to remove
	return:		#  the number of elements removed from queue 
void g_queue_insert_before (GQueue *queue, GList *sibling, gpointer data);	# Inserts data into queue before sibling.
	queue		# a GQueue 
	sibling		#  a GList link that must be part of queue, or NULL topush at the tail of the queue. 
void g_queue_insert_after (GQueue *queue, GList *sibling, gpointer data);	# Inserts data into queue after sibling.
	queue		# a GQueue 
	sibling		#  a GList link that must be part of queue, or NULL topush at the head of the queue. 
void g_queue_insert_sorted (GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data);	# Inserts data into queue using func to determine the new position.
	queue		# a GQueue 
	data		# the data to insert
	func		# the GCompareDataFunc used to compare elements in the queue. It iscalled with two elements of the queueand user_data. It shouldreturn 0 if the elements are equal, a negative value if the firstelement comes before the second, and a positive value if the secondelement comes before the first.
	user_data		# user data passed to func
void g_queue_push_head_link (GQueue *queue, GList *link_);	# Adds a new element at the head of the queue.
	queue		# a GQueue 
	link_		# a single GList element, not a list with more than one element
void g_queue_push_tail_link (GQueue *queue, GList *link_);	# Adds a new element at the tail of the queue.
	queue		# a GQueue 
	link_		# a single GList element, not a list with more than one element
void g_queue_push_nth_link (GQueue *queue, gint n, GList *link_);	# Inserts link into queue at the given position.
	queue		# a GQueue 
	n		# the position to insert the link. If this is negative or larger thanthe number of elements in queue, the link is added to the end ofqueue.
	link_		# the link to add to queue
GList  *g_queue_pop_head_link (GQueue *queue);	# Removes and returns the first element of the queue.
	queue		# a GQueue 
	return:		#  the GList element at the head of the queue, or NULL if the queue is empty 
GList  *g_queue_pop_tail_link (GQueue *queue);	# Removes and returns the last element of the queue.
	queue		# a GQueue 
	return:		#  the GList element at the tail of the queue, or NULL if the queue is empty 
GList  *g_queue_pop_nth_link (GQueue *queue, guint n);	# Removes and returns the link at the given position.
	queue		# a GQueue 
	n		# the link's position
	return:		#  the n'th link, or NULL if nis off the end of queue 
GList  *g_queue_peek_head_link (GQueue *queue);	# Returns the first link in queue.
	queue		# a GQueue 
	return:		#  the first link in queue, or NULL if queueis empty 
GList  *g_queue_peek_tail_link (GQueue *queue);	# Returns the last link in queue.
	queue		# a GQueue 
	return:		#  the last link in queue, or NULL if queueis empty 
GList  *g_queue_peek_nth_link (GQueue *queue, guint n);	# Returns the link at the given position
	queue		# a GQueue 
	n		# the position of the link
	return:		#  the link at the n'th position, or NULL if nis off the end of the list 
gint g_queue_link_index (GQueue *queue, GList *link_);	# Returns the position of link_ in queue.
	queue		# a GQueue 
	link_		# a GList link
	return:		#  the position of link_, or -1 if the link isnot part of queue 
void g_queue_unlink (GQueue *queue, GList *link_);	# Unlinks link_ so that it will no longer be part of queue.The link is not freed.
	queue		# a GQueue 
	link_		# a GList link that must be part of queue
void g_queue_delete_link (GQueue *queue, GList *link_);	# Removes link_ from queue and frees it.
	queue		# a GQueue 
	link_		# a GList link that must be part of queue
gint <span class="c_punctuation">( *GSequenceIterCompareFunc<span class="c_punctuation">) (GSequenceIter *a, GSequenceIter *b, gpointer data);	# A GSequenceIterCompareFunc is a function used to compare iterators.It must return zero if the iterators compare equal, a negative valueif a comes before b, and a positive value if b comes before a.
	a		# a GSequenceIter 
	b		# a GSequenceIter 
	data		# user data
	return:		#  zero if the iterators are equal, a negative value if acomes before b, and a positive value if bcomes before a. 
GSequence  *g_sequence_new (GDestroyNotify data_destroy);	#创建对象:GSequence. The data_destroy function, if non-NULL willbe called on all items when the sequence is destroyed and on items thatare removed from the sequence.
	data_destroy		#  a GDestroyNotify function, or NULL . 
	return:		#  a new GSequence  
void g_sequence_free (GSequence *seq);	# Frees the memory allocated for seq. If seq has a data destroyfunction associated with it, that function is called on all itemsin seq.
	seq		# a GSequence 
gint g_sequence_get_length (GSequence *seq);	# Returns the length of seq. Note that this method is O(h) where `h' is theheight of the tree. It is thus more efficient to use g_sequence_is_empty() when comparing the length to zero.
	seq		# a GSequence 
	return:		#  the length of seq 
gboolean g_sequence_is_empty (GSequence *seq);	# Returns TRUE if the sequence contains zero items.
	seq		# a GSequence 
	return:		#  TRUE if the sequence is empty, otherwise FALSE . 
void g_sequence_foreach (GSequence *seq, GFunc func, gpointer user_data);	# Calls func for each item in the sequence passing user_datato the function.
	seq		# a GSequence 
	func		# the function to call for each item in seq
	user_data		# user data passed to func
void g_sequence_foreach_range (GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data);	# Calls func for each item in the range (begin, end) passinguser_data to the function.
	begin		# a GSequenceIter 
	end		# a GSequenceIter 
	func		# a GFunc 
	user_data		# user data passed to func
void g_sequence_sort (GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data);	# Sorts seq using cmp_func.
	seq		# a GSequence 
	cmp_func		# the function used to sort the sequence
	cmp_data		# user data passed to cmp_func
void g_sequence_sort_iter (GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data);	# Like g_sequence_sort() , but uses a GSequenceIterCompareFunc insteadof a GCompareDataFunc as the compare function
	seq		# a GSequence 
	cmp_func		# the function used to compare iterators in the sequence
	cmp_data		# user data passed to cmp_func
GSequenceIter  *g_sequence_get_begin_iter (GSequence *seq);	# Returns the begin iterator for seq.
	seq		# a GSequence 
	return:		#  the begin iterator for seq. 
GSequenceIter  *g_sequence_get_end_iter (GSequence *seq);	# Returns the end iterator for seg
	seq		# a GSequence 
	return:		#  the end iterator for seq 
GSequenceIter  *g_sequence_get_iter_at_pos (GSequence *seq, gint pos);	# Returns the iterator at position pos. If pos is negative or largerthan the number of items in seq, the end iterator is returned.
	seq		# a GSequence 
	pos		# a position in seq, or -1 for the end
	return:		#  The GSequenceIter at position pos 
GSequenceIter  *g_sequence_append (GSequence *seq, gpointer data);	# Adds a new item to the end of seq.
	seq		# a GSequence 
	data		# the data for the new item
	return:		#  an iterator pointing to the new item 
GSequenceIter  *g_sequence_prepend (GSequence *seq, gpointer data);	# Adds a new item to the front of seq
	seq		# a GSequence 
	data		# the data for the new item
	return:		#  an iterator pointing to the new item 
GSequenceIter  *g_sequence_insert_before (GSequenceIter *iter, gpointer data);	# Inserts a new item just before the item pointed to by iter.
	iter		# a GSequenceIter 
	data		# the data for the new item
	return:		#  an iterator pointing to the new item 
void g_sequence_move (GSequenceIter *src, GSequenceIter *dest);	# Moves the item pointed to by src to the position indicated by dest.After calling this function dest will point to the position immediatelyafter src. It is allowed for src and dest to point into differentsequences.
	src		# a GSequenceIter pointing to the item to move
	dest		# a GSequenceIter pointing to the position to whichthe item is moved
void g_sequence_swap (GSequenceIter *a, GSequenceIter *b);	# Swaps the items pointed to by a and b. It is allowed for a and bto point into difference sequences.
	a		# a GSequenceIter 
	b		# a GSequenceIter 
GSequenceIter  *g_sequence_insert_sorted (GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);	# Inserts data into sequence using func to determine the newposition. The sequence must already be sorted according to cmp_func;otherwise the new position of data is undefined.
	seq		# a GSequence 
	data		# the data to insert
	cmp_func		# the function used to compare items in the sequence
	cmp_data		# user data passed to cmp_func.
	return:		#  a GSequenceIter pointing to the new item. 
GSequenceIter  *g_sequence_insert_sorted_iter (GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);	# Like g_sequence_insert_sorted() , but usesa GSequenceIterCompareFunc instead of a GCompareDataFunc asthe compare function.
	seq		# a GSequence 
	data		# data for the new item
	iter_cmp		# the function used to compare iterators in the sequence
	cmp_data		# user data passed to cmp_func
	return:		#  a GSequenceIter pointing to the new item 
void g_sequence_sort_changed (GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data);	# Moves the data pointed to a new position as indicated by cmp_func. Thisfunction should be called for items in a sequence already sorted accordingto cmp_func whenever some aspect of an item changes so that cmp_funcmay return different values for that item.
	iter		# A GSequenceIter 
	cmp_func		# the function used to compare items in the sequence
	cmp_data		# user data passed to cmp_func.
void g_sequence_sort_changed_iter (GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);	# Like g_sequence_sort_changed() , but usesa GSequenceIterCompareFunc instead of a GCompareDataFunc asthe compare function.
	iter		# a GSequenceIter 
	iter_cmp		# the function used to compare iterators in the sequence
	cmp_data		# user data passed to cmp_func
void g_sequence_remove (GSequenceIter *iter);	# Removes the item pointed to by iter. It is an error to pass theend iterator to this function.
	iter		# a GSequenceIter 
void g_sequence_remove_range (GSequenceIter *begin, GSequenceIter *end);	# Removes all items in the (begin, end) range.
	begin		# a GSequenceIter 
	end		# a GSequenceIter 
void g_sequence_move_range (GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end);	# Inserts the (begin, end) range at the destination pointed to by ptr.The begin and end iters must point into the same sequence. It isallowed for dest to point to a different sequence than the one pointedinto by begin and end.
	dest		# a GSequenceIter 
	begin		# a GSequenceIter 
	end		# a GSequenceIter 
GSequenceIter  *g_sequence_search (GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);	# Returns an iterator pointing to the position where data wouldbe inserted according to cmp_func and cmp_data.
	seq		# a GSequence 
	data		# data for the new item
	cmp_func		# the function used to compare items in the sequence
	cmp_data		# user data passed to cmp_func
	return:		#  an GSequenceIter pointing to the position where datawould have been inserted according to cmp_funcand cmp_data 
GSequenceIter  *g_sequence_search_iter (GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);	# Like g_sequence_search() , but uses a GSequenceIterCompareFunc instead of a GCompareDataFunc as the compare function.
	seq		# a GSequence 
	data		# data for the new item
	iter_cmp		# the function used to compare iterators in the sequence
	cmp_data		# user data passed to iter_cmp
	return:		#  a GSequenceIter pointing to the position in seqwhere datawould have been inserted according to iter_cmpand cmp_data 
GSequenceIter  *g_sequence_lookup (GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data);	# Returns an iterator pointing to the position of the first item foundequal to data according to cmp_func and cmp_data. If more than oneitem is equal, it is not guaranteed that it is the first which isreturned. In that case, you can use g_sequence_iter_next() andg_sequence_iter_prev() to get others.
	seq		# a GSequence 
	data		# data to lookup
	cmp_func		# the function used to compare items in the sequence
	cmp_data		# user data passed to cmp_func
	return:		#  an GSequenceIter pointing to the position of thefirst item found equal to dataaccording to cmp_funcandcmp_data, or NULL if no such item exists 
GSequenceIter  *g_sequence_lookup_iter (GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data);	# Like g_sequence_lookup() , but uses a GSequenceIterCompareFunc instead of a GCompareDataFunc as the compare function.
	seq		# a GSequence 
	data		# data to lookup
	iter_cmp		# the function used to compare iterators in the sequence
	cmp_data		# user data passed to iter_cmp
	return:		#  an GSequenceIter pointing to the position ofthe first item found equal to dataaccording to cmp_funcand cmp_data, or NULL if no such item exists 
gpointer g_sequence_get (GSequenceIter *iter);	# Returns the data that iter points to.
	iter		# a GSequenceIter 
	return:		#  the data that iterpoints to 
void g_sequence_set (GSequenceIter *iter, gpointer data);	# Changes the data for the item pointed to by iter to be data. Ifthe sequence has a data destroy function associated with it, thatfunction is called on the existing data that iter pointed to.
	iter		# a GSequenceIter 
	data		# new data for the item
gboolean g_sequence_iter_is_begin (GSequenceIter *iter);	# Returns whether iter is the begin iterator
	iter		# a GSequenceIter 
	return:		#  whether iteris the begin iterator 
gboolean g_sequence_iter_is_end (GSequenceIter *iter);	# Returns whether iter is the end iterator
	iter		# a GSequenceIter 
	return:		#  Whether iteris the end iterator 
GSequenceIter  *g_sequence_iter_next (GSequenceIter *iter);	# Returns an iterator pointing to the next position after iter.If iter is the end iterator, the end iterator is returned.
	iter		# a GSequenceIter 
	return:		#  a GSequenceIter pointing to the next position after iter 
GSequenceIter  *g_sequence_iter_prev (GSequenceIter *iter);	# Returns an iterator pointing to the previous position before iter.If iter is the begin iterator, the begin iterator is returned.
	iter		# a GSequenceIter 
	return:		#  a GSequenceIter pointing to the previous positionbefore iter 
gint g_sequence_iter_get_position (GSequenceIter *iter);	# Returns the position of iter
	iter		# a GSequenceIter 
	return:		#  the position of iter 
GSequenceIter  *g_sequence_iter_move (GSequenceIter *iter, gint delta);	# Returns the GSequenceIter which is delta positions away from iter.If iter is closer than -delta positions to the beginning of the sequence,the begin iterator is returned. If iter is closer than delta positionsto the end of the sequence, the end iterator is returned.
	iter		# a GSequenceIter 
	delta		# A positive or negative number indicating how many positions awayfrom iterthe returned GSequenceIter will be
	return:		#  a GSequenceIter which is deltapositions away from iter 
GSequence  *g_sequence_iter_get_sequence (GSequenceIter *iter);	# Returns the GSequence that iter points into.
	iter		# a GSequenceIter 
	return:		#  the GSequence that iterpoints into 
gint g_sequence_iter_compare (GSequenceIter *a, GSequenceIter *b);	# Returns a negative number if a comes before b, 0 if they are equal,and a positive number if a comes after b.
	a		# a GSequenceIter 
	b		# a GSequenceIter 
	return:		#  a negative number if acomes before b, 0 if they areequal, and a positive number if acomes after b 
GSequenceIter  *g_sequence_range_get_midpoint (GSequenceIter *begin, GSequenceIter *end);	# Finds an iterator somewhere in the range (begin, end). Thisiterator will be close to the middle of the range, but is notguaranteed to be exactly in the middle.
	begin		# a GSequenceIter 
	end		# a GSequenceIter 
	return:		#  a GSequenceIter pointing somewhere in the(begin, end) range 
void g_trash_stack_push (GTrashStack **stack_p, gpointer data_p);	# g_trash_stack_push has been deprecated since version 2.48 and should not be used in newly-written code.
	stack_p		# a GTrashStack 
	data_p		#  the piece of memory to push on the stack. 
gpointer g_trash_stack_pop (GTrashStack **stack_p);	# g_trash_stack_pop has been deprecated since version 2.48 and should not be used in newly-written code.
	stack_p		# a GTrashStack 
	return:		#  the element at the top of the stack 
gpointer g_trash_stack_peek (GTrashStack **stack_p);	# g_trash_stack_peek has been deprecated since version 2.48 and should not be used in newly-written code.
	stack_p		# a GTrashStack 
	return:		#  the element at the top of the stack 
guint g_trash_stack_height (GTrashStack **stack_p);	# g_trash_stack_height has been deprecated since version 2.48 and should not be used in newly-written code.
	stack_p		# a GTrashStack 
	return:		#  the height of the stack 
GHashTable  *g_hash_table_new (GHashFunc hash_func, GEqualFunc key_equal_func);	#创建对象:GHashTable with a reference count of 1.
	hash_func		# a function to create a hash value from a key
	key_equal_func		# a function to check two keys for equality
	return:		#  a new GHashTable  
GHashTable  *g_hash_table_new_full (GHashFunc hash_func, GEqualFunc key_equal_func, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);	#创建对象:GHashTable like g_hash_table_new() with a referencecount of 1 and allows to specify functions to free the memoryallocated for the key and value that get called when removing theentry from the GHashTable .
	hash_func		# a function to create a hash value from a key
	key_equal_func		# a function to check two keys for equality
	key_destroy_func		#  a function to free the memory allocated for the keyused when removing the entry from the GHashTable , or NULL if you don't want to supply such a function. 
	return:		#  a new GHashTable  
guint <span class="c_punctuation">( *GHashFunc<span class="c_punctuation">) (gconstpointer key);	# Specifies the type of the hash function which is passed tog_hash_table_new() when a GHashTable is created.
	key		# a key
	return:		#  the hash value corresponding to the key 
gboolean <span class="c_punctuation">( *GEqualFunc<span class="c_punctuation">) (gconstpointer a, gconstpointer b);	# Specifies the type of a function used to test two values forequality. The function should return TRUE if both values are equaland FALSE otherwise.
	a		# a value
	b		# a value to compare with
	return:		#  TRUE if a= b; FALSE otherwise 
gboolean g_hash_table_insert (GHashTable *hash_table, gpointer key, gpointer value);	# Inserts a new key and value into a GHashTable .
	hash_table		# a GHashTable 
	key		# a key to insert
	value		# the value to associate with the key
	return:		#  TRUE if the key did not exist yet 
gboolean g_hash_table_replace (GHashTable *hash_table, gpointer key, gpointer value);	# Inserts a new key and value into a GHashTable similar tog_hash_table_insert() . The difference is that if the keyalready exists in the GHashTable , it gets replaced by thenew key. If you supplied a value_destroy_func when creatingthe GHashTable , the old value is freed using that function.If you supplied a key_destroy_func when creating theGHashTable , the old key is freed using that function.
	hash_table		# a GHashTable 
	key		# a key to insert
	value		# the value to associate with the key
	return:		#  TRUE if the key did not exist yet 
gboolean g_hash_table_add (GHashTable *hash_table, gpointer key);	# This is a convenience function for using a GHashTable as a set. Itis equivalent to calling g_hash_table_replace() with key as both thekey and the value.
	hash_table		# a GHashTable 
	key		# a key to insert
	return:		#  TRUE if the key did not exist yet 
gboolean g_hash_table_contains (GHashTable *hash_table, gconstpointer key);	# Checks if key is in hash_table.
	hash_table		# a GHashTable 
	key		# a key to check
	return:		#  TRUE if keyis in hash_table, FALSE otherwise. 
guint g_hash_table_size (GHashTable *hash_table);	# Returns the number of elements contained in the GHashTable .
	hash_table		# a GHashTable 
	return:		#  the number of key/value pairs in the GHashTable . 
gpointer g_hash_table_lookup (GHashTable *hash_table, gconstpointer key);	# Looks up a key in a GHashTable . Note that this function cannotdistinguish between a key that is not present and one which is presentand has the value NULL . If you need this distinction, useg_hash_table_lookup_extended() .
	hash_table		# a GHashTable 
	key		# the key to look up
	return:		#  the associated value, or NULL if the key is not found.  
gboolean g_hash_table_lookup_extended (GHashTable *hash_table, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);	# Looks up a key in the GHashTable , returning the original key and theassociated value and a gboolean which is TRUE if the key was found. Thisis useful if you need to free the memory allocated for the original key,for example before calling g_hash_table_remove() .
	hash_table		# a GHashTable 
	lookup_key		# the key to look up
	orig_key		#  return location for the original key. 
	return:		#  TRUE if the key was found in the GHashTable  
void g_hash_table_foreach (GHashTable *hash_table, GHFunc func, gpointer user_data);	# Calls the given function for each of the key/value pairs in theGHashTable . The function is passed the key and value of eachpair, and the given user_data parameter. The hash table may notbe modified while iterating over it (you can't add/removeitems). To remove all items matching a predicate, useg_hash_table_foreach_remove() .
	hash_table		# a GHashTable 
	func		# the function to call for each key/value pair
	user_data		# user data to pass to the function
gpointer g_hash_table_find (GHashTable *hash_table, GHRFunc predicate, gpointer user_data);	# Calls the given function for key/value pairs in the GHashTable until predicate returns TRUE . The function is passed the keyand value of each pair, and the given user_data parameter. Thehash table may not be modified while iterating over it (you can'tadd/remove items).
	hash_table		# a GHashTable 
	predicate		# function to test the key/value pairs for a certain property
	user_data		# user data to pass to the function
	return:		#  The value of the first key/value pair is returned,for which predicateevaluates to TRUE . If no pair with therequested property is found, NULL is returned.  
void <span class="c_punctuation">( *GHFunc<span class="c_punctuation">) (gpointer key, gpointer value, gpointer user_data);	# Specifies the type of the function passed to g_hash_table_foreach() .It is called with each key/value pair, together with the user_dataparameter which is passed to g_hash_table_foreach() .
	key		# a key
	value		# the value corresponding to the key
	user_data		# user data passed to 
gboolean g_hash_table_remove (GHashTable *hash_table, gconstpointer key);	# Removes a key and its associated value from a GHashTable .
	hash_table		# a GHashTable 
	key		# the key to remove
	return:		#  TRUE if the key was found and removed from the GHashTable  
gboolean g_hash_table_steal (GHashTable *hash_table, gconstpointer key);	# Removes a key and its associated value from a GHashTable withoutcalling the key and value destroy functions.
	hash_table		# a GHashTable 
	key		# the key to remove
	return:		#  TRUE if the key was found and removed from the GHashTable  
guint g_hash_table_foreach_remove (GHashTable *hash_table, GHRFunc func, gpointer user_data);	# Calls the given function for each key/value pair in theGHashTable . If the function returns TRUE , then the key/valuepair is removed from the GHashTable . If you supplied key orvalue destroy functions when creating the GHashTable , they areused to free the memory allocated for the removed keys and values.
	hash_table		# a GHashTable 
	func		# the function to call for each key/value pair
	user_data		# user data to pass to the function
	return:		#  the number of key/value pairs removed 
guint g_hash_table_foreach_steal (GHashTable *hash_table, GHRFunc func, gpointer user_data);	# Calls the given function for each key/value pair in theGHashTable . If the function returns TRUE , then the key/valuepair is removed from the GHashTable , but no key or valuedestroy functions are called.
	hash_table		# a GHashTable 
	func		# the function to call for each key/value pair
	user_data		# user data to pass to the function
	return:		#  the number of key/value pairs removed. 
void g_hash_table_remove_all (GHashTable *hash_table);	# Removes all keys and their associated values from a GHashTable .
	hash_table		# a GHashTable 
void g_hash_table_steal_all (GHashTable *hash_table);	# Removes all keys and their associated values from a GHashTable without calling the key and value destroy functions.
	hash_table		# a GHashTable 
GList  *g_hash_table_get_keys (GHashTable *hash_table);	# Retrieves every key inside hash_table. The returned data is validuntil changes to the hash release those keys.
	hash_table		# a GHashTable 
	return:		#  a GList containing all the keysinside the hash table. The content of the list is owned by thehash table and should not be modified or freed. Use g_list_free() when done using the list.  
GList  *g_hash_table_get_values (GHashTable *hash_table);	# Retrieves every value inside hash_table. The returned datais valid until hash_table is modified.
	hash_table		# a GHashTable 
	return:		#  a GList containing all the valuesinside the hash table. The content of the list is owned by thehash table and should not be modified or freed. Use g_list_free() when done using the list.  
gpointer  *g_hash_table_get_keys_as_array (GHashTable *hash_table, guint *length);	# Retrieves every key inside hash_table, as an array.
	hash_table		# a GHashTable 
	length		#  the length of the returned array. 
	return:		#  aNULL -terminated array containing each key from the table.  
gboolean <span class="c_punctuation">( *GHRFunc<span class="c_punctuation">) (gpointer key, gpointer value, gpointer user_data);	# Specifies the type of the function passed tog_hash_table_foreach_remove() . It is called with each key/valuepair, together with the user_data parameter passed tog_hash_table_foreach_remove() . It should return TRUE if thekey/value pair should be removed from the GHashTable .
	key		# a key
	value		# the value associated with the key
	user_data		# user data passed to 
	return:		#  TRUE if the key/value pair should be removed from theGHashTable  
void g_hash_table_destroy (GHashTable *hash_table);	# Destroys all keys and values in the GHashTable and decrements itsreference count by 1. If keys and/or values are dynamically allocated,you should either free them first or create the GHashTable with destroynotifiers using g_hash_table_new_full() . In the latter case the destroyfunctions you supplied will be called on all keys and values during thedestruction phase.
	hash_table		# a GHashTable 
GHashTable  *g_hash_table_ref (GHashTable *hash_table);	# Atomically increments the reference count of hash_table by one.This function is MT-safe and may be called from any thread.
	hash_table		# a valid GHashTable 
	return:		#  the passed in GHashTable  
void g_hash_table_unref (GHashTable *hash_table);	# Atomically decrements the reference count of hash_table by one.If the reference count drops to 0, all keys and values will bedestroyed, and all memory allocated by the hash table is released.This function is MT-safe and may be called from any thread.
	hash_table		# a valid GHashTable 
void g_hash_table_iter_init (GHashTableIter *iter, GHashTable *hash_table);	# Initializes a key/value pair iterator and associates it withhash_table. Modifying the hash table after calling this functioninvalidates the returned iterator.
	iter		# an uninitialized GHashTableIter 
	hash_table		# a GHashTable 
gboolean g_hash_table_iter_next (GHashTableIter *iter, gpointer *key, gpointer *value);	# Advances iter and retrieves the key and/or value that are nowpointed to as a result of this advancement. If FALSE is returned,key and value are not set, and the iterator becomes invalid.
	iter		# an initialized GHashTableIter 
	key		#  a location to store the key. 
	return:		#  FALSE if the end of the GHashTable has been reached. 
GHashTable  *g_hash_table_iter_get_hash_table (GHashTableIter *iter);	# Returns the GHashTable associated with iter.
	iter		# an initialized GHashTableIter 
	return:		#  the GHashTable associated with iter. 
void g_hash_table_iter_replace (GHashTableIter *iter, gpointer value);	# Replaces the value currently pointed to by the iteratorfrom its associated GHashTable . Can only be called afterg_hash_table_iter_next() returned TRUE .
	iter		# an initialized GHashTableIter 
	value		# the value to replace with
void g_hash_table_iter_remove (GHashTableIter *iter);	# Removes the key/value pair currently pointed to by the iteratorfrom its associated GHashTable . Can only be called afterg_hash_table_iter_next() returned TRUE , and cannot be calledmore than once for the same key/value pair.
	iter		# an initialized GHashTableIter 
void g_hash_table_iter_steal (GHashTableIter *iter);	# Removes the key/value pair currently pointed to by theiterator from its associated GHashTable , without callingthe key and value destroy functions. Can only be calledafter g_hash_table_iter_next() returned TRUE , and cannotbe called more than once for the same key/value pair.
	iter		# an initialized GHashTableIter 
gboolean g_direct_equal (gconstpointer v1, gconstpointer v2);	# Compares two gpointer arguments and returns TRUE if they are equal.It can be passed to g_hash_table_new() as the key_equal_funcparameter, when using opaque pointers compared by pointer value askeys in a GHashTable .
	v1		#  a key. 
	return:		#  TRUE if the two keys match. 
guint g_direct_hash (gconstpointer v);	# Converts a gpointer to a hash value.It can be passed to g_hash_table_new() as the hash_func parameter,when using opaque pointers compared by pointer value as keys in aGHashTable .
	v		#  a gpointer key. 
	return:		#  a hash value corresponding to the key. 
gboolean g_int_equal (gconstpointer v1, gconstpointer v2);	# Compares the two gint values being pointed to and returnsTRUE if they are equal.It can be passed to g_hash_table_new() as the key_equal_funcparameter, when using non-NULL pointers to integers as keys in aGHashTable .
	v1		#  a pointer to a gint key. 
	return:		#  TRUE if the two keys match. 
guint g_int_hash (gconstpointer v);	# Converts a pointer to a gint to a hash value.It can be passed to g_hash_table_new() as the hash_func parameter,when using non-NULL pointers to integer values as keys in a GHashTable .
	v		#  a pointer to a gint key. 
	return:		#  a hash value corresponding to the key. 
gboolean g_int64_equal (gconstpointer v1, gconstpointer v2);	# Compares the two gint64 values being pointed to and returnsTRUE if they are equal.It can be passed to g_hash_table_new() as the key_equal_funcparameter, when using non-NULL pointers to 64-bit integers as keys in aGHashTable .
	v1		#  a pointer to a gint64 key. 
	return:		#  TRUE if the two keys match. 
guint g_int64_hash (gconstpointer v);	# Converts a pointer to a gint64 to a hash value.
	v		#  a pointer to a gint64 key. 
	return:		#  a hash value corresponding to the key. 
gboolean g_double_equal (gconstpointer v1, gconstpointer v2);	# Compares the two gdouble values being pointed to and returnsTRUE if they are equal.It can be passed to g_hash_table_new() as the key_equal_funcparameter, when using non-NULL pointers to doubles as keys in aGHashTable .
	v1		#  a pointer to a gdouble key. 
	return:		#  TRUE if the two keys match. 
guint g_double_hash (gconstpointer v);	# Converts a pointer to a gdouble to a hash value.It can be passed to g_hash_table_new() as the hash_func parameter,It can be passed to g_hash_table_new() as the hash_func parameter,when using non-NULL pointers to doubles as keys in a GHashTable .
	v		#  a pointer to a gdouble key. 
	return:		#  a hash value corresponding to the key. 
gboolean g_str_equal (gconstpointer v1, gconstpointer v2);	# Compares two strings for byte-by-byte equality and returns TRUE if they are equal. It can be passed to g_hash_table_new() as thekey_equal_func parameter, when using non-NULL strings as keys in aGHashTable .
	v1		#  a key. 
	return:		#  TRUE if the two keys match 
guint g_str_hash (gconstpointer v);	# Converts a string to a hash value.
	v		#  a string key. 
	return:		#  a hash value corresponding to the key 
GString  *g_string_new (const gchar *init);	#创建对象:GString , initialized with the given string.
	init		#  the initial text to copy into the string, or NULL tostart with an empty string. 
	return:		#  the new GString  
GString  *g_string_new_len (const gchar *init, gssize len);	#创建对象:GString with len bytes of the init buffer.Because a length is provided, init need not be nul-terminated,and can contain embedded nul bytes.
	init		# initial contents of the string
	len		# length of initto use
	return:		#  a new GString  
GString  *g_string_sized_new (gsize dfl_size);	#创建对象:GString , with enough space for dfl_sizebytes. This is useful if you are going to add a lot oftext to the string and don't want it to be reallocatedtoo often.
	dfl_size		# the default size of the space allocated tohold the string
	return:		#  the new GString  
GString  *g_string_assign (GString *string, const gchar *rval);	# Copies the bytes from a string into a GString ,destroying any previous contents. It is rather likethe standard strcpy() function, except that you do nothave to worry about having enough space to copy the string.
	string		# the destination GString . Its current contentsare destroyed.
	rval		# the string to copy into string
	return:		#  string.  
void g_string_vprintf (GString *string, const gchar *format, va_list args);	# Writes a formatted string into a GString .This function is similar to g_string_printf() except thatthe arguments to the format string are passed as a va_list.
	string		# a GString 
	format		# the string format. See the 
	args		# the parameters to insert into the format string
void g_string_append_vprintf (GString *string, const gchar *format, va_list args);	# Appends a formatted string onto the end of a GString .This function is similar to g_string_append_printf() except that the arguments to the format string are passedas a va_list.
	string		# a GString 
	format		# the string format. See the 
	args		# the list of arguments to insert in the output
void g_string_printf (GString *string, const gchar *format, ...);	# Writes a formatted string into a GString .This is similar to the standard sprintf() function,except that the GString buffer automatically expandsto contain the results. The previous contents of theGString are destroyed.
	string		# a GString 
	format		# the string format. See the 
	...		# the parameters to insert into the format string
void g_string_append_printf (GString *string, const gchar *format, ...);	# Appends a formatted string onto the end of a GString .This function is similar to g_string_printf() exceptthat the text is appended to the GString .
	string		# a GString 
	format		# the string format. See the 
	...		# the parameters to insert into the format string
GString  *g_string_append (GString *string, const gchar *val);	# Adds a string onto the end of a GString , expandingit if necessary.
	string		# a GString 
	val		# the string to append onto the end of string
	return:		#  string.  
GString  *g_string_append_c (GString *string, gchar c);	# Adds a byte onto the end of a GString , expandingit if necessary.
	string		# a GString 
	c		# the byte to append onto the end of string
	return:		#  string.  
GString  *g_string_append_unichar (GString *string, gunichar wc);	# Converts a Unicode character into UTF-8, and appends itto the string.
	string		# a GString 
	wc		# a Unicode character
	return:		#  string.  
GString  *g_string_append_len (GString *string, const gchar *val, gssize len);	# Appends len bytes of val to string. Because len isprovided, val may contain embedded nuls and need notbe nul-terminated.
	string		# a GString 
	val		# bytes to append
	len		# number of bytes of valto use
	return:		#  string.  
GString  *g_string_append_uri_escaped (GString *string, const gchar *unescaped, const gchar *reserved_chars_allowed, gboolean allow_utf8);	# Appends unescaped to string, escaped any characters thatare reserved in URIs using URI-style escape sequences.
	string		# a GString 
	unescaped		# a string
	reserved_chars_allowed		# a string of reserved characters allowedto be used, or NULL 
	allow_utf8		# set TRUE if the escaped string may include UTF8 characters
	return:		#  string.  
GString  *g_string_prepend (GString *string, const gchar *val);	# Adds a string on to the start of a GString ,expanding it if necessary.
	string		# a GString 
	val		# the string to prepend on the start of string
	return:		#  string.  
GString  *g_string_prepend_c (GString *string, gchar c);	# Adds a byte onto the start of a GString ,expanding it if necessary.
	string		# a GString 
	c		# the byte to prepend on the start of the GString 
	return:		#  string.  
GString  *g_string_prepend_unichar (GString *string, gunichar wc);	# Converts a Unicode character into UTF-8, and prepends itto the string.
	string		# a GString 
	wc		# a Unicode character
	return:		#  string.  
GString  *g_string_prepend_len (GString *string, const gchar *val, gssize len);	# Prepends len bytes of val to string.Because len is provided, val may containembedded nuls and need not be nul-terminated.
	string		# a GString 
	val		# bytes to prepend
	len		# number of bytes in valto prepend
	return:		#  string.  
GString  *g_string_insert (GString *string, gssize pos, const gchar *val);	# Inserts a copy of a string into a GString ,expanding it if necessary.
	string		# a GString 
	pos		# the position to insert the copy of the string
	val		# the string to insert
	return:		#  string.  
GString  *g_string_insert_c (GString *string, gssize pos, gchar c);	# Inserts a byte into a GString , expanding it if necessary.
	string		# a GString 
	pos		# the position to insert the byte
	c		# the byte to insert
	return:		#  string.  
GString  *g_string_insert_unichar (GString *string, gssize pos, gunichar wc);	# Converts a Unicode character into UTF-8, and insert itinto the string at the given position.
	string		# a GString 
	pos		# the position at which to insert character, or -1to append at the end of the string
	wc		# a Unicode character
	return:		#  string.  
GString  *g_string_insert_len (GString *string, gssize pos, const gchar *val, gssize len);	# Inserts len bytes of val into string at pos.Because len is provided, val may contain embeddednuls and need not be nul-terminated. If pos is -1,bytes are inserted at the end of the string.
	string		# a GString 
	pos		# position in stringwhere insertion shouldhappen, or -1 for at the end
	val		# bytes to insert
	len		# number of bytes of valto insert
	return:		#  string.  
GString  *g_string_overwrite (GString *string, gsize pos, const gchar *val);	# Overwrites part of a string, lengthening it if necessary.
	string		# a GString 
	pos		# the position at which to start overwriting
	val		# the string that will overwrite the stringstarting at pos
	return:		#  string.  
GString  *g_string_overwrite_len (GString *string, gsize pos, const gchar *val, gssize len);	# Overwrites part of a string, lengthening it if necessary.This function will work with embedded nuls.
	string		# a GString 
	pos		# the position at which to start overwriting
	val		# the string that will overwrite the stringstarting at pos
	len		# the number of bytes to write from val
	return:		#  string.  
GString  *g_string_erase (GString *string, gssize pos, gssize len);	# Removes len bytes from a GString , starting at position pos.The rest of the GString is shifted down to fill the gap.
	string		# a GString 
	pos		# the position of the content to remove
	len		# the number of bytes to remove, or -1 to remove allfollowing bytes
	return:		#  string.  
GString  *g_string_truncate (GString *string, gsize len);	# Cuts off the end of the GString, leaving the first len bytes.
	string		# a GString 
	len		# the new size of string
	return:		#  string.  
GString  *g_string_set_size (GString *string, gsize len);	# Sets the length of a GString . If the length is less thanthe current length, the string will be truncated. If thelength is greater than the current length, the contentsof the newly added area are undefined. (However, asalways, string-&gt;str[string-&gt;len] will be a nul byte.)
	string		# a GString 
	len		# the new length
	return:		#  string.  
gchar  *g_string_free (GString *string, gboolean free_segment);	# Frees the memory allocated for the GString .If free_segment is TRUE it also frees the character data. Ifit's FALSE , the caller gains ownership of the buffer and mustfree it after use with g_free() .
	string		#  a GString . 
	return:		#  the character data of string(i.e. NULL if free_segmentis TRUE ).  
GBytes  *g_string_free_to_bytes (GString *string);	# Transfers ownership of the contents of string to a newly allocatedGBytes . The GString structure itself is deallocated, and it istherefore invalid to use string after invoking this function.
	string		#  a GString . 
	return:		#  A newly allocated GBytes containing contents of string; stringitself is freed.  
GString  *g_string_up (GString *string);	# g_string_up has been deprecated since version 2.2 and should not be used in newly-written code.
	string		# a GString 
	return:		#  string.  
GString  *g_string_down (GString *string);	# g_string_down has been deprecated since version 2.2 and should not be used in newly-written code.
	string		# a GString 
	return:		#  the GString .  
guint g_string_hash (const GString *str);	# Creates a hash code for str; for use with GHashTable .
	str		# a string to hash
	return:		#  hash code for str 
gboolean g_string_equal (const GString *v, const GString *v2);	# Compares two strings for equality, returning TRUE if they are equal.For use with GHashTable .
	v		# a GString 
	v2		# another GString 
	return:		#  TRUE if the strings are the same length and contain thesame bytes 
GStringChunk  *g_string_chunk_new (gsize size);	#创建对象:GStringChunk .
	size		# the default size of the blocks of memory which areallocated to store the strings. If a particular stringis larger than this default size, a larger block ofmemory will be allocated for it.
	return:		#  a new GStringChunk  
gchar  *g_string_chunk_insert (GStringChunk *chunk, const gchar *string);	# Adds a copy of string to the GStringChunk .It returns a pointer to the new copy of the stringin the GStringChunk . The characters in the stringcan be changed, if necessary, though you should notchange anything after the end of the string.
	chunk		# a GStringChunk 
	string		# the string to add
	return:		#  a pointer to the copy of stringwithinthe GStringChunk  
gchar  *g_string_chunk_insert_const (GStringChunk *chunk, const gchar *string);	# Adds a copy of string to the GStringChunk , unless the samestring has already been added to the GStringChunk withg_string_chunk_insert_const() .
	chunk		# a GStringChunk 
	string		# the string to add
	return:		#  a pointer to the new or existing copy of stringwithin the GStringChunk  
gchar  *g_string_chunk_insert_len (GStringChunk *chunk, const gchar *string, gssize len);	# Adds a copy of the first len bytes of string to the GStringChunk .The copy is nul-terminated.
	chunk		# a GStringChunk 
	string		# bytes to insert
	len		# number of bytes of stringto insert, or -1 to insert anul-terminated string
	return:		#  a pointer to the copy of stringwithin the GStringChunk  
void g_string_chunk_clear (GStringChunk *chunk);	# Frees all strings contained within the GStringChunk .After calling g_string_chunk_clear() it is not safe toaccess any of the strings which were contained within it.
	chunk		# a GStringChunk 
void g_string_chunk_free (GStringChunk *chunk);	# Frees all memory allocated by the GStringChunk .After calling g_string_chunk_free() it is not safe toaccess any of the strings which were contained within it.
	chunk		# a GStringChunk 
GArray  *g_array_new (gboolean zero_terminated, gboolean clear_, guint element_size);	#创建对象:GArray with a reference count of 1.
	zero_terminated		# TRUE if the array should have an extra element atthe end which is set to 0
	clear_		# TRUE if GArray elements should be automatically clearedto 0 when they are allocated
	element_size		# the size of each element in bytes
	return:		#  the new GArray  
GArray  *g_array_sized_new (gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size);	#创建对象:GArray with reserved_size elements preallocated anda reference count of 1. This avoids frequent reallocation, if youare going to add many elements to the array. Note however that thesize of the array is still 0.
	zero_terminated		# TRUE if the array should have an extra element atthe end with all bits cleared
	clear_		# TRUE if all bits in the array should be cleared to 0 onallocation
	element_size		# size of each element in the array
	reserved_size		# number of elements preallocated
	return:		#  the new GArray  
GArray  *g_array_ref (GArray *array);	# Atomically increments the reference count of array by one.This function is MT-safe and may be called from any thread.
	array		# A GArray 
	return:		#  The passed in GArray  
void g_array_unref (GArray *array);	# Atomically decrements the reference count of array by one. If thereference count drops to 0, all memory allocated by the array isreleased. This function is MT-safe and may be called from anythread.
	array		# A GArray 
guint g_array_get_element_size (GArray *array);	# Gets the size of the elements in array.
	array		# A GArray 
	return:		#  Size of each element, in bytes 
GArray  *g_array_append_vals (GArray *array, gconstpointer data, guint len);	# Adds len elements onto the end of the array.
	array		# a GArray 
	data		#  a pointer to the elements to append to the end of the array. 
	return:		#  the GArray  
GArray  *g_array_prepend_vals (GArray *array, gconstpointer data, guint len);	# Adds len elements onto the start of the array.
	array		# a GArray 
	data		#  a pointer to the elements to prepend to the start of the array. 
	return:		#  the GArray  
GArray  *g_array_insert_vals (GArray *array, guint index_, gconstpointer data, guint len);	# Inserts len elements into a GArray at the given index.
	array		# a GArray 
	index_		# the index to place the elements at
	data		#  a pointer to the elements to insert. 
	return:		#  the GArray  
GArray  *g_array_remove_index (GArray *array, guint index_);	# Removes the element at the given index from a GArray . The followingelements are moved down one place.
	array		# a GArray 
	index_		# the index of the element to remove
	return:		#  the GArray  
GArray  *g_array_remove_index_fast (GArray *array, guint index_);	# Removes the element at the given index from a GArray . The lastelement in the array is used to fill in the space, so this functiondoes not preserve the order of the GArray . But it is faster thang_array_remove_index() .
	array		# a GArray
	index_		# the index of the element to remove
	return:		#  the GArray  
GArray  *g_array_remove_range (GArray *array, guint index_, guint length);	# Removes the given number of elements starting at the given indexfrom a GArray . The following elements are moved to close the gap.
	array		# a GArray
	index_		# the index of the first element to remove
	length		# the number of elements to remove
	return:		#  the GArray  
void g_array_sort (GArray *array, GCompareFunc compare_func);	# Sorts a GArray using compare_func which should be a qsort()-stylecomparison function (returns less than zero for first arg is lessthan second arg, zero for equal, greater zero if first arg isgreater than second arg).
	array		# a GArray 
	compare_func		# comparison function
void g_array_sort_with_data (GArray *array, GCompareDataFunc compare_func, gpointer user_data);	# Like g_array_sort() , but the comparison function receives an extrauser data argument.
	array		# a GArray 
	compare_func		# comparison function
	user_data		# data to pass to compare_func
GArray  *g_array_set_size (GArray *array, guint length);	# Sets the size of the array, expanding it if necessary. If the arraywas created with clear_ set to TRUE , the new elements are set to 0.
	array		# a GArray 
	length		# the new size of the GArray 
	return:		#  the GArray  
void g_array_set_clear_func (GArray *array, GDestroyNotify clear_func);	# Sets a function to clear an element of array.
	array		# A GArray 
	clear_func		# a function to clear an element of array
gchar  *g_array_free (GArray *array, gboolean free_segment);	# Frees the memory allocated for the GArray . If free_segment isTRUE it frees the memory block holding the elements as well andalso each element if array has a element_free_func set. PassFALSE if you want to free the GArray wrapper but preserve theunderlying array for use elsewhere. If the reference count of arrayis greater than one, the GArray wrapper is preserved but the sizeof array will be set to zero.
	array		# a GArray 
	free_segment		# if TRUE the actual element data is freed as well
	return:		#  the element data if free_segmentis FALSE , otherwiseNULL . The element data should be freed using g_free() . 
GPtrArray  *g_ptr_array_new (void );	#创建对象:GPtrArray with a reference count of 1.
	return:		#  the new GPtrArray  
GPtrArray  *g_ptr_array_sized_new (guint reserved_size);	#创建对象:GPtrArray with reserved_size pointers preallocatedand a reference count of 1. This avoids frequent reallocation, ifyou are going to add many pointers to the array. Note however thatthe size of the array is still 0.
	reserved_size		# number of pointers preallocated
	return:		#  the new GPtrArray  
GPtrArray  *g_ptr_array_new_with_free_func (GDestroyNotify element_free_func);	#创建对象:GPtrArray with a reference count of 1 and useelement_free_func for freeing each element when the array is destroyedeither via g_ptr_array_unref() , when g_ptr_array_free() is called withfree_segment set to TRUE or when removing elements.
	element_free_func		#  A function to free elements withdestroy arrayor NULL . 
	return:		#  A new GPtrArray  
GPtrArray  *g_ptr_array_new_full (guint reserved_size, GDestroyNotify element_free_func);	#创建对象:GPtrArray with reserved_size pointers preallocatedand a reference count of 1. This avoids frequent reallocation, ifyou are going to add many pointers to the array. Note however thatthe size of the array is still 0. It also set element_free_funcfor freeing each element when the array is destroyed either viag_ptr_array_unref() , when g_ptr_array_free() is called withfree_segment set to TRUE or when removing elements.
	reserved_size		# number of pointers preallocated
	element_free_func		#  A function to free elements withdestroy arrayor NULL . 
	return:		#  A new GPtrArray  
void g_ptr_array_set_free_func (GPtrArray *array, GDestroyNotify element_free_func);	# Sets a function for freeing each element when array is destroyedeither via g_ptr_array_unref() , when g_ptr_array_free() is calledwith free_segment set to TRUE or when removing elements.
	array		# A GPtrArray 
	element_free_func		#  A function to free elements withdestroy arrayor NULL . 
GPtrArray  *g_ptr_array_ref (GPtrArray *array);	# Atomically increments the reference count of array by one.This function is thread-safe and may be called from any thread.
	array		# a GPtrArray 
	return:		#  The passed in GPtrArray  
void g_ptr_array_unref (GPtrArray *array);	# Atomically decrements the reference count of array by one. If thereference count drops to 0, the effect is the same as callingg_ptr_array_free() with free_segment set to TRUE . This functionis MT-safe and may be called from any thread.
	array		# A GPtrArray 
void g_ptr_array_add (GPtrArray *array, gpointer data);	# Adds a pointer to the end of the pointer array. The array will growin size automatically if necessary.
	array		# a GPtrArray 
	data		# the pointer to add
void g_ptr_array_insert (GPtrArray *array, gint index_, gpointer data);	# Inserts an element into the pointer array at the given index. The array will grow in size automatically if necessary.
	array		# a GPtrArray 
	index_		# the index to place the new element at, or -1 to append
	data		# the pointer to add.
gboolean g_ptr_array_remove (GPtrArray *array, gpointer data);	# Removes the first occurrence of the given pointer from the pointerarray. The following elements are moved down one place. If arrayhas a non-NULL GDestroyNotify function it is called for theremoved element.
	array		# a GPtrArray 
	data		# the pointer to remove
	return:		#  TRUE if the pointer is removed, FALSE if the pointeris not found in the array 
gpointer g_ptr_array_remove_index (GPtrArray *array, guint index_);	# Removes the pointer at the given index from the pointer array.The following elements are moved down one place. If array hasa non-NULL GDestroyNotify function it is called for the removedelement.
	array		# a GPtrArray 
	index_		# the index of the pointer to remove
	return:		#  the pointer which was removed 
gboolean g_ptr_array_remove_fast (GPtrArray *array, gpointer data);	# Removes the first occurrence of the given pointer from the pointerarray. The last element in the array is used to fill in the space,so this function does not preserve the order of the array. But itis faster than g_ptr_array_remove() . If array has a non-NULL GDestroyNotify function it is called for the removed element.
	array		# a GPtrArray 
	data		# the pointer to remove
	return:		#  TRUE if the pointer was found in the array 
gpointer g_ptr_array_remove_index_fast (GPtrArray *array, guint index_);	# Removes the pointer at the given index from the pointer array.The last element in the array is used to fill in the space, sothis function does not preserve the order of the array. But itis faster than g_ptr_array_remove_index() . If array has a non-NULL GDestroyNotify function it is called for the removed element.
	array		# a GPtrArray 
	index_		# the index of the pointer to remove
	return:		#  the pointer which was removed 
GPtrArray  *g_ptr_array_remove_range (GPtrArray *array, guint index_, guint length);	# Removes the given number of pointers starting at the given indexfrom a GPtrArray . The following elements are moved to close thegap. If array has a non-NULL GDestroyNotify function it iscalled for the removed elements.
	array		# a GPtrArray
	index_		# the index of the first pointer to remove
	length		# the number of pointers to remove
	return:		#  the array 
void g_ptr_array_sort (GPtrArray *array, GCompareFunc compare_func);	# Sorts the array, using compare_func which should be a qsort()-stylecomparison function (returns less than zero for first arg is lessthan second arg, zero for equal, greater than zero if irst arg isgreater than second arg).
	array		# a GPtrArray 
	compare_func		# comparison function
void g_ptr_array_sort_with_data (GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data);	# Like g_ptr_array_sort() , but the comparison function has an extrauser data argument.
	array		# a GPtrArray 
	compare_func		# comparison function
	user_data		# data to pass to compare_func
void g_ptr_array_set_size (GPtrArray *array, gint length);	# Sets the size of the array. When making the array larger,newly-added elements will be set to NULL . When making it smaller,if array has a non-NULL GDestroyNotify function then it will becalled for the removed elements.
	array		# a GPtrArray 
	length		# the new length of the pointer array
gpointer  *g_ptr_array_free (GPtrArray *array, gboolean free_seg);	# Frees the memory allocated for the GPtrArray . If free_seg is TRUE it frees the memory block holding the elements as well. Pass FALSE if you want to free the GPtrArray wrapper but preserve theunderlying array for use elsewhere. If the reference count of arrayis greater than one, the GPtrArray wrapper is preserved but thesize of array will be set to zero.
	array		# a GPtrArray 
	free_seg		# if TRUE the actual pointer array is freed as well
	return:		#  the pointer array if free_segis FALSE , otherwise NULL .The pointer array should be freed using g_free() . 
void g_ptr_array_foreach (GPtrArray *array, GFunc func, gpointer user_data);	# Calls a function for each element of a GPtrArray .
	array		# a GPtrArray 
	func		# the function to call for each array element
	user_data		# user data to pass to the function
gboolean g_ptr_array_find (GPtrArray *haystack, gconstpointer needle, guint *index_);	# Checks whether needle exists in haystack. If the element is found, TRUE isreturned and the element’s index is returned in index_ (if non-NULL ).Otherwise, FALSE is returned and index_ is undefined. If needle existsmultiple times in haystack, the index of the first instance is returned.
	haystack		# pointer array to be searched
	needle		# pointer to look for
	index_		#  return location for the index ofthe element, if found. 
	return:		#  TRUE if needleis one of the elements of haystack 
gboolean g_ptr_array_find_with_equal_func (GPtrArray *haystack, gconstpointer needle, GEqualFunc equal_func, guint *index_);	# Checks whether needle exists in haystack, using the given equal_func.If the element is found, TRUE is returned and the element’s index isreturned in index_ (if non-NULL ). Otherwise, FALSE is returned and index_is undefined. If needle exists multiple times in haystack, the index ofthe first instance is returned.
	haystack		# pointer array to be searched
	needle		# pointer to look for
	equal_func		#  the function to call for each element, which shouldreturn TRUE when the desired element is found; or NULL to use pointerequality. 
	return:		#  TRUE if needleis one of the elements of haystack 
GByteArray  *g_byte_array_new (void );	#创建对象:GByteArray with a reference count of 1.
	return:		#  the new GByteArray .  
GByteArray  *g_byte_array_new_take (guint8 *data, gsize len);	# Create byte array containing the data. The data will be owned by the arrayand will be freed with g_free() , i.e. it could be allocated using g_strdup() .
	data		#  byte data for the array. 
	return:		#  a new GByteArray .  
GByteArray  *g_byte_array_sized_new (guint reserved_size);	#创建对象:GByteArray with reserved_size bytes preallocated.This avoids frequent reallocation, if you are going to add manybytes to the array. Note however that the size of the array is still0.
	reserved_size		# number of bytes preallocated
	return:		#  the new GByteArray  
GByteArray  *g_byte_array_ref (GByteArray *array);	# Atomically increments the reference count of array by one.This function is thread-safe and may be called from any thread.
	array		# A GByteArray 
	return:		#  The passed in GByteArray  
void g_byte_array_unref (GByteArray *array);	# Atomically decrements the reference count of array by one. If thereference count drops to 0, all memory allocated by the array isreleased. This function is thread-safe and may be called from anythread.
	array		# A GByteArray 
GByteArray  *g_byte_array_append (GByteArray *array, const guint8 *data, guint len);	# Adds the given bytes to the end of the GByteArray .The array will grow in size automatically if necessary.
	array		# a GByteArray 
	data		# the byte data to be added
	len		# the number of bytes to add
	return:		#  the GByteArray  
GByteArray  *g_byte_array_prepend (GByteArray *array, const guint8 *data, guint len);	# Adds the given data to the start of the GByteArray .The array will grow in size automatically if necessary.
	array		# a GByteArray 
	data		# the byte data to be added
	len		# the number of bytes to add
	return:		#  the GByteArray  
GByteArray  *g_byte_array_remove_index (GByteArray *array, guint index_);	# Removes the byte at the given index from a GByteArray .The following bytes are moved down one place.
	array		# a GByteArray 
	index_		# the index of the byte to remove
	return:		#  the GByteArray  
GByteArray  *g_byte_array_remove_index_fast (GByteArray *array, guint index_);	# Removes the byte at the given index from a GByteArray . The lastelement in the array is used to fill in the space, so this functiondoes not preserve the order of the GByteArray . But it is fasterthan g_byte_array_remove_index() .
	array		# a GByteArray 
	index_		# the index of the byte to remove
	return:		#  the GByteArray  
GByteArray  *g_byte_array_remove_range (GByteArray *array, guint index_, guint length);	# Removes the given number of bytes starting at the given index from aGByteArray . The following elements are moved to close the gap.
	array		# a GByteArray
	index_		# the index of the first byte to remove
	length		# the number of bytes to remove
	return:		#  the GByteArray  
void g_byte_array_sort (GByteArray *array, GCompareFunc compare_func);	# Sorts a byte array, using compare_func which should be aqsort()-style comparison function (returns less than zero for firstarg is less than second arg, zero for equal, greater than zero iffirst arg is greater than second arg).
	array		# a GByteArray 
	compare_func		# comparison function
void g_byte_array_sort_with_data (GByteArray *array, GCompareDataFunc compare_func, gpointer user_data);	# Like g_byte_array_sort() , but the comparison function takes an extrauser data argument.
	array		# a GByteArray 
	compare_func		# comparison function
	user_data		# data to pass to compare_func
GByteArray  *g_byte_array_set_size (GByteArray *array, guint length);	# Sets the size of the GByteArray , expanding it if necessary.
	array		# a GByteArray 
	length		# the new size of the GByteArray 
	return:		#  the GByteArray  
guint8  *g_byte_array_free (GByteArray *array, gboolean free_segment);	# Frees the memory allocated by the GByteArray . If free_segment isTRUE it frees the actual byte data. If the reference count ofarray is greater than one, the GByteArray wrapper is preserved butthe size of array will be set to zero.
	array		# a GByteArray 
	free_segment		# if TRUE the actual byte data is freed as well
	return:		#  the element data if free_segmentis FALSE , otherwiseNULL . The element data should be freed using g_free() . 
GBytes  *g_byte_array_free_to_bytes (GByteArray *array);	# Transfers the data from the GByteArray into a new immutable GBytes .
	array		#  a GByteArray . 
	return:		#  a new immutable GBytes representing samebyte data that was in the array.  
GBytes  *g_bytes_new (gconstpointer data, gsize size);	#创建对象:GBytes from data.
	data		#  the data to be used for the bytes. 
	return:		#  a new GBytes .  
GBytes  *g_bytes_new_take (gpointer data, gsize size);	#创建对象:GBytes from data.
	data		#  the data to be used for the bytes. 
	return:		#  a new GBytes .  
GBytes  *g_bytes_new_static (gconstpointer data, gsize size);	#创建对象:GBytes from static data.
	data		#  the data to be used for the bytes. 
	return:		#  a new GBytes .  
GBytes  *g_bytes_new_with_free_func (gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data);	# Creates a GBytes from data.
	data		#  the data to be used for the bytes. 
	return:		#  a new GBytes .  
GBytes  *g_bytes_new_from_bytes (GBytes *bytes, gsize offset, gsize length);	# Creates a GBytes which is a subsection of another GBytes . The offset +length may not be longer than the size of bytes.
	bytes		# a GBytes 
	offset		# offset which subsection starts at
	length		# length of subsection
	return:		#  a new GBytes .  
gconstpointer g_bytes_get_data (GBytes *bytes, gsize *size);	# Get the byte data in the GBytes . This data should not be modified.
	bytes		# a GBytes 
	size		#  location to return size of byte data. 
	return:		#  a pointer to the byte data, or NULL .  
gsize g_bytes_get_size (GBytes *bytes);	# Get the size of the byte data in the GBytes .
	bytes		# a GBytes 
	return:		#  the size 
guint g_bytes_hash (gconstpointer bytes);	# Creates an integer hash code for the byte data in the GBytes .
	bytes		#  a pointer to a GBytes key. 
	return:		#  a hash value corresponding to the key. 
gboolean g_bytes_equal (gconstpointer bytes1, gconstpointer bytes2);	# Compares the two GBytes values being pointed to and returnsTRUE if they are equal.
	bytes1		#  a pointer to a GBytes . 
	return:		#  TRUE if the two keys match. 
gint g_bytes_compare (gconstpointer bytes1, gconstpointer bytes2);	# Compares the two GBytes values.
	bytes1		#  a pointer to a GBytes . 
	return:		#  a negative value if bytes2 is lesser, a positive value if bytes2 isgreater, and zero if bytes2 is equal to bytes1 
GBytes  *g_bytes_ref (GBytes *bytes);	# Increase the reference count on bytes.
	bytes		# a GBytes 
	return:		#  the GBytes  
void g_bytes_unref (GBytes *bytes);	# Releases a reference on bytes. This may result in the bytes beingfreed.
	bytes		#  a GBytes . 
gpointer g_bytes_unref_to_data (GBytes *bytes, gsize *size);	# Unreferences the bytes, and returns a pointer the same byte datacontents.
	bytes		#  a GBytes . 
	return:		#  (transfer full) (array length=size) (element-type guint8)(not nullable): a pointer to the same byte data, which should befreed with g_free()  
GByteArray  *g_bytes_unref_to_array (GBytes *bytes);	# Unreferences the bytes, and returns a new mutable GByteArray containingthe same byte data.
	bytes		#  a GBytes . 
	return:		#  a new mutable GByteArray containing the same byte data.  
GTree  *g_tree_new (GCompareFunc key_compare_func);	#创建对象:GTree .
	key_compare_func		# the function used to order the nodes in the GTree .It should return values similar to the standard 
	return:		#  a newly allocated GTree  
GTree  *g_tree_ref (GTree *tree);	# Increments the reference count of tree by one.
	tree		# a GTree 
	return:		#  the passed in GTree  
void g_tree_unref (GTree *tree);	# Decrements the reference count of tree by one.If the reference count drops to 0, all keys and values willbe destroyed (if destroy functions were specified) and allmemory allocated by tree will be released.
	tree		# a GTree 
GTree  *g_tree_new_with_data (GCompareDataFunc key_compare_func, gpointer key_compare_data);	#创建对象:GTree with a comparison function that accepts user data.See g_tree_new() for more details.
	key_compare_func		# qsort()-style comparison function
	key_compare_data		# data to pass to comparison function
	return:		#  a newly allocated GTree  
GTree  *g_tree_new_full (GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func);	#创建对象:GTree like g_tree_new() and allows to specify functions to free the memory allocated for the key and value that get called when removing the entry from the GTree .
	key_compare_func		# qsort()-style comparison function
	key_compare_data		# data to pass to comparison function
	key_destroy_func		# a function to free the memory allocated for the keyused when removing the entry from the GTree or NULL if you don'twant to supply such a function
	value_destroy_func		# a function to free the memory allocated for thevalue used when removing the entry from the GTree or NULL if youdon't want to supply such a function
	return:		#  a newly allocated GTree  
void g_tree_insert (GTree *tree, gpointer key, gpointer value);	# Inserts a key/value pair into a GTree .
	tree		# a GTree 
	key		# the key to insert
	value		# the value corresponding to the key
void g_tree_replace (GTree *tree, gpointer key, gpointer value);	# Inserts a new key and value into a GTree similar to g_tree_insert() .The difference is that if the key already exists in the GTree , it gets replaced by the new key. If you supplied a value_destroy_func when creating the GTree , the old value is freed using that function. If you supplied a key_destroy_func when creating the GTree , the old key is freed using that function. 
	tree		# a GTree 
	key		# the key to insert
	value		# the value corresponding to the key
gint g_tree_nnodes (GTree *tree);	# Gets the number of nodes in a GTree .
	tree		# a GTree 
	return:		#  the number of nodes in tree 
gint g_tree_height (GTree *tree);	# Gets the height of a GTree .
	tree		# a GTree 
	return:		#  the height of tree 
gpointer g_tree_lookup (GTree *tree, gconstpointer key);	# Gets the value corresponding to the given key. Since a GTree is automatically balanced as key/value pairs are added, key lookupis O(log n) (where n is the number of key/value pairs in the tree).
	tree		# a GTree 
	key		# the key to look up
	return:		#  the value corresponding to the key, or NULL if the key was not found 
gboolean g_tree_lookup_extended (GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value);	# Looks up a key in the GTree , returning the original key and theassociated value. This is useful if you need to free the memoryallocated for the original key, for example before callingg_tree_remove() .
	tree		# a GTree 
	lookup_key		# the key to look up
	orig_key		#  returns the original key. 
	return:		#  TRUE if the key was found in the GTree  
void g_tree_foreach (GTree *tree, GTraverseFunc func, gpointer user_data);	# Calls the given function for each of the key/value pairs in the GTree .The function is passed the key and value of each pair, and the givendata parameter. The tree is traversed in sorted order.
	tree		# a GTree 
	func		# the function to call for each node visited.If this function returns TRUE , the traversal is stopped.
	user_data		# user data to pass to the function
void g_tree_traverse (GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data);	# g_tree_traverse has been deprecated since version 2.2 and should not be used in newly-written code.
	tree		# a GTree 
	traverse_func		# the function to call for each node visited. If thisfunction returns TRUE , the traversal is stopped.
	traverse_type		# the order in which nodes are visited, one of G_IN_ORDER ,G_PRE_ORDER and G_POST_ORDER 
	user_data		# user data to pass to the function
gboolean <span class="c_punctuation">( *GTraverseFunc<span class="c_punctuation">) (gpointer key, gpointer value, gpointer data);	# Specifies the type of function passed to g_tree_traverse() . It ispassed the key and value of each node, together with the user_dataparameter passed to g_tree_traverse() . If the function returnsTRUE , the traversal is stopped.
	key		# a key of a GTree node
	value		# the value corresponding to the key
	data		# user data passed to 
	return:		#  TRUE to stop the traversal 
gpointer g_tree_search (GTree *tree, GCompareFunc search_func, gconstpointer user_data);	# Searches a GTree using search_func.
	tree		# a GTree 
	search_func		# a function used to search the GTree 
	user_data		# the data passed as the second argument to search_func
	return:		#  the value corresponding to the found key, or NULL if the key was not found 
gboolean g_tree_remove (GTree *tree, gconstpointer key);	# Removes a key/value pair from a GTree .
	tree		# a GTree 
	key		# the key to remove
	return:		#  TRUE if the key was found (prior to 2.8, this functionreturned nothing) 
gboolean g_tree_steal (GTree *tree, gconstpointer key);	# Removes a key and its associated value from a GTree without calling the key and value destroy functions.
	tree		# a GTree 
	key		# the key to remove
	return:		#  TRUE if the key was found (prior to 2.8, this functionreturned nothing) 
void g_tree_destroy (GTree *tree);	# Removes all keys and values from the GTree and decreases itsreference count by one. If keys and/or values are dynamicallyallocated, you should either free them first or create the GTree using g_tree_new_full() . In the latter case the destroy functionsyou supplied will be called on all keys and values before destroyingthe GTree .
	tree		# a GTree 
GNode  *g_node_new (gpointer data);	#创建对象:GNode containing the given data.Used to create the first node in a tree.
	data		# the data of the new node
	return:		#  a new GNode  
GNode  *g_node_copy (GNode *node);	# Recursively copies a GNode (but does not deep-copy the data inside the nodes, see g_node_copy_deep() if you need that).
	node		# a GNode 
	return:		#  a new GNode containing the same data pointers 
gpointer <span class="c_punctuation">( *GCopyFunc<span class="c_punctuation">) (gconstpointer src, gpointer data);	# A function of this signature is used to copy the node data when doing a deep-copy of a tree.
	src		#  A pointer to the data which should be copied. 
	return:		#  A pointer to the copy.  
GNode  *g_node_copy_deep (GNode *node, GCopyFunc copy_func, gpointer data);	# Recursively copies a GNode and its data.
	node		# a GNode 
	copy_func		# the function which is called to copy the data inside each node,or NULL to use the original data.
	data		# data to pass to copy_func
	return:		#  a new GNode containing copies of the data in node. 
GNode  *g_node_insert (GNode *parent, gint position, GNode *node);	# Inserts a GNode beneath the parent at the given position.
	parent		# the GNode to place nodeunder
	position		# the position to place nodeat, with respect to its siblingsIf position is -1, nodeis inserted as the last child of parent
	node		# the GNode to insert
	return:		#  the inserted GNode  
GNode  *g_node_insert_before (GNode *parent, GNode *sibling, GNode *node);	# Inserts a GNode beneath the parent before the given sibling.
	parent		# the GNode to place nodeunder
	sibling		# the sibling GNode to place nodebefore.If sibling is NULL , the node is inserted as the last child of parent.
	node		# the GNode to insert
	return:		#  the inserted GNode  
GNode  *g_node_insert_after (GNode *parent, GNode *sibling, GNode *node);	# Inserts a GNode beneath the parent after the given sibling.
	parent		# the GNode to place nodeunder
	sibling		# the sibling GNode to place nodeafter.If sibling is NULL , the node is inserted as the first child of parent.
	node		# the GNode to insert
	return:		#  the inserted GNode  
GNode  *g_node_prepend (GNode *parent, GNode *node);	# Inserts a GNode as the first child of the given parent.
	parent		# the GNode to place the new GNode under
	node		# the GNode to insert
	return:		#  the inserted GNode  
void g_node_reverse_children (GNode *node);	# Reverses the order of the children of a GNode .(It doesn't change the order of the grandchildren.)
	node		# a GNode .
void g_node_traverse (GNode *root, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func, gpointer data);	# Traverses a tree starting at the given root GNode .It calls the given function for each node visited.The traversal can be halted at any point by returning TRUE from func.
	root		# the root GNode of the tree to traverse
	order		# the order in which nodes are visited - G_IN_ORDER ,G_PRE_ORDER , G_POST_ORDER , or G_LEVEL_ORDER .
	flags		# which types of children are to be visited, one ofG_TRAVERSE_ALL , G_TRAVERSE_LEAVES and G_TRAVERSE_NON_LEAVES 
	max_depth		# the maximum depth of the traversal. Nodes below thisdepth will not be visited. If max_depth is -1 all nodes inthe tree are visited. If depth is 1, only the root is visited.If depth is 2, the root and its children are visited. And so on.
	func		# the function to call for each visited GNode 
	data		# user data to pass to the function
gboolean <span class="c_punctuation">( *GNodeTraverseFunc<span class="c_punctuation">) (GNode *node, gpointer data);	# Specifies the type of function passed to g_node_traverse() . Thefunction is called with each of the nodes visited, together with theuser data passed to g_node_traverse() . If the function returnsTRUE , then the traversal is stopped.
	node		# a GNode .
	data		# user data passed to 
	return:		#  TRUE to stop the traversal. 
void g_node_children_foreach (GNode *node, GTraverseFlags flags, GNodeForeachFunc func, gpointer data);	# Calls a function for each of the children of a GNode .Note that it doesn't descend beneath the child nodes.
	node		# a GNode 
	flags		# which types of children are to be visited, one ofG_TRAVERSE_ALL , G_TRAVERSE_LEAVES and G_TRAVERSE_NON_LEAVES 
	func		# the function to call for each visited node
	data		# user data to pass to the function
void <span class="c_punctuation">( *GNodeForeachFunc<span class="c_punctuation">) (GNode *node, gpointer data);	# Specifies the type of function passed to g_node_children_foreach() .The function is called with each child node, together with the userdata passed to g_node_children_foreach() .
	node		# a GNode .
	data		# user data passed to 
GNode  *g_node_get_root (GNode *node);	# Gets the root of a tree.
	node		# a GNode 
	return:		#  the root of the tree 
GNode  *g_node_find (GNode *root, GTraverseType order, GTraverseFlags flags, gpointer data);	# Finds a GNode in a tree.
	root		# the root GNode of the tree to search
	order		# the order in which nodes are visited - G_IN_ORDER ,G_PRE_ORDER , G_POST_ORDER , or G_LEVEL_ORDER 
	flags		# which types of children are to be searched, one ofG_TRAVERSE_ALL , G_TRAVERSE_LEAVES and G_TRAVERSE_NON_LEAVES 
	data		# the data to find
	return:		#  the found GNode , or NULL if the data is not found 
GNode  *g_node_find_child (GNode *node, GTraverseFlags flags, gpointer data);	# Finds the first child of a GNode with the given data.
	node		# a GNode 
	flags		# which types of children are to be searched, one ofG_TRAVERSE_ALL , G_TRAVERSE_LEAVES and G_TRAVERSE_NON_LEAVES 
	data		# the data to find
	return:		#  the found child GNode , or NULL if the data is not found 
gint g_node_child_index (GNode *node, gpointer data);	# Gets the position of the first child of a GNode which contains the given data.
	node		# a GNode 
	data		# the data to find
	return:		#  the index of the child of nodewhich containsdata, or -1 if the data is not found 
gint g_node_child_position (GNode *node, GNode *child);	# Gets the position of a GNode with respect to its siblings.child must be a child of node. The first child is numbered 0, the second 1, and so on.
	node		# a GNode 
	child		# a child of node
	return:		#  the position of childwith respect to its siblings 
GNode  *g_node_last_child (GNode *node);	# Gets the last child of a GNode .
	node		# a GNode (must not be NULL )
	return:		#  the last child of node, or NULL if nodehas no children 
GNode  *g_node_nth_child (GNode *node, guint n);	# Gets a child of a GNode , using the given index.The first child is at index 0. If the index is too big, NULL is returned.
	node		# a GNode 
	n		# the index of the desired child
	return:		#  the child of nodeat index n 
GNode  *g_node_first_sibling (GNode *node);	# Gets the first sibling of a GNode .This could possibly be the node itself.
	node		# a GNode 
	return:		#  the first sibling of node 
GNode  *g_node_last_sibling (GNode *node);	# Gets the last sibling of a GNode .This could possibly be the node itself.
	node		# a GNode 
	return:		#  the last sibling of node 
guint g_node_depth (GNode *node);	# Gets the depth of a GNode .
	node		# a GNode 
	return:		#  the depth of the GNode  
guint g_node_n_nodes (GNode *root, GTraverseFlags flags);	# Gets the number of nodes in a tree.
	root		# a GNode 
	flags		# which types of children are to be counted, one ofG_TRAVERSE_ALL , G_TRAVERSE_LEAVES and G_TRAVERSE_NON_LEAVES 
	return:		#  the number of nodes in the tree 
guint g_node_n_children (GNode *node);	# Gets the number of children of a GNode .
	node		# a GNode 
	return:		#  the number of children of node 
gboolean g_node_is_ancestor (GNode *node, GNode *descendant);	# Returns TRUE if node is an ancestor of descendant.This is true if node is the parent of descendant, or if node is the grandparent of descendant etc.
	node		# a GNode 
	descendant		# a GNode 
	return:		#  TRUE if nodeis an ancestor of descendant 
guint g_node_max_height (GNode *root);	# Gets the maximum height of all branches beneath a GNode .This is the maximum distance from the GNode to all leaf nodes.
	root		# a GNode 
	return:		#  the maximum height of the tree beneath root 
void g_node_unlink (GNode *node);	# Unlinks a GNode from a tree, resulting in two separate trees.
	node		# the GNode to unlink, which becomes the root of a new tree
void g_node_destroy (GNode *root);	# Removes root and its children from the tree, freeing any memoryallocated.
	root		# the root of the tree/subtree to destroy
GQuark g_quark_from_string (const gchar *string);	# Gets the GQuark identifying the given string. If the string doesnot currently have an associated GQuark , a new GQuark is created,using a copy of the string.
	string		#  a string. 
	return:		#  the GQuark identifying the string, or 0 if stringis NULL  
GQuark g_quark_from_static_string (const gchar *string);	# Gets the GQuark identifying the given (static) string. If thestring does not currently have an associated GQuark , a new GQuark is created, linked to the given string.
	string		#  a string. 
	return:		#  the GQuark identifying the string, or 0 if stringis NULL  
gchar  *g_quark_to_string (GQuark quark);	# Gets the string associated with the given GQuark .
	quark		# a GQuark .
	return:		#  the string associated with the GQuark  
GQuark g_quark_try_string (const gchar *string);	# Gets the GQuark associated with the given string, or 0 if string isNULL or it has no associated GQuark .
	string		#  a string. 
	return:		#  the GQuark associated with the string, or 0 if stringisNULL or there is no GQuark associated with it 
gchar  *g_intern_string (const gchar *string);	# Returns a canonical representation for string. Interned stringscan be compared for equality by comparing the pointers, instead ofusing strcmp().
	string		#  a string. 
	return:		#  a canonical representation for the string 
gchar  *g_intern_static_string (const gchar *string);	# Returns a canonical representation for string. Interned stringscan be compared for equality by comparing the pointers, instead ofusing strcmp(). g_intern_static_string() does not copy the string,therefore string must not be freed or modified.
	string		#  a static string. 
	return:		#  a canonical representation for the string 
void g_datalist_init (GData **datalist);	# Resets the datalist to NULL . It does not free any memory or callany destroy functions.
	datalist		# a pointer to a pointer to a datalist.
void g_datalist_id_set_data_full (GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func);	# Sets the data corresponding to the given GQuark id, and thefunction to be called when the element is removed from the datalist.Any previous data with the same key is removed, and its destroyfunction is called.
	datalist		# a datalist.
	key_id		# the GQuark to identify the data element.
	data		#  the data element or NULL to remove any previous elementcorresponding to key_id. 
gpointer g_datalist_id_get_data (GData **datalist, GQuark key_id);	# Retrieves the data element corresponding to key_id.
	datalist		# a datalist.
	key_id		# the GQuark identifying a data element.
	return:		#  the data element, or NULL if it is not found. 
gpointer g_datalist_id_remove_no_notify (GData **datalist, GQuark key_id);	# Removes an element, without calling its destroy notificationfunction.
	datalist		# a datalist.
	key_id		# the GQuark identifying a data element.
	return:		#  the data previously stored at key_id, or NULL if none. 
gpointer <span class="c_punctuation">( *GDuplicateFunc<span class="c_punctuation">) (gpointer data, gpointer user_data);	# The type of functions that are used to 'duplicate' an object.What this means depends on the context, it could just beincrementing the reference count, if data is a ref-countedobject.
	data		# the data to duplicate
	user_data		# user data that was specified in 
	return:		#  a duplicate of data 
gpointer g_datalist_id_dup_data (GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data);	# This is a variant of g_datalist_id_get_data() whichreturns a 'duplicate' of the value. dup_func defines themeaning of 'duplicate' in this context, it could e.g.take a reference on a ref-counted object.
	datalist		# location of a datalist
	key_id		# the GQuark identifying a data element
	dup_func		#  function to duplicate the old value. 
	return:		#  the result of calling dup_funcon the valueassociated with key_idin datalist, or NULL if not set.If dup_funcis NULL , the value is returned unmodified. 
gboolean g_datalist_id_replace_data (GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);	# Compares the member that is associated with key_id indatalist to oldval, and if they are the same, replaceoldval with newval.
	datalist		# location of a datalist
	key_id		# the GQuark identifying a data element
	oldval		#  the old value to compare against. 
	return:		#  TRUE if the existing value for key_idwas replacedby newval, FALSE otherwise. 
gpointer g_datalist_get_data (GData **datalist, const gchar *key);	# Gets a data element, using its string identifier. This is slower thang_datalist_id_get_data() because it compares strings.
	datalist		# a datalist.
	key		# the string identifying a data element.
	return:		#  the data element, or NULL if it is not found. 
void g_datalist_foreach (GData **datalist, GDataForeachFunc func, gpointer user_data);	# Calls the given function for each data element of the datalist. Thefunction is called with each data element's GQuark id and data,together with the given user_data parameter. Note that thisfunction is NOT thread-safe. So unless datalist can be protectedfrom any modifications during invocation of this function, it shouldnot be called.
	datalist		# a datalist.
	func		# the function to call for each data element.
	user_data		# user data to pass to the function.
void g_datalist_clear (GData **datalist);	# Frees all the data elements of the datalist.The data elements' destroy functions are calledif they have been set.
	datalist		# a datalist.
void g_datalist_set_flags (GData **datalist, guint flags);	# Turns on flag values for a data list. This function is usedto keep a small number of boolean flags in an object witha data list without using any additional space. It isnot generally useful except in circumstances where spaceis very tight. (It is used in the base GObject type, forexample.)
	datalist		# pointer to the location that holds a list
	flags		# the flags to turn on. The values of the flags arerestricted by G_DATALIST_FLAGS_MASK (currently3; giving two possible boolean flags).A value for flagsthat doesn't fit within the mask isan error.
void g_datalist_unset_flags (GData **datalist, guint flags);	# Turns off flag values for a data list. See g_datalist_unset_flags() 
	datalist		# pointer to the location that holds a list
	flags		# the flags to turn off. The values of the flags arerestricted by G_DATALIST_FLAGS_MASK (currently3: giving two possible boolean flags).A value for flagsthat doesn't fit within the mask isan error.
guint g_datalist_get_flags (GData **datalist);	# Gets flags values packed in together with the datalist.See g_datalist_set_flags() .
	datalist		# pointer to the location that holds a list
	return:		#  the flags of the datalist 
void g_dataset_id_set_data_full (gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func);	# Sets the data element associated with the given GQuark id, and alsothe function to call when the data element is destroyed. Anyprevious data with the same key is removed, and its destroy functionis called.
	dataset_location		#  the location identifying the dataset. 
	data		# the data element.
	destroy_func		# the function to call when the data element isremoved. This function will be called with the dataelement and can be used to free any memory allocatedfor it.
void <span class="c_punctuation">( *GDestroyNotify<span class="c_punctuation">) (gpointer data);	# Specifies the type of function which is called when a data elementis destroyed. It is passed the pointer to the data element andshould free any memory and resources allocated for it.
	data		# the data element.
gpointer g_dataset_id_get_data (gconstpointer dataset_location, GQuark key_id);	# Gets the data element corresponding to a GQuark .
	dataset_location		#  the location identifying the dataset. 
	return:		#  the data element corresponding to the GQuark , or NULL ifit is not found. 
gpointer g_dataset_id_remove_no_notify (gconstpointer dataset_location, GQuark key_id);	# Removes an element, without calling its destroy notificationfunction.
	dataset_location		#  the location identifying the dataset. 
	return:		#  the data previously stored at key_id, or NULL if none. 
void g_dataset_foreach (gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data);	# Calls the given function for each data element which is associatedwith the given location. Note that this function is NOT thread-safe.So unless datalist can be protected from any modifications duringinvocation of this function, it should not be called.
	dataset_location		#  the location identifying the dataset. 
	func		# the function to call for each data element.
	user_data		# user data to pass to the function.
void <span class="c_punctuation">( *GDataForeachFunc<span class="c_punctuation">) (GQuark key_id, gpointer data, gpointer user_data);	# Specifies the type of function passed to g_dataset_foreach() . It iscalled with each GQuark id and associated data element, togetherwith the user_data parameter supplied to g_dataset_foreach() .
	key_id		# the GQuark id to identifying the data element.
	data		# the data element.
	user_data		# user data passed to 
void g_dataset_destroy (gconstpointer dataset_location);	# Destroys the dataset, freeing all memory allocated, and calling anydestroy functions set for data elements.
	dataset_location		#  the location identifying the dataset. 
void g_variant_type_free (GVariantType *type);	# Frees a GVariantType that was allocated withg_variant_type_copy() , g_variant_type_new() or one of the containertype constructor functions.
	type		#  a GVariantType , or NULL . 
GVariantType  *g_variant_type_copy (const GVariantType *type);	# Makes a copy of a GVariantType . It is appropriate to callg_variant_type_free() on the return value. type may not be NULL .
	type		# a GVariantType 
	return:		#  a new GVariantType  
GVariantType  *g_variant_type_new (const gchar *type_string);	#创建对象:GVariantType corresponding to the type string givenby type_string. It is appropriate to call g_variant_type_free() onthe return value.
	type_string		# a valid GVariant type string
	return:		#  a new GVariantType .  
gboolean g_variant_type_string_is_valid (const gchar *type_string);	# Checks if type_string is a valid GVariant type string. This call isequivalent to calling g_variant_type_string_scan() and confirmingthat the following character is a nul terminator.
	type_string		# a pointer to any string
	return:		#  TRUE if type_stringis exactly one valid type string 
gboolean g_variant_type_string_scan (const gchar *string, const gchar *limit, const gchar **endptr);	# Scan for a single complete and valid GVariant type string in string.The memory pointed to by limit (or bytes beyond it) is neveraccessed.
	string		# a pointer to any string
	limit		#  the end of string, or NULL . 
	return:		#  TRUE if a valid type string was found 
gsize g_variant_type_get_string_length (const GVariantType *type);	# Returns the length of the type string corresponding to the giventype. This function must be used to determine the valid extent ofthe memory region returned by g_variant_type_peek_string() .
	type		# a GVariantType 
	return:		#  the length of the corresponding type string 
gchar  *g_variant_type_peek_string (const GVariantType *type);	# Returns the type string corresponding to the given type. Theresult is not nul-terminated; in order to determine its length youmust call g_variant_type_get_string_length() .
	type		# a GVariantType 
	return:		#  the corresponding type string (not nul-terminated) 
gchar  *g_variant_type_dup_string (const GVariantType *type);	# Returns a newly-allocated copy of the type string corresponding totype. The returned string is nul-terminated. It is appropriate tocall g_free() on the return value.
	type		# a GVariantType 
	return:		#  the corresponding type string 
gboolean g_variant_type_is_definite (const GVariantType *type);	# Determines if the given type is definite (ie: not indefinite).
	type		# a GVariantType 
	return:		#  TRUE if typeis definite 
gboolean g_variant_type_is_container (const GVariantType *type);	# Determines if the given type is a container type.
	type		# a GVariantType 
	return:		#  TRUE if typeis a container type 
gboolean g_variant_type_is_basic (const GVariantType *type);	# Determines if the given type is a basic type.
	type		# a GVariantType 
	return:		#  TRUE if typeis a basic type 
gboolean g_variant_type_is_maybe (const GVariantType *type);	# Determines if the given type is a maybe type. This is true if thetype string for type starts with an 'm'.
	type		# a GVariantType 
	return:		#  TRUE if typeis a maybe type 
gboolean g_variant_type_is_array (const GVariantType *type);	# Determines if the given type is an array type. This is true if thetype string for type starts with an 'a'.
	type		# a GVariantType 
	return:		#  TRUE if typeis an array type 
gboolean g_variant_type_is_tuple (const GVariantType *type);	# Determines if the given type is a tuple type. This is true if thetype string for type starts with a '(' or if type isG_VARIANT_TYPE_TUPLE .
	type		# a GVariantType 
	return:		#  TRUE if typeis a tuple type 
gboolean g_variant_type_is_dict_entry (const GVariantType *type);	# Determines if the given type is a dictionary entry type. This istrue if the type string for type starts with a '{'.
	type		# a GVariantType 
	return:		#  TRUE if typeis a dictionary entry type 
gboolean g_variant_type_is_variant (const GVariantType *type);	# Determines if the given type is the variant type.
	type		# a GVariantType 
	return:		#  TRUE if typeis the variant type 
guint g_variant_type_hash (gconstpointer type);	# Hashes type.
	type		#  a GVariantType . 
	return:		#  the hash value 
gboolean g_variant_type_equal (gconstpointer type1, gconstpointer type2);	# Compares type1 and type2 for equality.
	type1		#  a GVariantType . 
	return:		#  TRUE if type1and type2are exactly equal 
gboolean g_variant_type_is_subtype_of (const GVariantType *type, const GVariantType *supertype);	# Checks if type is a subtype of supertype.
	type		# a GVariantType 
	supertype		# a GVariantType 
	return:		#  TRUE if typeis a subtype of supertype 
GVariantType  *g_variant_type_new_maybe (const GVariantType *element);	# Constructs the type corresponding to a maybe instance containingtype type or Nothing.
	element		# a GVariantType 
	return:		#  a new maybe GVariantType  
GVariantType  *g_variant_type_new_array (const GVariantType *element);	# Constructs the type corresponding to an array of elements of thetype type.
	element		# a GVariantType 
	return:		#  a new array GVariantType  
GVariantType  *g_variant_type_new_tuple (const GVariantType * const *items, gint length);	# Constructs a new tuple type, from items.
	items		#  an array of GVariantTypes , one for each item. 
	return:		#  a new tuple GVariantType  
GVariantType  *g_variant_type_new_dict_entry (const GVariantType *key, const GVariantType *value);	# Constructs the type corresponding to a dictionary entry with a keyof type key and a value of type value.
	key		# a basic GVariantType 
	value		# a GVariantType 
	return:		#  a new dictionary entry GVariantType  
GVariantType  *g_variant_type_element (const GVariantType *type);	# Determines the element type of an array or maybe type.
	type		# an array or maybe GVariantType 
	return:		#  the element type of type 
gsize g_variant_type_n_items (const GVariantType *type);	# Determines the number of items contained in a tuple ordictionary entry type.
	type		# a tuple or dictionary entry GVariantType 
	return:		#  the number of items in type 
GVariantType  *g_variant_type_first (const GVariantType *type);	# Determines the first item type of a tuple or dictionary entrytype.
	type		# a tuple or dictionary entry GVariantType 
	return:		#  the first item type of type, or NULL  
GVariantType  *g_variant_type_next (const GVariantType *type);	# Determines the next item type of a tuple or dictionary entrytype.
	type		# a GVariantType from a previous call
	return:		#  the next GVariantType after type, or NULL  
GVariantType  *g_variant_type_key (const GVariantType *type);	# Determines the key type of a dictionary entry type.
	type		# a dictionary entry GVariantType 
	return:		#  the key type of the dictionary entry 
GVariantType  *g_variant_type_value (const GVariantType *type);	# Determines the value type of a dictionary entry type.
	type		# a dictionary entry GVariantType 
	return:		#  the value type of the dictionary entry 
void g_variant_unref (GVariant *value);	# Decreases the reference count of value. When its reference countdrops to 0, the memory used by the variant is freed.
	value		# a GVariant 
GVariant  *g_variant_ref (GVariant *value);	# Increases the reference count of value.
	value		# a GVariant 
	return:		#  the same value 
GVariant  *g_variant_ref_sink (GVariant *value);	# GVariant uses a floating reference count system. All functions withnames starting with g_variant_new_ return floatingreferences.
	value		# a GVariant 
	return:		#  the same value 
gboolean g_variant_is_floating (GVariant *value);	# Checks whether value has a floating reference count.
	value		# a GVariant 
	return:		#  whether valueis floating 
GVariant  *g_variant_take_ref (GVariant *value);	# If value is floating, sink it. Otherwise, do nothing.
	value		# a GVariant 
	return:		#  the same value 
GVariantType  *g_variant_get_type (GVariant *value);	# Determines the type of value.
	value		# a GVariant 
	return:		#  a GVariantType  
gchar  *g_variant_get_type_string (GVariant *value);	# Returns the type string of value. Unlike the result of callingg_variant_type_peek_string() , this string is nul-terminated. Thisstring belongs to GVariant and must not be freed.
	value		# a GVariant 
	return:		#  the type string for the type of value 
gboolean g_variant_is_of_type (GVariant *value, const GVariantType *type);	# Checks if a value has a type matching the provided type.
	value		# a GVariant instance
	type		# a GVariantType 
	return:		#  TRUE if the type of valuematches type 
gboolean g_variant_is_container (GVariant *value);	# Checks if value is a container.
	value		# a GVariant instance
	return:		#  TRUE if valueis a container 
gint g_variant_compare (gconstpointer one, gconstpointer two);	# Compares one and two.
	one		#  a basic-typed GVariant instance. 
	return:		#  negative value if a &lt; b;zero if a = b;positive value if a &gt; b. 
GVariantClass g_variant_classify (GVariant *value);	# Classifies value according to its top-level type.
	value		# a GVariant 
	return:		#  the GVariantClass of value 
gboolean g_variant_check_format_string (GVariant *value, const gchar *format_string, gboolean copy_only);	# Checks if calling g_variant_get() with format_string on value wouldbe valid from a type-compatibility standpoint. format_string isassumed to be a valid format string (from a syntactic standpoint).
	value		# a GVariant 
	format_string		# a valid GVariant format string
	copy_only		# TRUE to ensure the format string makes deep copies
	return:		#  TRUE if format_stringis safe to use 
void g_variant_get (GVariant *value, const gchar *format_string, ...);	# Deconstructs a GVariant instance.
	value		# a GVariant instance
	format_string		# a GVariant format string
	...		# arguments, as per format_string
void g_variant_get_va (GVariant *value, const gchar *format_string, const gchar **endptr, va_list *app);	# This function is intended to be used by libraries based on GVariant that want to provide g_variant_get() -like functionality to theirusers.
	value		# a GVariant 
	format_string		# a string that is prefixed with a format string
	endptr		#  location to store the end pointer,or NULL . 
GVariant  *g_variant_new (const gchar *format_string, ...);	#创建对象:GVariant instance.
	format_string		# a GVariant format string
	...		# arguments, as per format_string
	return:		#  a new floating GVariant instance 
GVariant  *g_variant_new_va (const gchar *format_string, const gchar **endptr, va_list *app);	# This function is intended to be used by libraries based onGVariant that want to provide g_variant_new() -like functionalityto their users.
	format_string		# a string that is prefixed with a format string
	endptr		#  location to store the end pointer,or NULL . 
	return:		#  a new, usually floating, GVariant  
GVariant  *g_variant_new_boolean (gboolean value);	#创建对象:boolean GVariant instance -- either TRUE or FALSE .
	value		# a gboolean value
	return:		#  a floating reference to a new boolean GVariant instance.  
GVariant  *g_variant_new_byte (guchar value);	#创建对象:byte GVariant instance.
	value		# a guint8 value
	return:		#  a floating reference to a new byte GVariant instance.  
GVariant  *g_variant_new_int16 (gint16 value);	#创建对象:int16 GVariant instance.
	value		# a gint16 value
	return:		#  a floating reference to a new int16 GVariant instance.  
GVariant  *g_variant_new_uint16 (guint16 value);	#创建对象:uint16 GVariant instance.
	value		# a guint16 value
	return:		#  a floating reference to a new uint16 GVariant instance.  
GVariant  *g_variant_new_int32 (gint32 value);	#创建对象:int32 GVariant instance.
	value		# a gint32 value
	return:		#  a floating reference to a new int32 GVariant instance.  
GVariant  *g_variant_new_uint32 (guint32 value);	#创建对象:uint32 GVariant instance.
	value		# a guint32 value
	return:		#  a floating reference to a new uint32 GVariant instance.  
GVariant  *g_variant_new_int64 (gint64 value);	#创建对象:int64 GVariant instance.
	value		# a gint64 value
	return:		#  a floating reference to a new int64 GVariant instance.  
GVariant  *g_variant_new_uint64 (guint64 value);	#创建对象:uint64 GVariant instance.
	value		# a guint64 value
	return:		#  a floating reference to a new uint64 GVariant instance.  
GVariant  *g_variant_new_handle (gint32 value);	#创建对象:handle GVariant instance.
	value		# a gint32 value
	return:		#  a floating reference to a new handle GVariant instance.  
GVariant  *g_variant_new_double (gdouble value);	#创建对象:double GVariant instance.
	value		# a gdouble floating point value
	return:		#  a floating reference to a new double GVariant instance.  
GVariant  *g_variant_new_string (const gchar *string);	# Creates a string GVariant with the contents of string.
	string		# a normal UTF-8 nul-terminated string
	return:		#  a floating reference to a new string GVariant instance.  
GVariant  *g_variant_new_take_string (gchar *string);	# Creates a string GVariant with the contents of string.
	string		# a normal UTF-8 nul-terminated string
	return:		#  a floating reference to a new stringGVariant instance.  
GVariant  *g_variant_new_printf (const gchar *format_string, ...);	# Creates a string-type GVariant using printf formatting.
	format_string		# a printf-style format string
	...		# arguments for format_string
	return:		#  a floating reference to a new stringGVariant instance.  
GVariant  *g_variant_new_object_path (const gchar *object_path);	# Creates a D-Bus object path GVariant with the contents of string.string must be a valid D-Bus object path. Useg_variant_is_object_path() if you're not sure.
	object_path		# a normal C nul-terminated string
	return:		#  a floating reference to a new object path GVariant instance.  
gboolean g_variant_is_object_path (const gchar *string);	# Determines if a given string is a valid D-Bus object path. Youshould ensure that a string is a valid D-Bus object path beforepassing it to g_variant_new_object_path() .
	string		# a normal C nul-terminated string
	return:		#  TRUE if stringis a D-Bus object path 
GVariant  *g_variant_new_signature (const gchar *signature);	# Creates a D-Bus type signature GVariant with the contents ofstring. string must be a valid D-Bus type signature. Useg_variant_is_signature() if you're not sure.
	signature		# a normal C nul-terminated string
	return:		#  a floating reference to a new signature GVariant instance.  
gboolean g_variant_is_signature (const gchar *string);	# Determines if a given string is a valid D-Bus type signature. Youshould ensure that a string is a valid D-Bus type signature beforepassing it to g_variant_new_signature() .
	string		# a normal C nul-terminated string
	return:		#  TRUE if stringis a D-Bus type signature 
GVariant  *g_variant_new_variant (GVariant *value);	# Boxes value. The result is a GVariant instance representing avariant containing the original value.
	value		# a GVariant instance
	return:		#  a floating reference to a new variant GVariant instance.  
GVariant  *g_variant_new_strv (const gchar * const *strv, gssize length);	# Constructs an array of strings GVariant from the given array ofstrings.
	strv		#  an array of strings. 
	return:		#  a new floating GVariant instance.  
GVariant  *g_variant_new_objv (const gchar * const *strv, gssize length);	# Constructs an array of object paths GVariant from the given array ofstrings.
	strv		#  an array of strings. 
	return:		#  a new floating GVariant instance.  
GVariant  *g_variant_new_bytestring (const gchar *string);	# Creates an array-of-bytes GVariant with the contents of string.This function is just like g_variant_new_string() except that thestring need not be valid UTF-8.
	string		#  a normalnul-terminated string in no particular encoding. 
	return:		#  a floating reference to a new bytestring GVariant instance.  
GVariant  *g_variant_new_bytestring_array (const gchar * const *strv, gssize length);	# Constructs an array of bytestring GVariant from the given array ofstrings.
	strv		#  an array of strings. 
	return:		#  a new floating GVariant instance.  
gboolean g_variant_get_boolean (GVariant *value);	# Returns the boolean value of value.
	value		# a boolean GVariant instance
	return:		#  TRUE or FALSE  
guchar g_variant_get_byte (GVariant *value);	# Returns the byte value of value.
	value		# a byte GVariant instance
	return:		#  a guchar  
gint16 g_variant_get_int16 (GVariant *value);	# Returns the 16-bit signed integer value of value.
	value		# a int16 GVariant instance
	return:		#  a gint16  
guint16 g_variant_get_uint16 (GVariant *value);	# Returns the 16-bit unsigned integer value of value.
	value		# a uint16 GVariant instance
	return:		#  a guint16  
gint32 g_variant_get_int32 (GVariant *value);	# Returns the 32-bit signed integer value of value.
	value		# a int32 GVariant instance
	return:		#  a gint32  
guint32 g_variant_get_uint32 (GVariant *value);	# Returns the 32-bit unsigned integer value of value.
	value		# a uint32 GVariant instance
	return:		#  a guint32  
gint64 g_variant_get_int64 (GVariant *value);	# Returns the 64-bit signed integer value of value.
	value		# a int64 GVariant instance
	return:		#  a gint64  
guint64 g_variant_get_uint64 (GVariant *value);	# Returns the 64-bit unsigned integer value of value.
	value		# a uint64 GVariant instance
	return:		#  a guint64  
gint32 g_variant_get_handle (GVariant *value);	# Returns the 32-bit signed integer value of value.
	value		# a handle GVariant instance
	return:		#  a gint32  
gdouble g_variant_get_double (GVariant *value);	# Returns the double precision floating point value of value.
	value		# a double GVariant instance
	return:		#  a gdouble  
gchar  *g_variant_get_string (GVariant *value, gsize *length);	# Returns the string value of a GVariant instance with a stringtype. This includes the types G_VARIANT_TYPE_STRING ,G_VARIANT_TYPE_OBJECT_PATH and G_VARIANT_TYPE_SIGNATURE .
	value		# a string GVariant instance
	length		#  a pointer to a gsize ,to store the length. 
	return:		#  the constant string, UTF-8 encoded.  
gchar  *g_variant_dup_string (GVariant *value, gsize *length);	# Similar to g_variant_get_string() except that instead of returninga constant string, the string is duplicated.
	value		# a string GVariant instance
	length		#  a pointer to a gsize , to store the length. 
	return:		#  a newly allocated string, UTF-8 encoded.  
GVariant  *g_variant_get_variant (GVariant *value);	# Unboxes value. The result is the GVariant instance that wascontained in value.
	value		# a variant GVariant instance
	return:		#  the item contained in the variant.  
gchar  **g_variant_get_strv (GVariant *value, gsize *length);	# Gets the contents of an array of strings GVariant . This callmakes a shallow copy; the return result should be released withg_free() , but the individual strings must not be modified.
	value		# an array of strings GVariant 
	length		#  the length of the result, or NULL . 
	return:		#  an array of constant strings.  
gchar  **g_variant_dup_strv (GVariant *value, gsize *length);	# Gets the contents of an array of strings GVariant . This callmakes a deep copy; the return result should be released withg_strfreev() .
	value		# an array of strings GVariant 
	length		#  the length of the result, or NULL . 
	return:		#  an array of strings.  
gchar  **g_variant_get_objv (GVariant *value, gsize *length);	# Gets the contents of an array of object paths GVariant . This callmakes a shallow copy; the return result should be released withg_free() , but the individual strings must not be modified.
	value		# an array of object paths GVariant 
	length		#  the length of the result, or NULL . 
	return:		#  an array of constant strings.  
gchar  **g_variant_dup_objv (GVariant *value, gsize *length);	# Gets the contents of an array of object paths GVariant . This callmakes a deep copy; the return result should be released withg_strfreev() .
	value		# an array of object paths GVariant 
	length		#  the length of the result, or NULL . 
	return:		#  an array of strings.  
gchar  *g_variant_get_bytestring (GVariant *value);	# Returns the string value of a GVariant instance with anarray-of-bytes type. The string has no particular encoding.
	value		# an array-of-bytes GVariant instance
	return:		#  the constant string.  
gchar  *g_variant_dup_bytestring (GVariant *value, gsize *length);	# Similar to g_variant_get_bytestring() except that instead ofreturning a constant string, the string is duplicated.
	value		# an array-of-bytes GVariant instance
	length		#  a pointer to a gsize , to storethe length (not including the nul terminator). 
	return:		#  a newly allocated string.  
gchar  **g_variant_get_bytestring_array (GVariant *value, gsize *length);	# Gets the contents of an array of array of bytes GVariant . This callmakes a shallow copy; the return result should be released withg_free() , but the individual strings must not be modified.
	value		# an array of array of bytes GVariant ('aay')
	length		#  the length of the result, or NULL . 
	return:		#  an array of constant strings.  
gchar  **g_variant_dup_bytestring_array (GVariant *value, gsize *length);	# Gets the contents of an array of array of bytes GVariant . This callmakes a deep copy; the return result should be released withg_strfreev() .
	value		# an array of array of bytes GVariant ('aay')
	length		#  the length of the result, or NULL . 
	return:		#  an array of strings.  
GVariant  *g_variant_new_maybe (const GVariantType *child_type, GVariant *child);	# Depending on if child is NULL , either wraps child inside of amaybe container or creates a Nothing instance for the given type.
	child_type		#  the GVariantType of the child, or NULL . 
	return:		#  a floating reference to a new GVariant maybe instance.  
GVariant  *g_variant_new_array (const GVariantType *child_type, GVariant * const *children, gsize n_children);	#创建对象:GVariant array from children.
	child_type		#  the element type of the new array. 
	return:		#  a floating reference to a new GVariant array.  
GVariant  *g_variant_new_tuple (GVariant * const *children, gsize n_children);	#创建对象:tuple GVariant out of the items in children. Thetype is determined from the types of children. No entry in thechildren array may be NULL .
	children		#  the items to make the tuple out of. 
	return:		#  a floating reference to a new GVariant tuple.  
GVariant  *g_variant_new_dict_entry (GVariant *key, GVariant *value);	#创建对象:dictionary entry GVariant . key and value must benon-NULL . key must be a value of a basic type (ie: not a container).
	key		# a basic GVariant , the key
	value		# a GVariant , the value
	return:		#  a floating reference to a new dictionary entry GVariant .  
GVariant  *g_variant_new_fixed_array (const GVariantType *element_type, gconstpointer elements, gsize n_elements, gsize element_size);	# Constructs a new array GVariant instance, where the elements areof element_type type.
	element_type		# the GVariantType of each element
	elements		# a pointer to the fixed array of contiguous elements
	n_elements		# the number of elements
	element_size		# the size of each element
	return:		#  a floating reference to a new array GVariant instance.  
GVariant  *g_variant_get_maybe (GVariant *value);	# Given a maybe-typed GVariant instance, extract its value. If thevalue is Nothing, then this function returns NULL .
	value		# a maybe-typed value
	return:		#  the contents of value, or NULL .  
gsize g_variant_n_children (GVariant *value);	# Determines the number of children in a container GVariant instance.This includes variants, maybes, arrays, tuples and dictionaryentries. It is an error to call this function on any other type ofGVariant .
	value		# a container GVariant 
	return:		#  the number of children in the container 
GVariant  *g_variant_get_child_value (GVariant *value, gsize index_);	# Reads a child item out of a container GVariant instance. Thisincludes variants, maybes, arrays, tuples and dictionaryentries. It is an error to call this function on any other type ofGVariant .
	value		# a container GVariant 
	index_		# the index of the child to fetch
	return:		#  the child at the specified index.  
void g_variant_get_child (GVariant *value, gsize index_, const gchar *format_string, ...);	# Reads a child item out of a container GVariant instance anddeconstructs it according to format_string. This call isessentially a combination of g_variant_get_child_value() andg_variant_get() .
	value		# a container GVariant 
	index_		# the index of the child to deconstruct
	format_string		# a GVariant format string
	...		# arguments, as per format_string
GVariant  *g_variant_lookup_value (GVariant *dictionary, const gchar *key, const GVariantType *expected_type);	# Looks up a value in a dictionary GVariant .
	dictionary		# a dictionary GVariant 
	key		# the key to lookup in the dictionary
	expected_type		#  a GVariantType , or NULL . 
	return:		#  the value of the dictionary key, or NULL .  
gboolean g_variant_lookup (GVariant *dictionary, const gchar *key, const gchar *format_string, ...);	# Looks up a value in a dictionary GVariant .
	dictionary		# a dictionary GVariant 
	key		# the key to lookup in the dictionary
	format_string		# a GVariant format string
	...		# the arguments to unpack the value into
	return:		#  TRUE if a value was unpacked 
gconstpointer g_variant_get_fixed_array (GVariant *value, gsize *n_elements, gsize element_size);	# Provides access to the serialised data for an array of fixed-sizeditems.
	value		# a GVariant array with fixed-sized elements
	n_elements		#  a pointer to the location to store the number of items. 
	return:		#  a pointer tothe fixed array.  
gsize g_variant_get_size (GVariant *value);	# Determines the number of bytes that would be required to store valuewith g_variant_store() .
	value		# a GVariant instance
	return:		#  the serialised size of value 
gconstpointer g_variant_get_data (GVariant *value);	# Returns a pointer to the serialised form of a GVariant instance.The returned data may not be in fully-normalised form if read from anuntrusted source. The returned data must not be freed; it remainsvalid for as long as value exists.
	value		# a GVariant instance
	return:		#  the serialised form of value, or NULL .  
GBytes  *g_variant_get_data_as_bytes (GVariant *value);	# Returns a pointer to the serialised form of a GVariant instance.The semantics of this function are exactly the same asg_variant_get_data() , except that the returned GBytes holdsa reference to the variant data.
	value		# a GVariant 
	return:		#  A new GBytes representing the variant data.  
void g_variant_store (GVariant *value, gpointer data);	# Stores the serialised form of value at data. data should belarge enough. See g_variant_get_size() .
	value		# the GVariant to store
	data		#  the location to store the serialised data at. 
GVariant  *g_variant_new_from_data (const GVariantType *type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data);	#创建对象:GVariant instance from serialised data.
	type		# a definite GVariantType 
	data		#  the serialised data. 
	notify		#  function to call when datais no longer needed. 
	return:		#  a new floating GVariant of type type.  
GVariant  *g_variant_new_from_bytes (const GVariantType *type, GBytes *bytes, gboolean trusted);	# Constructs a new serialised-mode GVariant instance. This is theinner interface for creation of new serialised values that getscalled from various functions in gvariant.c.
	type		# a GVariantType 
	bytes		# a GBytes 
	trusted		# if the contents of bytesare trusted
	return:		#  a new GVariant with a floating reference.  
GVariant  *g_variant_byteswap (GVariant *value);	# Performs a byteswapping operation on the contents of value. Theresult is that all multi-byte numeric data contained in value isbyteswapped. That includes 16, 32, and 64bit signed and unsignedintegers as well as file handles and double precision floating pointvalues.
	value		# a GVariant 
	return:		#  the byteswapped form of value.  
GVariant  *g_variant_get_normal_form (GVariant *value);	# Gets a GVariant instance that has the same value as value and istrusted to be in normal form.
	value		# a GVariant 
	return:		#  a trusted GVariant .  
gboolean g_variant_is_normal_form (GVariant *value);	# Checks if value is in normal form.
	value		# a GVariant instance
	return:		#  TRUE if valueis in normal form 
guint g_variant_hash (gconstpointer value);	# Generates a hash value for a GVariant instance.
	value		#  a basic GVariant value as a gconstpointer . 
	return:		#  a hash value corresponding to value 
gboolean g_variant_equal (gconstpointer one, gconstpointer two);	# Checks if one and two have the same type and value.
	one		#  a GVariant instance. 
	return:		#  TRUE if oneand twoare equal 
gchar  *g_variant_print (GVariant *value, gboolean type_annotate);	# Pretty-prints value in the format understood by g_variant_parse() .
	value		# a GVariant 
	type_annotate		# TRUE if type information should be included inthe output
	return:		#  a newly-allocated string holding the result.  
GString  *g_variant_print_string (GVariant *value, GString *string, gboolean type_annotate);	# Behaves as g_variant_print() , but operates on a GString .
	value		# a GVariant 
	string		#  a GString , or NULL . 
	return:		#  a GString containing the string 
GVariantIter  *g_variant_iter_copy (GVariantIter *iter);	#创建对象:heap-allocated GVariantIter to iterate over thecontainer that was being iterated over by iter. Iteration begins onthe new iterator from the current position of the old iterator butthe two copies are independent past that point.
	iter		# a GVariantIter 
	return:		#  a new heap-allocated GVariantIter .  
void g_variant_iter_free (GVariantIter *iter);	# Frees a heap-allocated GVariantIter . Only call this function oniterators that were returned by g_variant_iter_new() org_variant_iter_copy() .
	iter		#  a heap-allocated GVariantIter . 
gsize g_variant_iter_init (GVariantIter *iter, GVariant *value);	# Initialises (without allocating) a GVariantIter . iter may becompletely uninitialised prior to this call; its old value isignored.
	iter		# a pointer to a GVariantIter 
	value		# a container GVariant 
	return:		#  the number of items in value 
gsize g_variant_iter_n_children (GVariantIter *iter);	# Queries the number of child items in the container that we areiterating over. This is the total number of items -- not the numberof items remaining.
	iter		# a GVariantIter 
	return:		#  the number of children in the container 
GVariantIter  *g_variant_iter_new (GVariant *value);	# Creates a heap-allocated GVariantIter for iterating over the itemsin value.
	value		# a container GVariant 
	return:		#  a new heap-allocated GVariantIter .  
GVariant  *g_variant_iter_next_value (GVariantIter *iter);	# Gets the next item in the container. If no more items remain thenNULL is returned.
	iter		# a GVariantIter 
	return:		#  a GVariant , or NULL .  
gboolean g_variant_iter_next (GVariantIter *iter, const gchar *format_string, ...);	# Gets the next item in the container and unpacks it into the variableargument list according to format_string, returning TRUE .
	iter		# a GVariantIter 
	format_string		# a GVariant format string
	...		# the arguments to unpack the value into
	return:		#  TRUE if a value was unpacked, or FALSE if there as no value 
gboolean g_variant_iter_loop (GVariantIter *iter, const gchar *format_string, ...);	# Gets the next item in the container and unpacks it into the variableargument list according to format_string, returning TRUE .
	iter		# a GVariantIter 
	format_string		# a GVariant format string
	...		# the arguments to unpack the value into
	return:		#  TRUE if a value was unpacked, or FALSE if there was novalue 
void g_variant_builder_unref (GVariantBuilder *builder);	# Decreases the reference count on builder.
	builder		#  a GVariantBuilder allocated by 
GVariantBuilder  *g_variant_builder_ref (GVariantBuilder *builder);	# Increases the reference count on builder.
	builder		# a GVariantBuilder allocated by 
	return:		#  a new reference to builder.  
GVariantBuilder  *g_variant_builder_new (const GVariantType *type);	# Allocates and initialises a new GVariantBuilder .
	type		# a container type
	return:		#  a GVariantBuilder .  
void g_variant_builder_init (GVariantBuilder *builder, const GVariantType *type);	# Initialises a GVariantBuilder structure.
	builder		# a GVariantBuilder 
	type		# a container type
void g_variant_builder_clear (GVariantBuilder *builder);	# Releases all memory associated with a GVariantBuilder withoutfreeing the GVariantBuilder structure itself.
	builder		# a GVariantBuilder 
void g_variant_builder_add_value (GVariantBuilder *builder, GVariant *value);	# Adds value to builder.
	builder		# a GVariantBuilder 
	value		# a GVariant 
void g_variant_builder_add (GVariantBuilder *builder, const gchar *format_string, ...);	# Adds to a GVariantBuilder .
	builder		# a GVariantBuilder 
	format_string		# a GVariant varargs format string
	...		# arguments, as per format_string
void g_variant_builder_add_parsed (GVariantBuilder *builder, const gchar *format, ...);	# Adds to a GVariantBuilder .
	builder		# a GVariantBuilder 
	format		# a text format GVariant 
	...		# arguments as per format
GVariant  *g_variant_builder_end (GVariantBuilder *builder);	# Ends the builder process and returns the constructed value.
	builder		# a GVariantBuilder 
	return:		#  a new, floating, GVariant .  
void g_variant_builder_open (GVariantBuilder *builder, const GVariantType *type);	# Opens a subcontainer inside the given builder. When done addingitems to the subcontainer, g_variant_builder_close() must be called. typeis the type of the container: so to build a tuple of several values, typemust include the tuple itself.
	builder		# a GVariantBuilder 
	type		# the GVariantType of the container
void g_variant_builder_close (GVariantBuilder *builder);	# Closes the subcontainer inside the given builder that was opened bythe most recent call to g_variant_builder_open() .
	builder		# a GVariantBuilder 
void g_variant_dict_unref (GVariantDict *dict);	# Decreases the reference count on dict.
	dict		#  a heap-allocated GVariantDict . 
GVariantDict  *g_variant_dict_ref (GVariantDict *dict);	# Increases the reference count on dict.
	dict		# a heap-allocated GVariantDict 
	return:		#  a new reference to dict.  
GVariantDict  *g_variant_dict_new (GVariant *from_asv);	# Allocates and initialises a new GVariantDict .
	from_asv		#  the GVariant with which to initialise thedictionary. 
	return:		#  a GVariantDict .  
void g_variant_dict_init (GVariantDict *dict, GVariant *from_asv);	# Initialises a GVariantDict structure.
	dict		# a GVariantDict 
	from_asv		#  the initial value for dict. 
void g_variant_dict_clear (GVariantDict *dict);	# Releases all memory associated with a GVariantDict without freeingthe GVariantDict structure itself.
	dict		# a GVariantDict 
gboolean g_variant_dict_contains (GVariantDict *dict, const gchar *key);	# Checks if key exists in dict.
	dict		# a GVariantDict 
	key		# the key to lookup in the dictionary
	return:		#  TRUE if keyis in dict 
gboolean g_variant_dict_lookup (GVariantDict *dict, const gchar *key, const gchar *format_string, ...);	# Looks up a value in a GVariantDict .
	dict		# a GVariantDict 
	key		# the key to lookup in the dictionary
	format_string		# a GVariant format string
	...		# the arguments to unpack the value into
	return:		#  TRUE if a value was unpacked 
GVariant  *g_variant_dict_lookup_value (GVariantDict *dict, const gchar *key, const GVariantType *expected_type);	# Looks up a value in a GVariantDict .
	dict		# a GVariantDict 
	key		# the key to lookup in the dictionary
	expected_type		#  a GVariantType , or NULL . 
	return:		#  the value of the dictionary key, or NULL .  
void g_variant_dict_insert (GVariantDict *dict, const gchar *key, const gchar *format_string, ...);	# Inserts a value into a GVariantDict .
	dict		# a GVariantDict 
	key		# the key to insert a value for
	format_string		# a GVariant varargs format string
	...		# arguments, as per format_string
void g_variant_dict_insert_value (GVariantDict *dict, const gchar *key, GVariant *value);	# Inserts (or replaces) a key in a GVariantDict .
	dict		# a GVariantDict 
	key		# the key to insert a value for
	value		# the value to insert
gboolean g_variant_dict_remove (GVariantDict *dict, const gchar *key);	# Removes a key and its associated value from a GVariantDict .
	dict		# a GVariantDict 
	key		# the key to remove
	return:		#  TRUE if the key was found and removed 
GVariant  *g_variant_dict_end (GVariantDict *dict);	# Returns the current value of dict as a GVariant of typeG_VARIANT_TYPE_VARDICT , clearing it in the process.
	dict		# a GVariantDict 
	return:		#  a new, floating, GVariant .  
GVariant  *g_variant_parse (const GVariantType *type, const gchar *text, const gchar *limit, const gchar **endptr, GError **error);	# Parses a GVariant from a text representation.
	type		#  a GVariantType , or NULL . 
	return:		#  a non-floating reference to a GVariant , or NULL  
GVariant  *g_variant_new_parsed_va (const gchar *format, va_list *app);	# Parses format and returns the result.
	format		# a text format GVariant 
	app		# a pointer to a va_list 
	return:		#  a new, usually floating, GVariant  
GVariant  *g_variant_new_parsed (const gchar *format, ...);	# Parses format and returns the result.
	format		# a text format GVariant 
	...		# arguments as per format
	return:		#  a new floating GVariant instance 
gchar  *g_variant_parse_error_print_context (GError *error, const gchar *source_str);	# Pretty-prints a message showing the context of a GVariant parseerror within the string for which parsing was attempted.
	error		# a GError from the GVariantParseError domain
	source_str		# the string that was given to the parser
	return:		#  the printed message.  
void g_thread_init (gpointer vtable);	# g_thread_init has been deprecated since version 2.32 and should not be used in newly-written code.
	vtable		# a function table of type GThreadFunctions , that providesthe entry points to the thread system to be used. Since 2.32,this parameter is ignored and should always be NULL 
gboolean g_thread_supported ();	# g_thread_supported is deprecated and should not be used in newly-written code.
	return:		#  TRUE , if the thread system is initialized 
gboolean g_thread_get_initialized (void );	# g_thread_get_initialized is deprecated and should not be used in newly-written code.
	return:		#  TRUE if threads have been initialized. 
GThread  *g_thread_create (GThreadFunc func, gpointer data, gboolean joinable, GError **error);	# g_thread_create has been deprecated since version 2.32 and should not be used in newly-written code.
	func		# a function to execute in the new thread
	data		# an argument to supply to the new thread
	joinable		# should this thread be joinable?
	error		# return location for error, or NULL 
	return:		#  the new GThread on success 
GThread  *g_thread_create_full (GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error);	# g_thread_create_full has been deprecated since version 2.32 and should not be used in newly-written code.
	func		# a function to execute in the new thread.
	data		# an argument to supply to the new thread.
	stack_size		# a stack size for the new thread.
	joinable		# should this thread be joinable?
	bound		# ignored
	priority		# ignored
	error		# return location for error.
	return:		#  the new GThread on success. 
void g_thread_set_priority (GThread *thread, GThreadPriority priority);	# g_thread_set_priority has been deprecated since version 2.32 and should not be used in newly-written code.
	thread		# a GThread .
	priority		# ignored
void g_thread_foreach (GFunc thread_func, gpointer user_data);	# g_thread_foreach has been deprecated since version 2.32 and should not be used in newly-written code.
	thread_func		# function to call for all GThread structures
	user_data		# second argument to thread_func
GMutex  *g_mutex_new ();	# g_mutex_new has been deprecated since version 2.32 and should not be used in newly-written code.
	return:		#  a newly allocated GMutex . Use g_mutex_free() to free 
void g_mutex_free (GMutex *mutex);	# g_mutex_free has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GMutex 
GCond *g_cond_new ();	# g_cond_new has been deprecated since version 2.32 and should not be used in newly-written code.
	return:		#  a newly allocated GCond . Free with g_cond_free()  
void g_cond_free (GCond *cond);	# g_cond_free has been deprecated since version 2.32 and should not be used in newly-written code.
	cond		# a GCond 
GPrivate  *g_private_new (GDestroyNotify notify);	# g_private_new has been deprecated since version 2.32 and should not be used in newly-written code.
	notify		# a GDestroyNotify 
	return:		#  a newly allocated GPrivate (which can never be destroyed) 
void g_static_mutex_init (GStaticMutex *mutex);	# g_static_mutex_init has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticMutex to be initialized.
void g_static_mutex_lock (GStaticMutex *mutex);	# g_static_mutex_lock has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticMutex .
gboolean g_static_mutex_trylock (GStaticMutex *mutex);	# g_static_mutex_trylock has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticMutex .
	return:		#  TRUE , if the GStaticMutex could be locked. 
void g_static_mutex_unlock (GStaticMutex *mutex);	# g_static_mutex_unlock has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticMutex .
GMutex  *g_static_mutex_get_mutex (GStaticMutex *mutex);	# g_static_mutex_get_mutex has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticMutex .
	return:		#  the GMutex corresponding to mutex. 
void g_static_mutex_free (GStaticMutex *mutex);	# g_static_mutex_free has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticMutex to be freed.
void g_static_rec_mutex_init (GStaticRecMutex *mutex);	# g_static_rec_mutex_init has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to be initialized.
void g_static_rec_mutex_lock (GStaticRecMutex *mutex);	# g_static_rec_mutex_lock has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to lock.
gboolean g_static_rec_mutex_trylock (GStaticRecMutex *mutex);	# g_static_rec_mutex_trylock has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to lock.
	return:		#  TRUE , if mutexcould be locked. 
void g_static_rec_mutex_unlock (GStaticRecMutex *mutex);	# g_static_rec_mutex_unlock has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to unlock.
void g_static_rec_mutex_lock_full (GStaticRecMutex *mutex, guint depth);	# g_static_rec_mutex_lock_full has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to lock.
	depth		# number of times this mutex has to be unlocked to becompletely unlocked.
guint g_static_rec_mutex_unlock_full (GStaticRecMutex *mutex);	# g_static_rec_mutex_unlock_full has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to completely unlock.
	return:		#  number of times mutexhas been locked by the currentthread. 
void g_static_rec_mutex_free (GStaticRecMutex *mutex);	# g_static_rec_mutex_free has been deprecated since version 2.32 and should not be used in newly-written code.
	mutex		# a GStaticRecMutex to be freed.
void g_static_rw_lock_init (GStaticRWLock *lock);	# g_static_rw_lock_init has been deprecated since version 2.32 and should not be used in newly-written code.
	lock		# a GStaticRWLock to be initialized.
void g_static_rw_lock_reader_lock (GStaticRWLock *lock);	# g_static_rw_lock_reader_lock has been deprecated since version 2.32 and should not be used in newly-written code.
	lock		# a GStaticRWLock to lock for reading.
gboolean g_static_rw_lock_reader_trylock (GStaticRWLock *lock);	# g_static_rw_lock_reader_trylock is deprecated and should not be used in newly-written code.
	lock		# a GStaticRWLock to lock for reading
	return:		#  TRUE , if lockcould be locked for reading 
void g_static_rw_lock_reader_unlock (GStaticRWLock *lock);	# g_static_rw_lock_reader_unlock is deprecated and should not be used in newly-written code.
	lock		# a GStaticRWLock to unlock after reading
void g_static_rw_lock_writer_lock (GStaticRWLock *lock);	# g_static_rw_lock_writer_lock is deprecated and should not be used in newly-written code.
	lock		# a GStaticRWLock to lock for writing
gboolean g_static_rw_lock_writer_trylock (GStaticRWLock *lock);	# g_static_rw_lock_writer_trylock is deprecated and should not be used in newly-written code.
	lock		# a GStaticRWLock to lock for writing
	return:		#  TRUE , if lockcould be locked for writing 
void g_static_rw_lock_writer_unlock (GStaticRWLock *lock);	# g_static_rw_lock_writer_unlock is deprecated and should not be used in newly-written code.
	lock		# a GStaticRWLock to unlock after writing.
void g_static_rw_lock_free (GStaticRWLock *lock);	# g_static_rw_lock_free has been deprecated since version 2.32 and should not be used in newly-written code.
	lock		# a GStaticRWLock to be freed.
void g_static_private_init (GStaticPrivate *private_key);	# g_static_private_init is deprecated and should not be used in newly-written code.
	private_key		# a GStaticPrivate to be initialized
gpointer g_static_private_get (GStaticPrivate *private_key);	# g_static_private_get is deprecated and should not be used in newly-written code.
	private_key		# a GStaticPrivate 
	return:		#  the corresponding pointer 
void g_static_private_set (GStaticPrivate *private_key, gpointer data, GDestroyNotify notify);	# g_static_private_set is deprecated and should not be used in newly-written code.
	private_key		# a GStaticPrivate 
	data		# the new pointer
	notify		# a function to be called with the pointer whenever thecurrent thread ends or sets this pointer again
void g_static_private_free (GStaticPrivate *private_key);	# g_static_private_free is deprecated and should not be used in newly-written code.
	private_key		# a GStaticPrivate to be freed
GCache  *g_cache_new (GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func);	# g_cache_new has been deprecated since version 2.32 and should not be used in newly-written code.
	value_new_func		# a function to create a new object given a key.This is called by 
	value_destroy_func		# a function to destroy an object. It is calledby 
	key_dup_func		# a function to copy a key. It is called by
	key_destroy_func		# a function to destroy a key. It is called by
	hash_key_func		# a function to create a hash value from a key
	hash_value_func		# a function to create a hash value from a value
	key_equal_func		# a function to compare two keys. It should returnTRUE if the two keys are equivalent
	return:		#  a new GCache  
gpointer g_cache_insert (GCache *cache, gpointer key);	# g_cache_insert has been deprecated since version 2.32 and should not be used in newly-written code.
	cache		# a GCache 
	key		# a key describing a GCache object
	return:		#  a pointer to a GCache value 
void g_cache_remove (GCache *cache, gconstpointer value);	# g_cache_remove has been deprecated since version 2.32 and should not be used in newly-written code.
	cache		# a GCache 
	value		# the value to remove
void g_cache_destroy (GCache *cache);	# g_cache_destroy has been deprecated since version 2.32 and should not be used in newly-written code.
	cache		# a GCache 
void g_cache_key_foreach (GCache *cache, GHFunc func, gpointer user_data);	# g_cache_key_foreach has been deprecated since version 2.32 and should not be used in newly-written code.
	cache		# a GCache 
	func		# the function to call with each GCache key
	user_data		# user data to pass to the function
void g_cache_value_foreach (GCache *cache, GHFunc func, gpointer user_data);	# g_cache_value_foreach has been deprecated since version 2.10 and should not be used in newly-written code.
	cache		# a GCache 
	func		# the function to call with each GCache value
	user_data		# user data to pass to the function
void <span class="c_punctuation">( *GCacheDestroyFunc<span class="c_punctuation">) (gpointer value);	# GCacheDestroyFunc is deprecated and should not be used in newly-written code.
	value		# the GCache value to destroy
gpointer <span class="c_punctuation">( *GCacheDupFunc<span class="c_punctuation">) (gpointer value);	# GCacheDupFunc is deprecated and should not be used in newly-written code.
	value		# the GCache key to destroy (__not__ aGCache value as it seems)
	return:		#  a copy of the GCache key 
gpointer <span class="c_punctuation">( *GCacheNewFunc<span class="c_punctuation">) (gpointer key);	# GCacheNewFunc is deprecated and should not be used in newly-written code.
	key		# a GCache key
	return:		#  a new GCache value corresponding to the key. 
GRelation  *g_relation_new (gint fields);	# g_relation_new has been deprecated since version 2.26 and should not be used in newly-written code.
	fields		# the number of fields.
	return:		#  a new GRelation . 
void g_relation_index (GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func);	# g_relation_index has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
	field		# the field to index, counting from 0.
	hash_func		# a function to produce a hash value from the field data.
	key_equal_func		# a function to compare two values of the given field.
void g_relation_insert (GRelation *relation, ...);	# g_relation_insert has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
	...		# the fields of the record to add. These must match thenumber of fields in the GRelation , and of type gpointer or gconstpointer .
gboolean g_relation_exists (GRelation *relation, ...);	# g_relation_exists has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
	...		# the fields of the record to compare. The number must matchthe number of fields in the GRelation .
	return:		#  TRUE if a record matches. 
gint g_relation_count (GRelation *relation, gconstpointer key, gint field);	# g_relation_count has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
	key		# the value to compare with.
	field		# the field of each record to match.
	return:		#  the number of matches. 
GTuples  *g_relation_select (GRelation *relation, gconstpointer key, gint field);	# g_relation_select has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
	key		# the value to compare with.
	field		# the field of each record to match.
	return:		#  the records (tuples) that matched. 
gint g_relation_delete (GRelation *relation, gconstpointer key, gint field);	# g_relation_delete has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
	key		# the value to compare with.
	field		# the field of each record to match.
	return:		#  the number of records deleted. 
void g_relation_destroy (GRelation *relation);	# g_relation_destroy has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
void g_relation_print (GRelation *relation);	# g_relation_print has been deprecated since version 2.26 and should not be used in newly-written code.
	relation		# a GRelation .
void g_tuples_destroy (GTuples *tuples);	# g_tuples_destroy has been deprecated since version 2.26 and should not be used in newly-written code.
	tuples		# the tuple data to free.
gpointer g_tuples_index (GTuples *tuples, gint index_, gint field);	# g_tuples_index has been deprecated since version 2.26 and should not be used in newly-written code.
	tuples		# the tuple data, returned by 
	index_		# the index of the record.
	field		# the field to return.
	return:		#  the field of the record. 
GCompletion  *g_completion_new (GCompletionFunc func);	# g_completion_new is deprecated and should not be used in newly-written code.
	func		# the function to be called to return the string representingan item in the GCompletion , or NULL if strings are going tobe used as the GCompletion items.
	return:		#  the new GCompletion . 
gchar  *<span class="c_punctuation">( *GCompletionFunc<span class="c_punctuation">) (gpointer Param1);	# Specifies the type of the function passed to g_completion_new() . Itshould return the string corresponding to the given target item.This is used when you use data structures as GCompletion items.
	Param1		# the completion item.
	return:		#  the string corresponding to the item. 
void g_completion_add_items (GCompletion *cmp, GList *items);	# g_completion_add_items has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# the GCompletion .
	items		#  the list of items to add. 
void g_completion_remove_items (GCompletion *cmp, GList *items);	# g_completion_remove_items has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# the GCompletion .
	items		#  the items to remove. 
void g_completion_clear_items (GCompletion *cmp);	# g_completion_clear_items has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# the GCompletion .
GList  *g_completion_complete (GCompletion *cmp, const gchar *prefix, gchar **new_prefix);	# g_completion_complete has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# the GCompletion .
	prefix		# the prefix string, typically typed by the user, which iscompared with each of the items.
	new_prefix		# if non-NULL , returns the longest prefix which iscommon to all items that matched prefix, or NULL ifno items matched prefix. This string should be freedwhen no longer needed.
	return:		#  the list of items whose strings begin withprefix. This should not be changed.  
GList  *g_completion_complete_utf8 (GCompletion *cmp, const gchar *prefix, gchar **new_prefix);	# g_completion_complete_utf8 has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# the GCompletion 
	prefix		# the prefix string, typically used by the user, which is comparedwith each of the items
	new_prefix		# if non-NULL , returns the longest prefix which is common to allitems that matched prefix, or NULL if no items matched prefix.This string should be freed when no longer needed.
	return:		#  the list of items whose strings begin with prefix. This shouldnot be changed.  
void g_completion_set_compare (GCompletion *cmp, GCompletionStrncmpFunc strncmp_func);	# g_completion_set_compare has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# a GCompletion .
	strncmp_func		# the string comparison function.
gint <span class="c_punctuation">( *GCompletionStrncmpFunc<span class="c_punctuation">) (const gchar *s1, const gchar *s2, gsize n);	# Specifies the type of the function passed tog_completion_set_compare() . This is used when you use strings asGCompletion items.
	s1		# string to compare with s2.
	s2		# string to compare with s1.
	n		# maximal number of bytes to compare.
	return:		#  an integer less than, equal to, or greater than zero ifthe first nbytes of s1is found, respectively, to beless than, to match, or to be greater than the first nbytes of s2. 
void g_completion_free (GCompletion *cmp);	# g_completion_free has been deprecated since version 2.26 and should not be used in newly-written code.
	cmp		# the GCompletion .

#.# gobject

void g_type_init (void );	# g_type_init has been deprecated since version 2.36 and should not be used in newly-written code.
void g_type_init_with_debug_flags (GTypeDebugFlags debug_flags);	# g_type_init_with_debug_flags has been deprecated since version 2.36 and should not be used in newly-written code.
	debug_flags		# bitwise combination of GTypeDebugFlags values fordebugging purposes
gchar  *g_type_name (GType type);	# Get the unique name that is assigned to a type ID. Note that thisfunction (like all other GType API) cannot cope with invalid typeIDs. G_TYPE_INVALID may be passed to this function, as may be anyother validly registered type ID, but randomized type IDs shouldnot be passed in and will most likely lead to a crash.
	type		# type to return name for
	return:		#  static type name or NULL  
GQuark g_type_qname (GType type);	# Get the corresponding quark of the type IDs name.
	type		# type to return quark of type name for
	return:		#  the type names quark or 0 
GType g_type_from_name (const gchar *name);	# Lookup the type ID from a given type name, returning 0 if no typehas been registered under this name (this is the preferred methodto find out by name whether a specific type has been registeredyet).
	name		# type name to lookup
	return:		#  corresponding type ID or 0 
GType g_type_parent (GType type);	# Return the direct parent type of the passed in type. If the passedin type has no parent, i.e. is a fundamental type, 0 is returned.
	type		# the derived type
	return:		#  the parent type 
guint g_type_depth (GType type);	# Returns the length of the ancestry of the passed in type. Thisincludes the type itself, so that e.g. a fundamental type has depth 1.
	type		# a GType 
	return:		#  the depth of type 
GType g_type_next_base (GType leaf_type, GType root_type);	# Given a leaf_type and a root_type which is contained in itsanchestry, return the type that root_type is the immediate parentof. In other words, this function determines the type that isderived directly from root_type which is also a base class ofleaf_type. Given a root type and a leaf type, this function canbe used to determine the types and order in which the leaf type isdescended from the root type.
	leaf_type		# descendant of root_typeand the type to be returned
	root_type		# immediate parent of the returned type
	return:		#  immediate child of root_typeand anchestor of leaf_type 
gboolean g_type_is_a (GType type, GType is_a_type);	# If is_a_type is a derivable type, check whether type is adescendant of is_a_type. If is_a_type is an interface, checkwhether type conforms to it.
	type		# type to check anchestry for
	is_a_type		# possible anchestor of typeor interface that typecould conform to
	return:		#  TRUE if typeis a is_a_type 
gpointer g_type_class_ref (GType type);	# Increments the reference count of the class structure belonging totype. This function will demand-create the class if it doesn'texist already.
	type		# type ID of a classed type
	return:		#  the GTypeClass structure for the given type ID.  
gpointer g_type_class_peek (GType type);	# This function is essentially the same as g_type_class_ref() ,except that the classes reference count isn't incremented.As a consequence, this function may return NULL if the classof the type passed in does not currently exist (hasn't beenreferenced before).
	type		# type ID of a classed type
	return:		#  the GTypeClass structure for the given type ID or NULL if the class does notcurrently exist.  
gpointer g_type_class_peek_static (GType type);	# A more efficient version of g_type_class_peek() which works only forstatic types.
	type		# type ID of a classed type
	return:		#  the GTypeClass structure for the given type ID or NULL if the class does notcurrently exist or is dynamically loaded.  
void g_type_class_unref (gpointer g_class);	# Decrements the reference count of the class structure being passed in.Once the last reference count of a class has been released, classesmay be finalized by the type system, so further dereferencing of aclass pointer after g_type_class_unref() are invalid.
	g_class		#  a GTypeClass structure to unref. 
gpointer g_type_class_peek_parent (gpointer g_class);	# This is a convenience function often needed in class initializers.It returns the class structure of the immediate parent type of theclass passed in. Since derived classes hold a reference count ontheir parent classes as long as they are instantiated, the returnedclass will always exist.
	g_class		#  the GTypeClass structure toretrieve the parent class for. 
	return:		#  the parent classof g_class.  
void g_type_class_add_private (gpointer g_class, gsize private_size);	# Registers a private structure for an instantiatable type.
	g_class		#  class structure for an instantiatabletype. 
void g_type_add_class_private (GType class_type, gsize private_size);	# Registers a private class structure for a classed type;when the class is allocated, the private structures forthe class and all of its parent types are allocatedsequentially in the same memory block as the publicstructures, and are zero-filled.
	class_type		# GType of an classed type
	private_size		# size of private structure
gpointer g_type_interface_peek (gpointer instance_class, GType iface_type);	# Returns the GTypeInterface structure of an interface to which thepassed in class conforms.
	instance_class		#  a GTypeClass structure. 
	return:		#  the GTypeInterface structure of iface_typeif implemented by instance_class, NULL otherwise.  
gpointer g_type_interface_peek_parent (gpointer g_iface);	# Returns the corresponding GTypeInterface structure of the parent typeof the instance type to which g_iface belongs. This is useful whenderiving the implementation of an interface from the parent type andthen possibly overriding some methods.
	g_iface		#  a GTypeInterface structure. 
	return:		#  thecorresponding GTypeInterface structure of the parent type of theinstance type to which g_ifacebelongs, or NULL if the parenttype doesn't conform to the interface.  
gpointer g_type_default_interface_ref (GType g_type);	# Increments the reference count for the interface type g_type,and returns the default interface vtable for the type.
	g_type		# an interface type
	return:		#  the defaultvtable for the interface; call g_type_default_interface_unref() when you are done using the interface.  
gpointer g_type_default_interface_peek (GType g_type);	# If the interface type g_type is currently in use, returns itsdefault interface vtable.
	g_type		# an interface type
	return:		#  the defaultvtable for the interface, or NULL if the type is not currentlyin use.  
void g_type_default_interface_unref (gpointer g_iface);	# Decrements the reference count for the type corresponding to theinterface default vtable g_iface. If the type is dynamic, thenwhen no one is using the interface and all references havebeen released, the finalize function for the interface's defaultvtable (the class_finalize member of GTypeInfo ) will be called.
	g_iface		#  the default vtablestructure for a interface, as returned by 
GType  *g_type_children (GType type, guint *n_children);	# Return a newly allocated and 0-terminated array of type IDs, listingthe child types of type.
	type		# the parent type
	n_children		#  location to store the length ofthe returned array, or NULL . 
	return:		#  Newly allocatedand 0-terminated array of child types, free with g_free() .  
GType  *g_type_interfaces (GType type, guint *n_interfaces);	# Return a newly allocated and 0-terminated array of type IDs, listingthe interface types that type conforms to.
	type		# the type to list interface types for
	n_interfaces		#  location to store the length ofthe returned array, or NULL . 
	return:		#  Newly allocatedand 0-terminated array of interface types, free with g_free() .  
GType  *g_type_interface_prerequisites (GType interface_type, guint *n_prerequisites);	# Returns the prerequisites of an interfaces type.
	interface_type		# an interface type
	n_prerequisites		#  location to return the numberof prerequisites, or NULL . 
	return:		#  anewly-allocated zero-terminated array of GType containingthe prerequisites of interface_type.  
void g_type_set_qdata (GType type, GQuark quark, gpointer data);	# Attaches arbitrary data to a type.
	type		# a GType 
	quark		# a GQuark id to identify the data
	data		# the data
gpointer g_type_get_qdata (GType type, GQuark quark);	# Obtains data which has previously been attached to typewith g_type_set_qdata() .
	type		# a GType 
	quark		# a GQuark id to identify the data
	return:		#  the data, or NULL if no data was found.  
void g_type_query (GType type, GTypeQuery *query);	# Queries the type system for information about a specific type.This function will fill in a user-provided structure to holdtype-specific information. If an invalid GType is passed in, thetype member of the GTypeQuery is 0. All members filled into theGTypeQuery structure should be considered constant and have to beleft untouched.
	type		# GType of a static, classed type
	query		#  a user provided structure that isfilled in with constant values upon success. 
void <span class="c_punctuation">( *GBaseInitFunc<span class="c_punctuation">) (gpointer g_class);	# A callback function used by the type system to do base initializationof the class structures of derived types. It is called as part of theinitialization process of all derived classes and should reallocateor reset all dynamic class members copied over from the parent class.For example, class members (such as strings) that are not sufficientlyhandled by a plain memory copy of the parent class into the derived classhave to be altered. See GClassInitFunc() for a discussion of the classinitialization process.
	g_class		#  The GTypeClass structure to initialize. 
void <span class="c_punctuation">( *GBaseFinalizeFunc<span class="c_punctuation">) (gpointer g_class);	# A callback function used by the type system to finalize those portionsof a derived types class structure that were setup from the correspondingGBaseInitFunc() function. Class finalization basically works the inverseway in which class initialization is performed.See GClassInitFunc() for a discussion of the class initialization process.
	g_class		#  The GTypeClass structure to finalize. 
void <span class="c_punctuation">( *GClassInitFunc<span class="c_punctuation">) (gpointer g_class, gpointer class_data);	# A callback function used by the type system to initialize the classof a specific type. This function should initialize all static classmembers.
	g_class		#  The GTypeClass structure to initialize. 
void <span class="c_punctuation">( *GClassFinalizeFunc<span class="c_punctuation">) (gpointer g_class, gpointer class_data);	# A callback function used by the type system to finalize a class.This function is rarely needed, as dynamically allocated class resourcesshould be handled by GBaseInitFunc() and GBaseFinalizeFunc() .Also, specification of a GClassFinalizeFunc() in the GTypeInfo structure of a static type is invalid, because classes of static typeswill never be finalized (they are artificially kept alive when theirreference count drops to zero).
	g_class		#  The GTypeClass structure to finalize. 
void <span class="c_punctuation">( *GInstanceInitFunc<span class="c_punctuation">) (GTypeInstance *instance, gpointer g_class);	# A callback function used by the type system to initialize a newinstance of a type. This function initializes all instance members andallocates any resources required by it.
	instance		# The instance to initialize
	g_class		#  The class of the type the instance iscreated for. 
void <span class="c_punctuation">( *GInterfaceInitFunc<span class="c_punctuation">) (gpointer g_iface, gpointer iface_data);	# A callback function used by the type system to initialize a newinterface. This function should initialize all internal data andallocate any resources required by the interface.
	g_iface		#  The interface structure to initialize. 
void <span class="c_punctuation">( *GInterfaceFinalizeFunc<span class="c_punctuation">) (gpointer g_iface, gpointer iface_data);	# A callback function used by the type system to finalize an interface.This function should destroy any internal data and release any resourcesallocated by the corresponding GInterfaceInitFunc() function.
	g_iface		#  The interface structure to finalize. 
gboolean <span class="c_punctuation">( *GTypeClassCacheFunc<span class="c_punctuation">) (gpointer cache_data, GTypeClass *g_class);	# A callback function which is called when the reference count of a class drops to zero. It may use g_type_class_ref() to prevent the class frombeing freed. You should not call g_type_class_unref() from a GTypeClassCacheFunc function to prevent infinite recursion, use g_type_class_unref_uncached() instead.
	cache_data		# data that was given to the 
	g_class		#  The GTypeClass structure which isunreferenced. 
	return:		#  TRUE to stop further GTypeClassCacheFuncs from beingcalled, FALSE to continue 
GType g_type_register_static (GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags);	# Registers type_name as the name of a new static type derived fromparent_type. The type system uses the information contained in theGTypeInfo structure pointed to by info to manage the type and itsinstances (if not abstract). The value of flags determines the nature(e.g. abstract or not) of the type.
	parent_type		# type from which this type will be derived
	type_name		# 0-terminated string used as the name of the new type
	info		# GTypeInfo structure for this type
	flags		# bitwise combination of GTypeFlags values
	return:		#  the new type identifier 
GType g_type_register_static_simple (GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags);	# Registers type_name as the name of a new static type derived fromparent_type. The value of flags determines the nature (e.g.abstract or not) of the type. It works by filling a GTypeInfo struct and calling g_type_register_static() .
	parent_type		# type from which this type will be derived
	type_name		# 0-terminated string used as the name of the new type
	class_size		# size of the class structure (see GTypeInfo )
	class_init		# location of the class initialization function (see GTypeInfo )
	instance_size		# size of the instance structure (see GTypeInfo )
	instance_init		# location of the instance initialization function (see GTypeInfo )
	flags		# bitwise combination of GTypeFlags values
	return:		#  the new type identifier 
GType g_type_register_dynamic (GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags);	# Registers type_name as the name of a new dynamic type derived fromparent_type. The type system uses the information contained in theGTypePlugin structure pointed to by plugin to manage the type and itsinstances (if not abstract). The value of flags determines the nature(e.g. abstract or not) of the type.
	parent_type		# type from which this type will be derived
	type_name		# 0-terminated string used as the name of the new type
	plugin		# GTypePlugin structure to retrieve the GTypeInfo from
	flags		# bitwise combination of GTypeFlags values
	return:		#  the new type identifier or G_TYPE_INVALID if registration failed 
GType g_type_register_fundamental (GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags);	# Registers type_id as the predefined identifier and type_name as thename of a fundamental type. If type_id is already registered, or atype named type_name is already registered, the behaviour is undefined.The type system uses the information contained in the GTypeInfo structurepointed to by info and the GTypeFundamentalInfo structure pointed to byfinfo to manage the type and its instances. The value of flags determinesadditional characteristics of the fundamental type.
	type_id		# a predefined type identifier
	type_name		# 0-terminated string used as the name of the new type
	info		# GTypeInfo structure for this type
	finfo		# GTypeFundamentalInfo structure for this type
	flags		# bitwise combination of GTypeFlags values
	return:		#  the predefined type identifier 
void g_type_add_interface_static (GType instance_type, GType interface_type, const GInterfaceInfo *info);	# Adds the static interface_type to instantiable_type.The information contained in the GInterfaceInfo structurepointed to by info is used to manage the relationship.
	instance_type		# GType value of an instantiable type
	interface_type		# GType value of an interface type
	info		# GInterfaceInfo structure for this(instance_type, interface_type) combination
void g_type_add_interface_dynamic (GType instance_type, GType interface_type, GTypePlugin *plugin);	# Adds the dynamic interface_type to instantiable_type. The informationcontained in the GTypePlugin structure pointed to by pluginis used to manage the relationship.
	instance_type		# GType value of an instantiable type
	interface_type		# GType value of an interface type
	plugin		# GTypePlugin structure to retrieve the GInterfaceInfo from
void g_type_interface_add_prerequisite (GType interface_type, GType prerequisite_type);	# Adds prerequisite_type to the list of prerequisites of interface_type.This means that any type implementing interface_type must also implementprerequisite_type. Prerequisites can be thought of as an alternative tointerface derivation (which GType doesn't support). An interface can haveat most one instantiatable prerequisite type.
	interface_type		# GType value of an interface type
	prerequisite_type		# GType value of an interface or instantiatable type
GTypePlugin  *g_type_get_plugin (GType type);	# Returns the GTypePlugin structure for type.
	type		# GType to retrieve the plugin for
	return:		#  the corresponding pluginif typeis a dynamic type, NULL otherwise.  
GTypePlugin  *g_type_interface_get_plugin (GType instance_type, GType interface_type);	# Returns the GTypePlugin structure for the dynamic interfaceinterface_type which has been added to instance_type, or NULL if interface_type has not been added to instance_type or doesnot have a GTypePlugin structure. See g_type_add_interface_dynamic() .
	instance_type		# GType of an instantiatable type
	interface_type		# GType of an interface type
	return:		#  the GTypePlugin for the dynamicinterface interface_typeof instance_type.  
GType g_type_fundamental_next (void );	# Returns the next free fundamental type id which can be used toregister a new fundamental type with g_type_register_fundamental() .The returned type ID represents the highest currently registeredfundamental type identifier.
	return:		#  the next available fundamental type ID to be registered,or 0 if the type system ran out of fundamental type IDs 
GType g_type_fundamental (GType type_id);	# Internal function, used to extract the fundamental type ID portion.Use G_TYPE_FUNDAMENTAL() instead.
	type_id		# valid type ID
	return:		#  fundamental type ID 
GTypeInstance  *g_type_create_instance (GType type);	# Creates and initializes an instance of type if type is valid andcan be instantiated. The type system only performs basic allocationand structure setups for instances: actual instance creation shouldhappen through functions supplied by the type's fundamental typeimplementation. So use of g_type_create_instance() is reserved forimplementators of fundamental types only. E.g. instances of theGObject hierarchy should be created via g_object_new() and neverdirectly through g_type_create_instance() which doesn't handle thingslike singleton objects or object construction.
	type		# an instantiatable type to create an instance for
	return:		#  an allocated and initialized instance, subject to furthertreatment by the fundamental type implementation 
void g_type_free_instance (GTypeInstance *instance);	# Frees an instance of a type, returning it to the instance pool forthe type, if there is one.
	instance		# an instance of a type
void g_type_add_class_cache_func (gpointer cache_data, GTypeClassCacheFunc cache_func);	# Adds a GTypeClassCacheFunc to be called before the reference count of aclass goes from one to zero. This can be used to prevent premature classdestruction. All installed GTypeClassCacheFunc functions will be chaineduntil one of them returns TRUE . The functions have to check the class idpassed in to figure whether they actually want to cache the class of thistype, since all classes are routed through the same GTypeClassCacheFunc chain.
	cache_data		# data to be passed to cache_func
	cache_func		# a GTypeClassCacheFunc 
void g_type_remove_class_cache_func (gpointer cache_data, GTypeClassCacheFunc cache_func);	# Removes a previously installed GTypeClassCacheFunc . The cachemaintained by cache_func has to be empty when callingg_type_remove_class_cache_func() to avoid leaks.
	cache_data		# data that was given when adding cache_func
	cache_func		# a GTypeClassCacheFunc 
void g_type_class_unref_uncached (gpointer g_class);	# A variant of g_type_class_unref() for use in GTypeClassCacheFunc implementations. It unreferences a class without consulting the chainof GTypeClassCacheFuncs , avoiding the recursion which would occurotherwise.
	g_class		#  a GTypeClass structure to unref. 
void g_type_add_interface_check (gpointer check_data, GTypeInterfaceCheckFunc check_func);	# Adds a function to be called after an interface vtable isinitialized for any class (i.e. after the interface_initmember of GInterfaceInfo has been called).
	check_data		# data to pass to check_func
	check_func		# function to be called after each interfaceis initialized
void g_type_remove_interface_check (gpointer check_data, GTypeInterfaceCheckFunc check_func);	# Removes an interface check function added withg_type_add_interface_check() .
	check_data		# callback data passed to 
	check_func		# callback function passed to 
void <span class="c_punctuation">( *GTypeInterfaceCheckFunc<span class="c_punctuation">) (gpointer check_data, gpointer g_iface);	# A callback called after an interface vtable is initialized.See g_type_add_interface_check() .
	check_data		# data passed to 
	g_iface		#  the interface that has beeninitialized. 
GTypeValueTable  *g_type_value_table_peek (GType type);	# Returns the location of the GTypeValueTable associated with type.
	type		# a GType 
	return:		#  location of the GTypeValueTable associated with typeorNULL if there is no GTypeValueTable associated with type 
void g_type_ensure (GType type);	# Ensures that the indicated type has been registered with thetype system, and its _class_init() method has been run.
	type		# a GType 
guint g_type_get_type_registration_serial (void );	# Returns an opaque serial number that represents the state of the setof registered types. Any time a type is registered this serial changes,which means you can cache information based on type lookups (such asg_type_from_name() ) and know if the cache is still valid at a latertime by comparing the current serial with the one at the type lookup.
	return:		#  An unsigned int, representing the state of type registrations 
int g_type_get_instance_count (GType type);	# Returns the number of instances allocated of the particular type;this is only available if GLib is built with debugging support andthe instance_count debug flag is set (by setting the GOBJECT_DEBUGvariable to include instance-count).
	type		# a GType 
	return:		#  the number of instances allocated of the given type;if instance counts are not available, returns 0. 
void <span class="c_punctuation">( *GTypePluginUse<span class="c_punctuation">) (GTypePlugin *plugin);	# The type of the use_plugin function of GTypePluginClass , which gets calledto increase the use count of plugin.
	plugin		# the GTypePlugin whose use count should be increased
void <span class="c_punctuation">( *GTypePluginUnuse<span class="c_punctuation">) (GTypePlugin *plugin);	# The type of the unuse_plugin function of GTypePluginClass .
	plugin		# the GTypePlugin whose use count should be decreased
void <span class="c_punctuation">( *GTypePluginCompleteTypeInfo<span class="c_punctuation">) (GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table);	# The type of the complete_type_info function of GTypePluginClass .
	plugin		# the GTypePlugin 
	g_type		# the GType whose info is completed
	info		# the GTypeInfo struct to fill in
	value_table		# the GTypeValueTable to fill in
void <span class="c_punctuation">( *GTypePluginCompleteInterfaceInfo<span class="c_punctuation">) (GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info);	# The type of the complete_interface_info function of GTypePluginClass .
	plugin		# the GTypePlugin 
	instance_type		# the GType of an instantiable type to which the interfaceis added
	interface_type		# the GType of the interface whose info is completed
	info		# the GInterfaceInfo to fill in
void g_type_plugin_use (GTypePlugin *plugin);	# Calls the use_plugin function from the GTypePluginClass ofplugin. There should be no need to use this function outside ofthe GObject type system itself.
	plugin		# a GTypePlugin 
void g_type_plugin_unuse (GTypePlugin *plugin);	# Calls the unuse_plugin function from the GTypePluginClass ofplugin. There should be no need to use this function outside ofthe GObject type system itself.
	plugin		# a GTypePlugin 
void g_type_plugin_complete_type_info (GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table);	# Calls the complete_type_info function from the GTypePluginClass of plugin.There should be no need to use this function outside of the GObject type system itself.
	plugin		# a GTypePlugin 
	g_type		# the GType whose info is completed
	info		# the GTypeInfo struct to fill in
	value_table		# the GTypeValueTable to fill in
void g_type_plugin_complete_interface_info (GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info);	# Calls the complete_interface_info function from theGTypePluginClass of plugin. There should be no need to use thisfunction outside of the GObject type system itself.
	plugin		# the GTypePlugin 
	instance_type		# the GType of an instantiable type to which the interfaceis added
	interface_type		# the GType of the interface whose info is completed
	info		# the GInterfaceInfo to fill in
gboolean g_type_module_use (GTypeModule *module);	# Increases the use count of a GTypeModule by one. If theuse count was zero before, the plugin will be loaded.If loading the plugin fails, the use count is reset to its prior value.
	module		# a GTypeModule 
	return:		#  FALSE if the plugin needed to be loaded andloading the plugin failed. 
void g_type_module_unuse (GTypeModule *module);	# Decreases the use count of a GTypeModule by one. If theresult is zero, the module will be unloaded. (However, theGTypeModule will not be freed, and types associated with theGTypeModule are not unregistered. Once a GTypeModule isinitialized, it must exist forever.)
	module		# a GTypeModule 
void g_type_module_set_name (GTypeModule *module, const gchar *name);	# Sets the name for a GTypeModule 
	module		# a GTypeModule .
	name		# a human-readable name to use in error messages.
GType g_type_module_register_type (GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags);	# Looks up or registers a type that is implemented with a particulartype plugin. If a type with name type_name was previously registered,the GType identifier for the type is returned, otherwise the typeis newly registered, and the resulting GType identifier returned.
	module		# a GTypeModule 
	parent_type		# the type for the parent class
	type_name		# name for the type
	type_info		# type information structure
	flags		# flags field providing details about the type
	return:		#  the new or existing type ID 
void g_type_module_add_interface (GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info);	# Registers an additional interface for a type, whose interface livesin the given type plugin. If the interface was already registeredfor the type in this plugin, nothing will be done.
	module		# a GTypeModule 
	instance_type		# type to which to add the interface.
	interface_type		# interface type to add
	interface_info		# type information structure
GType g_type_module_register_enum (GTypeModule *module, const gchar *name, const GEnumValue *const_static_values);	# Looks up or registers an enumeration that is implemented with a particulartype plugin. If a type with name type_name was previously registered,the GType identifier for the type is returned, otherwise the typeis newly registered, and the resulting GType identifier returned.
	module		# a GTypeModule 
	name		# name for the type
	const_static_values		# an array of GEnumValue structs for thepossible enumeration values. The array isterminated by a struct with all members being0.
	return:		#  the new or existing type ID 
GType g_type_module_register_flags (GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values);	# Looks up or registers a flags type that is implemented with a particulartype plugin. If a type with name type_name was previously registered,the GType identifier for the type is returned, otherwise the typeis newly registered, and the resulting GType identifier returned.
	module		# a GTypeModule 
	name		# name for the type
	const_static_values		# an array of GFlagsValue structs for thepossible flags values. The array isterminated by a struct with all members being0.
	return:		#  the new or existing type ID 
void <span class="c_punctuation">( *GObjectGetPropertyFunc<span class="c_punctuation">) (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);	# The type of the get_property function of GObjectClass .
	object		# a GObject 
	property_id		# the numeric id under which the property was registered with
	value		# a GValue to return the property value in
	pspec		# the GParamSpec describing the property
void <span class="c_punctuation">( *GObjectSetPropertyFunc<span class="c_punctuation">) (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);	# The type of the set_property function of GObjectClass .
	object		# a GObject 
	property_id		# the numeric id under which the property was registered with
	value		# the new value for the property
	pspec		# the GParamSpec describing the property
void <span class="c_punctuation">( *GObjectFinalizeFunc<span class="c_punctuation">) (GObject *object);	# The type of the finalize function of GObjectClass .
	object		# the GObject being finalized
void g_object_class_install_property (GObjectClass *oclass, guint property_id, GParamSpec *pspec);	# Installs a new property.
	oclass		# a GObjectClass 
	property_id		# the id for the new property
	pspec		# the GParamSpec for the new property
void g_object_class_install_properties (GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs);	# Installs new properties from an array of GParamSpecs .
	oclass		# a GObjectClass 
	n_pspecs		# the length of the GParamSpecs array
	pspecs		#  the GParamSpecs arraydefining the new properties. 
GParamSpec  *g_object_class_find_property (GObjectClass *oclass, const gchar *property_name);	# Looks up the GParamSpec for a property of a class.
	oclass		# a GObjectClass 
	property_name		# the name of the property to look up
	return:		#  the GParamSpec for the property, orNULL if the class doesn't have a property of that name.  
GParamSpec  **g_object_class_list_properties (GObjectClass *oclass, guint *n_properties);	# Get an array of GParamSpec * for all properties of a class.
	oclass		# a GObjectClass 
	n_properties		#  return location for the length of the returned array. 
	return:		#  an array ofGParamSpec * which should be freed after use.  
void g_object_class_override_property (GObjectClass *oclass, guint property_id, const gchar *name);	# Registers property_id as referring to a property with the namename in a parent class or in an interface implemented by oclass.This allows this class to "override" a property implementation ina parent class or to provide the implementation of a property froman interface.
	oclass		# a GObjectClass 
	property_id		# the new property ID
	name		# the name of a property registered in a parent class orin an interface of this class.
void g_object_interface_install_property (gpointer g_iface, GParamSpec *pspec);	# Add a property to an interface; this is only useful for interfacesthat are added to GObject-derived types. Adding a property to aninterface forces all objects classes with that interface to have acompatible property. The compatible property could be a newlycreated GParamSpec , but normallyg_object_class_override_property() will be used so that the objectclass only needs to provide an implementation and inherits theproperty description, default value, bounds, and so forth from theinterface property.
	g_iface		#  any interface vtable for theinterface, or the defaultvtable for the interface. 
GParamSpec  *g_object_interface_find_property (gpointer g_iface, const gchar *property_name);	# Find the GParamSpec with the given name for aninterface. Generally, the interface vtable passed in as g_ifacewill be the default vtable from g_type_default_interface_ref() , or,if you know the interface has already been loaded,g_type_default_interface_peek() .
	g_iface		#  any interface vtable for theinterface, or the default vtable for the interface. 
	return:		#  the GParamSpec for the property of theinterface with the name property_name, or NULL if nosuch property exists.  
GParamSpec  **g_object_interface_list_properties (gpointer g_iface, guint *n_properties_p);	# Lists the properties of an interface.Generally, the interfacevtable passed in as g_iface will be the default vtable fromg_type_default_interface_ref() , or, if you know the interface hasalready been loaded, g_type_default_interface_peek() .
	g_iface		#  any interface vtable for theinterface, or the default vtable for the interface. 
	return:		#  apointer to an array of pointers to GParamSpec structures. The paramspecs are owned by GLib, but thearray should be freed with g_free() when you are done withit.  
gpointer g_object_new (GType object_type, const gchar *first_property_name, ...);	#创建对象:instance of a GObject subtype and sets its properties.
	object_type		# the type id of the GObject subtype to instantiate
	first_property_name		# the name of the first property
	...		# the value of the first property, followed optionally by morename/value pairs, followed by NULL 
	return:		#  a new instance ofobject_type.  
GObject  *g_object_new_with_properties (GType object_type, guint n_properties, const char *names[], const GValue values[]);	#创建对象:instance of a GObject subtype and sets its properties usingthe provided arrays. Both arrays must have exactly n_properties elements,and the names and values correspond by index.
	object_type		# the object type to instantiate
	n_properties		# the number of properties
	names		#  the names of each property to be set. 
	return:		#  a new instance ofobject_type.  
gpointer g_object_newv (GType object_type, guint n_parameters, GParameter *parameters);	# g_object_newv has been deprecated since version 2.54 and should not be used in newly-written code.
	object_type		# the type id of the GObject subtype to instantiate
	n_parameters		# the length of the parametersarray
	parameters		#  an array of GParameter . 
	return:		#  a new instance ofobject_type.  
gpointer g_object_ref (gpointer object);	# Increases the reference count of object.
	object		#  a GObject . 
	return:		#  the same object.  
void g_object_unref (gpointer object);	# Decreases the reference count of object. When its reference countdrops to 0, the object is finalized (i.e. its memory is freed).
	object		#  a GObject . 
gpointer g_object_ref_sink (gpointer object);	# Increase the reference count of object, and possibly remove thefloating reference, if object has a floating reference.
	object		#  a GObject . 
	return:		#  object.  
void g_clear_object (volatile GObject **object_ptr);	# Clears a reference to a GObject .
	object_ptr		# a pointer to a GObject reference
gboolean g_object_is_floating (gpointer object);	# Checks whether object has a floating reference.
	object		#  a GObject . 
	return:		#  TRUE if objecthas a floating reference 
void g_object_force_floating (GObject *object);	# This function is intended for GObject implementations to re-enforcea floating object reference. Doing this is seldomrequired: all GInitiallyUnowneds are created with a floating referencewhich usually just needs to be sunken by calling g_object_ref_sink() .
	object		# a GObject 
void <span class="c_punctuation">( *GWeakNotify<span class="c_punctuation">) (gpointer data, GObject *where_the_object_was);	# A GWeakNotify function can be added to an object as a callback that getstriggered when the object is finalized. Since the object is already beingfinalized when the GWeakNotify is called, there's not much you could do with the object, apart from e.g. using its address as hash-index or the like.
	data		# data that was provided when the weak reference was established
	where_the_object_was		# the object being finalized
void g_object_weak_ref (GObject *object, GWeakNotify notify, gpointer data);	# Adds a weak reference callback to an object. Weak references areused for notification when an object is finalized. They are called"weak references" because they allow you to safely hold a pointerto an object without calling g_object_ref() (g_object_ref() adds astrong reference, that is, forces the object to stay alive).
	object		# GObject to reference weakly
	notify		# callback to invoke before the object is freed
	data		# extra data to pass to notify
void g_object_weak_unref (GObject *object, GWeakNotify notify, gpointer data);	# Removes a weak reference callback to an object.
	object		# GObject to remove a weak reference from
	notify		# callback to search for
	data		# data to search for
void g_object_add_weak_pointer (GObject *object, gpointer *weak_pointer_location);	# Adds a weak reference from weak_pointer to object to indicate thatthe pointer located at weak_pointer_location is only valid duringthe lifetime of object. When the object is finalized,weak_pointer will be set to NULL .
	object		# The object that should be weak referenced.
	weak_pointer_location		#  The memory addressof a pointer. 
void g_object_remove_weak_pointer (GObject *object, gpointer *weak_pointer_location);	# Removes a weak reference from object that was previously addedusing g_object_add_weak_pointer() . The weak_pointer_location hasto match the one used with g_object_add_weak_pointer() .
	object		# The object that is weak referenced.
	weak_pointer_location		#  The memory addressof a pointer. 
void <span class="c_punctuation">( *GToggleNotify<span class="c_punctuation">) (gpointer data, GObject *object, gboolean is_last_ref);	# A callback function used for notification when the stateof a toggle reference changes. See g_object_add_toggle_ref() .
	data		# Callback data passed to 
	object		# The object on which 
	is_last_ref		# TRUE if the toggle reference is now thelast reference to the object. FALSE if the togglereference was the last reference and there are now otherreferences.
void g_object_add_toggle_ref (GObject *object, GToggleNotify notify, gpointer data);	# Increases the reference count of the object by one and sets acallback to be called when all other references to the object aredropped, or when this is already the last reference to the objectand another reference is established.
	object		# a GObject 
	notify		# a function to call when this reference is thelast reference to the object, or is no longerthe last reference.
	data		# data to pass to notify
void g_object_remove_toggle_ref (GObject *object, GToggleNotify notify, gpointer data);	# Removes a reference added with g_object_add_toggle_ref() . Thereference count of the object is decreased by one.
	object		# a GObject 
	notify		# a function to call when this reference is thelast reference to the object, or is no longerthe last reference.
	data		# data to pass to notify
gpointer g_object_connect (gpointer object, const gchar *signal_spec, ...);	# A convenience function to connect multiple signals at once.
	object		#  a GObject . 
	return:		#  object.  
void g_object_disconnect (gpointer object, const gchar *signal_spec, ...);	# A convenience function to disconnect multiple signals at once.
	object		#  a GObject . 
void g_object_set (gpointer object, const gchar *first_property_name, ...);	# Sets properties on an object.
	object		#  a GObject . 
void g_object_setv (GObject *object, guint n_properties, const gchar *names[], const GValue values[]);	# Sets n_properties properties for an object.Properties to be set will be taken from values. All properties must bevalid. Warnings will be emitted and undefined behaviour may result if invalidproperties are passed in.
	object		# a GObject 
	n_properties		# the number of properties
	names		#  the names of each property to be set. 
	values		#  the values of each property to be set. 
void g_object_get (gpointer object, const gchar *first_property_name, ...);	# Gets properties of an object.
	object		#  a GObject . 
void g_object_getv (GObject *object, guint n_properties, const gchar *names[], GValue values[]);	# Gets n_properties properties for an object.Obtained properties will be set to values. All properties must be valid.Warnings will be emitted and undefined behaviour may result if invalidproperties are passed in.
	object		# a GObject 
	n_properties		# the number of properties
	names		#  the names of each property to get. 
	values		#  the values of each property to get. 
void g_object_notify (GObject *object, const gchar *property_name);	# Emits a "notify" signal for the property property_name on object.
	object		# a GObject 
	property_name		# the name of a property installed on the class of object.
void g_object_notify_by_pspec (GObject *object, GParamSpec *pspec);	# Emits a "notify" signal for the property specified by pspec on object.
	object		# a GObject 
	pspec		# the GParamSpec of a property installed on the class of object.
void g_object_freeze_notify (GObject *object);	# Increases the freeze count on object. If the freeze count isnon-zero, the emission of "notify" signals on object isstopped. The signals are queued until the freeze count is decreasedto zero. Duplicate notifications are squashed so that at most one“notify” signal is emitted for each property modified while theobject is frozen.
	object		# a GObject 
void g_object_thaw_notify (GObject *object);	# Reverts the effect of a previous call tog_object_freeze_notify() . The freeze count is decreased on objectand when it reaches zero, queued "notify" signals are emitted.
	object		# a GObject 
gpointer g_object_get_data (GObject *object, const gchar *key);	# Gets a named field from the objects table of associations (see g_object_set_data() ).
	object		# GObject containing the associations
	key		# name of the key for that association
	return:		#  the data if found, or NULL if no such data exists.  
void g_object_set_data (GObject *object, const gchar *key, gpointer data);	# Each object carries around a table of associations fromstrings to pointers. This function lets you set an association.
	object		# GObject containing the associations.
	key		# name of the key
	data		# data to associate with that key
void g_object_set_data_full (GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy);	# Like g_object_set_data() except it adds notificationfor when the association is destroyed, either by setting itto a different value or when the object is destroyed.
	object		# GObject containing the associations
	key		# name of the key
	data		# data to associate with that key
	destroy		# function to call when the association is destroyed
gpointer g_object_steal_data (GObject *object, const gchar *key);	# Remove a specified datum from the object's data associations,without invoking the association's destroy handler.
	object		# GObject containing the associations
	key		# name of the key
	return:		#  the data if found, or NULL if no such data exists.  
gpointer g_object_dup_data (GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data);	# This is a variant of g_object_get_data() which returnsa 'duplicate' of the value. dup_func defines themeaning of 'duplicate' in this context, it could e.g.take a reference on a ref-counted object.
	object		# the GObject to store user data on
	key		# a string, naming the user data pointer
	dup_func		#  function to dup the value. 
	return:		#  the result of calling dup_funcon the valueassociated with keyon object, or NULL if not set.If dup_funcis NULL , the value is returnedunmodified. 
gboolean g_object_replace_data (GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);	# Compares the user data for the key key on object witholdval, and if they are the same, replaces oldval withnewval.
	object		# the GObject to store user data on
	key		# a string, naming the user data pointer
	oldval		#  the old value to compare against. 
	return:		#  TRUE if the existing value for keywas replacedby newval, FALSE otherwise. 
gpointer g_object_get_qdata (GObject *object, GQuark quark);	# This function gets back user data pointers stored viag_object_set_qdata() .
	object		# The GObject to get a stored user data pointer from
	quark		# A GQuark , naming the user data pointer
	return:		#  The user data pointer set, or NULL .  
void g_object_set_qdata (GObject *object, GQuark quark, gpointer data);	# This sets an opaque, named pointer on an object.The name is specified through a GQuark (retrived e.g. viag_quark_from_static_string() ), and the pointercan be gotten back from the object with g_object_get_qdata() until the object is finalized.Setting a previously set user data pointer, overrides (frees)the old pointer set, using NULL as pointer essentiallyremoves the data stored.
	object		# The GObject to set store a user data pointer
	quark		# A GQuark , naming the user data pointer
	data		# An opaque user data pointer
void g_object_set_qdata_full (GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy);	# This function works like g_object_set_qdata() , but in addition,a void (*destroy) (gpointer) function may be specified which iscalled with data as argument when the object is finalized, orthe data is being overwritten by a call to g_object_set_qdata() with the same quark.
	object		# The GObject to set store a user data pointer
	quark		# A GQuark , naming the user data pointer
	data		# An opaque user data pointer
	destroy		# Function to invoke with dataas argument, when dataneeds to be freed
gpointer g_object_steal_qdata (GObject *object, GQuark quark);	# This function gets back user data pointers stored viag_object_set_qdata() and removes the data from objectwithout invoking its destroy() function (if any wasset).Usually, calling this function is only required to updateuser data pointers with a destroy notifier, for example:
	object		# The GObject to get a stored user data pointer from
	quark		# A GQuark , naming the user data pointer
	return:		#  The user data pointer set, or NULL .  
gpointer g_object_dup_qdata (GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data);	# This is a variant of g_object_get_qdata() which returnsa 'duplicate' of the value. dup_func defines themeaning of 'duplicate' in this context, it could e.g.take a reference on a ref-counted object.
	object		# the GObject to store user data on
	quark		# a GQuark , naming the user data pointer
	dup_func		#  function to dup the value. 
	return:		#  the result of calling dup_funcon the valueassociated with quarkon object, or NULL if not set.If dup_funcis NULL , the value is returnedunmodified. 
gboolean g_object_replace_qdata (GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy);	# Compares the user data for the key quark on object witholdval, and if they are the same, replaces oldval withnewval.
	object		# the GObject to store user data on
	quark		# a GQuark , naming the user data pointer
	oldval		#  the old value to compare against. 
	return:		#  TRUE if the existing value for quarkwas replacedby newval, FALSE otherwise. 
void g_object_set_property (GObject *object, const gchar *property_name, const GValue *value);	# Sets a property on an object.
	object		# a GObject 
	property_name		# the name of the property to set
	value		# the value
void g_object_get_property (GObject *object, const gchar *property_name, GValue *value);	# Gets a property of an object. value must have been initialized to theexpected type of the property (or a type to which the expected type can betransformed) using g_value_init() .
	object		# a GObject 
	property_name		# the name of the property to get
	value		# return location for the property value
GObject  *g_object_new_valist (GType object_type, const gchar *first_property_name, va_list var_args);	#创建对象:instance of a GObject subtype and sets its properties.
	object_type		# the type id of the GObject subtype to instantiate
	first_property_name		# the name of the first property
	var_args		# the value of the first property, followed optionally by morename/value pairs, followed by NULL 
	return:		#  a new instance of object_type 
void g_object_set_valist (GObject *object, const gchar *first_property_name, va_list var_args);	# Sets properties on an object.
	object		# a GObject 
	first_property_name		# name of the first property to set
	var_args		# value for the first property, followed optionally by morename/value pairs, followed by NULL 
void g_object_get_valist (GObject *object, const gchar *first_property_name, va_list var_args);	# Gets properties of an object.
	object		# a GObject 
	first_property_name		# name of the first property to get
	var_args		# return location for the first property, followed optionally by morename/return location pairs, followed by NULL 
void g_object_watch_closure (GObject *object, GClosure *closure);	# This function essentially limits the life time of the closure tothe life time of the object. That is, when the object is finalized,the closure is invalidated by calling g_closure_invalidate() onit, in order to prevent invocations of the closure with a finalized(nonexisting) object. Also, g_object_ref() and g_object_unref() areadded as marshal guards to the closure, to ensure that an extrareference count is held on object during invocation of theclosure. Usually, this function will be called on closures thatuse this object as closure data.
	object		# GObject restricting lifetime of closure
	closure		# GClosure to watch
void g_object_run_dispose (GObject *object);	# Releases all references to other objects. This can be used to breakreference cycles.
	object		# a GObject 
void g_weak_ref_init (GWeakRef *weak_ref, gpointer object);	# Initialise a non-statically-allocated GWeakRef .
	weak_ref		#  uninitialized or empty location for a weakreference. 
void g_weak_ref_clear (GWeakRef *weak_ref);	# Frees resources associated with a non-statically-allocated GWeakRef .After this call, the GWeakRef is left in an undefined state.
	weak_ref		#  location of a weak reference, whichmay be empty. 
gpointer g_weak_ref_get (GWeakRef *weak_ref);	# If weak_ref is not empty, atomically acquire a strongreference to the object it points to, and return that reference.
	weak_ref		#  location of a weak reference to a GObject . 
	return:		#  the object pointed toby weak_ref, or NULL if it was empty.  
void g_weak_ref_set (GWeakRef *weak_ref, gpointer object);	# Change the object to which weak_ref points, or set it toNULL .
	weak_ref		# location for a weak reference
	object		#  a GObject or NULL . 
GEnumValue  *g_enum_get_value (GEnumClass *enum_class, gint value);	# Returns the GEnumValue for a value.
	enum_class		# a GEnumClass 
	value		# the value to look up
	return:		#  the GEnumValue for value, or NULL if valueis not a member of the enumeration.  
GEnumValue  *g_enum_get_value_by_name (GEnumClass *enum_class, const gchar *name);	# Looks up a GEnumValue by name.
	enum_class		# a GEnumClass 
	name		# the name to look up
	return:		#  the GEnumValue with name name,or NULL if the enumeration doesn't have a memberwith that name.  
GEnumValue  *g_enum_get_value_by_nick (GEnumClass *enum_class, const gchar *nick);	# Looks up a GEnumValue by nickname.
	enum_class		# a GEnumClass 
	nick		# the nickname to look up
	return:		#  the GEnumValue with nickname nick,or NULL if the enumeration doesn't have a memberwith that nickname.  
gchar  *g_enum_to_string (GType g_enum_type, gint value);	# Pretty-prints value in the form of the enum’s name.
	g_enum_type		# the type identifier of a GEnumClass type
	value		# the value
	return:		#  a newly-allocated text string.  
GFlagsValue  *g_flags_get_first_value (GFlagsClass *flags_class, guint value);	# Returns the first GFlagsValue which is set in value.
	flags_class		# a GFlagsClass 
	value		# the value
	return:		#  the first GFlagsValue which is set invalue, or NULL if none is set.  
GFlagsValue  *g_flags_get_value_by_name (GFlagsClass *flags_class, const gchar *name);	# Looks up a GFlagsValue by name.
	flags_class		# a GFlagsClass 
	name		# the name to look up
	return:		#  the GFlagsValue with name name,or NULL if there is no flag with that name.  
GFlagsValue  *g_flags_get_value_by_nick (GFlagsClass *flags_class, const gchar *nick);	# Looks up a GFlagsValue by nickname.
	flags_class		# a GFlagsClass 
	nick		# the nickname to look up
	return:		#  the GFlagsValue with nickname nick,or NULL if there is no flag with that nickname.  
gchar  *g_flags_to_string (GType flags_type, guint value);	# Pretty-prints value in the form of the flag names separated by | andsorted. Any extra bits will be shown at the end as a hexadecimal number.
	flags_type		# the type identifier of a GFlagsClass type
	value		# the value
	return:		#  a newly-allocated text string.  
GType g_enum_register_static (const gchar *name, const GEnumValue *const_static_values);	# Registers a new static enumeration type with the name name.
	name		# A nul-terminated string used as the name of the new type.
	const_static_values		# An array of GEnumValue structs for the possibleenumeration values. The array is terminated by a struct with allmembers being 0. GObject keeps a reference to the data, so it cannotbe stack-allocated.
	return:		#  The new type identifier. 
GType g_flags_register_static (const gchar *name, const GFlagsValue *const_static_values);	# Registers a new static flags type with the name name.
	name		# A nul-terminated string used as the name of the new type.
	const_static_values		# An array of GFlagsValue structs for the possibleflags values. The array is terminated by a struct with all members being 0.GObject keeps a reference to the data, so it cannot be stack-allocated.
	return:		#  The new type identifier. 
void g_enum_complete_type_info (GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values);	# This function is meant to be called from the complete_type_infofunction of a GTypePlugin implementation, as in the followingexample:
	g_enum_type		# the type identifier of the type being completed
	info		#  the GTypeInfo struct to be filled in. 
void g_flags_complete_type_info (GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values);	# This function is meant to be called from the complete_type_info()function of a GTypePlugin implementation, see the example forg_enum_complete_type_info() above.
	g_flags_type		# the type identifier of the type being completed
	info		#  the GTypeInfo struct to be filled in. 
gpointer <span class="c_punctuation">( *GBoxedCopyFunc<span class="c_punctuation">) (gpointer boxed);	# This function is provided by the user and should produce a copyof the passed in boxed structure.
	boxed		#  The boxed structure to be copied. 
	return:		#  The newly created copy of the boxed structure.  
void <span class="c_punctuation">( *GBoxedFreeFunc<span class="c_punctuation">) (gpointer boxed);	# This function is provided by the user and should free the boxedstructure passed.
	boxed		#  The boxed structure to be freed. 
gpointer g_boxed_copy (GType boxed_type, gconstpointer src_boxed);	# Provide a copy of a boxed structure src_boxed which is of type boxed_type.
	boxed_type		# The type of src_boxed.
	src_boxed		#  The boxed structure to be copied. 
	return:		#  The newly created copy of the boxedstructure.  
void g_boxed_free (GType boxed_type, gpointer boxed);	# Free the boxed structure boxed which is of type boxed_type.
	boxed_type		# The type of boxed.
	boxed		#  The boxed structure to be freed. 
GType g_boxed_type_register_static (const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free);	# This function创建对象:G_TYPE_BOXED derived type id for a newboxed type with name name. Boxed type handling functions have to beprovided to copy and free opaque boxed structures of this type.
	name		# Name of the new boxed type.
	boxed_copy		# Boxed structure copy function.
	boxed_free		# Boxed structure free function.
	return:		#  New G_TYPE_BOXED derived type id for name. 
GType g_pointer_type_register_static (const gchar *name);	#创建对象:G_TYPE_POINTER derived type id for a newpointer type with name name.
	name		# the name of the new pointer type.
	return:		#  a new G_TYPE_POINTER derived type id for name. 
GValue  *g_value_init (GValue *value, GType g_type);	# Initializes value with the default value of type.
	value		# A zero-filled (uninitialized) GValue structure.
	g_type		# Type the GValue should hold values of.
	return:		#  the GValue structure that has been passed in.  
void g_value_copy (const GValue *src_value, GValue *dest_value);	# Copies the value of src_value into dest_value.
	src_value		# An initialized GValue structure.
	dest_value		# An initialized GValue structure of the same type as src_value.
GValue  *g_value_reset (GValue *value);	# Clears the current value in value and resets it to the default value(as if the value had just been initialized).
	value		# An initialized GValue structure.
	return:		#  the GValue structure that has been passed in 
void g_value_unset (GValue *value);	# Clears the current value in value (if any) and "unsets" the type,this releases all resources associated with this GValue. An unsetvalue is the same as an uninitialized (zero-filled) GValue structure.
	value		# An initialized GValue structure.
void g_value_init_from_instance (GValue *value, gpointer instance);	# Initializes and sets value from an instantiatable type via thevalue_table's collect_value() function.
	value		# An uninitialized GValue structure.
	instance		#  the instance. 
void g_value_set_instance (GValue *value, gpointer instance);	# Sets value from an instantiatable type via thevalue_table's collect_value() function.
	value		# An initialized GValue structure.
	instance		#  the instance. 
gboolean g_value_fits_pointer (const GValue *value);	# Determines if value will fit inside the size of a pointer value.This is an internal function introduced mainly for C marshallers.
	value		# An initialized GValue structure.
	return:		#  TRUE if valuewill fit inside a pointer value. 
gpointer g_value_peek_pointer (const GValue *value);	# Returns the value contents as pointer. This function asserts thatg_value_fits_pointer() returned TRUE for the passed in value.This is an internal function introduced mainly for C marshallers.
	value		# An initialized GValue structure
	return:		#  the value contents as pointer.  
gboolean g_value_type_compatible (GType src_type, GType dest_type);	# Returns whether a GValue of type src_type can be copied intoa GValue of type dest_type.
	src_type		# source type to be copied.
	dest_type		# destination type for copying.
	return:		#  TRUE if g_value_copy() is possible with src_typeand dest_type. 
gboolean g_value_type_transformable (GType src_type, GType dest_type);	# Check whether g_value_transform() is able to transform valuesof type src_type into values of type dest_type. Note that forthe types to be transformable, they must be compatible or atransformation function must be registered.
	src_type		# Source type.
	dest_type		# Target type.
	return:		#  TRUE if the transformation is possible, FALSE otherwise. 
gboolean g_value_transform (const GValue *src_value, GValue *dest_value);	# Tries to cast the contents of src_value into a type appropriateto store in dest_value, e.g. to transform a G_TYPE_INT valueinto a G_TYPE_FLOAT value. Performing transformations betweenvalue types might incur precision lossage. Especiallytransformations into strings might reveal seemingly arbitraryresults and shouldn't be relied upon for production code (suchas rcfile value or object property serialization).
	src_value		# Source value.
	dest_value		# Target value.
	return:		#  Whether a transformation rule was found and could be applied.Upon failing transformations, dest_valueis left untouched. 
void <span class="c_punctuation">( *GValueTransform<span class="c_punctuation">) (const GValue *src_value, GValue *dest_value);	# The type of value transformation functions which can be registered withg_value_register_transform_func() .
	src_value		# Source value.
	dest_value		# Target value.
void g_value_register_transform_func (GType src_type, GType dest_type, GValueTransform transform_func);	# Registers a value transformation function for use in g_value_transform() .A previously registered transformation function for src_type and dest_typewill be replaced.
	src_type		# Source type.
	dest_type		# Target type.
	transform_func		# a function which transforms values of type src_typeinto value of type dest_type
gchar  *g_strdup_value_contents (const GValue *value);	# Return a newly allocated string, which describes the contents of aGValue . The main purpose of this function is to describe GValue contents for debugging output, the way in which the contents aredescribed may change between different GLib versions.
	value		# GValue which contents are to be described.
	return:		#  Newly allocated string. 
GParamSpec  *g_param_spec_boolean (const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags);	#创建对象:GParamSpecBoolean instance specifying a G_TYPE_BOOLEAN property. In many cases, it may be more appropriate to use an enum withg_param_spec_enum() , both to improve code clarity by using explicitly namedvalues, and to allow for more values to be added in future without breakingAPI.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_boolean (GValue *value, gboolean v_boolean);	# Set the contents of a G_TYPE_BOOLEAN GValue to v_boolean.
	value		# a valid GValue of type G_TYPE_BOOLEAN 
	v_boolean		# boolean value to be set
gboolean g_value_get_boolean (const GValue *value);	# Get the contents of a G_TYPE_BOOLEAN GValue .
	value		# a valid GValue of type G_TYPE_BOOLEAN 
	return:		#  boolean contents of value 
GParamSpec  *g_param_spec_char (const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags);	#创建对象:GParamSpecChar instance specifying a G_TYPE_CHAR property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_char (GValue *value, gchar v_char);	# g_value_set_char has been deprecated since version 2.32 and should not be used in newly-written code.
	value		# a valid GValue of type G_TYPE_CHAR 
	v_char		# character value to be set
gchar g_value_get_char (const GValue *value);	# g_value_get_char has been deprecated since version 2.32 and should not be used in newly-written code.
	value		# a valid GValue of type G_TYPE_CHAR 
	return:		#  character contents of value 
gint8 g_value_get_schar (const GValue *value);	# Get the contents of a G_TYPE_CHAR GValue .
	value		# a valid GValue of type G_TYPE_CHAR 
	return:		#  signed 8 bit integer contents of value 
void g_value_set_schar (GValue *value, gint8 v_char);	# Set the contents of a G_TYPE_CHAR GValue to v_char.
	value		# a valid GValue of type G_TYPE_CHAR 
	v_char		# signed 8 bit integer to be set
GParamSpec  *g_param_spec_uchar (const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags);	#创建对象:GParamSpecUChar instance specifying a G_TYPE_UCHAR property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_uchar (GValue *value, guchar v_uchar);	# Set the contents of a G_TYPE_UCHAR GValue to v_uchar.
	value		# a valid GValue of type G_TYPE_UCHAR 
	v_uchar		# unsigned character value to be set
guchar g_value_get_uchar (const GValue *value);	# Get the contents of a G_TYPE_UCHAR GValue .
	value		# a valid GValue of type G_TYPE_UCHAR 
	return:		#  unsigned character contents of value 
GParamSpec  *g_param_spec_int (const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags);	#创建对象:GParamSpecInt instance specifying a G_TYPE_INT property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_int (GValue *value, gint v_int);	# Set the contents of a G_TYPE_INT GValue to v_int.
	value		# a valid GValue of type G_TYPE_INT 
	v_int		# integer value to be set
gint g_value_get_int (const GValue *value);	# Get the contents of a G_TYPE_INT GValue .
	value		# a valid GValue of type G_TYPE_INT 
	return:		#  integer contents of value 
GParamSpec  *g_param_spec_uint (const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags);	#创建对象:GParamSpecUInt instance specifying a G_TYPE_UINT property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_uint (GValue *value, guint v_uint);	# Set the contents of a G_TYPE_UINT GValue to v_uint.
	value		# a valid GValue of type G_TYPE_UINT 
	v_uint		# unsigned integer value to be set
guint g_value_get_uint (const GValue *value);	# Get the contents of a G_TYPE_UINT GValue .
	value		# a valid GValue of type G_TYPE_UINT 
	return:		#  unsigned integer contents of value 
GParamSpec  *g_param_spec_long (const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags);	#创建对象:GParamSpecLong instance specifying a G_TYPE_LONG property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_long (GValue *value, glong v_long);	# Set the contents of a G_TYPE_LONG GValue to v_long.
	value		# a valid GValue of type G_TYPE_LONG 
	v_long		# long integer value to be set
glong g_value_get_long (const GValue *value);	# Get the contents of a G_TYPE_LONG GValue .
	value		# a valid GValue of type G_TYPE_LONG 
	return:		#  long integer contents of value 
GParamSpec  *g_param_spec_ulong (const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags);	#创建对象:GParamSpecULong instance specifying a G_TYPE_ULONG property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_ulong (GValue *value, gulong v_ulong);	# Set the contents of a G_TYPE_ULONG GValue to v_ulong.
	value		# a valid GValue of type G_TYPE_ULONG 
	v_ulong		# unsigned long integer value to be set
gulong g_value_get_ulong (const GValue *value);	# Get the contents of a G_TYPE_ULONG GValue .
	value		# a valid GValue of type G_TYPE_ULONG 
	return:		#  unsigned long integer contents of value 
GParamSpec  *g_param_spec_int64 (const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags);	#创建对象:GParamSpecInt64 instance specifying a G_TYPE_INT64 property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_int64 (GValue *value, gint64 v_int64);	# Set the contents of a G_TYPE_INT64 GValue to v_int64.
	value		# a valid GValue of type G_TYPE_INT64 
	v_int64		# 64bit integer value to be set
gint64 g_value_get_int64 (const GValue *value);	# Get the contents of a G_TYPE_INT64 GValue .
	value		# a valid GValue of type G_TYPE_INT64 
	return:		#  64bit integer contents of value 
GParamSpec  *g_param_spec_uint64 (const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags);	#创建对象:GParamSpecUInt64 instance specifying a G_TYPE_UINT64 property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_uint64 (GValue *value, guint64 v_uint64);	# Set the contents of a G_TYPE_UINT64 GValue to v_uint64.
	value		# a valid GValue of type G_TYPE_UINT64 
	v_uint64		# unsigned 64bit integer value to be set
guint64 g_value_get_uint64 (const GValue *value);	# Get the contents of a G_TYPE_UINT64 GValue .
	value		# a valid GValue of type G_TYPE_UINT64 
	return:		#  unsigned 64bit integer contents of value 
GParamSpec  *g_param_spec_float (const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags);	#创建对象:GParamSpecFloat instance specifying a G_TYPE_FLOAT property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_float (GValue *value, gfloat v_float);	# Set the contents of a G_TYPE_FLOAT GValue to v_float.
	value		# a valid GValue of type G_TYPE_FLOAT 
	v_float		# float value to be set
gfloat g_value_get_float (const GValue *value);	# Get the contents of a G_TYPE_FLOAT GValue .
	value		# a valid GValue of type G_TYPE_FLOAT 
	return:		#  float contents of value 
GParamSpec  *g_param_spec_double (const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags);	#创建对象:GParamSpecDouble instance specifying a G_TYPE_DOUBLE property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	minimum		# minimum value for the property specified
	maximum		# maximum value for the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_double (GValue *value, gdouble v_double);	# Set the contents of a G_TYPE_DOUBLE GValue to v_double.
	value		# a valid GValue of type G_TYPE_DOUBLE 
	v_double		# double value to be set
gdouble g_value_get_double (const GValue *value);	# Get the contents of a G_TYPE_DOUBLE GValue .
	value		# a valid GValue of type G_TYPE_DOUBLE 
	return:		#  double contents of value 
GParamSpec  *g_param_spec_enum (const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags);	#创建对象:GParamSpecEnum instance specifying a G_TYPE_ENUM property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	enum_type		# a GType derived from G_TYPE_ENUM 
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_enum (GValue *value, gint v_enum);	# Set the contents of a G_TYPE_ENUM GValue to v_enum.
	value		# a valid GValue whose type is derived from G_TYPE_ENUM 
	v_enum		# enum value to be set
gint g_value_get_enum (const GValue *value);	# Get the contents of a G_TYPE_ENUM GValue .
	value		# a valid GValue whose type is derived from G_TYPE_ENUM 
	return:		#  enum contents of value 
GParamSpec  *g_param_spec_flags (const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags);	#创建对象:GParamSpecFlags instance specifying a G_TYPE_FLAGS property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	flags_type		# a GType derived from G_TYPE_FLAGS 
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_flags (GValue *value, guint v_flags);	# Set the contents of a G_TYPE_FLAGS GValue to v_flags.
	value		# a valid GValue whose type is derived from G_TYPE_FLAGS 
	v_flags		# flags value to be set
guint g_value_get_flags (const GValue *value);	# Get the contents of a G_TYPE_FLAGS GValue .
	value		# a valid GValue whose type is derived from G_TYPE_FLAGS 
	return:		#  flags contents of value 
GParamSpec  *g_param_spec_string (const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags);	#创建对象:GParamSpecString instance.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	default_value		#  default value for the property specified. 
	return:		#  a newly created parameter specification.  
void g_value_set_string (GValue *value, const gchar *v_string);	# Set the contents of a G_TYPE_STRING GValue to v_string.
	value		# a valid GValue of type G_TYPE_STRING 
	v_string		#  caller-owned string to be duplicated for the GValue . 
void g_value_set_static_string (GValue *value, const gchar *v_string);	# Set the contents of a G_TYPE_STRING GValue to v_string.The string is assumed to be static, and is thus not duplicatedwhen setting the GValue .
	value		# a valid GValue of type G_TYPE_STRING 
	v_string		#  static string to be set. 
void g_value_take_string (GValue *value, gchar *v_string);	# Sets the contents of a G_TYPE_STRING GValue to v_string.
	value		# a valid GValue of type G_TYPE_STRING 
	v_string		#  string to take ownership of. 
void g_value_set_string_take_ownership (GValue *value, gchar *v_string);	# g_value_set_string_take_ownership has been deprecated since version 2.4 and should not be used in newly-written code.
	value		# a valid GValue of type G_TYPE_STRING 
	v_string		#  duplicated unowned string to be set. 
gchar  *g_value_get_string (const GValue *value);	# Get the contents of a G_TYPE_STRING GValue .
	value		# a valid GValue of type G_TYPE_STRING 
	return:		#  string content of value 
gchar  *g_value_dup_string (const GValue *value);	# Get a copy the contents of a G_TYPE_STRING GValue .
	value		# a valid GValue of type G_TYPE_STRING 
	return:		#  a newly allocated copy of the string content of value 
GParamSpec  *g_param_spec_param (const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags);	#创建对象:GParamSpecParam instance specifying a G_TYPE_PARAM property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	param_type		# a GType derived from G_TYPE_PARAM 
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_param (GValue *value, GParamSpec *param);	# Set the contents of a G_TYPE_PARAM GValue to param.
	value		# a valid GValue of type G_TYPE_PARAM 
	param		#  the GParamSpec to be set. 
void g_value_take_param (GValue *value, GParamSpec *param);	# Sets the contents of a G_TYPE_PARAM GValue to param and takesover the ownership of the callers reference to param; the callerdoesn't have to unref it any more.
	value		# a valid GValue of type G_TYPE_PARAM 
	param		#  the GParamSpec to be set. 
void g_value_set_param_take_ownership (GValue *value, GParamSpec *param);	# g_value_set_param_take_ownership has been deprecated since version 2.4 and should not be used in newly-written code.
	value		# a valid GValue of type G_TYPE_PARAM 
	param		#  the GParamSpec to be set. 
GParamSpec  *g_value_get_param (const GValue *value);	# Get the contents of a G_TYPE_PARAM GValue .
	value		# a valid GValue whose type is derived from G_TYPE_PARAM 
	return:		#  GParamSpec content of value.  
GParamSpec  *g_value_dup_param (const GValue *value);	# Get the contents of a G_TYPE_PARAM GValue , increasing itsreference count.
	value		# a valid GValue whose type is derived from G_TYPE_PARAM 
	return:		#  GParamSpec content of value, should be unreferenced whenno longer needed. 
GParamSpec  *g_param_spec_boxed (const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags);	#创建对象:GParamSpecBoxed instance specifying a G_TYPE_BOXED derived property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	boxed_type		# G_TYPE_BOXED derived type of this property
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_boxed (GValue *value, gconstpointer v_boxed);	# Set the contents of a G_TYPE_BOXED derived GValue to v_boxed.
	value		# a valid GValue of G_TYPE_BOXED derived type
	v_boxed		#  boxed value to be set. 
void g_value_set_static_boxed (GValue *value, gconstpointer v_boxed);	# Set the contents of a G_TYPE_BOXED derived GValue to v_boxed.The boxed value is assumed to be static, and is thus not duplicatedwhen setting the GValue .
	value		# a valid GValue of G_TYPE_BOXED derived type
	v_boxed		#  static boxed value to be set. 
void g_value_take_boxed (GValue *value, gconstpointer v_boxed);	# Sets the contents of a G_TYPE_BOXED derived GValue to v_boxedand takes over the ownership of the callers reference to v_boxed;the caller doesn't have to unref it any more.
	value		# a valid GValue of G_TYPE_BOXED derived type
	v_boxed		#  duplicated unowned boxed value to be set. 
void g_value_set_boxed_take_ownership (GValue *value, gconstpointer v_boxed);	# g_value_set_boxed_take_ownership has been deprecated since version 2.4 and should not be used in newly-written code.
	value		# a valid GValue of G_TYPE_BOXED derived type
	v_boxed		#  duplicated unowned boxed value to be set. 
gpointer g_value_get_boxed (const GValue *value);	# Get the contents of a G_TYPE_BOXED derived GValue .
	value		# a valid GValue of G_TYPE_BOXED derived type
	return:		#  boxed contents of value.  
gpointer g_value_dup_boxed (const GValue *value);	# Get the contents of a G_TYPE_BOXED derived GValue . Upon getting,the boxed value is duplicated and needs to be later freed withg_boxed_free() , e.g. like: g_boxed_free (G_VALUE_TYPE (value),return_value);
	value		# a valid GValue of G_TYPE_BOXED derived type
	return:		#  boxed contents of value 
GParamSpec  *g_param_spec_pointer (const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);	#创建对象:GParamSpecPointer instance specifying a pointer property.Where possible, it is better to use g_param_spec_object() org_param_spec_boxed() to expose memory management information.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_pointer (GValue *value, gpointer v_pointer);	# Set the contents of a pointer GValue to v_pointer.
	value		# a valid GValue of G_TYPE_POINTER 
	v_pointer		# pointer value to be set
gpointer g_value_get_pointer (const GValue *value);	# Get the contents of a pointer GValue .
	value		# a valid GValue of G_TYPE_POINTER 
	return:		#  pointer contents of value.  
GParamSpec  *g_param_spec_object (const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags);	#创建对象:GParamSpecBoxed instance specifying a G_TYPE_OBJECT derived property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	object_type		# G_TYPE_OBJECT derived type of this property
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
void g_value_set_object (GValue *value, gpointer v_object);	# Set the contents of a G_TYPE_OBJECT derived GValue to v_object.
	value		# a valid GValue of G_TYPE_OBJECT derived type
	v_object		#  object value to be set. 
void g_value_take_object (GValue *value, gpointer v_object);	# Sets the contents of a G_TYPE_OBJECT derived GValue to v_objectand takes over the ownership of the callers reference to v_object;the caller doesn't have to unref it any more (i.e. the referencecount of the object is not increased).
	value		# a valid GValue of G_TYPE_OBJECT derived type
	v_object		#  object value to be set. 
void g_value_set_object_take_ownership (GValue *value, gpointer v_object);	# g_value_set_object_take_ownership has been deprecated since version 2.4 and should not be used in newly-written code.
	value		# a valid GValue of G_TYPE_OBJECT derived type
	v_object		#  object value to be set. 
gpointer g_value_get_object (const GValue *value);	# Get the contents of a G_TYPE_OBJECT derived GValue .
	value		# a valid GValue of G_TYPE_OBJECT derived type
	return:		#  object contents of value.  
gpointer g_value_dup_object (const GValue *value);	# Get the contents of a G_TYPE_OBJECT derived GValue , increasingits reference count. If the contents of the GValue are NULL , thenNULL will be returned.
	value		# a valid GValue whose type is derived from G_TYPE_OBJECT 
	return:		#  object content of value,should be unreferenced when no longer needed.  
GParamSpec  *g_param_spec_unichar (const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags);	#创建对象:GParamSpecUnichar instance specifying a G_TYPE_UINT property. GValue structures for this property can be accessed withg_value_set_uint() and g_value_get_uint() .
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	default_value		# default value for the property specified
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
GParamSpec  *g_param_spec_value_array (const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags);	#创建对象:GParamSpecValueArray instance specifying aG_TYPE_VALUE_ARRAY property. G_TYPE_VALUE_ARRAY is aG_TYPE_BOXED type, as such, GValue structures for this propertycan be accessed with g_value_set_boxed() and g_value_get_boxed() .
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	element_spec		# a GParamSpec describing the elements contained inarrays of this property, may be NULL 
	flags		# flags for the property specified
	return:		#  a newly created parameter specification 
GParamSpec  *g_param_spec_override (const gchar *name, GParamSpec *overridden);	#创建对象:property of type GParamSpecOverride . This is usedto direct operations to another paramspec, and will not be directlyuseful unless you are implementing a new base type similar to GObject.
	name		# the name of the property.
	overridden		# The property that is being overridden
	return:		#  the newly created GParamSpec  
GParamSpec  *g_param_spec_gtype (const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags);	#创建对象:GParamSpecGType instance specifying aG_TYPE_GTYPE property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	is_a_type		# a GType whose subtypes are allowed as valuesof the property (use G_TYPE_NONE for any type)
	flags		# flags for the property specified
	return:		#  a newly created parameter specification.  
GType g_value_get_gtype (const GValue *value);	# Get the contents of a G_TYPE_GTYPE GValue .
	value		# a valid GValue of type G_TYPE_GTYPE 
	return:		#  the GType stored in value 
void g_value_set_gtype (GValue *value, GType v_gtype);	# Set the contents of a G_TYPE_GTYPE GValue to v_gtype.
	value		# a valid GValue of type G_TYPE_GTYPE 
	v_gtype		# GType to be set
GParamSpec  *g_param_spec_variant (const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags);	#创建对象:GParamSpecVariant instance specifying a GVariant property.
	name		# canonical name of the property specified
	nick		# nick name for the property specified
	blurb		# description of the property specified
	type		# a GVariantType 
	default_value		#  a GVariant of type typetouse as the default value, or NULL . 
	return:		#  the newly created GParamSpec .  
GVariant  *g_value_get_variant (const GValue *value);	# Get the contents of a variant GValue .
	value		# a valid GValue of type G_TYPE_VARIANT 
	return:		#  variant contents of value 
GVariant  *g_value_dup_variant (const GValue *value);	# Get the contents of a variant GValue , increasing its refcount.
	value		# a valid GValue of type G_TYPE_VARIANT 
	return:		#  variant contents of value, should be unrefed usingg_variant_unref() when no longer needed 
void g_value_set_variant (GValue *value, GVariant *variant);	# Set the contents of a variant GValue to variant.If the variant is floating, it is consumed.
	value		# a valid GValue of type G_TYPE_VARIANT 
	variant		#  a GVariant , or NULL . 
void g_value_take_variant (GValue *value, GVariant *variant);	# Set the contents of a variant GValue to variant, and takes overthe ownership of the caller's reference to variant;the caller doesn't have to unref it any more (i.e. the referencecount of the variant is not increased).
	value		# a valid GValue of type G_TYPE_VARIANT 
	variant		#  a GVariant , or NULL . 
GParamSpec  *g_param_spec_ref (GParamSpec *pspec);	# Increments the reference count of pspec.
	pspec		# a valid GParamSpec 
	return:		#  the GParamSpec that was passed into this function 
void g_param_spec_unref (GParamSpec *pspec);	# Decrements the reference count of a pspec.
	pspec		# a valid GParamSpec 
void g_param_spec_sink (GParamSpec *pspec);	# The initial reference count of a newly created GParamSpec is 1,even though no one has explicitly called g_param_spec_ref() on ityet. So the initial reference count is flagged as "floating", untilsomeone calls g_param_spec_ref (pspec); g_param_spec_sink(pspec); in sequence on it, taking over the initialreference count (thus ending up with a pspec that has a referencecount of 1 still, but is not flagged "floating" anymore).
	pspec		# a valid GParamSpec 
GParamSpec  *g_param_spec_ref_sink (GParamSpec *pspec);	# Convenience function to ref and sink a GParamSpec .
	pspec		# a valid GParamSpec 
	return:		#  the GParamSpec that was passed into this function 
GValue  *g_param_spec_get_default_value (GParamSpec *pspec);	# Gets the default value of pspec as a pointer to a GValue .
	pspec		# a GParamSpec 
	return:		#  a pointer to a GValue which must not be modified 
void g_param_value_set_default (GParamSpec *pspec, GValue *value);	# Sets value to its default value as specified in pspec.
	pspec		# a valid GParamSpec 
	value		# a GValue of correct type for pspec
gboolean g_param_value_defaults (GParamSpec *pspec, GValue *value);	# Checks whether value contains the default value as specified in pspec.
	pspec		# a valid GParamSpec 
	value		# a GValue of correct type for pspec
	return:		#  whether valuecontains the canonical default for this pspec 
gboolean g_param_value_validate (GParamSpec *pspec, GValue *value);	# Ensures that the contents of value comply with the specificationsset out by pspec. For example, a GParamSpecInt might requirethat integers stored in value may not be smaller than -42 and not begreater than +42. If value contains an integer outside of this range,it is modified accordingly, so the resulting value will fit into therange -42 .. +42.
	pspec		# a valid GParamSpec 
	value		# a GValue of correct type for pspec
	return:		#  whether modifying valuewas necessary to ensure validity 
gboolean g_param_value_convert (GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation);	# Transforms src_value into dest_value if possible, and thenvalidates dest_value, in order for it to conform to pspec. Ifstrict_validation is TRUE this function will only succeed if thetransformed dest_value complied to pspec without modifications.
	pspec		# a valid GParamSpec 
	src_value		# souce GValue 
	dest_value		# destination GValue of correct type for pspec
	strict_validation		# TRUE requires dest_valueto conform to pspecwithout modifications
	return:		#  TRUE if transformation and validation were successful,FALSE otherwise and dest_valueis left untouched. 
gint g_param_values_cmp (GParamSpec *pspec, const GValue *value1, const GValue *value2);	# Compares value1 with value2 according to pspec, and return -1, 0 or +1,if value1 is found to be less than, equal to or greater than value2,respectively.
	pspec		# a valid GParamSpec 
	value1		# a GValue of correct type for pspec
	value2		# a GValue of correct type for pspec
	return:		#  -1, 0 or +1, for a less than, equal to or greater than result 
gchar  *g_param_spec_get_name (GParamSpec *pspec);	# Get the name of a GParamSpec .
	pspec		# a valid GParamSpec 
	return:		#  the name of pspec. 
GQuark g_param_spec_get_name_quark (GParamSpec *pspec);	# Gets the GQuark for the name.
	pspec		# a GParamSpec 
	return:		#  the GQuark for pspec-&gt;name. 
gchar  *g_param_spec_get_nick (GParamSpec *pspec);	# Get the nickname of a GParamSpec .
	pspec		# a valid GParamSpec 
	return:		#  the nickname of pspec. 
gchar  *g_param_spec_get_blurb (GParamSpec *pspec);	# Get the short description of a GParamSpec .
	pspec		# a valid GParamSpec 
	return:		#  the short description of pspec. 
gpointer g_param_spec_get_qdata (GParamSpec *pspec, GQuark quark);	# Gets back user data pointers stored via g_param_spec_set_qdata() .
	pspec		# a valid GParamSpec 
	quark		# a GQuark , naming the user data pointer
	return:		#  the user data pointer set, or NULL .  
void g_param_spec_set_qdata (GParamSpec *pspec, GQuark quark, gpointer data);	# Sets an opaque, named pointer on a GParamSpec . The name isspecified through a GQuark (retrieved e.g. viag_quark_from_static_string() ), and the pointer can be gotten backfrom the pspec with g_param_spec_get_qdata() . Setting apreviously set user data pointer, overrides (frees) the old pointerset, using NULL as pointer essentially removes the data stored.
	pspec		# the GParamSpec to set store a user data pointer
	quark		# a GQuark , naming the user data pointer
	data		# an opaque user data pointer
void g_param_spec_set_qdata_full (GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy);	# This function works like g_param_spec_set_qdata() , but in addition,a void (*destroy) (gpointer) function may bespecified which is called with data as argument when the pspec isfinalized, or the data is being overwritten by a call tog_param_spec_set_qdata() with the same quark.
	pspec		# the GParamSpec to set store a user data pointer
	quark		# a GQuark , naming the user data pointer
	data		# an opaque user data pointer
	destroy		# function to invoke with dataas argument, when dataneeds tobe freed
gpointer g_param_spec_steal_qdata (GParamSpec *pspec, GQuark quark);	# Gets back user data pointers stored via g_param_spec_set_qdata() and removes the data from pspec without invoking its destroy()function (if any was set). Usually, calling this function is onlyrequired to update user data pointers with a destroy notifier.
	pspec		# the GParamSpec to get a stored user data pointer from
	quark		# a GQuark , naming the user data pointer
	return:		#  the user data pointer set, or NULL .  
GParamSpec  *g_param_spec_get_redirect_target (GParamSpec *pspec);	# If the paramspec redirects operations to another paramspec,returns that paramspec. Redirect is used typically forproviding a new implementation of a property in a derivedtype while preserving all the properties from the parenttype. Redirection is established by creating a propertyof type GParamSpecOverride . See g_object_class_override_property() for an example of the use of this capability.
	pspec		# a GParamSpec 
	return:		#  paramspec to which requests on thisparamspec should be redirected, or NULL if none.  
gpointer g_param_spec_internal (GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags);	#创建对象:GParamSpec instance.
	param_type		# the GType for the property; must be derived from G_TYPE_PARAM 
	name		# the canonical name of the property
	nick		# the nickname of the property
	blurb		# a short description of the property
	flags		# a combination of GParamFlags 
	return:		#  a newly allocated GParamSpec instance.  
GType g_param_type_register_static (const gchar *name, const GParamSpecTypeInfo *pspec_info);	# Registers name as the name of a new static type derived fromG_TYPE_PARAM . The type system uses the information contained inthe GParamSpecTypeInfo structure pointed to by info to manage theGParamSpec type and its instances.
	name		# 0-terminated string used as the name of the new GParamSpec type.
	pspec_info		# The GParamSpecTypeInfo for this GParamSpec type.
	return:		#  The new type identifier. 
GParamSpecPool  *g_param_spec_pool_new (gboolean type_prefixing);	#创建对象:GParamSpecPool .
	type_prefixing		# Whether the pool will support type-prefixed property names.
	return:		#  a newly allocated GParamSpecPool .  
void g_param_spec_pool_insert (GParamSpecPool *pool, GParamSpec *pspec, GType owner_type);	# Inserts a GParamSpec in the pool.
	pool		# a GParamSpecPool .
	pspec		# the GParamSpec to insert
	owner_type		# a GType identifying the owner of pspec
void g_param_spec_pool_remove (GParamSpecPool *pool, GParamSpec *pspec);	# Removes a GParamSpec from the pool.
	pool		# a GParamSpecPool 
	pspec		# the GParamSpec to remove
GParamSpec  *g_param_spec_pool_lookup (GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors);	# Looks up a GParamSpec in the pool.
	pool		# a GParamSpecPool 
	param_name		# the name to look for
	owner_type		# the owner to look for
	walk_ancestors		# If TRUE , also try to find a GParamSpec with param_nameowned by an ancestor of owner_type.
	return:		#  The found GParamSpec , or NULL if nomatching GParamSpec was found.  
GParamSpec  **g_param_spec_pool_list (GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p);	# Gets an array of all GParamSpecs owned by owner_type inthe pool.
	pool		# a GParamSpecPool 
	owner_type		# the owner to look for
	n_pspecs_p		#  return location for the length of the returned array. 
	return:		#  a newlyallocated array containing pointers to all GParamSpecs owned by owner_typein the pool.  
GList  *g_param_spec_pool_list_owned (GParamSpecPool *pool, GType owner_type);	# Gets an GList of all GParamSpecs owned by owner_type inthe pool.
	pool		# a GParamSpecPool 
	owner_type		# the owner to look for
	return:		#  aGList of all GParamSpecs owned by owner_typeinthe poolGParamSpecs .  
gboolean <span class="c_punctuation">( *GSignalAccumulator<span class="c_punctuation">) (GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer data);	# The signal accumulator is a special callback function that can be usedto collect return values of the various callbacks that are calledduring a signal emission. The signal accumulator is specified at signalcreation time, if it is left NULL , no accumulation of callback returnvalues is performed. The return value of signal emissions is then thevalue returned by the last callback.
	ihint		# Signal invocation hint, see GSignalInvocationHint .
	return_accu		# Accumulator to collect callback return values in, thisis the return value of the current signal emission.
	handler_return		# A GValue holding the return value of the signal handler.
	data		# Callback data that was specified when creating the signal.
	return:		#  The accumulator function returns whether the signal emissionshould be aborted. Returning FALSE means to abort thecurrent emission and TRUE is returned for continuation. 
gboolean <span class="c_punctuation">( *GSignalEmissionHook<span class="c_punctuation">) (GSignalInvocationHint *ihint, guint n_param_values, const GValue *param_values, gpointer data);	# A simple function pointer to get invoked when the signal is emitted. This allows you to tie a hook to the signal type, so that it will trap all emissions of that signal, from any object.
	ihint		# Signal invocation hint, see GSignalInvocationHint .
	n_param_values		# the number of parameters to the function, includingthe instance on which the signal was emitted.
	param_values		#  the instance on whichthe signal was emitted, followed by the parameters of the emission. 
	return:		#  whether it wants to stay connected. If it returns FALSE , the signalhook is disconnected (and destroyed). 
guint g_signal_new (const gchar *signal_name, GType itype, GSignalFlags signal_flags, guint class_offset, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...);	#创建对象:signal. (This is usually done in the class initializer.)
	signal_name		# the name for the signal
	itype		# the type this signal pertains to. It will also pertain totypes which are derived from this type.
	signal_flags		# a combination of GSignalFlags specifying detail of whenthe default handler is to be invoked. You should at least specifyG_SIGNAL_RUN_FIRST or G_SIGNAL_RUN_LAST .
	class_offset		# The offset of the function pointer in the class structurefor this type. Used to invoke a class method generically. Pass 0 tonot associate a class method slot with this signal.
	accumulator		# the accumulator for this signal; may be NULL .
	accu_data		# user data for the accumulator.
	c_marshaller		#  the function to translate arrays of parametervalues to signal emissions into C language callback invocations or NULL . 
	n_params		# the number of parameter types to follow.
	...		# a list of types, one for each parameter.
	return:		#  the signal id 
guint g_signal_newv (const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types);	#创建对象:signal. (This is usually done in the class initializer.)
	signal_name		# the name for the signal
	itype		# the type this signal pertains to. It will also pertain totypes which are derived from this type
	signal_flags		# a combination of GSignalFlags specifying detail of whenthe default handler is to be invoked. You should at least specifyG_SIGNAL_RUN_FIRST or G_SIGNAL_RUN_LAST 
	class_closure		#  The closure to invoke on signal emission;may be NULL . 
	n_params		# the length of param_types
	param_types		#  an array of types, one foreach parameter. 
	return:		#  the signal id 
guint g_signal_new_valist (const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, va_list args);	#创建对象:signal. (This is usually done in the class initializer.)
	signal_name		# the name for the signal
	itype		# the type this signal pertains to. It will also pertain totypes which are derived from this type.
	signal_flags		# a combination of GSignalFlags specifying detail of whenthe default handler is to be invoked. You should at least specifyG_SIGNAL_RUN_FIRST or G_SIGNAL_RUN_LAST .
	class_closure		# The closure to invoke on signal emission; may be NULL .
	accumulator		# the accumulator for this signal; may be NULL .
	accu_data		# user data for the accumulator.
	c_marshaller		#  the function to translate arrays of parametervalues to signal emissions into C language callback invocations or NULL . 
	n_params		# the number of parameter types in args.
	args		# va_list of GType , one for each parameter.
	return:		#  the signal id 
void g_signal_set_va_marshaller (guint signal_id, GType instance_type, GSignalCVaMarshaller va_marshaller);	# Change the GSignalCVaMarshaller used for a given signal. This is aspecialised form of the marshaller that can often be used for thecommon case of a single connected signal handler and avoids theoverhead of GValue . Its use is optional.
	signal_id		# the signal id
	instance_type		# the instance type on which to set the marshaller.
	va_marshaller		# the marshaller to set.
void g_signal_query (guint signal_id, GSignalQuery *query);	# Queries the signal system for in-depth information about aspecific signal. This function will fill in a user-providedstructure to hold signal-specific information. If an invalidsignal id is passed in, the signal_id member of the GSignalQuery is 0. All members filled into the GSignalQuery structure shouldbe considered constant and have to be left untouched.
	signal_id		# The signal id of the signal to query information for.
	query		#  A user provided structure that isfilled in with constant values upon success. 
guint g_signal_lookup (const gchar *name, GType itype);	# Given the name of the signal and the type of object it connects to, getsthe signal's identifying integer. Emitting the signal by number issomewhat faster than using the name each time.
	name		# the signal's name.
	itype		# the type that the signal operates on.
	return:		#  the signal's identifying number, or 0 if no signal was found. 
gchar  *g_signal_name (guint signal_id);	# Given the signal's identifier, finds its name.
	signal_id		# the signal's identifying number.
	return:		#  the signal name, or NULL if the signal number was invalid. 
guint  *g_signal_list_ids (GType itype, guint *n_ids);	# Lists the signals by id that a certain instance or interface typecreated. Further information about the signals can be acquired throughg_signal_query() .
	itype		# Instance or interface type.
	n_ids		# Location to store the number of signal ids for itype.
	return:		#  Newly allocated array of signal IDs.  
void g_signal_emit (gpointer instance, guint signal_id, GQuark detail, ...);	# Emits a signal.
	instance		#  the instance the signal is being emitted on. 
void g_signal_emit_by_name (gpointer instance, const gchar *detailed_signal, ...);	# Emits a signal.
	instance		#  the instance the signal is being emitted on. 
void g_signal_emitv (const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value);	# Emits a signal.
	instance_and_params		#  argument list for the signal emission.The first element in the array is a GValue for the instance the signalis being emitted on. The rest are any arguments to be passed to the signal. 
	signal_id		# the signal id
	detail		# the detail
	return_value		#  Location tostore the return value of the signal emission. This must be provided if thespecified signal returns a value, but may be ignored otherwise. 
void g_signal_emit_valist (gpointer instance, guint signal_id, GQuark detail, va_list var_args);	# Emits a signal.
	instance		#  the instance the signal is beingemitted on. 
gulong g_signal_connect_object (gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags);	# This is similar to g_signal_connect_data() , but uses a closure whichensures that the gobject stays alive during the call to c_handlerby temporarily adding a reference count to gobject.
	instance		#  the instance to connect to. 
	gobject		#  the object to pass as datato c_handler. 
	return:		#  the handler id. 
gulong g_signal_connect_data (gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags);	# Connects a GCallback function to a signal for a particular object. Similarto g_signal_connect() , but allows to provide a GClosureNotify for the datawhich will be called when the signal handler is disconnected and no longerused. Specify connect_flags if you need ..._after() or..._swapped() variants of this function.
	instance		#  the instance to connect to. 
	data		# data to pass to c_handlercalls.
	destroy_data		# a GClosureNotify for data.
	connect_flags		# a combination of GConnectFlags .
	return:		#  the handler ID (always greater than 0 for successful connections) 
gulong g_signal_connect_closure (gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after);	# Connects a closure to a signal for a particular object.
	instance		#  the instance to connect to. 
	return:		#  the handler ID (always greater than 0 for successful connections) 
gulong g_signal_connect_closure_by_id (gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after);	# Connects a closure to a signal for a particular object.
	instance		#  the instance to connect to. 
	return:		#  the handler ID (always greater than 0 for successful connections) 
void g_signal_handler_block (gpointer instance, gulong handler_id);	# Blocks a handler of an instance so it will not be called during anysignal emissions unless it is unblocked again. Thus "blocking" asignal handler means to temporarily deactive it, a signal handlerhas to be unblocked exactly the same amount of times it has beenblocked before to become active again.
	instance		#  The instance to block the signal handler of. 
	handler_id		# Handler id of the handler to be blocked.
void g_signal_handler_unblock (gpointer instance, gulong handler_id);	# Undoes the effect of a previous g_signal_handler_block() call. Ablocked handler is skipped during signal emissions and will not beinvoked, unblocking it (for exactly the amount of times it has beenblocked before) reverts its "blocked" state, so the handler will berecognized by the signal system and is called upon future orcurrently ongoing signal emissions (since the order in whichhandlers are called during signal emissions is deterministic,whether the unblocked handler in question is called as part of acurrently ongoing emission depends on how far that emission hasproceeded yet).
	instance		#  The instance to unblock the signal handler of. 
	handler_id		# Handler id of the handler to be unblocked.
void g_signal_handler_disconnect (gpointer instance, gulong handler_id);	# Disconnects a handler from an instance so it will not be called duringany future or currently ongoing emissions of the signal it has beenconnected to. The handler_id becomes invalid and may be reused.
	instance		#  The instance to remove the signal handler from. 
	handler_id		# Handler id of the handler to be disconnected.
gulong g_signal_handler_find (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);	# Finds the first signal handler that matches certain selection criteria.The criteria mask is passed as an OR-ed combination of GSignalMatchType flags, and the criteria values are passed as arguments.The match mask has to be non-0 for successful matches.If no handler was found, 0 is returned.
	instance		#  The instance owning the signal handler to be found. 
	return:		#  A valid non-0 signal handler id for a successful match. 
guint g_signal_handlers_block_matched (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);	# Blocks all handlers on an instance that match a certain selection criteria.The criteria mask is passed as an OR-ed combination of GSignalMatchType flags, and the criteria values are passed as arguments.Passing at least one of the G_SIGNAL_MATCH_CLOSURE , G_SIGNAL_MATCH_FUNC or G_SIGNAL_MATCH_DATA match flags is required for successful matches.If no handlers were found, 0 is returned, the number of blocked handlersotherwise.
	instance		#  The instance to block handlers from. 
	return:		#  The number of handlers that matched. 
guint g_signal_handlers_unblock_matched (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);	# Unblocks all handlers on an instance that match a certain selectioncriteria. The criteria mask is passed as an OR-ed combination ofGSignalMatchType flags, and the criteria values are passed as arguments.Passing at least one of the G_SIGNAL_MATCH_CLOSURE , G_SIGNAL_MATCH_FUNC or G_SIGNAL_MATCH_DATA match flags is required for successful matches.If no handlers were found, 0 is returned, the number of unblocked handlersotherwise. The match criteria should not apply to any handlers that arenot currently blocked.
	instance		#  The instance to unblock handlers from. 
	return:		#  The number of handlers that matched. 
guint g_signal_handlers_disconnect_matched (gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data);	# Disconnects all handlers on an instance that match a certainselection criteria. The criteria mask is passed as an OR-edcombination of GSignalMatchType flags, and the criteria values arepassed as arguments. Passing at least one of theG_SIGNAL_MATCH_CLOSURE , G_SIGNAL_MATCH_FUNC orG_SIGNAL_MATCH_DATA match flags is required for successfulmatches. If no handlers were found, 0 is returned, the number ofdisconnected handlers otherwise.
	instance		#  The instance to remove handlers from. 
	return:		#  The number of handlers that matched. 
gboolean g_signal_handler_is_connected (gpointer instance, gulong handler_id);	# Returns whether handler_id is the ID of a handler connected to instance.
	instance		#  The instance where a signal handler is sought. 
	return:		#  whether handler_ididentifies a handler connected to instance. 
gboolean g_signal_has_handler_pending (gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked);	# Returns whether there are any handlers connected to instance for thegiven signal id and detail.
	instance		#  the object whose signal handlers are sought. 
	return:		#  TRUE if a handler is connected to the signal, FALSE otherwise. 
void g_signal_stop_emission (gpointer instance, guint signal_id, GQuark detail);	# Stops a signal's current emission.
	instance		#  the object whose signal handlers you wish to stop. 
	detail		# the detail which the signal was emitted with.
void g_signal_stop_emission_by_name (gpointer instance, const gchar *detailed_signal);	# Stops a signal's current emission.
	instance		#  the object whose signal handlers you wish to stop. 
	detailed_signal		# a string of the form "signal-name::detail".
void g_signal_override_class_closure (guint signal_id, GType instance_type, GClosure *class_closure);	# Overrides the class closure (i.e. the default handler) for the given signalfor emissions on instances of instance_type. instance_type must be derivedfrom the type to which the signal belongs.
	signal_id		# the signal id
	instance_type		# the instance type on which to override the class closurefor the signal.
	class_closure		# the closure.
void g_signal_chain_from_overridden (const GValue *instance_and_params, GValue *return_value);	# Calls the original class closure of a signal. This function should onlybe called from an overridden class closure; seeg_signal_override_class_closure() andg_signal_override_class_handler() .
	instance_and_params		# (array) the argument list of the signal emission.The first element in the array is a GValue for the instance the signalis being emitted on. The rest are any arguments to be passed to the signal.
	return_value		# Location for the return value.
guint g_signal_new_class_handler (const gchar *signal_name, GType itype, GSignalFlags signal_flags, GCallback class_handler, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...);	#创建对象:signal. (This is usually done in the class initializer.)
	signal_name		# the name for the signal
	itype		# the type this signal pertains to. It will also pertain totypes which are derived from this type.
	signal_flags		# a combination of GSignalFlags specifying detail of whenthe default handler is to be invoked. You should at least specifyG_SIGNAL_RUN_FIRST or G_SIGNAL_RUN_LAST .
	class_handler		# a GCallback which acts as class implementation ofthis signal. Used to invoke a class method generically. Pass NULL tonot associate a class method with this signal.
	accumulator		# the accumulator for this signal; may be NULL .
	accu_data		# user data for the accumulator.
	c_marshaller		#  the function to translate arrays of parametervalues to signal emissions into C language callback invocations or NULL . 
	n_params		# the number of parameter types to follow.
	...		# a list of types, one for each parameter.
	return:		#  the signal id 
void g_signal_override_class_handler (const gchar *signal_name, GType instance_type, GCallback class_handler);	# Overrides the class closure (i.e. the default handler) for thegiven signal for emissions on instances of instance_type withcallback class_handler. instance_type must be derived from thetype to which the signal belongs.
	signal_name		# the name for the signal
	instance_type		# the instance type on which to override the class handlerfor the signal.
	class_handler		# the handler.
void g_signal_chain_from_overridden_handler (gpointer instance, ...);	# Calls the original class closure of a signal. This function shouldonly be called from an overridden class closure; seeg_signal_override_class_closure() andg_signal_override_class_handler() .
	instance		#  the instance the signal is beingemitted on. 
gulong g_signal_add_emission_hook (guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy);	# Adds an emission hook for a signal, which will get called for any emissionof that signal, independent of the instance. This is possible onlyfor signals which don't have G_SIGNAL_NO_HOOKS flag set.
	signal_id		# the signal identifier, as returned by 
	detail		# the detail on which to call the hook.
	hook_func		# a GSignalEmissionHook function.
	hook_data		# user data for hook_func.
	data_destroy		# a GDestroyNotify for hook_data.
	return:		#  the hook id, for later use with g_signal_remove_emission_hook() . 
void g_signal_remove_emission_hook (guint signal_id, gulong hook_id);	# Deletes an emission hook.
	signal_id		# the id of the signal
	hook_id		# the id of the emission hook, as returned by
gboolean g_signal_parse_name (const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark);	# Internal function to parse a signal name into its signal_idand detail quark.
	detailed_signal		# a string of the form "signal-name::detail".
	itype		# The interface/instance type that introduced "signal-name".
	signal_id_p		#  Location to store the signal id. 
	return:		#  Whether the signal name could successfully be parsed and signal_id_pand detail_pcontain valid return values. 
GSignalInvocationHint  *g_signal_get_invocation_hint (gpointer instance);	# Returns the invocation hint of the innermost signal emission of instance.
	instance		#  the instance to query. 
	return:		#  the invocation hint of the innermost signal emission.  
GClosure  *g_signal_type_cclosure_new (GType itype, guint struct_offset);	#创建对象:closure which invokes the function found at the offsetstruct_offset in the class structure of the interface or classed typeidentified by itype.
	itype		# the GType identifier of an interface or classed type
	struct_offset		# the offset of the member function of itype's classstructure which is to be invoked by the new closure
	return:		#  a new GCClosure  
gboolean g_signal_accumulator_first_wins (GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);	# A predefined GSignalAccumulator for signals intended to be used as ahook for application code to provide a particular value. Usuallyonly one such value is desired and multiple handlers for the samesignal don't make much sense (except for the case of the defaulthandler defined in the class structure, in which case you willusually want the signal connection to override the class handler).
	ihint		# standard GSignalAccumulator parameter
	return_accu		# standard GSignalAccumulator parameter
	handler_return		# standard GSignalAccumulator parameter
	dummy		# standard GSignalAccumulator parameter
	return:		#  standard GSignalAccumulator result 
gboolean g_signal_accumulator_true_handled (GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy);	# A predefined GSignalAccumulator for signals that return aboolean values. The behavior that this accumulator gives isthat a return of TRUE stops the signal emission: no furthercallbacks will be invoked, while a return of FALSE allowsthe emission to continue. The idea here is that a TRUE returnindicates that the callback handled the signal, and no furtherhandling is needed.
	ihint		# standard GSignalAccumulator parameter
	return_accu		# standard GSignalAccumulator parameter
	handler_return		# standard GSignalAccumulator parameter
	dummy		# standard GSignalAccumulator parameter
	return:		#  standard GSignalAccumulator result 
void <span class="c_punctuation">( *GCallback<span class="c_punctuation">) (void );	# The type used for callback functions in structure definitions and function signatures. This doesn't mean that all callback functions must take no parameters and return void. The required signature of a callback function is determined by the context in which is used (e.g. the signal to which it is connected). Use G_CALLBACK() to cast the callback function to a GCallback .
void <span class="c_punctuation">( *GClosureMarshal<span class="c_punctuation">) (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# The type used for marshaller functions.
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void <span class="c_punctuation">( *GVaClosureMarshal<span class="c_punctuation">) (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# This is the signature of va_list marshaller functions, an optionalmarshaller that can be used in some situations to avoidmarshalling the signal argument into GValues.
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void <span class="c_punctuation">( *GClosureNotify<span class="c_punctuation">) (gpointer data, GClosure *closure);	# The type used for the various notification callbacks which can be registeredon closures.
	data		# data specified when registering the notification callback
	closure		# the GClosure on which the notification is emitted
GClosure  *g_cclosure_new (GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);	#创建对象:closure which invokes callback_func with user_data asthe last parameter.
	callback_func		# the function to invoke
	user_data		#  user data to pass to callback_func. 
	return:		#  a new GCClosure  
GClosure  *g_cclosure_new_swap (GCallback callback_func, gpointer user_data, GClosureNotify destroy_data);	#创建对象:closure which invokes callback_func with user_data asthe first parameter.
	callback_func		# the function to invoke
	user_data		#  user data to pass to callback_func. 
	return:		#  a new GCClosure .  
GClosure  *g_cclosure_new_object (GCallback callback_func, GObject *object);	# A variant of g_cclosure_new() which uses object as user_data andcalls g_object_watch_closure() on object and the createdclosure. This function is useful when you have a callback closelyassociated with a GObject , and want the callback to no longer runafter the object is is freed.
	callback_func		# the function to invoke
	object		# a GObject pointer to pass to callback_func
	return:		#  a new GCClosure  
GClosure  *g_cclosure_new_object_swap (GCallback callback_func, GObject *object);	# A variant of g_cclosure_new_swap() which uses object as user_dataand calls g_object_watch_closure() on object and the createdclosure. This function is useful when you have a callback closelyassociated with a GObject , and want the callback to no longer runafter the object is is freed.
	callback_func		# the function to invoke
	object		# a GObject pointer to pass to callback_func
	return:		#  a new GCClosure  
void g_cclosure_marshal_generic (GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A generic marshaller function implemented vialibffi .
	closure		# A GClosure .
	return_gvalue		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
GClosure  *g_closure_new_object (guint sizeof_closure, GObject *object);	# A variant of g_closure_new_simple() which stores object in thedata field of the closure and calls g_object_watch_closure() onobject and the created closure. This function is mainly usefulwhen implementing new types of closures.
	sizeof_closure		# the size of the structure to allocate, must be at leastsizeof (GClosure)
	object		# a GObject pointer to store in the datafield of the newlyallocated GClosure 
	return:		#  a newly allocated GClosure .  
GClosure  *g_closure_ref (GClosure *closure);	# Increments the reference count on a closure to force it stayingalive while the caller holds a pointer to it.
	closure		# GClosure to increment the reference count on
	return:		#  The closurepassed in, for convenience.  
void g_closure_sink (GClosure *closure);	# Takes over the initial ownership of a closure. Each closure isinitially created in a "floating" state, which means that the initialreference count is not owned by any caller. g_closure_sink() checksto see if the object is still floating, and if so, unsets thefloating state and decreases the reference count. If the closureis not floating, g_closure_sink() does nothing. The reason for theexistence of the floating state is to prevent cumbersome codesequences like:
	closure		# GClosure to decrement the initial reference count on, if it'sstill being held
void g_closure_unref (GClosure *closure);	# Decrements the reference count of a closure after it was previouslyincremented by the same caller. If no other callers are using theclosure, then the closure will be destroyed and freed.
	closure		# GClosure to decrement the reference count on
void g_closure_invoke (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint);	# Invokes the closure, i.e. executes the callback represented by the closure.
	closure		# a GClosure 
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return a value. 
	invocation_hint		#  a context-dependent invocation hint. 
void g_closure_invalidate (GClosure *closure);	# Sets a flag on the closure to indicate that its callingenvironment has become invalid, and thus causes any futureinvocations of g_closure_invoke() on this closure to beignored. Also, invalidation notifiers installed on the closure willbe called at this point. Note that unless you are holding areference to the closure yourself, the invalidation notifiers mayunref the closure and cause it to be destroyed, so if you need toaccess the closure after calling g_closure_invalidate() , make surethat you've previously called g_closure_ref() .
	closure		# GClosure to invalidate
void g_closure_add_finalize_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);	# Registers a finalization notifier which will be called when thereference count of closure goes down to 0. Multiple finalizationnotifiers on a single closure are invoked in unspecified order. Ifa single call to g_closure_unref() results in the closure beingboth invalidated and finalized, then the invalidate notifiers willbe run before the finalize notifiers.
	closure		# a GClosure 
	notify_data		#  data to pass to notify_func. 
	notify_func		# the callback function to register
void g_closure_add_invalidate_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);	# Registers an invalidation notifier which will be called when theclosure is invalidated with g_closure_invalidate() . Invalidationnotifiers are invoked before finalization notifiers, in anunspecified order.
	closure		# a GClosure 
	notify_data		#  data to pass to notify_func. 
	notify_func		# the callback function to register
void g_closure_remove_finalize_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);	# Removes a finalization notifier.
	closure		# a GClosure 
	notify_data		# data which was passed to 
	notify_func		# the callback function to remove
void g_closure_remove_invalidate_notifier (GClosure *closure, gpointer notify_data, GClosureNotify notify_func);	# Removes an invalidation notifier.
	closure		# a GClosure 
	notify_data		# data which was passed to 
	notify_func		# the callback function to remove
GClosure  *g_closure_new_simple (guint sizeof_closure, gpointer data);	# Allocates a struct of the given size and initializes the initialpart as a GClosure . This function is mainly useful whenimplementing new types of closures.
	sizeof_closure		# the size of the structure to allocate, must be at leastsizeof (GClosure)
	data		# data to store in the datafield of the newly allocated GClosure 
	return:		#  a newly allocated GClosure .  
void g_closure_set_marshal (GClosure *closure, GClosureMarshal marshal);	# Sets the marshaller of closure. The marshal_dataof marshal provides a way for a meta marshaller to provide additionalinformation to the marshaller. (See g_closure_set_meta_marshal() .) ForGObject's C predefined marshallers (the g_cclosure_marshal_*()functions), what it provides is a callback function to use instead ofclosure-&gt;callback.
	closure		# a GClosure 
	marshal		# a GClosureMarshal function
void g_closure_add_marshal_guards (GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify);	# Adds a pair of notifiers which get invoked before and after theclosure callback, respectively. This is typically used to protectthe extra arguments for the duration of the callback. Seeg_object_watch_closure() for an example of marshal guards.
	closure		# a GClosure 
	pre_marshal_data		#  data to passto pre_marshal_notify. 
	pre_marshal_notify		# a function to call before the closure callback
	post_marshal_data		#  data to passto post_marshal_notify. 
	post_marshal_notify		# a function to call after the closure callback
void g_closure_set_meta_marshal (GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal);	# Sets the meta marshaller of closure. A meta marshaller wrapsclosure-&gt;marshal and modifies the way it is called in somefashion. The most common use of this facility is for C callbacks.The same marshallers (generated by glib-genmarshal),are used everywhere, but the way that we get the callback functiondiffers. In most cases we want to use closure-&gt;callback, but inother cases we want to use some different technique to retrieve thecallback function.
	closure		# a GClosure 
	marshal_data		#  context-dependent data to passto meta_marshal. 
void g_source_set_closure (GSource *source, GClosure *closure);	# Set the callback for a source as a GClosure .
	source		# the source
	closure		# a GClosure 
void g_source_set_dummy_callback (GSource *source);	# Sets a dummy callback for source. The callback will do nothing, andif the source expects a gboolean return value, it will return TRUE .(If the source expects any other type of return value, it will returna 0/NULL value; whatever g_value_init() initializes a GValue to forthat type.)
	source		# the source
void g_cclosure_marshal_VOID__VOID (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with no arguments.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__BOOLEAN (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleboolean argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__CHAR (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singlecharacter argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__UCHAR (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleunsigned character argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__INT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleinteger argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__UINT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with with a singleunsigned integer argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__LONG (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with with a singlelong integer argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__ULONG (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleunsigned long integer argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__ENUM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleargument with an enumerated type.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__FLAGS (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleargument with a flags types.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__FLOAT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with onesingle-precision floating point argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__DOUBLE (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with onedouble-precision floating point argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__STRING (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a single stringargument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__PARAM (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleargument of type GParamSpec .
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__BOXED (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleargument which is any boxed pointer type.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a single rawpointer argument type.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__OBJECT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleGObject argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__VARIANT (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a singleGVariant argument.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_STRING__OBJECT_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with handlers thattake a GObject and a pointer and produce a string. It is highlyunlikely that your signal handler fits this description.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_VOID__UINT_POINTER (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with a unsigned intand a pointer as arguments.
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_BOOLEAN__FLAGS (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with handlers thattake a flags type as an argument and return a boolean. If you havesuch a signal, you will probably also need to use an accumulator,such as g_signal_accumulator_true_handled() .
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_BOOLEAN__BOXED_BOXED (GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data);	# A GClosureMarshal function for use with signals with handlers thattake two boxed pointers as arguments and return a boolean. If youhave such a signal, you will probably also need to use anaccumulator, such as g_signal_accumulator_true_handled() .
	closure		# A GClosure .
	return_value		# A GValue to store the return value. May be NULL if the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument to
	marshal_data		# Additional data specified when registering themarshaller, see 
void g_cclosure_marshal_generic_va (GClosure *closure, GValue *return_value, gpointer instance, va_list args_list, gpointer marshal_data, int n_params, GType *param_types);	# A generic GVaClosureMarshal function implemented vialibffi .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__VOIDv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VOID() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__BOOLEANv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOOLEAN() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__CHARv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__CHAR() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__UCHARv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UCHAR() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__INTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__INT() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__UINTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__LONGv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__LONG() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__ULONGv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ULONG() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__ENUMv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__ENUM() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__FLAGSv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLAGS() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__FLOATv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__FLOAT() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__DOUBLEv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__DOUBLE() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__STRINGv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__STRING() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__PARAMv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__PARAM() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__BOXEDv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__BOXED() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__POINTERv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__POINTER() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__OBJECTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__OBJECT() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__VARIANTv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__VARIANT() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_STRING__OBJECT_POINTERv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_STRING__OBJECT_POINTER() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_VOID__UINT_POINTERv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_VOID__UINT_POINTER() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_BOOLEAN__FLAGSv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__FLAGS() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
void g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv (GClosure *closure, GValue *return_value, gpointer instance, va_list args, gpointer marshal_data, int n_params, GType *param_types);	# The GVaClosureMarshal equivalent to g_cclosure_marshal_BOOLEAN__BOXED_BOXED() .
	closure		# the GClosure to which the marshaller belongs
	return_value		#  a GValue to store the returnvalue. May be NULL if the callback of closuredoesn't return avalue. 
GValue  *g_value_array_get_nth (GValueArray *value_array, guint index_);	# g_value_array_get_nth has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to get a value from
	index_		# index of the value of interest
	return:		#  pointer to a value at index_in value_array.  
GValueArray  *g_value_array_new (guint n_prealloced);	# g_value_array_new has been deprecated since version 2.32 and should not be used in newly-written code.
	n_prealloced		# number of values to preallocate space for
	return:		#  a newly allocated GValueArray with 0 values 
GValueArray  *g_value_array_copy (const GValueArray *value_array);	# g_value_array_copy has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to copy
	return:		#  Newly allocated copy of GValueArray .  
void g_value_array_free (GValueArray *value_array);	# g_value_array_free has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to free
GValueArray  *g_value_array_append (GValueArray *value_array, const GValue *value);	# g_value_array_append has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to add an element to
	value		#  GValue to copy into GValueArray , or NULL . 
	return:		#  the GValueArray passed in as value_array.  
GValueArray  *g_value_array_prepend (GValueArray *value_array, const GValue *value);	# g_value_array_prepend has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to add an element to
	value		#  GValue to copy into GValueArray , or NULL . 
	return:		#  the GValueArray passed in as value_array.  
GValueArray  *g_value_array_insert (GValueArray *value_array, guint index_, const GValue *value);	# g_value_array_insert has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to add an element to
	index_		# insertion position, must be &lt;= value_array-&gt;;n_values
	value		#  GValue to copy into GValueArray , or NULL . 
	return:		#  the GValueArray passed in as value_array.  
GValueArray  *g_value_array_remove (GValueArray *value_array, guint index_);	# g_value_array_remove has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to remove an element from
	index_		# position of value to remove, which must be less thanvalue_array-&gt;n_values
	return:		#  the GValueArray passed in as value_array.  
GValueArray  *g_value_array_sort (GValueArray *value_array, GCompareFunc compare_func);	# g_value_array_sort has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to sort
	compare_func		#  function to compare elements. 
	return:		#  the GValueArray passed in as value_array.  
GValueArray  *g_value_array_sort_with_data (GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data);	# g_value_array_sort_with_data has been deprecated since version 2.32 and should not be used in newly-written code.
	value_array		# GValueArray to sort
	compare_func		#  function to compare elements. 
	return:		#  the GValueArray passed in as value_array.  
GObject  *g_binding_get_source (GBinding *binding);	# Retrieves the GObject instance used as the source of the binding.
	binding		# a GBinding 
	return:		#  the source GObject .  
gchar  *g_binding_get_source_property (GBinding *binding);	# Retrieves the name of the property of “source” used as the sourceof the binding.
	binding		# a GBinding 
	return:		#  the name of the source property 
GObject  *g_binding_get_target (GBinding *binding);	# Retrieves the GObject instance used as the target of the binding.
	binding		# a GBinding 
	return:		#  the target GObject .  
gchar  *g_binding_get_target_property (GBinding *binding);	# Retrieves the name of the property of “target” used as the targetof the binding.
	binding		# a GBinding 
	return:		#  the name of the target property 
GBindingFlags g_binding_get_flags (GBinding *binding);	# Retrieves the flags passed when constructing the GBinding .
	binding		# a GBinding 
	return:		#  the GBindingFlags used by the GBinding  
void g_binding_unbind (GBinding *binding);	# Explicitly releases the binding between the source and the targetproperty expressed by binding.
	binding		# a GBinding 
GBinding  *g_object_bind_property (gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags);	# Creates a binding between source_property on source and target_propertyon target. Whenever the source_property is changed the target_property isupdated using the same value. For instance:
	source		#  the source GObject . 
	return:		#  the GBinding instance representing thebinding between the two GObject instances. The binding is releasedwhenever the GBinding reference count reaches zero.  
gboolean <span class="c_punctuation">( *GBindingTransformFunc<span class="c_punctuation">) (GBinding *binding, const GValue *from_value, GValue *to_value, gpointer user_data);	# A function to be called to transform from_value to to_value. Ifthis is the transform_to function of a binding, then from_valueis the source_property on the source object, and to_value is thetarget_property on the target object. If this is thetransform_from function of a G_BINDING_BIDIRECTIONAL binding,then those roles are reversed.
	binding		# a GBinding 
	from_value		# the GValue containing the value to transform
	to_value		# the GValue in which to store the transformed value
	user_data		# data passed to the transform function
	return:		#  TRUE if the transformation was successful, and FALSE otherwise 
GBinding  *g_object_bind_property_full (gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify);	# Complete version of g_object_bind_property() .
	source		#  the source GObject . 
	transform_to		#  the transformation functionfrom the sourceto the target, or NULL to use the default. 
	notify		# function to be called when disposing the binding, to free theresources used by the transformation functions
	return:		#  the GBinding instance representing thebinding between the two GObject instances. The binding is releasedwhenever the GBinding reference count reaches zero.  
GBinding  *g_object_bind_property_with_closures (gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from);	# Creates a binding between source_property on source and target_propertyon target, allowing you to set the transformation functions to be used bythe binding.
	source		#  the source GObject . 
	transform_to		# a GClosure wrapping the transformation functionfrom the sourceto the target, or NULL to use the default
	transform_from		# a GClosure wrapping the transformation functionfrom the targetto the source, or NULL to use the default
	return:		#  the GBinding instance representing thebinding between the two GObject instances. The binding is releasedwhenever the GBinding reference count reaches zero.  
