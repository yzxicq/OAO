
#.# gdk
typedef struct _GdkDisplayManager GdkDisplayManager;
typedef struct _GdkDisplay GdkDisplay;
typedef struct _GdkScreen GdkScreen;
typedef struct _GdkSeat GdkSeat;
typedef struct _GdkMonitor GdkMonitor;
typedef struct _GdkDevice GdkDevice;
struct GdkTimeCoord {
	guint32 time;
	gdouble axes[GDK_MAX_TIMECOORD_AXES];
};

typedef struct _GdkDevicePad GdkDevicePad;
struct GdkPoint {
	gint x;
	gint y;
};

typedef struct {
	int x, y;
	int width, height;
} GdkRectangle;

typedef struct {
	gdouble red;
	gdouble green;
	gdouble blue;
	gdouble alpha;
} GdkRGBA;

typedef struct _GdkVisual GdkVisual;
typedef struct _GdkCursor GdkCursor;
typedef struct _GdkWindow GdkWindow;
struct GdkGeometry {
	gint min_width;
	gint min_height;
	gint max_width;
	gint max_height;
	gint base_width;
	gint base_height;
	gint width_inc;
	gint height_inc;
	gdouble min_aspect;
	gdouble max_aspect;
	GdkGravity win_gravity;
};

typedef struct _GdkFrameClock GdkFrameClock;
typedef struct _GdkFrameTimings GdkFrameTimings;
typedef struct _GdkDrawingContext GdkDrawingContext;
typedef struct _GdkGLContext GdkGLContext;
typedef struct _GdkVulkanContext GdkVulkanContext;
typedef struct _GdkEventSequence GdkEventSequence;
struct GdkEventAny {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
};

struct GdkEventKey {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	guint state;
	guint keyval;
	gint length;
	gchar *string;
	guint16 hardware_keycode;
	guint8 group;
	guint is_modifier : 1;
};

struct GdkEventButton {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	gdouble x;
	gdouble y;
	gdouble *axes;
	guint state;
	guint button;
	GdkDevice *device;
	gdouble x_root, y_root;
};

struct GdkEventTouch {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	gdouble x;
	gdouble y;
	gdouble *axes;
	guint state;
	GdkEventSequence *sequence;
	gboolean emulating_pointer;
	GdkDevice *device;
	gdouble x_root, y_root;
};

struct GdkEventScroll {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	gdouble x;
	gdouble y;
	guint state;
	GdkScrollDirection direction;
	GdkDevice *device;
	gdouble x_root, y_root;
	gdouble delta_x;
	gdouble delta_y;
	guint is_stop : 1;
};

struct GdkEventMotion {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	gdouble x;
	gdouble y;
	gdouble *axes;
	guint state;
	gint16 is_hint;
	GdkDevice *device;
	gdouble x_root, y_root;
};

struct GdkEventExpose {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkRectangle area;
	cairo_region_t *region;
	gint count;
	/* If non-zero, how many more events follow. */
};

struct GdkEventVisibility {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkVisibilityState state;
};

struct GdkEventCrossing {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkWindow *subwindow;
	guint32 time;
	gdouble x;
	gdouble y;
	gdouble x_root;
	gdouble y_root;
	GdkCrossingMode mode;
	GdkNotifyType detail;
	gboolean focus;
	guint state;
};

struct GdkEventFocus {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	gint16 in;
};

struct GdkEventConfigure {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	gint x, y;
	gint width;
	gint height;
};

struct GdkEventProperty {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkAtom atom;
	guint32 time;
	guint state;
};

struct GdkEventSelection {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkAtom selection;
	GdkAtom target;
	GdkAtom property;
	guint32 time;
	GdkWindow *requestor;
};

struct GdkEventDND {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkDragContext *context;
	guint32 time;
	gshort x_root, y_root;
};

struct GdkEventProximity {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	GdkDevice *device;
};

struct GdkEventWindowState {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkWindowState changed_mask;
	GdkWindowState new_window_state;
};

struct GdkEventSetting {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkSettingAction action;
	char *name;
};

struct GdkEventOwnerChange {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	GdkWindow *owner;
	GdkOwnerChange reason;
	GdkAtom selection;
	guint32 time;
	guint32 selection_time;
};

struct GdkEventGrabBroken {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	gboolean keyboard;
	gboolean implicit;
	GdkWindow *grab_window;
};

struct GdkEventTouchpadSwipe {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	gint8 phase;
	gint8 n_fingers;
	guint32 time;
	gdouble x;
	gdouble y;
	gdouble dx;
	gdouble dy;
	gdouble x_root, y_root;
	guint state;
};

struct GdkEventTouchpadPinch {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	gint8 phase;
	gint8 n_fingers;
	guint32 time;
	gdouble x;
	gdouble y;
	gdouble dx;
	gdouble dy;
	gdouble angle_delta;
	gdouble scale;
	gdouble x_root, y_root;
	guint state;
};

struct GdkEventPadButton {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	guint group;
	guint button;
	guint mode;
};

struct GdkEventPadAxis {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	guint group;
	guint index;
	guint mode;
	gdouble value;
};

struct GdkEventPadGroupMode {
	GdkEventType type;
	GdkWindow *window;
	gint8 send_event;
	guint32 time;
	guint group;
	guint mode;
};

typedef struct _GdkKeymap GdkKeymap;
struct GdkKeymapKey {
	guint keycode;
	gint group;
	gint level;
};

typedef struct _GdkDragContext GdkDragContext;
typedef struct _GdkAtom GdkAtom;
typedef struct _GdkAppLaunchContext GdkAppLaunchContext;
typedef struct _GdkDeviceManager GdkDeviceManager;
union GdkEvent
	GdkEventType type;
	GdkEventAny any;
	GdkEventExpose expose;
	GdkEventVisibility visibility;
	GdkEventMotion motion;
	GdkEventButton button;
	GdkEventTouch touch;
	GdkEventScroll scroll;
	GdkEventKey key;
	GdkEventCrossing crossing;
	GdkEventFocus focus_change;
	GdkEventConfigure configure;
	GdkEventProperty property;
	GdkEventSelection selection;
	GdkEventOwnerChange owner_change;
	GdkEventProximity proximity;
	GdkEventDND dnd;
	GdkEventWindowState window_state;
	GdkEventSetting setting;
	GdkEventGrabBroken grab_broken;
	GdkEventTouchpadSwipe touchpad_swipe;
	GdkEventTouchpadPinch touchpad_pinch;
	GdkEventPadButton pad_button;
	GdkEventPadAxis pad_axis;
	GdkEventPadGroupMode pad_group_mode;
typedef void GdkXEvent;	 /* Can be cast to window system specific	# Used to represent native events (XEvents for the X11backend, MSGs for Win32).
#define GDK_WINDOWING_X11	# The GDK_WINDOWING_X11 macro is defined if the X11 backendis supported.
#define GDK_WINDOWING_WIN32	# The GDK_WINDOWING_WIN32 macro is defined if the Win32 backendis supported.
#define GDK_WINDOWING_QUARTZ	# The GDK_WINDOWING_QUARTZ macro is defined if the Quartz backendis supported.
#define GDK_WINDOWING_WAYLAND	# The GDK_WINDOWING_WAYLAND macro is defined if the Wayland backendis supported.
#define GDK_VERSION_3_0 (G_ENCODE_VERSION (3, 0))	# A macro that evaluates to the 3.0 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_2 (G_ENCODE_VERSION (3, 2))	# A macro that evaluates to the 3.2 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_4 (G_ENCODE_VERSION (3, 4))	# A macro that evaluates to the 3.4 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_6 (G_ENCODE_VERSION (3, 6))	# A macro that evaluates to the 3.6 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_8 (G_ENCODE_VERSION (3, 8))	# A macro that evaluates to the 3.8 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_10 (G_ENCODE_VERSION (3, 10))	# A macro that evaluates to the 3.10 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_12 (G_ENCODE_VERSION (3, 12))	# A macro that evaluates to the 3.12 version of GDK, in a formatthat can be used by the C pre-processor.
#define GDK_VERSION_3_14 (G_ENCODE_VERSION (3, 14))	# A macro that evaluates to the 3.14 version of GDK, in a formatthat can be used by the C pre-processor.
# define GDK_VERSION_MIN_REQUIRED (GDK_VERSION_CUR_STABLE)	# A macro that should be defined by the user prior to includingthe gdk.h header.The definition should be one of the predefined GDK versionmacros: GDK_VERSION_3_0, GDK_VERSION_3_2,...
# define GDK_VERSION_MAX_ALLOWED GDK_VERSION_MIN_REQUIRED	# A macro that should be defined by the user prior to includingthe gdk.h header.The definition should be one of the predefined GDK versionmacros: GDK_VERSION_3_0, GDK_VERSION_3_2,...
#define GDK_DISABLE_DEPRECATION_WARNINGS	# A macro that should be defined before including the gdk.h header.If it is defined, no compiler warnings will be produced for usesof deprecated GDK APIs.
#define GDK_PARENT_RELATIVE 1L	# A special value, indicating that the backgroundfor a window should be inherited from the parent window.
#define GDK_CURRENT_TIME 0L	# Represents the current time, and can be used anywhere a time is expected.
#define GDK_PRIORITY_EVENTS	# This is the priority that events from the X server are given in theGLib Main Loop.
#define GDK_PRIORITY_REDRAW (G_PRIORITY_HIGH_IDLE + 20)	# This is the priority that the idle handler processing window updatesis given in theGLib Main Loop.
#define GDK_EVENT_PROPAGATE (FALSE)	# Use this macro as the return value for continuing the propagation ofan event handler.
#define GDK_EVENT_STOP (TRUE)	# Use this macro as the return value for stopping the propagation ofan event handler.
#define GDK_BUTTON_PRIMARY (1)	# The primary button. This is typically the left mouse button, or theright button in a left-handed setup.
#define GDK_BUTTON_MIDDLE (2)	# The middle button.
#define GDK_BUTTON_SECONDARY (3)	# The secondary button. This is typically the right mouse button, or theleft button in a left-handed setup.
#define GDK_SELECTION_PRIMARY 		_GDK_MAKE_ATOM (1)	# A GdkAtom representing the PRIMARY selection.
#define GDK_SELECTION_SECONDARY 	_GDK_MAKE_ATOM (2)	# A GdkAtom representing the SECONDARY selection.
#define GDK_SELECTION_CLIPBOARD 	_GDK_MAKE_ATOM (69)	# A GdkAtom representing the CLIPBOARD selection.
#define GDK_TARGET_BITMAP 		_GDK_MAKE_ATOM (5)	# A GdkAtom representing the BITMAP selection target.
#define GDK_TARGET_COLORMAP 		_GDK_MAKE_ATOM (7)	# A GdkAtom representing the COLORMAP selection target.
#define GDK_TARGET_DRAWABLE 		_GDK_MAKE_ATOM (17)	# A GdkAtom representing the DRAWABLE selection target.
#define GDK_TARGET_PIXMAP 		_GDK_MAKE_ATOM (20)	# A GdkAtom representing the PIXMAP selection target.
#define GDK_TARGET_STRING 		_GDK_MAKE_ATOM (31)	# A GdkAtom representing the STRING selection target.
#define GDK_SELECTION_TYPE_ATOM 	_GDK_MAKE_ATOM (4)	# A GdkAtom representing the ATOM selection type.
#define GDK_SELECTION_TYPE_BITMAP 	_GDK_MAKE_ATOM (5)	# A GdkAtom representing the BITMAP selection type.
#define GDK_SELECTION_TYPE_COLORMAP 	_GDK_MAKE_ATOM (7)	# A GdkAtom representing the COLORMAP selection type.
#define GDK_SELECTION_TYPE_DRAWABLE 	_GDK_MAKE_ATOM (17)	# A GdkAtom representing the DRAWABLE selection type.
#define GDK_SELECTION_TYPE_INTEGER 	_GDK_MAKE_ATOM (19)	# A GdkAtom representing the INTEGER selection type.
#define GDK_SELECTION_TYPE_PIXMAP 	_GDK_MAKE_ATOM (20)	# A GdkAtom representing the PIXMAP selection type.
#define GDK_SELECTION_TYPE_WINDOW 	_GDK_MAKE_ATOM (33)	# A GdkAtom representing the WINDOW selection type.
#define GDK_SELECTION_TYPE_STRING 	_GDK_MAKE_ATOM (31)	# A GdkAtom representing the STRING selection type.
#define GDK_ATOM_TO_POINTER(atom) (atom)	# Converts a GdkAtom into a pointer type.
	atom		# a GdkAtom.
#define GDK_POINTER_TO_ATOM(ptr) ((GdkAtom)(ptr))	# Extracts a GdkAtom from a pointer. The GdkAtom must have beenstored in the pointer with GDK_ATOM_TO_POINTER().
	ptr		# a pointer containing a GdkAtom.
#define GDK_NONE _GDK_MAKE_ATOM (0)	# A null value for GdkAtom, used in a similar way asNone in the Xlib API.
#define GDK_THREADS_ENTER() gdk_threads_enter()	# GDK_THREADS_ENTER has been deprecated since version 3.6 and should not be used in newly-written code.
#define GDK_THREADS_LEAVE() gdk_threads_leave()	# GDK_THREADS_LEAVE has been deprecated since version 3.6 and should not be used in newly-written code.
#define GDK_ROOT_WINDOW() (gdk_x11_get_default_root_xwindow ())	# Obtains the Xlib window id of the root window of the current screen.
#define GDK_WINDOW_XID(win)	# Returns the X window belonging to a GdkWindow.
	win		# a GdkWindow.
	return:		#  the Xlib Window of win. 
#define GDK_DISPLAY_XDISPLAY(display)	
#define GDK_SCREEN_XDISPLAY(screen)	# Returns the display of a X11 GdkScreen.
	screen		# a GdkScreen
	return:		#  an Xlib Display*. 
#define GDK_SCREEN_XNUMBER(screen) (gdk_x11_screen_get_screen_number (screen))	# Returns the index of a X11 GdkScreen.
	screen		# a GdkScreen
	return:		#  the position of screenamong the screens of its display 
#define GDK_SCREEN_XSCREEN(screen) (gdk_x11_screen_get_xscreen (screen))	# Returns the screen of a X11 GdkScreen.
	screen		# a GdkScreen
	return:		#  an Xlib Screen* 
#define GDK_CURSOR_XCURSOR(cursor) (gdk_x11_cursor_get_xcursor (cursor))	# Returns the X cursor belonging to a GdkCursor.
	cursor		# a GdkCursor.
	return:		#  an Xlib Cursor. 
#define GDK_CURSOR_XDISPLAY(cursor) (gdk_x11_cursor_get_xdisplay (cursor))	# Returns the display of a GdkCursor.
	cursor		# a GdkCursor.
	return:		#  an Xlib Display*. 
#define GDK_POINTER_TO_XID(pointer) GPOINTER_TO_UINT(pointer)	# Converts a gpointer back to an XID that was previously convertedusing GDK_XID_TO_POINTER().
	pointer		# pointer to extract an XID from
#define GDK_XID_TO_POINTER(xid) GUINT_TO_POINTER(xid)	# Converts an XID into a gpointer. This is useful with data structuresthat use pointer arguments such as GHashTable. Use GDK_POINTER_TO_XID()to convert the argument back to an XID.
	xid		# XID to stuff into the pointer
enum GdkGrabStatus	# Returned by gdk_device_grab()</a> to indicate success or the reason for thefailure of the grab attempt.
	GDK_GRAB_SUCCESS	# the resource was successfully grabbed.
	GDK_GRAB_ALREADY_GRABBED	# the resource is actively grabbed by another client.
	GDK_GRAB_INVALID_TIME	# the resource was grabbed more recently than the specified time.
	GDK_GRAB_NOT_VIEWABLE	# the grab window or the <em class="parameter"><code>confine_to</em> window are not viewable.
	GDK_GRAB_FROZEN	# the resource is frozen by an active grab of another client.
	GDK_GRAB_FAILED	# the grab failed for some other reason. Since 3.16
enum GdkSeatCapabilities	# Flags describing the seat capabilities.
	GDK_SEAT_CAPABILITY_NONE	# No input capabilities
	GDK_SEAT_CAPABILITY_POINTER	# The seat has a pointer (e.g. mouse)
	GDK_SEAT_CAPABILITY_TOUCH	# The seat has touchscreen(s) attached
	GDK_SEAT_CAPABILITY_TABLET_STYLUS	# The seat has drawing tablet(s) attached
	GDK_SEAT_CAPABILITY_KEYBOARD	# The seat has keyboard(s) attached
	GDK_SEAT_CAPABILITY_ALL_POINTING	# The union of all pointing capabilities
	GDK_SEAT_CAPABILITY_ALL	# The union of all capabilities
enum GdkSubpixelLayout	# This enumeration describes how the red, green and blue componentsof physical pixels on an output device are laid out.
	GDK_SUBPIXEL_LAYOUT_UNKNOWN	# The layout is not known
	GDK_SUBPIXEL_LAYOUT_NONE	# Not organized in this way
	GDK_SUBPIXEL_LAYOUT_HORIZONTAL_RGB	# The layout is horizontal, the order is RGB
	GDK_SUBPIXEL_LAYOUT_HORIZONTAL_BGR	# The layout is horizontal, the order is BGR
	GDK_SUBPIXEL_LAYOUT_VERTICAL_RGB	# The layout is vertical, the order is RGB
	GDK_SUBPIXEL_LAYOUT_VERTICAL_BGR	# The layout is vertical, the order is BGR
enum GdkInputSource	# An enumeration describing the type of an input device in general terms.
	GDK_SOURCE_MOUSE	# the device is a mouse. (This will be reported for the core                   pointer, even if it is something else, such as a trackball.)
	GDK_SOURCE_PEN	# the device is a stylus of a graphics tablet or similar device.
	GDK_SOURCE_ERASER	# the device is an eraser. Typically, this would be the other end                    of a stylus on a graphics tablet.
	GDK_SOURCE_CURSOR	# the device is a graphics tablet “puck” or similar device.
	GDK_SOURCE_KEYBOARD	# the device is a keyboard.
	GDK_SOURCE_TOUCHSCREEN	# the device is a direct-input touch device, such    as a touchscreen or tablet. This device type has been added in 3.4.
	GDK_SOURCE_TOUCHPAD	# the device is an indirect touch device, such    as a touchpad. This device type has been added in 3.4.
	GDK_SOURCE_TRACKPOINT	# the device is a trackpoint. This device type has been    added in 3.22
	GDK_SOURCE_TABLET_PAD	# the device is a "pad", a collection of buttons,    rings and strips found in drawing tablets. This device type has been    added in 3.22.
enum GdkInputMode	# An enumeration that describes the mode of an input device.
	GDK_MODE_DISABLED	# the device is disabled and will not report any events.
	GDK_MODE_SCREEN	# the device is enabled. The device’s coordinate space                  maps to the entire screen.
	GDK_MODE_WINDOW	# the device is enabled. The device’s coordinate space                  is mapped to a single window. The manner in which this window                  is chosen is undefined, but it will typically be the same                  way in which the focus window for key events is determined.
enum GdkAxisUse	# An enumeration describing the way in which a deviceaxis (valuator) maps onto the predefined valuatortypes that GTK+ understands.
	GDK_AXIS_IGNORE	# the axis is ignored.
	GDK_AXIS_X	# the axis is used as the x axis.
	GDK_AXIS_Y	# the axis is used as the y axis.
	GDK_AXIS_PRESSURE	# the axis is used for pressure information.
	GDK_AXIS_XTILT	# the axis is used for x tilt information.
	GDK_AXIS_YTILT	# the axis is used for y tilt information.
	GDK_AXIS_WHEEL	# the axis is used for wheel information.
	GDK_AXIS_DISTANCE	# the axis is used for pen/tablet distance information. (Since: 3.22)
	GDK_AXIS_ROTATION	# the axis is used for pen rotation information. (Since: 3.22)
	GDK_AXIS_SLIDER	# the axis is used for pen slider information. (Since: 3.22)
	GDK_AXIS_LAST	# a constant equal to the numerically highest axis value.
enum GdkAxisFlags	# Flags describing the current capabilities of a device/tool.
	GDK_AXIS_FLAG_X	# X axis is present
	GDK_AXIS_FLAG_Y	# Y axis is present
	GDK_AXIS_FLAG_PRESSURE	# Pressure axis is present
	GDK_AXIS_FLAG_XTILT	# X tilt axis is present
	GDK_AXIS_FLAG_YTILT	# Y tilt axis is present
	GDK_AXIS_FLAG_WHEEL	# Wheel axis is present
	GDK_AXIS_FLAG_DISTANCE	# Distance axis is present
	GDK_AXIS_FLAG_ROTATION	# Z-axis rotation is present
	GDK_AXIS_FLAG_SLIDER	# Slider axis is present
enum GdkDeviceToolType	# Indicates the specific type of tool being used being a tablet. Such as anairbrush, pencil, etc.
	GDK_DEVICE_TOOL_TYPE_UNKNOWN	# Tool is of an unknown type.
	GDK_DEVICE_TOOL_TYPE_PEN	# Tool is a standard tablet stylus.
	GDK_DEVICE_TOOL_TYPE_ERASER	# Tool is standard tablet eraser.
	GDK_DEVICE_TOOL_TYPE_BRUSH	# Tool is a brush stylus.
	GDK_DEVICE_TOOL_TYPE_PENCIL	# Tool is a pencil stylus.
	GDK_DEVICE_TOOL_TYPE_AIRBRUSH	# Tool is an airbrush stylus.
	GDK_DEVICE_TOOL_TYPE_MOUSE	# Tool is a mouse.
	GDK_DEVICE_TOOL_TYPE_LENS	# Tool is a lens cursor.
enum GdkDeviceType	# Indicates the device type. See above</a>for more information about the meaning of these device types.
	GDK_DEVICE_TYPE_MASTER	# Device is a master (or virtual) device. There will                         be an associated focus indicator on the screen.
	GDK_DEVICE_TYPE_SLAVE	# Device is a slave (or physical) device.
	GDK_DEVICE_TYPE_FLOATING	# Device is a physical device, currently not attached to                           any virtual device.
enum GdkGrabOwnership	# Defines how device grabs interact with other devices.
	GDK_OWNERSHIP_NONE	# All other devices’ events are allowed.
	GDK_OWNERSHIP_WINDOW	# Other devices’ events are blocked for the grab window.
	GDK_OWNERSHIP_APPLICATION	# Other devices’ events are blocked for the whole application.
enum GdkDevicePadFeature	# A pad feature.
	GDK_DEVICE_PAD_FEATURE_BUTTON	# a button
	GDK_DEVICE_PAD_FEATURE_RING	# a ring-shaped interactive area
	GDK_DEVICE_PAD_FEATURE_STRIP	# a straight interactive area
enum GdkVisualType	# A set of values that describe the manner in which the pixel valuesfor a visual are converted into RGB values for display.
	GDK_VISUAL_STATIC_GRAY	# Each pixel value indexes a grayscale value    directly.
	GDK_VISUAL_GRAYSCALE	# Each pixel is an index into a color map that    maps pixel values into grayscale values. The color map can be    changed by an application.
	GDK_VISUAL_STATIC_COLOR	# Each pixel value is an index into a predefined,    unmodifiable color map that maps pixel values into RGB values.
	GDK_VISUAL_PSEUDO_COLOR	# Each pixel is an index into a color map that    maps pixel values into rgb values. The color map can be changed by    an application.
	GDK_VISUAL_TRUE_COLOR	# Each pixel value directly contains red, green,    and blue components. Use gdk_visual_get_red_pixel_details(), etc,    to obtain information about how the components are assembled into    a pixel value.
	GDK_VISUAL_DIRECT_COLOR	# GDK_VISUAL_TRUE_COLOR, but the components are    mapped via a color table into the final output table instead of    being converted directly.
enum GdkByteOrder	# A set of values describing the possible byte-ordersfor storing pixel values in memory.
	GDK_LSB_FIRST	# The values are stored with the least-significant byte  first. For instance, the 32-bit value 0xffeecc would be stored  in memory as 0xcc, 0xee, 0xff, 0x00.
	GDK_MSB_FIRST	# The values are stored with the most-significant byte  first. For instance, the 32-bit value 0xffeecc would be stored  in memory as 0x00, 0xff, 0xee, 0xcc.
enum GdkCursorType	# Predefined cursors.
	GDK_X_CURSOR	# <span class="inlinemediaobject"><img src="X_cursor.png">
	GDK_ARROW	# <span class="inlinemediaobject"><img src="arrow.png">
	GDK_BASED_ARROW_DOWN	# <span class="inlinemediaobject"><img src="based_arrow_down.png">
	GDK_BASED_ARROW_UP	# <span class="inlinemediaobject"><img src="based_arrow_up.png">
	GDK_BOAT	# <span class="inlinemediaobject"><img src="boat.png">
	GDK_BOGOSITY	# <span class="inlinemediaobject"><img src="bogosity.png">
	GDK_BOTTOM_LEFT_CORNER	# <span class="inlinemediaobject"><img src="bottom_left_corner.png">
	GDK_BOTTOM_RIGHT_CORNER	# <span class="inlinemediaobject"><img src="bottom_right_corner.png">
	GDK_BOTTOM_SIDE	# <span class="inlinemediaobject"><img src="bottom_side.png">
	GDK_BOTTOM_TEE	# <span class="inlinemediaobject"><img src="bottom_tee.png">
	GDK_BOX_SPIRAL	# <span class="inlinemediaobject"><img src="box_spiral.png">
	GDK_CENTER_PTR	# <span class="inlinemediaobject"><img src="center_ptr.png">
	GDK_CIRCLE	# <span class="inlinemediaobject"><img src="circle.png">
	GDK_CLOCK	# <span class="inlinemediaobject"><img src="clock.png">
	GDK_COFFEE_MUG	# <span class="inlinemediaobject"><img src="coffee_mug.png">
	GDK_CROSS	# <span class="inlinemediaobject"><img src="cross.png">
	GDK_CROSS_REVERSE	# <span class="inlinemediaobject"><img src="cross_reverse.png">
	GDK_CROSSHAIR	# <span class="inlinemediaobject"><img src="crosshair.png">
	GDK_DIAMOND_CROSS	# <span class="inlinemediaobject"><img src="diamond_cross.png">
	GDK_DOT	# <span class="inlinemediaobject"><img src="dot.png">
	GDK_DOTBOX	# <span class="inlinemediaobject"><img src="dotbox.png">
	GDK_DOUBLE_ARROW	# <span class="inlinemediaobject"><img src="double_arrow.png">
	GDK_DRAFT_LARGE	# <span class="inlinemediaobject"><img src="draft_large.png">
	GDK_DRAFT_SMALL	# <span class="inlinemediaobject"><img src="draft_small.png">
	GDK_DRAPED_BOX	# <span class="inlinemediaobject"><img src="draped_box.png">
	GDK_EXCHANGE	# <span class="inlinemediaobject"><img src="exchange.png">
	GDK_FLEUR	# <span class="inlinemediaobject"><img src="fleur.png">
	GDK_GOBBLER	# <span class="inlinemediaobject"><img src="gobbler.png">
	GDK_GUMBY	# <span class="inlinemediaobject"><img src="gumby.png">
	GDK_HAND1	# <span class="inlinemediaobject"><img src="hand1.png">
	GDK_HAND2	# <span class="inlinemediaobject"><img src="hand2.png">
	GDK_HEART	# <span class="inlinemediaobject"><img src="heart.png">
	GDK_ICON	# <span class="inlinemediaobject"><img src="icon.png">
	GDK_IRON_CROSS	# <span class="inlinemediaobject"><img src="iron_cross.png">
	GDK_LEFT_PTR	# <span class="inlinemediaobject"><img src="left_ptr.png">
	GDK_LEFT_SIDE	# <span class="inlinemediaobject"><img src="left_side.png">
	GDK_LEFT_TEE	# <span class="inlinemediaobject"><img src="left_tee.png">
	GDK_LEFTBUTTON	# <span class="inlinemediaobject"><img src="leftbutton.png">
	GDK_LL_ANGLE	# <span class="inlinemediaobject"><img src="ll_angle.png">
	GDK_LR_ANGLE	# <span class="inlinemediaobject"><img src="lr_angle.png">
	GDK_MAN	# <span class="inlinemediaobject"><img src="man.png">
	GDK_MIDDLEBUTTON	# <span class="inlinemediaobject"><img src="middlebutton.png">
	GDK_MOUSE	# <span class="inlinemediaobject"><img src="mouse.png">
	GDK_PENCIL	# <span class="inlinemediaobject"><img src="pencil.png">
	GDK_PIRATE	# <span class="inlinemediaobject"><img src="pirate.png">
	GDK_PLUS	# <span class="inlinemediaobject"><img src="plus.png">
	GDK_QUESTION_ARROW	# <span class="inlinemediaobject"><img src="question_arrow.png">
	GDK_RIGHT_PTR	# <span class="inlinemediaobject"><img src="right_ptr.png">
	GDK_RIGHT_SIDE	# <span class="inlinemediaobject"><img src="right_side.png">
	GDK_RIGHT_TEE	# <span class="inlinemediaobject"><img src="right_tee.png">
	GDK_RIGHTBUTTON	# <span class="inlinemediaobject"><img src="rightbutton.png">
	GDK_RTL_LOGO	# <span class="inlinemediaobject"><img src="rtl_logo.png">
	GDK_SAILBOAT	# <span class="inlinemediaobject"><img src="sailboat.png">
	GDK_SB_DOWN_ARROW	# <span class="inlinemediaobject"><img src="sb_down_arrow.png">
	GDK_SB_H_DOUBLE_ARROW	# <span class="inlinemediaobject"><img src="sb_h_double_arrow.png">
	GDK_SB_LEFT_ARROW	# <span class="inlinemediaobject"><img src="sb_left_arrow.png">
	GDK_SB_RIGHT_ARROW	# <span class="inlinemediaobject"><img src="sb_right_arrow.png">
	GDK_SB_UP_ARROW	# <span class="inlinemediaobject"><img src="sb_up_arrow.png">
	GDK_SB_V_DOUBLE_ARROW	# <span class="inlinemediaobject"><img src="sb_v_double_arrow.png">
	GDK_SHUTTLE	# <span class="inlinemediaobject"><img src="shuttle.png">
	GDK_SIZING	# <span class="inlinemediaobject"><img src="sizing.png">
	GDK_SPIDER	# <span class="inlinemediaobject"><img src="spider.png">
	GDK_SPRAYCAN	# <span class="inlinemediaobject"><img src="spraycan.png">
	GDK_STAR	# <span class="inlinemediaobject"><img src="star.png">
	GDK_TARGET	# <span class="inlinemediaobject"><img src="target.png">
	GDK_TCROSS	# <span class="inlinemediaobject"><img src="tcross.png">
	GDK_TOP_LEFT_ARROW	# <span class="inlinemediaobject"><img src="top_left_arrow.png">
	GDK_TOP_LEFT_CORNER	# <span class="inlinemediaobject"><img src="top_left_corner.png">
	GDK_TOP_RIGHT_CORNER	# <span class="inlinemediaobject"><img src="top_right_corner.png">
	GDK_TOP_SIDE	# <span class="inlinemediaobject"><img src="top_side.png">
	GDK_TOP_TEE	# <span class="inlinemediaobject"><img src="top_tee.png">
	GDK_TREK	# <span class="inlinemediaobject"><img src="trek.png">
	GDK_UL_ANGLE	# <span class="inlinemediaobject"><img src="ul_angle.png">
	GDK_UMBRELLA	# <span class="inlinemediaobject"><img src="umbrella.png">
	GDK_UR_ANGLE	# <span class="inlinemediaobject"><img src="ur_angle.png">
	GDK_WATCH	# <span class="inlinemediaobject"><img src="watch.png">
	GDK_XTERM	# <span class="inlinemediaobject"><img src="xterm.png">
	GDK_LAST_CURSOR	# last cursor type
	GDK_BLANK_CURSOR	# Blank cursor. Since 2.16
	GDK_CURSOR_IS_PIXMAP	# type of cursors constructed with  gdk_cursor_new_from_pixbuf()
enum GdkWindowType	# Describes the kind of window.
	GDK_WINDOW_ROOT	# root window; this window has no parent, covers the entire screen, and is created by the window system
	GDK_WINDOW_TOPLEVEL	# toplevel window (used to implement GtkWindow)
	GDK_WINDOW_CHILD	# child window (used to implement e.g. GtkEntry)
	GDK_WINDOW_TEMP	# override redirect temporary window (used to implement GtkMenu)
	GDK_WINDOW_FOREIGN	# foreign window (see gdk_window_foreign_new())
	GDK_WINDOW_SUBSURFACE	# subsurface-based window; This window is visually tied to a toplevel, and is moved/stacked with it. Currently this window type is only implemented in Wayland. Since 3.14
enum GdkWindowWindowClass	# <em class="parameter"><code>GDK_INPUT_OUTPUT</em> windows are the standard kind of window you might expect.Such windows receive events and are also displayed on screen.<em class="parameter"><code>GDK_INPUT_ONLY</em> windows are invisible; they are usually placed above otherwindows in order to trap or filter the events. You can’t draw on<em class="parameter"><code>GDK_INPUT_ONLY</em> windows.
	GDK_INPUT_OUTPUT	# window for graphics and events
	GDK_INPUT_ONLY	# window for events only
enum GdkWindowHints	# Used to indicate which fields of a <span class="type">GdkGeometry</span></a> struct should be paidattention to. Also, the presence/absence of <em class="parameter"><code>GDK_HINT_POS</em>,<em class="parameter"><code>GDK_HINT_USER_POS</em>, and <em class="parameter"><code>GDK_HINT_USER_SIZE</em> is significant, though they don'tdirectly refer to <span class="type">GdkGeometry</span></a> fields. <em class="parameter"><code>GDK_HINT_USER_POS</em> will be setautomatically by <span class="type">GtkWindow</span></a> if you call gtk_window_move()</a>.<em class="parameter"><code>GDK_HINT_USER_POS</em> and <em class="parameter"><code>GDK_HINT_USER_SIZE</em> should be set if the userspecified a size/position using a --geometry command-line argument;gtk_window_parse_geometry() automatically sets these flags.
	GDK_HINT_POS	# indicates that the program has positioned the window
	GDK_HINT_MIN_SIZE	# min size fields are set
	GDK_HINT_MAX_SIZE	# max size fields are set
	GDK_HINT_BASE_SIZE	# base size fields are set
	GDK_HINT_ASPECT	# aspect ratio fields are set
	GDK_HINT_RESIZE_INC	# resize increment fields are set
	GDK_HINT_WIN_GRAVITY	# window gravity field is set
	GDK_HINT_USER_POS	# indicates that the window’s position was explicitly set by the user
	GDK_HINT_USER_SIZE	# indicates that the window’s size was explicitly set by the user
enum GdkGravity	# Defines the reference point of a window and the meaning of coordinatespassed to gtk_window_move()</a>. See gtk_window_move()</a> and the "implementationnotes" section of theExtended Window Manager Hints</a>specification for more details.
	GDK_GRAVITY_NORTH_WEST	# the reference point is at the top left corner.
	GDK_GRAVITY_NORTH	# the reference point is in the middle of the top edge.
	GDK_GRAVITY_NORTH_EAST	# the reference point is at the top right corner.
	GDK_GRAVITY_WEST	# the reference point is at the middle of the left edge.
	GDK_GRAVITY_CENTER	# the reference point is at the center of the window.
	GDK_GRAVITY_EAST	# the reference point is at the middle of the right edge.
	GDK_GRAVITY_SOUTH_WEST	# the reference point is at the lower left corner.
	GDK_GRAVITY_SOUTH	# the reference point is at the middle of the lower edge.
	GDK_GRAVITY_SOUTH_EAST	# the reference point is at the lower right corner.
	GDK_GRAVITY_STATIC	# the reference point is at the top left corner of the window itself, ignoring window manager decorations.
enum GdkAnchorHints	# Positioning hints for aligning a window relative to a rectangle.
	GDK_ANCHOR_FLIP_X	# allow flipping anchors horizontally
	GDK_ANCHOR_FLIP_Y	# allow flipping anchors vertically
	GDK_ANCHOR_SLIDE_X	# allow sliding window horizontally
	GDK_ANCHOR_SLIDE_Y	# allow sliding window vertically
	GDK_ANCHOR_RESIZE_X	# allow resizing window horizontally
	GDK_ANCHOR_RESIZE_Y	# allow resizing window vertically
	GDK_ANCHOR_FLIP	# allow flipping anchors on both axes
	GDK_ANCHOR_SLIDE	# allow sliding window on both axes
	GDK_ANCHOR_RESIZE	# allow resizing window on both axes
enum GdkWindowEdge	# Determines a window edge or corner.
	GDK_WINDOW_EDGE_NORTH_WEST	# the top left corner.
	GDK_WINDOW_EDGE_NORTH	# the top edge.
	GDK_WINDOW_EDGE_NORTH_EAST	# the top right corner.
	GDK_WINDOW_EDGE_WEST	# the left edge.
	GDK_WINDOW_EDGE_EAST	# the right edge.
	GDK_WINDOW_EDGE_SOUTH_WEST	# the lower left corner.
	GDK_WINDOW_EDGE_SOUTH	# the lower edge.
	GDK_WINDOW_EDGE_SOUTH_EAST	# the lower right corner.
enum GdkWindowTypeHint	# These are hints for the window manager that indicate what type of functionthe window has. The window manager can use this when determining decorationand behaviour of the window. The hint must be set before mapping the window.
	GDK_WINDOW_TYPE_HINT_NORMAL	# Normal toplevel window.
	GDK_WINDOW_TYPE_HINT_DIALOG	# Dialog window.
	GDK_WINDOW_TYPE_HINT_MENU	# Window used to implement a menu; GTK+ uses this hint only for torn-off menus, see GtkTearoffMenuItem.
	GDK_WINDOW_TYPE_HINT_TOOLBAR	# Window used to implement toolbars.
	GDK_WINDOW_TYPE_HINT_SPLASHSCREEN	# Window used to display a splash screen during application startup.
	GDK_WINDOW_TYPE_HINT_UTILITY	# Utility windows which are not detached toolbars or dialogs.
	GDK_WINDOW_TYPE_HINT_DOCK	# Used for creating dock or panel windows.
	GDK_WINDOW_TYPE_HINT_DESKTOP	# Used for creating the desktop background window.
	GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU	# A menu that belongs to a menubar.
	GDK_WINDOW_TYPE_HINT_POPUP_MENU	# A menu that does not belong to a menubar, e.g. a context menu.
	GDK_WINDOW_TYPE_HINT_TOOLTIP	# A tooltip.
	GDK_WINDOW_TYPE_HINT_NOTIFICATION	# A notification - typically a “bubble” that belongs to a status icon.
	GDK_WINDOW_TYPE_HINT_COMBO	# A popup from a combo box.
	GDK_WINDOW_TYPE_HINT_DND	# A window that is used to implement a DND cursor.
enum GdkFullscreenMode	# Indicates which monitor (in a multi-head setup) a window should span overwhen in fullscreen mode.
	GDK_FULLSCREEN_ON_CURRENT_MONITOR	# Fullscreen on current monitor only.
	GDK_FULLSCREEN_ON_ALL_MONITORS	# Span across all monitors when fullscreen.
enum GdkFilterReturn	# Specifies the result of applying a <span class="type">GdkFilterFunc</span></a> to a native event.
	GDK_FILTER_CONTINUE	# event not handled, continue processing.
	GDK_FILTER_TRANSLATE	# event structure that was passed in.
	GDK_FILTER_REMOVE	# event handled, terminate processing.
enum GdkModifierType	# A set of bit-flags to indicate the state of modifier keys and mouse buttonsin various event types. Typical modifier keys are Shift, Control, Meta,Super, Hyper, Alt, Compose, Apple, CapsLock or ShiftLock.
	GDK_SHIFT_MASK	# the Shift key.
	GDK_LOCK_MASK	# a Lock key (depending on the modifier mapping of the X server this may either be CapsLock or ShiftLock).
	GDK_CONTROL_MASK	# the Control key.
	GDK_MOD1_MASK	# the fourth modifier key (it depends on the modifier mapping of the X server which key is interpreted as this modifier, but normally it is the Alt key).
	GDK_MOD2_MASK	# the fifth modifier key (it depends on the modifier mapping of the X server which key is interpreted as this modifier).
	GDK_MOD3_MASK	# the sixth modifier key (it depends on the modifier mapping of the X server which key is interpreted as this modifier).
	GDK_MOD4_MASK	# the seventh modifier key (it depends on the modifier mapping of the X server which key is interpreted as this modifier).
	GDK_MOD5_MASK	# the eighth modifier key (it depends on the modifier mapping of the X server which key is interpreted as this modifier).
	GDK_BUTTON1_MASK	# the first mouse button.
	GDK_BUTTON2_MASK	# the second mouse button.
	GDK_BUTTON3_MASK	# the third mouse button.
	GDK_BUTTON4_MASK	# the fourth mouse button.
	GDK_BUTTON5_MASK	# the fifth mouse button.
	GDK_MODIFIER_RESERVED_13_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_14_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_15_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_16_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_17_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_18_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_19_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_20_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_21_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_22_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_23_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_24_MASK	# A reserved bit flag; do not use in your own code
	GDK_MODIFIER_RESERVED_25_MASK	# A reserved bit flag; do not use in your own code
	GDK_SUPER_MASK	# the Super modifier. Since 2.10
	GDK_HYPER_MASK	# the Hyper modifier. Since 2.10
	GDK_META_MASK	# the Meta modifier. Since 2.10
	GDK_MODIFIER_RESERVED_29_MASK	# A reserved bit flag; do not use in your own code
	GDK_RELEASE_MASK	# not used in GDK itself. GTK+ uses it to differentiate between (keyval, modifiers) pairs from key press and release events.
	GDK_MODIFIER_MASK	# a mask covering all modifier types.
enum GdkModifierIntent	# This enum is used with gdk_keymap_get_modifier_mask()</a>in order to determine what modifiers thecurrently used windowing system backend uses for particularpurposes. For example, on X11/Windows, the Control key is used forinvoking menu shortcuts (accelerators), whereas on Apple computersit’s the Command key (which correspond to <code class="literal">GDK_CONTROL_MASK</a> and<code class="literal">GDK_MOD2_MASK</a>, respectively).
	GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR	# the primary modifier used to invoke menu accelerators.
	GDK_MODIFIER_INTENT_CONTEXT_MENU	# the modifier used to invoke context menus. Note that mouse button 3 always triggers context menus. When this modifier is not 0, it additionally triggers context menus when used with mouse button 1.
	GDK_MODIFIER_INTENT_EXTEND_SELECTION	# modifier-click or <code class="literal">modifier-cursor-key
	GDK_MODIFIER_INTENT_MODIFY_SELECTION	# the modifier used to modify selections, which in most cases means toggling the clicked item into or out of the selection.
	GDK_MODIFIER_INTENT_NO_TEXT_INPUT	# when any of these modifiers is pressed, the key event cannot produce a symbol directly. This is meant to be used for input methods, and for use cases like typeahead search.
	GDK_MODIFIER_INTENT_SHIFT_GROUP	# the modifier that switches between keyboard groups (AltGr on X11/Windows and Option/Alt on OS X).
	GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK	# The set of modifier masks acceptedas modifiers in accelerators. Needed because Command is mapped to MOD2 onOSX, which is widely used, but on X11 MOD2 is NumLock and using that for amod key is problematic at best.Ref: https://bugzilla.gnome.org/show_bug.cgi?id=736125.
enum GdkWMDecoration	# These are hints originally defined by the Motif toolkit.The window manager can use them when determining how to decoratethe window. The hint must be set before mapping the window.
	GDK_DECOR_ALL	# all decorations should be applied.
	GDK_DECOR_BORDER	# a frame should be drawn around the window.
	GDK_DECOR_RESIZEH	# the frame should have resize handles.
	GDK_DECOR_TITLE	# a titlebar should be placed above the window.
	GDK_DECOR_MENU	# a button for opening a menu should be included.
	GDK_DECOR_MINIMIZE	# a minimize button should be included.
	GDK_DECOR_MAXIMIZE	# a maximize button should be included.
enum GdkWMFunction	# These are hints originally defined by the Motif toolkit. The window managercan use them when determining the functions to offer for the window. Thehint must be set before mapping the window.
	GDK_FUNC_ALL	# all functions should be offered.
	GDK_FUNC_RESIZE	# the window should be resizable.
	GDK_FUNC_MOVE	# the window should be movable.
	GDK_FUNC_MINIMIZE	# the window should be minimizable.
	GDK_FUNC_MAXIMIZE	# the window should be maximizable.
	GDK_FUNC_CLOSE	# the window should be closable.
enum GdkFrameClockPhase	# <span class="type">GdkFrameClockPhase</span></a> is used to represent the different paint clockphases that can be requested. The elements of the enumerationcorrespond to the signals of <span class="type">GdkFrameClock</span></a>.
	GDK_FRAME_CLOCK_PHASE_NONE	# no phase
	GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS	# corresponds to GdkFrameClock::flush-events. Should not be handled by applications.
	GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT	# corresponds to GdkFrameClock::before-paint. Should not be handled by applications.
	GDK_FRAME_CLOCK_PHASE_UPDATE	# corresponds to GdkFrameClock::update.
	GDK_FRAME_CLOCK_PHASE_LAYOUT	# corresponds to GdkFrameClock::layout.
	GDK_FRAME_CLOCK_PHASE_PAINT	# corresponds to GdkFrameClock::paint.
	GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS	# corresponds to GdkFrameClock::resume-events. Should not be handled by applications.
	GDK_FRAME_CLOCK_PHASE_AFTER_PAINT	# corresponds to GdkFrameClock::after-paint. Should not be handled by applications.
enum GdkGLError	# Error enumeration for <span class="type">GdkGLContext</span></a>.
	GDK_GL_ERROR_NOT_AVAILABLE	# OpenGL support is not available
	GDK_GL_ERROR_UNSUPPORTED_FORMAT	# The requested visual format is not supported
	GDK_GL_ERROR_UNSUPPORTED_PROFILE	# The requested profile is not supported
	GDK_GL_ERROR_COMPILATION_FAILED	# The shader compilation failed (available since 3.22)
	GDK_GL_ERROR_LINK_FAILED	# The shader linking failed (available since 3.22)
enum GdkEventType	# Specifies the type of the event.
	GDK_NOTHING	# a special code to indicate a null event.
	GDK_DELETE	# the window manager has requested that the toplevel window be  hidden or destroyed, usually when the user clicks on a special icon in the  title bar.
	GDK_DESTROY	# the window has been destroyed.
	GDK_EXPOSE	# all or part of the window has become visible and needs to be  redrawn.
	GDK_MOTION_NOTIFY	# the pointer (usually a mouse) has moved.
	GDK_BUTTON_PRESS	# a mouse button has been pressed.
	GDK_2BUTTON_PRESS	# GDK_BUTTON_PRESS event.
	GDK_DOUBLE_BUTTON_PRESS	# GDK_2BUTTON_PRESS, added in 3.6.
	GDK_3BUTTON_PRESS	# GDK_BUTTON_PRESS event.
	GDK_TRIPLE_BUTTON_PRESS	# GDK_3BUTTON_PRESS, added in 3.6.
	GDK_BUTTON_RELEASE	# a mouse button has been released.
	GDK_KEY_PRESS	# a key has been pressed.
	GDK_KEY_RELEASE	# a key has been released.
	GDK_ENTER_NOTIFY	# the pointer has entered the window.
	GDK_LEAVE_NOTIFY	# the pointer has left the window.
	GDK_FOCUS_CHANGE	# the keyboard focus has entered or left the window.
	GDK_CONFIGURE	# GDK_WINDOW_CHILD windows.
	GDK_MAP	# the window has been mapped.
	GDK_UNMAP	# the window has been unmapped.
	GDK_PROPERTY_NOTIFY	# a property on the window has been changed or deleted.
	GDK_SELECTION_CLEAR	# the application has lost ownership of a selection.
	GDK_SELECTION_REQUEST	# another application has requested a selection.
	GDK_SELECTION_NOTIFY	# a selection has been received.
	GDK_PROXIMITY_IN	# an input device has moved into contact with a sensing  surface (e.g. a touchscreen or graphics tablet).
	GDK_PROXIMITY_OUT	# an input device has moved out of contact with a sensing  surface.
	GDK_DRAG_ENTER	# the mouse has entered the window while a drag is in progress.
	GDK_DRAG_LEAVE	# the mouse has left the window while a drag is in progress.
	GDK_DRAG_MOTION	# the mouse has moved in the window while a drag is in  progress.
	GDK_DRAG_STATUS	# the status of the drag operation initiated by the window  has changed.
	GDK_DROP_START	# a drop operation onto the window has started.
	GDK_DROP_FINISHED	# the drop operation initiated by the window has completed.
	GDK_CLIENT_EVENT	# a message has been received from another application.
	GDK_VISIBILITY_NOTIFY	# the window visibility status has changed.
	GDK_SCROLL	# the scroll wheel was turned
	GDK_WINDOW_STATE	# the state of a window has changed. See GdkWindowState  for the possible window states
	GDK_SETTING	# a setting has been modified.
	GDK_OWNER_CHANGE	# the owner of a selection has changed. This event type  was added in 2.6
	GDK_GRAB_BROKEN	# a pointer or keyboard grab was broken. This event type  was added in 2.8.
	GDK_DAMAGE	# the content of the window has been changed. This event type  was added in 2.14.
	GDK_TOUCH_BEGIN	# A new touch event sequence has just started. This event  type was added in 3.4.
	GDK_TOUCH_UPDATE	# A touch event sequence has been updated. This event type  was added in 3.4.
	GDK_TOUCH_END	# A touch event sequence has finished. This event type  was added in 3.4.
	GDK_TOUCH_CANCEL	# A touch event sequence has been canceled. This event type  was added in 3.4.
	GDK_TOUCHPAD_SWIPE	# A touchpad swipe gesture event, the current state  is determined by its phase field. This event type was added in 3.18.
	GDK_TOUCHPAD_PINCH	# A touchpad pinch gesture event, the current state  is determined by its phase field. This event type was added in 3.18.
	GDK_PAD_BUTTON_PRESS	# A tablet pad button press event. This event type  was added in 3.22.
	GDK_PAD_BUTTON_RELEASE	# A tablet pad button release event. This event type  was added in 3.22.
	GDK_PAD_RING	# A tablet pad axis event from a "ring". This event type was  added in 3.22.
	GDK_PAD_STRIP	# A tablet pad axis event from a "strip". This event type was  added in 3.22.
	GDK_PAD_GROUP_MODE	# A tablet pad group mode change. This event type was  added in 3.22.
	GDK_EVENT_LAST	# marks the end of the GdkEventType enumeration. Added in 2.18
enum GdkEventMask	# A set of bit-flags to indicate which events a window is to receive.Most of these masks map onto one or more of the <span class="type">GdkEventType</span></a> event typesabove.
	GDK_EXPOSURE_MASK	# receive expose events
	GDK_POINTER_MOTION_MASK	# receive all pointer motion events
	GDK_POINTER_MOTION_HINT_MASK	# deprecated. see the explanation above
	GDK_BUTTON_MOTION_MASK	# receive pointer motion events while any button is pressed
	GDK_BUTTON1_MOTION_MASK	# receive pointer motion events while 1 button is pressed
	GDK_BUTTON2_MOTION_MASK	# receive pointer motion events while 2 button is pressed
	GDK_BUTTON3_MOTION_MASK	# receive pointer motion events while 3 button is pressed
	GDK_BUTTON_PRESS_MASK	# receive button press events
	GDK_BUTTON_RELEASE_MASK	# receive button release events
	GDK_KEY_PRESS_MASK	# receive key press events
	GDK_KEY_RELEASE_MASK	# receive key release events
	GDK_ENTER_NOTIFY_MASK	# receive window enter events
	GDK_LEAVE_NOTIFY_MASK	# receive window leave events
	GDK_FOCUS_CHANGE_MASK	# receive focus change events
	GDK_STRUCTURE_MASK	# receive events about window configuration change
	GDK_PROPERTY_CHANGE_MASK	# receive property change events
	GDK_VISIBILITY_NOTIFY_MASK	# receive visibility change events
	GDK_PROXIMITY_IN_MASK	# receive proximity in events
	GDK_PROXIMITY_OUT_MASK	# receive proximity out events
	GDK_SUBSTRUCTURE_MASK	# receive events about window configuration changes of  child windows
	GDK_SCROLL_MASK	# receive scroll events
	GDK_TOUCH_MASK	# receive touch events. Since 3.4
	GDK_SMOOTH_SCROLL_MASK	# receive smooth scrolling events. Since 3.4
	GDK_TOUCHPAD_GESTURE_MASK	# receive touchpad gesture events. Since 3.18
	GDK_TABLET_PAD_MASK	# receive tablet pad events. Since 3.22
	GDK_ALL_EVENTS_MASK	# the combination of all the above event masks.
enum GdkScrollDirection	# Specifies the direction for <span class="type">GdkEventScroll</span></a>.
	GDK_SCROLL_UP	# the window is scrolled up.
	GDK_SCROLL_DOWN	# the window is scrolled down.
	GDK_SCROLL_LEFT	# the window is scrolled to the left.
	GDK_SCROLL_RIGHT	# the window is scrolled to the right.
	GDK_SCROLL_SMOOTH	# the scrolling is determined by the delta values  in GdkEventScroll. See gdk_event_get_scroll_deltas(). Since: 3.4
enum GdkVisibilityState	# Specifies the visiblity status of a window for a <span class="type">GdkEventVisibility</span></a>.
	GDK_VISIBILITY_UNOBSCURED	# the window is completely visible.
	GDK_VISIBILITY_PARTIAL	# the window is partially visible.
	GDK_VISIBILITY_FULLY_OBSCURED	# the window is not visible at all.
enum GdkCrossingMode	# Specifies the crossing mode for <span class="type">GdkEventCrossing</span></a>.
	GDK_CROSSING_NORMAL	# crossing because of pointer motion.
	GDK_CROSSING_GRAB	# crossing because a grab is activated.
	GDK_CROSSING_UNGRAB	# crossing because a grab is deactivated.
	GDK_CROSSING_GTK_GRAB	# crossing because a GTK+ grab is activated.
	GDK_CROSSING_GTK_UNGRAB	# crossing because a GTK+ grab is deactivated.
	GDK_CROSSING_STATE_CHANGED	# crossing because a GTK+ widget changed  state (e.g. sensitivity).
	GDK_CROSSING_TOUCH_BEGIN	# crossing because a touch sequence has begun,  this event is synthetic as the pointer might have not left the window.
	GDK_CROSSING_TOUCH_END	# crossing because a touch sequence has ended,  this event is synthetic as the pointer might have not left the window.
	GDK_CROSSING_DEVICE_SWITCH	# crossing because of a device switch (i.e.  a mouse taking control of the pointer after a touch device), this event  is synthetic as the pointer didn’t leave the window.
enum GdkNotifyType	# Specifies the kind of crossing for <span class="type">GdkEventCrossing</span></a>.
	GDK_NOTIFY_ANCESTOR	# the window is entered from an ancestor or  left towards an ancestor.
	GDK_NOTIFY_VIRTUAL	# the pointer moves between an ancestor and an  inferior of the window.
	GDK_NOTIFY_INFERIOR	# the window is entered from an inferior or  left towards an inferior.
	GDK_NOTIFY_NONLINEAR	# the window is entered from or left towards  a window which is neither an ancestor nor an inferior.
	GDK_NOTIFY_NONLINEAR_VIRTUAL	# the pointer moves between two windows  which are not ancestors of each other and the window is part of  the ancestor chain between one of these windows and their least  common ancestor.
	GDK_NOTIFY_UNKNOWN	# an unknown type of enter/leave event occurred.
enum GdkPropertyState	# Specifies the type of a property change for a <span class="type">GdkEventProperty</span></a>.
	GDK_PROPERTY_NEW_VALUE	# the property value was changed.
	GDK_PROPERTY_DELETE	# the property was deleted.
enum GdkWindowState	# Specifies the state of a toplevel window.
	GDK_WINDOW_STATE_WITHDRAWN	# the window is not shown.
	GDK_WINDOW_STATE_ICONIFIED	# the window is minimized.
	GDK_WINDOW_STATE_MAXIMIZED	# the window is maximized.
	GDK_WINDOW_STATE_STICKY	# the window is sticky.
	GDK_WINDOW_STATE_FULLSCREEN	# the window is maximized without  decorations.
	GDK_WINDOW_STATE_ABOVE	# the window is kept above other windows.
	GDK_WINDOW_STATE_BELOW	# the window is kept below other windows.
	GDK_WINDOW_STATE_FOCUSED	# the window is presented as focused (with active decorations).
	GDK_WINDOW_STATE_TILED	# the window is in a tiled state, Since 3.10
enum GdkSettingAction	# Specifies the kind of modification applied to a setting in a<span class="type">GdkEventSetting</span></a>.
	GDK_SETTING_ACTION_NEW	# a setting was added.
	GDK_SETTING_ACTION_CHANGED	# a setting was changed.
	GDK_SETTING_ACTION_DELETED	# a setting was deleted.
enum GdkOwnerChange	# Specifies why a selection ownership was changed.
	GDK_OWNER_CHANGE_NEW_OWNER	# some other app claimed the ownership
	GDK_OWNER_CHANGE_DESTROY	# the window was destroyed
	GDK_OWNER_CHANGE_CLOSE	# the client was closed
enum GdkDragCancelReason	# Used in <span class="type">GdkDragContext</span></a> to the reason of a cancelled DND operation.
	GDK_DRAG_CANCEL_NO_TARGET	# There is no suitable drop target.
	GDK_DRAG_CANCEL_USER_CANCELLED	# Drag cancelled by the user
	GDK_DRAG_CANCEL_ERROR	# Unspecified error.
enum GdkDragProtocol	# Used in <span class="type">GdkDragContext</span></a> to indicate the protocol according towhich DND is done.
	GDK_DRAG_PROTO_NONE	# no protocol.
	GDK_DRAG_PROTO_MOTIF	# The Motif DND protocol. No longer supported
	GDK_DRAG_PROTO_XDND	# The Xdnd protocol.
	GDK_DRAG_PROTO_ROOTWIN	# An extension to the Xdnd protocol for unclaimed root window drops.
	GDK_DRAG_PROTO_WIN32_DROPFILES	# The simple WM_DROPFILES protocol.
	GDK_DRAG_PROTO_OLE2	# The complex OLE2 DND protocol (not implemented).
	GDK_DRAG_PROTO_LOCAL	# Intra-application DND.
	GDK_DRAG_PROTO_WAYLAND	# Wayland DND protocol.
enum GdkDragAction	# Used in <span class="type">GdkDragContext</span></a> to indicate what the destinationshould do with the dropped data.
	GDK_ACTION_DEFAULT	# Means nothing, and should not be used.
	GDK_ACTION_COPY	# Copy the data.
	GDK_ACTION_MOVE	# Move the data, i.e. first copy it, then delete it from the source using the DELETE target of the X selection protocol.
	GDK_ACTION_LINK	# Add a link to the data. Note that this is only useful if source and destination agree on what it means.
	GDK_ACTION_PRIVATE	# Special action which tells the source that the destination will do something that the source doesn’t understand.
	GDK_ACTION_ASK	# Ask the user what to do with the data.
enum GdkPropMode	# Describes how existing data is combined with new data whenusing gdk_property_change()</a>.
	GDK_PROP_MODE_REPLACE	# the new data replaces the existing data.
	GDK_PROP_MODE_PREPEND	# the new data is prepended to the existing data.
	GDK_PROP_MODE_APPEND	# the new data is appended to the existing data.

#.# gtk
struct GtkApplication;
struct GtkApplicationClass {
	GApplicationClass parent_class;
	void (*window_added) (GtkApplication *application, GtkWindow *window);
	void (*window_removed) (GtkApplication *application, GtkWindow *window);
};

struct GtkApplicationWindow;
struct GtkApplicationWindowClass {
	GtkWindowClass parent_class;
};

typedef struct _GtkActionable GtkActionable;
struct GtkActionableInterface {
	const gchar * (* get_action_name) (GtkActionable *actionable);
	void (* set_action_name) (GtkActionable *actionable, const gchar *action_name);
	GVariant * (* get_action_target_value) (GtkActionable *actionable);
	void (* set_action_target_value) (GtkActionable *actionable, GVariant *target_value);
};

typedef struct _GtkBuilder GtkBuilder;
typedef struct _GtkBuildable GtkBuildable;
struct GtkBuildableIface {
	GTypeInterface g_iface;
	/* virtual table */
	void (* set_name) (GtkBuildable *buildable, const gchar *name);
	const gchar * (* get_name) (GtkBuildable *buildable);
	void (* add_child) (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *type);
	void (* set_buildable_property) (GtkBuildable *buildable, GtkBuilder *builder, const gchar *name, const GValue *value);
	GObject * (* construct_child) (GtkBuildable *buildable, GtkBuilder *builder, const gchar *name);
	gboolean (* custom_tag_start) (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, GMarkupParser *parser, gpointer *data);
	void (* custom_tag_end) (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer *data);
	void (* custom_finished) (GtkBuildable *buildable, GtkBuilder *builder, GObject *child, const gchar *tagname, gpointer data);
	void (* parser_finished) (GtkBuildable *buildable, GtkBuilder *builder);
	GObject * (* get_internal_child) (GtkBuildable *buildable, GtkBuilder *builder, const gchar *childname);
};

typedef struct _GtkWindow GtkWindow;
struct GtkWindowClass {
	GtkBinClass parent_class;
	void (* set_focus) (GtkWindow *window, GtkWidget *focus);
	/* G_SIGNAL_ACTION signals for keybindings */
	void (* activate_focus) (GtkWindow *window);
	void (* activate_default) (GtkWindow *window);
	void (* keys_changed) (GtkWindow *window);
	gboolean (* enable_debugging) (GtkWindow *window, gboolean toggle);
};

struct GtkDialog;
struct GtkDialogClass {
	GtkWindowClass parent_class;
	void (* response) (GtkDialog *dialog, gint response_id);
	/* Keybinding signals */
	void (* close) (GtkDialog *dialog);
};

struct GtkMessageDialog;
struct GtkAboutDialog;
struct GtkAssistant;
struct GtkAssistantClass {
	GtkWindowClass parent_class;
	void (* prepare) (GtkAssistant *assistant, GtkWidget *page);
	void (* apply) (GtkAssistant *assistant);
	void (* close) (GtkAssistant *assistant);
	void (* cancel) (GtkAssistant *assistant);
};

struct GtkInvisible;
typedef struct _GtkWindowGroup GtkWindowGroup;
struct GtkBox;
struct GtkBoxClass {
	GtkContainerClass parent_class;
};

struct GtkGrid;
struct GtkGridClass {
	GtkContainerClass parent_class;
};

struct GtkRevealer;
struct GtkRevealerClass {
	GtkBinClass parent_class;
};

struct GtkListBox;
struct GtkListBoxClass {
	GtkContainerClass parent_class;
	void (*row_selected) (GtkListBox *box, GtkListBoxRow *row);
	void (*row_activated) (GtkListBox *box, GtkListBoxRow *row);
	void (*activate_cursor_row) (GtkListBox *box);
	void (*toggle_cursor_row) (GtkListBox *box);
	void (*move_cursor) (GtkListBox *box, GtkMovementStep step, gint count);
	void (*selected_rows_changed) (GtkListBox *box);
	void (*select_all) (GtkListBox *box);
	void (*unselect_all) (GtkListBox *box);
};

struct GtkListBoxRow;
struct GtkListBoxRowClass {
	GtkBinClass parent_class;
	void (* activate) (GtkListBoxRow *row);
};

struct GtkFlowBox;
struct GtkFlowBoxChild;
struct GtkStack;
struct GtkStackSwitcher;
struct GtkStackSidebar;
struct GtkStackSidebarClass {
	GtkBinClass parent_class;
	/* Padding for future expansion */
	void (*_gtk_reserved1) (void);
	void (*_gtk_reserved2) (void);
	void (*_gtk_reserved3) (void);
	void (*_gtk_reserved4) (void);
};

struct GtkActionBar;
struct GtkHeaderBar;
struct GtkOverlay;
struct GtkOverlayClass {
	GtkBinClass parent_class;
	gboolean (*get_child_position) (GtkOverlay *overlay, GtkWidget *widget, GtkAllocation *allocation);
};

struct GtkButtonBox;
struct GtkButtonBoxClass {
	GtkBoxClass parent_class;
};

struct GtkPaned;
struct GtkLayout;
struct GtkNotebook;
struct GtkExpander;
struct GtkExpanderClass {
	GtkBinClass parent_class;
	/* Key binding signal;
	to get notification on the expansion * state connect to notify:expanded. */
	void (* activate) (GtkExpander *expander);
};

typedef struct _GtkOrientable GtkOrientable;
struct GtkAspectFrame;
struct GtkAspectFrameClass {
	GtkFrameClass parent_class;
};

struct GtkFixed;
struct GtkLabel;
struct GtkImage;
struct GtkSpinner;
struct GtkInfoBar;
struct GtkProgressBar;
struct GtkLevelBar;
struct GtkStatusbar;
struct GtkAccelLabel;
struct GtkButton;
struct GtkButtonClass {
	GtkBinClass parent_class;
	void (* clicked) (GtkButton *button);
	void (* activate) (GtkButton *button);
};

struct GtkCheckButton;
struct GtkRadioButton;
struct GtkToggleButton;
struct GtkLinkButton;
struct GtkLinkButtonClass {
	gboolean (* activate_link) (GtkLinkButton *button);
};

struct GtkMenuButton;
struct GtkSwitch;
struct GtkSwitchClass {
	GtkWidgetClass parent_class;
	void (* activate) (GtkSwitch *sw);
	gboolean (* state_set) (GtkSwitch *sw, gboolean state);
};

struct GtkScaleButton;
struct GtkVolumeButton;
struct GtkLockButton;
struct GtkLockButtonClass {
	GtkButtonClass parent_class;
};

typedef struct _GtkModelButton GtkModelButton;
struct GtkEntry;
struct GtkEntryClass {
	GtkWidgetClass parent_class;
	/* Hook to customize right-click popup */
	void (* populate_popup) (GtkEntry *entry, GtkWidget *popup);
	/* Action signals */
	void (* activate) (GtkEntry *entry);
	void (* move_cursor) (GtkEntry *entry, GtkMovementStep step, gint count, gboolean extend_selection);
	void (* insert_at_cursor) (GtkEntry *entry, const gchar *str);
	void (* delete_from_cursor) (GtkEntry *entry, GtkDeleteType type, gint count);
	void (* backspace) (GtkEntry *entry);
	void (* cut_clipboard) (GtkEntry *entry);
	void (* copy_clipboard) (GtkEntry *entry);
	void (* paste_clipboard) (GtkEntry *entry);
	void (* toggle_overwrite) (GtkEntry *entry);
};

struct GtkEntryBuffer;
struct GtkEntryCompletion;
struct GtkScale;
struct GtkSpinButton;
struct GtkSearchEntry;
struct GtkSearchBar;
struct GtkSearchBarClass {
	GtkBinClass parent_class;
};

typedef struct _GtkEditable GtkEditable;
typedef struct {
	/* GtkTextIter is an opaque datatype;
	ignore all these fields. * Initialize the iter with gtk_text_buffer_get_iter_* * functions */
} GtkTextIter;

struct GtkTextMark;
typedef struct _GtkTextBuffer GtkTextBuffer;
struct GtkTextBufferClass {
	GObjectClass parent_class;
	void (* insert_text) (GtkTextBuffer *buffer, GtkTextIter *pos, const gchar *new_text, gint new_text_length);
	void (* insert_pixbuf) (GtkTextBuffer *buffer, GtkTextIter *iter, GdkPixbuf *pixbuf);
	void (* insert_child_anchor) (GtkTextBuffer *buffer, GtkTextIter *iter, GtkTextChildAnchor *anchor);
	void (* delete_range) (GtkTextBuffer *buffer, GtkTextIter *start, GtkTextIter *end);
	void (* changed) (GtkTextBuffer *buffer);
	void (* modified_changed) (GtkTextBuffer *buffer);
	void (* mark_set) (GtkTextBuffer *buffer, const GtkTextIter *location, GtkTextMark *mark);
	void (* mark_deleted) (GtkTextBuffer *buffer, GtkTextMark *mark);
	void (* apply_tag) (GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);
	void (* remove_tag) (GtkTextBuffer *buffer, GtkTextTag *tag, const GtkTextIter *start, const GtkTextIter *end);
	void (* begin_user_action) (GtkTextBuffer *buffer);
	void (* end_user_action) (GtkTextBuffer *buffer);
	void (* paste_done) (GtkTextBuffer *buffer, GtkClipboard *clipboard);
};

struct GtkTextTag;
typedef struct _GtkTextTagTable GtkTextTagTable;
struct GtkTextView;
struct GtkTextViewClass {
	GtkContainerClass parent_class;
	void (* populate_popup) (GtkTextView *text_view, GtkWidget *popup);
	void (* move_cursor) (GtkTextView *text_view, GtkMovementStep step, gint count, gboolean extend_selection);
	void (* set_anchor) (GtkTextView *text_view);
	void (* insert_at_cursor) (GtkTextView *text_view, const gchar *str);
	void (* delete_from_cursor) (GtkTextView *text_view, GtkDeleteType type, gint count);
	void (* backspace) (GtkTextView *text_view);
	void (* cut_clipboard) (GtkTextView *text_view);
	void (* copy_clipboard) (GtkTextView *text_view);
	void (* paste_clipboard) (GtkTextView *text_view);
	void (* toggle_overwrite) (GtkTextView *text_view);
	GtkTextBuffer * (* create_buffer) (GtkTextView *text_view);
	void (* draw_layer) (GtkTextView *text_view, GtkTextViewLayer layer, cairo_t *cr);
	gboolean (* extend_selection) (GtkTextView *text_view, GtkTextExtendSelection granularity, const GtkTextIter *location, GtkTextIter *start, GtkTextIter *end);
};

struct GtkTextChildAnchor;
typedef struct _GtkTreeModel GtkTreeModel;
struct GtkTreeIter {
	gint stamp;
	gpointer user_data;
	gpointer user_data2;
	gpointer user_data3;
};

typedef struct _GtkTreePath GtkTreePath;
typedef struct _GtkTreeRowReference GtkTreeRowReference;
struct GtkTreeModelIface {
	/* Signals */
	void (* row_changed) (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);
	void (* row_inserted) (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);
	void (* row_has_child_toggled) (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter);
	void (* row_deleted) (GtkTreeModel *tree_model, GtkTreePath *path);
	void (* rows_reordered) (GtkTreeModel *tree_model, GtkTreePath *path, GtkTreeIter *iter, gint *new_order);
	/* Virtual Table */
	GtkTreeModelFlags (* get_flags) (GtkTreeModel *tree_model);
	gint (* get_n_columns) (GtkTreeModel *tree_model);
	GType (* get_column_type) (GtkTreeModel *tree_model, gint index_);
	gboolean (* get_iter) (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreePath *path);
	GtkTreePath *(* get_path) (GtkTreeModel *tree_model, GtkTreeIter *iter);
	void (* get_value) (GtkTreeModel *tree_model, GtkTreeIter *iter, gint column, GValue *value);
	gboolean (* iter_next) (GtkTreeModel *tree_model, GtkTreeIter *iter);
	gboolean (* iter_previous) (GtkTreeModel *tree_model, GtkTreeIter *iter);
	gboolean (* iter_children) (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent);
	gboolean (* iter_has_child) (GtkTreeModel *tree_model, GtkTreeIter *iter);
	gint (* iter_n_children) (GtkTreeModel *tree_model, GtkTreeIter *iter);
	gboolean (* iter_nth_child) (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *parent, gint n);
	gboolean (* iter_parent) (GtkTreeModel *tree_model, GtkTreeIter *iter, GtkTreeIter *child);
	void (* ref_node) (GtkTreeModel *tree_model, GtkTreeIter *iter);
	void (* unref_node) (GtkTreeModel *tree_model, GtkTreeIter *iter);
};

typedef struct _GtkTreeSelection GtkTreeSelection;
typedef struct {
	GObjectClass parent_class;
	void (* changed) (GtkTreeSelection *selection);
} GtkTreeSelectionClass;

struct GtkTreeViewColumn;
struct GtkTreeView;
typedef struct _GtkTreeViewPrivate GtkTreeViewPrivate;
typedef struct _GtkTreeDragSource GtkTreeDragSource;
struct GtkTreeDragSourceIface {
	/* VTable - not signals */
	gboolean (* row_draggable) (GtkTreeDragSource *drag_source, GtkTreePath *path);
	gboolean (* drag_data_get) (GtkTreeDragSource *drag_source, GtkTreePath *path, GtkSelectionData *selection_data);
	gboolean (* drag_data_delete) (GtkTreeDragSource *drag_source, GtkTreePath *path);
};

typedef struct _GtkTreeDragDest GtkTreeDragDest;
struct GtkTreeDragDestIface {
	/* VTable - not signals */
	gboolean (* drag_data_received) (GtkTreeDragDest *drag_dest, GtkTreePath *dest, GtkSelectionData *selection_data);
	gboolean (* row_drop_possible) (GtkTreeDragDest *drag_dest, GtkTreePath *dest_path, GtkSelectionData *selection_data);
};

struct GtkCellView;
struct GtkCellViewClass {
	GtkWidgetClass parent_class;
};

struct GtkIconView;
typedef struct _GtkTreeSortable GtkTreeSortable;
struct GtkTreeSortableIface {
	/* signals */
	void (* sort_column_changed) (GtkTreeSortable *sortable);
	/* virtual table */
	gboolean (* get_sort_column_id) (GtkTreeSortable *sortable, gint *sort_column_id, GtkSortType *order);
	void (* set_sort_column_id) (GtkTreeSortable *sortable, gint sort_column_id, GtkSortType order);
	void (* set_sort_func) (GtkTreeSortable *sortable, gint sort_column_id, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);
	void (* set_default_sort_func) (GtkTreeSortable *sortable, GtkTreeIterCompareFunc sort_func, gpointer user_data, GDestroyNotify destroy);
	gboolean (* has_default_sort_func) (GtkTreeSortable *sortable);
};

struct GtkTreeModelSort;
struct GtkTreeModelFilter;
typedef struct _GtkCellLayout GtkCellLayout;
struct GtkCellLayoutIface {
	/* Virtual Table */
	void (* pack_start) (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);
	void (* pack_end) (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gboolean expand);
	void (* clear) (GtkCellLayout *cell_layout);
	void (* add_attribute) (GtkCellLayout *cell_layout, GtkCellRenderer *cell, const gchar *attribute, gint column);
	void (* set_cell_data_func) (GtkCellLayout *cell_layout, GtkCellRenderer *cell, GtkCellLayoutDataFunc func, gpointer func_data, GDestroyNotify destroy);
	void (* clear_attributes) (GtkCellLayout *cell_layout, GtkCellRenderer *cell);
	void (* reorder) (GtkCellLayout *cell_layout, GtkCellRenderer *cell, gint position);
	GList* (* get_cells) (GtkCellLayout *cell_layout);
	GtkCellArea *(* get_area) (GtkCellLayout *cell_layout);
};

struct GtkCellArea;
struct GtkCellAreaClass {
	/* Basic methods */
	void (* add) (GtkCellArea *area, GtkCellRenderer *renderer);
	void (* remove) (GtkCellArea *area, GtkCellRenderer *renderer);
	void (* foreach) (GtkCellArea *area, GtkCellCallback callback, gpointer callback_data);
	void (* foreach_alloc) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, const GdkRectangle *background_area, GtkCellAllocCallback callback, gpointer callback_data);
	gint (* event) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GdkEvent *event, const GdkRectangle *cell_area, GtkCellRendererState flags);
	void (* snapshot) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, GtkSnapshot *snapshot, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean paint_focus);
	void (* apply_attributes) (GtkCellArea *area, GtkTreeModel *tree_model, GtkTreeIter *iter, gboolean is_expander, gboolean is_expanded);
	/* Geometry */
	GtkCellAreaContext *(* create_context) (GtkCellArea *area);
	GtkCellAreaContext *(* copy_context) (GtkCellArea *area, GtkCellAreaContext *context);
	GtkSizeRequestMode (* get_request_mode) (GtkCellArea *area);
	void (* get_preferred_width) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_width, gint *natural_width);
	void (* get_preferred_height_for_width) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height);
	void (* get_preferred_height) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint *minimum_height, gint *natural_height);
	void (* get_preferred_width_for_height) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width);
	/* Cell Properties */
	void (* set_cell_property) (GtkCellArea *area, GtkCellRenderer *renderer, guint property_id, const GValue *value, GParamSpec *pspec);
	void (* get_cell_property) (GtkCellArea *area, GtkCellRenderer *renderer, guint property_id, GValue *value, GParamSpec *pspec);
	/* Focus */
	gboolean (* focus) (GtkCellArea *area, GtkDirectionType direction);
	gboolean (* is_activatable) (GtkCellArea *area);
	gboolean (* activate) (GtkCellArea *area, GtkCellAreaContext *context, GtkWidget *widget, const GdkRectangle *cell_area, GtkCellRendererState flags, gboolean edit_only);
};

struct GtkCellAreaBox;
struct GtkCellAreaBoxClass {
};

struct GtkCellAreaContextClass {
	void (* allocate) (GtkCellAreaContext *context, gint width, gint height);
	void (* reset) (GtkCellAreaContext *context);
	void (* get_preferred_height_for_width) (GtkCellAreaContext *context, gint width, gint *minimum_height, gint *natural_height);
	void (* get_preferred_width_for_height) (GtkCellAreaContext *context, gint height, gint *minimum_width, gint *natural_width);
};

typedef struct _GtkCellAreaContext GtkCellAreaContext;
struct GtkCellRenderer;
struct GtkCellRendererClass {
	/* vtable - not signals */
	GtkSizeRequestMode (* get_request_mode) (GtkCellRenderer *cell);
	void (* get_preferred_width) (GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size);
	void (* get_preferred_height_for_width) (GtkCellRenderer *cell, GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height);
	void (* get_preferred_height) (GtkCellRenderer *cell, GtkWidget *widget, gint *minimum_size, gint *natural_size);
	void (* get_preferred_width_for_height) (GtkCellRenderer *cell, GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width);
	void (* get_aligned_area) (GtkCellRenderer *cell, GtkWidget *widget, GtkCellRendererState flags, const GdkRectangle *cell_area, GdkRectangle *aligned_area);
	void (* get_size) (GtkCellRenderer *cell, GtkWidget *widget, const GdkRectangle *cell_area, gint *x_offset, gint *y_offset, gint *width, gint *height);
	void (* snapshot) (GtkCellRenderer *cell, GtkSnapshot *snapshot, GtkWidget *widget, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);
	gboolean (* activate) (GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);
	GtkCellEditable * (* start_editing) (GtkCellRenderer *cell, GdkEvent *event, GtkWidget *widget, const gchar *path, const GdkRectangle *background_area, const GdkRectangle *cell_area, GtkCellRendererState flags);
	/* Signals */
	void (* editing_canceled) (GtkCellRenderer *cell);
	void (* editing_started) (GtkCellRenderer *cell, GtkCellEditable *editable, const gchar *path);
};

typedef struct _GtkCellEditable GtkCellEditable;
struct GtkCellEditableIface {
	/* signals */
	void (* editing_done) (GtkCellEditable *cell_editable);
	void (* remove_widget) (GtkCellEditable *cell_editable);
	/* virtual table */
	void (* start_editing) (GtkCellEditable *cell_editable, GdkEvent *event);
};

struct GtkCellRendererAccel;
struct GtkCellRendererCombo;
struct GtkCellRendererPixbuf;
struct GtkCellRendererProgress;
struct GtkCellRendererSpin;
struct GtkCellRendererText;
struct GtkCellRendererToggle;
struct GtkCellRendererSpinner;
struct GtkListStore;
struct GtkTreeStore;
struct GtkComboBox;
struct GtkComboBoxClass {
	GtkBinClass parent_class;
	/* signals */
	void (* changed) (GtkComboBox *combo_box);
	gchar *(* format_entry_text) (GtkComboBox *combo_box, const gchar *path);
};

struct GtkComboBoxText;
struct GtkMenu;
struct GtkMenuBar;
struct GtkMenuItem;
struct GtkMenuItemClass {
	GtkBinClass parent_class;
	/* If the following flag is true, then we should always * hide the menu when the MenuItem is activated. Otherwise, * it is up to the caller. For instance, when navigating * a menu with the keyboard, &lt;Space&gt;
	doesn't hide, but * &lt;Return&gt;
	does. */
	guint hide_on_activate : 1;
	void (* activate) (GtkMenuItem *menu_item);
	void (* activate_item) (GtkMenuItem *menu_item);
	void (* toggle_size_request) (GtkMenuItem *menu_item, gint *requisition);
	void (* toggle_size_allocate) (GtkMenuItem *menu_item, gint allocation);
	void (* set_label) (GtkMenuItem *menu_item, const gchar *label);
	const gchar * (* get_label) (GtkMenuItem *menu_item);
	void (* select) (GtkMenuItem *menu_item);
	void (* deselect) (GtkMenuItem *menu_item);
};

struct GtkRadioMenuItem;
struct GtkCheckMenuItem;
struct GtkCheckMenuItemClass {
	GtkMenuItemClass parent_class;
	void (* toggled) (GtkCheckMenuItem *check_menu_item);
	void (* snapshot_indicator) (GtkCheckMenuItem *check_menu_item, GtkSnapshot *snapshot);
};

struct GtkSeparatorMenuItem;
struct GtkSeparatorMenuItemClass {
	GtkMenuItemClass parent_class;
};

typedef struct _GtkToolShell GtkToolShell;
struct GtkToolShellIface {
	GtkIconSize (*get_icon_size) (GtkToolShell *shell);
	GtkOrientation (*get_orientation) (GtkToolShell *shell);
	GtkToolbarStyle (*get_style) (GtkToolShell *shell);
	void (*rebuild_menu) (GtkToolShell *shell);
	GtkOrientation (*get_text_orientation) (GtkToolShell *shell);
	gfloat (*get_text_alignment) (GtkToolShell *shell);
	PangoEllipsizeMode (*get_ellipsize_mode) (GtkToolShell *shell);
	GtkSizeGroup * (*get_text_size_group) (GtkToolShell *shell);
};

struct GtkToolbar;
struct GtkToolItem;
struct GtkToolItemClass {
	GtkBinClass parent_class;
	/* signals */
	gboolean (* create_menu_proxy) (GtkToolItem *tool_item);
	void (* toolbar_reconfigured) (GtkToolItem *tool_item);
};

struct GtkToolPalette;
struct GtkToolPaletteClass {
	GtkContainerClass parent_class;
};

struct GtkToolItemGroup;
struct GtkToolItemGroupClass {
	GtkContainerClass parent_class;
};

struct GtkSeparatorToolItem;
struct GtkSeparatorToolItemClass {
	GtkToolItemClass parent_class;
};

struct GtkToolButton;
struct GtkToolButtonClass {
	GtkToolItemClass parent_class;
	GType button_type;
	/* signal */
	void (* clicked) (GtkToolButton *tool_item);
};

struct GtkMenuToolButton;
struct GtkMenuToolButtonClass {
	GtkToolButtonClass parent_class;
	void (*show_menu) (GtkMenuToolButton *button);
};

struct GtkToggleToolButton;
struct GtkToggleToolButtonClass {
	GtkToolButtonClass parent_class;
	/* signal */
	void (* toggled) (GtkToggleToolButton *button);
};

struct GtkRadioToolButton;
struct GtkPopover;
typedef struct _GtkPopoverMenu GtkPopoverMenu;
typedef struct _GtkColorChooser GtkColorChooser;
struct GtkColorButton;
struct GtkColorChooserWidget;
struct GtkColorChooserWidgetClass {
	GtkBoxClass parent_class;
};

struct GtkColorChooserDialog;
typedef struct _GtkFileChooser GtkFileChooser;
struct GtkFileChooserButton;
struct GtkFileChooserButtonClass {
	GtkWidgetClass parent_class;
	void (* file_set) (GtkFileChooserButton *fc);
};

struct GtkFileChooserDialog;
struct GtkFileChooserWidget;
struct GtkFileChooserWidgetClass {
	GtkWidgetClass parent_class;
};

typedef struct _GtkFileFilter GtkFileFilter;
struct GtkFileFilterInfo {
	GtkFileFilterFlags contains;
	const gchar *filename;
	const gchar *uri;
	const gchar *display_name;
	const gchar *mime_type;
};

typedef struct _GtkFontChooser GtkFontChooser;
struct GtkFontButton;
struct GtkFontChooserWidget;
struct GtkFontChooserWidgetClass {
	GtkWidgetClass parent_class;
};

struct GtkFontChooserDialog;
struct GtkFontChooserDialogClass {
	GtkDialogClass parent_class;
};

typedef struct _GtkPlacesSidebar GtkPlacesSidebar;
struct GtkFrame;
struct GtkFrameClass {
	GtkBinClass parent_class;
	void (*compute_child_allocation) (GtkFrame *frame, GtkAllocation *allocation);
};

struct GtkSeparator;
struct GtkScrollbar;
struct GtkScrolledWindow;
struct GtkScrolledWindowClass {
	GtkBinClass parent_class;
	/* Action signals for keybindings. Do not connect to these signals */
	/* Unfortunately, GtkScrollType is deficient in that there is * no horizontal/vertical variants for GTK_SCROLL_START/END, * so we have to add an additional boolean flag. */
	gboolean (*scroll_child) (GtkScrolledWindow *scrolled_window, GtkScrollType scroll, gboolean horizontal);
	void (* move_focus_out) (GtkScrolledWindow *scrolled_window, GtkDirectionType direction);
};

typedef struct _GtkScrollable GtkScrollable;
struct GtkPrintOperation;
struct GtkPrintOperationClass {
	GObjectClass parent_class;
	void (*done) (GtkPrintOperation *operation, GtkPrintOperationResult result);
	void (*begin_print) (GtkPrintOperation *operation, GtkPrintContext *context);
	gboolean (*paginate) (GtkPrintOperation *operation, GtkPrintContext *context);
	void (*request_page_setup) (GtkPrintOperation *operation, GtkPrintContext *context, gint page_nr, GtkPageSetup *setup);
	void (*draw_page) (GtkPrintOperation *operation, GtkPrintContext *context, gint page_nr);
	void (*end_print) (GtkPrintOperation *operation, GtkPrintContext *context);
	void (*status_changed) (GtkPrintOperation *operation);
	GtkWidget *(*create_custom_widget) (GtkPrintOperation *operation);
	void (*custom_widget_apply) (GtkPrintOperation *operation, GtkWidget *widget);
	gboolean (*preview) (GtkPrintOperation *operation, GtkPrintOperationPreview *preview, GtkPrintContext *context, GtkWindow *parent);
	void (*update_custom_widget) (GtkPrintOperation *operation, GtkWidget *widget, GtkPageSetup *setup, GtkPrintSettings *settings);
};

typedef struct _GtkPrintOperationPreview GtkPrintOperationPreview;
typedef struct _GtkPrintContext GtkPrintContext;
typedef struct _GtkPrintSettings GtkPrintSettings;
struct GtkPageRange {
	gint start;
	gint end;
};

typedef struct _GtkPageSetup GtkPageSetup;
typedef struct _GtkPaperSize GtkPaperSize;
struct GtkPrinter;
typedef struct _GtkPrintBackend GtkPrintBackend;
struct GtkPrintJob;
struct GtkPrintUnixDialog;
struct GtkPageSetupUnixDialog;
struct GtkPageSetupUnixDialogClass {
	GtkDialogClass parent_class;
};

struct GtkShortcutsWindow;
typedef struct _GtkShortcutsSection GtkShortcutsSection;
typedef struct _GtkShortcutsGroup GtkShortcutsGroup;
typedef struct _GtkShortcutsShortcut GtkShortcutsShortcut;
typedef struct _GtkAdjustment GtkAdjustment;
struct GtkCalendar;
struct GtkDrawingArea;
struct GtkGLArea;
struct GtkGLAreaClass {
	gboolean (* render) (GtkGLArea *area, GdkGLContext *context);
	void (* resize) (GtkGLArea *area, int width, int height);
	GdkGLContext * (* create_context) (GtkGLArea *area);
};

struct GtkEventBox;
struct GtkEventBoxClass {
	GtkBinClass parent_class;
};

struct GtkIMContextSimple;
struct GtkIMMulticontext;
struct GtkSizeGroup;
typedef struct _GtkTooltip GtkTooltip;
struct GtkViewport;
struct GtkViewportClass {
	GtkBinClass parent_class;
};

struct GtkAccessible;
typedef struct _GtkSnapshot GtkSnapshot;
typedef struct _GtkWidget GtkWidget;
struct GtkWidgetClass {
	GInitiallyUnownedClass parent_class;
	guint activate_signal;
	/* seldomly overidden */
	void (*dispatch_child_properties_changed) (GtkWidget *widget, guint n_pspecs, GParamSpec **pspecs);
	/* basics */
	void (* destroy) (GtkWidget *widget);
	void (* show) (GtkWidget *widget);
	void (* hide) (GtkWidget *widget);
	void (* map) (GtkWidget *widget);
	void (* unmap) (GtkWidget *widget);
	void (* realize) (GtkWidget *widget);
	void (* unrealize) (GtkWidget *widget);
	void (* size_allocate) (GtkWidget *widget, GtkAllocation *allocation);
	void (* state_flags_changed) (GtkWidget *widget, GtkStateFlags previous_state_flags);
	void (* parent_set) (GtkWidget *widget, GtkWidget *previous_parent);
	void (* hierarchy_changed) (GtkWidget *widget, GtkWidget *previous_toplevel);
	void (* direction_changed) (GtkWidget *widget, GtkTextDirection previous_direction);
	void (* grab_notify) (GtkWidget *widget, gboolean was_grabbed);
	void (* child_notify) (GtkWidget *widget, GParamSpec *child_property);
	gboolean (* draw) (GtkWidget *widget, cairo_t *cr);
	/* size requests */
	GtkSizeRequestMode (* get_request_mode) (GtkWidget *widget);
	void (* measure) (GtkWidget *widget, GtkOrientation orientation, int for_size, int *minimum, int *natural, int *minimum_baseline, int *natural_baseline);
	/* Mnemonics */
	gboolean (* mnemonic_activate) (GtkWidget *widget, gboolean group_cycling);
	/* explicit focus */
	void (* grab_focus) (GtkWidget *widget);
	gboolean (* focus) (GtkWidget *widget, GtkDirectionType direction);
	/* keyboard navigation */
	void (* move_focus) (GtkWidget *widget, GtkDirectionType direction);
	gboolean (* keynav_failed) (GtkWidget *widget, GtkDirectionType direction);
	/* events */
	gboolean (* event)(GtkWidget *widget, GdkEvent *event);
	gboolean (* button_press_event) (GtkWidget *widget, GdkEventButton *event);
	gboolean (* button_release_event) (GtkWidget *widget, GdkEventButton *event);
	gboolean (* scroll_event)(GtkWidget *widget, GdkEventScroll *event);
	gboolean (* motion_notify_event) (GtkWidget *widget, GdkEventMotion *event);
	gboolean (* delete_event)(GtkWidget *widget, GdkEventAny *event);
	gboolean (* destroy_event)(GtkWidget *widget, GdkEventAny *event);
	gboolean (* key_press_event)(GtkWidget *widget, GdkEventKey *event);
	gboolean (* key_release_event) (GtkWidget *widget, GdkEventKey *event);
	gboolean (* enter_notify_event) (GtkWidget *widget, GdkEventCrossing *event);
	gboolean (* leave_notify_event) (GtkWidget *widget, GdkEventCrossing *event);
	gboolean (* configure_event)(GtkWidget *widget, GdkEventConfigure *event);
	gboolean (* focus_in_event)(GtkWidget *widget, GdkEventFocus *event);
	gboolean (* focus_out_event)(GtkWidget *widget, GdkEventFocus *event);
	gboolean (* map_event)(GtkWidget *widget, GdkEventAny *event);
	gboolean (* unmap_event)(GtkWidget *widget, GdkEventAny *event);
	gboolean (* property_notify_event) (GtkWidget *widget, GdkEventProperty *event);
	gboolean (* selection_clear_event) (GtkWidget *widget, GdkEventSelection *event);
	gboolean (* selection_request_event) (GtkWidget *widget, GdkEventSelection *event);
	gboolean (* selection_notify_event) (GtkWidget *widget, GdkEventSelection *event);
	gboolean (* proximity_in_event) (GtkWidget *widget, GdkEventProximity *event);
	gboolean (* proximity_out_event) (GtkWidget *widget, GdkEventProximity *event);
	gboolean (* window_state_event) (GtkWidget *widget, GdkEventWindowState *event);
	gboolean (* grab_broken_event) (GtkWidget *widget, GdkEventGrabBroken *event);
	/* selection */
	void (* selection_get) (GtkWidget *widget, GtkSelectionData *selection_data, guint info, guint time_);
	void (* selection_received) (GtkWidget *widget, GtkSelectionData *selection_data, guint time_);
	/* Source side drag signals */
	void (* drag_begin) (GtkWidget *widget, GdkDragContext *context);
	void (* drag_end) (GtkWidget *widget, GdkDragContext *context);
	void (* drag_data_get) (GtkWidget *widget, GdkDragContext *context, GtkSelectionData *selection_data, guint info, guint time_);
	void (* drag_data_delete) (GtkWidget *widget, GdkDragContext *context);
	/* Target side drag signals */
	void (* drag_leave) (GtkWidget *widget, GdkDragContext *context, guint time_);
	gboolean (* drag_motion) (GtkWidget *widget, GdkDragContext *context, gint x, gint y, guint time_);
	gboolean (* drag_drop) (GtkWidget *widget, GdkDragContext *context, gint x, gint y, guint time_);
	void (* drag_data_received) (GtkWidget *widget, GdkDragContext *context, gint x, gint y, GtkSelectionData *selection_data, guint info, guint time_);
	gboolean (* drag_failed) (GtkWidget *widget, GdkDragContext *context, GtkDragResult result);
	/* Signals used only for keybindings */
	gboolean (* popup_menu) (GtkWidget *widget);
	/* accessibility support */
	AtkObject * (* get_accessible) (GtkWidget *widget);
	void (* screen_changed) (GtkWidget *widget, GdkScreen *previous_screen);
	gboolean (* can_activate_accel) (GtkWidget *widget, guint signal_id);
	gboolean (* query_tooltip) (GtkWidget *widget, gint x, gint y, gboolean keyboard_tooltip, GtkTooltip *tooltip);
	void (* compute_expand) (GtkWidget *widget, gboolean *hexpand_p, gboolean *vexpand_p);
	void (* style_updated) (GtkWidget *widget);
	gboolean (* touch_event) (GtkWidget *widget, GdkEventTouch *event);
	void (* queue_draw_region) (GtkWidget *widget, const cairo_region_t *region);
	void (* queue_draw_child) (GtkWidget *widget, GtkWidget *child, const cairo_region_t *region);
	void (* snapshot) (GtkWidget *widget, GtkSnapshot *snapshot);
};

typedef struct {
	gint width;
	gint height;
} GtkRequisition;

struct GtkRequestedSize {
	gpointer data;
	gint minimum_size;
	gint natural_size;
};

struct GtkContainer;
struct GtkContainerClass {
	GtkWidgetClass parent_class;
	void (*add) (GtkContainer *container, GtkWidget *widget);
	void (*remove) (GtkContainer *container, GtkWidget *widget);
	void (*check_resize) (GtkContainer *container);
	void (*forall) (GtkContainer *container, GtkCallback callback, gpointer callback_data);
	void (*set_focus_child) (GtkContainer *container, GtkWidget *child);
	GType (*child_type)(GtkContainer *container);
	void (*set_child_property) (GtkContainer *container, GtkWidget *child, guint property_id, const GValue *value, GParamSpec *pspec);
	void (*get_child_property) (GtkContainer *container, GtkWidget *child, guint property_id, GValue *value, GParamSpec *pspec);
	GtkWidgetPath * (*get_path_for_child) (GtkContainer *container, GtkWidget *child);
};

struct GtkBin;
struct GtkBinClass {
	GtkContainerClass parent_class;
};

struct GtkMenuShell;
struct GtkRange;
struct GtkIMContext;
struct GtkIMContextClass {
	/* Signals */
	void (*preedit_start) (GtkIMContext *context);
	void (*preedit_end) (GtkIMContext *context);
	void (*preedit_changed) (GtkIMContext *context);
	void (*commit) (GtkIMContext *context, const gchar *str);
	gboolean (*retrieve_surrounding) (GtkIMContext *context);
	gboolean (*delete_surrounding) (GtkIMContext *context, gint offset, gint n_chars);
	/* Virtual functions */
	void (*set_client_window) (GtkIMContext *context, GdkWindow *window);
	void (*get_preedit_string) (GtkIMContext *context, gchar **str, PangoAttrList **attrs, gint *cursor_pos);
	gboolean (*filter_keypress) (GtkIMContext *context, GdkEventKey *event);
	void (*focus_in) (GtkIMContext *context);
	void (*focus_out) (GtkIMContext *context);
	void (*reset) (GtkIMContext *context);
	void (*set_cursor_location) (GtkIMContext *context, GdkRectangle *area);
	void (*set_use_preedit) (GtkIMContext *context, gboolean use_preedit);
	void (*set_surrounding) (GtkIMContext *context, const gchar *text, gint len, gint cursor_index);
	gboolean (*get_surrounding) (GtkIMContext *context, gchar **text, gint *cursor_index);
};

struct GtkIMContextInfo {
	const gchar *context_id;
	const gchar *context_name;
	const gchar *domain;
	const gchar *domain_dirname;
	const gchar *default_locales;
};

struct GtkNativeDialogClass {
	GObjectClass parent_class;
	void (* response) (GtkNativeDialog *self, gint response_id);
};

struct GtkRecentManager;
typedef struct _GtkRecentInfo GtkRecentInfo;
struct GtkRecentData {
	gchar *display_name;
	gchar *description;
	gchar *mime_type;
	gchar *app_name;
	gchar *app_exec;
	gchar **groups;
	gboolean is_private;
};

typedef struct _GtkRecentChooser GtkRecentChooser;
struct GtkRecentChooserIface {
	/* * Methods */
	gboolean (* set_current_uri) (GtkRecentChooser *chooser, const gchar *uri, GError **error);
	gchar * (* get_current_uri) (GtkRecentChooser *chooser);
	gboolean (* select_uri) (GtkRecentChooser *chooser, const gchar *uri, GError **error);
	void (* unselect_uri) (GtkRecentChooser *chooser, const gchar *uri);
	void (* select_all) (GtkRecentChooser *chooser);
	void (* unselect_all) (GtkRecentChooser *chooser);
	GList * (* get_items) (GtkRecentChooser *chooser);
	GtkRecentManager *(* get_recent_manager) (GtkRecentChooser *chooser);
	void (* add_filter) (GtkRecentChooser *chooser, GtkRecentFilter *filter);
	void (* remove_filter) (GtkRecentChooser *chooser, GtkRecentFilter *filter);
	GSList * (* list_filters) (GtkRecentChooser *chooser);
	void (* set_sort_func) (GtkRecentChooser *chooser, GtkRecentSortFunc sort_func, gpointer sort_data, GDestroyNotify data_destroy);
	/* * Signals */
	void (* item_activated) (GtkRecentChooser *chooser);
	void (* selection_changed) (GtkRecentChooser *chooser);
};

struct GtkRecentChooserDialog;
struct GtkRecentChooserMenu;
struct GtkRecentChooserWidget;
typedef struct _GtkRecentFilter GtkRecentFilter;
struct GtkRecentFilterInfo {
	GtkRecentFilterFlags contains;
	const gchar *uri;
	const gchar *display_name;
	const gchar *mime_type;
	const gchar **applications;
	const gchar **groups;
	gint age;
};

typedef struct _GtkAppChooser GtkAppChooser;
struct GtkAppChooserButton;
struct GtkAppChooserButtonClass {
	GtkComboBoxClass parent_class;
	void (* custom_item_activated) (GtkAppChooserButton *self, const gchar *item_name);
};

struct GtkAppChooserDialog;
struct GtkAppChooserDialogClass {
	GtkDialogClass parent_class;
};

struct GtkAppChooserWidget;
struct GtkAppChooserWidgetClass {
	GtkWidgetClass parent_class;
	void (* application_selected) (GtkAppChooserWidget *self, GAppInfo *app_info);
	void (* application_activated) (GtkAppChooserWidget *self, GAppInfo *app_info);
	void (* populate_popup) (GtkAppChooserWidget *self, GtkMenu *menu, GAppInfo *app_info);
};

typedef struct _GtkEventController GtkEventController;
typedef struct _GtkGesture GtkGesture;
typedef struct _GtkGestureSingle GtkGestureSingle;
typedef struct _GtkGestureDrag GtkGestureDrag;
typedef struct _GtkGestureLongPress GtkGestureLongPress;
typedef struct _GtkGestureMultiPress GtkGestureMultiPress;
typedef struct _GtkGesturePan GtkGesturePan;
typedef struct _GtkGestureSwipe GtkGestureSwipe;
typedef struct _GtkGestureRotate GtkGestureRotate;
typedef struct _GtkGestureZoom GtkGestureZoom;
typedef struct _GtkPadController GtkPadController;
struct GtkPadActionEntry {
	GtkPadActionType type;
	gint index;
	gint mode;
	gchar *label;
	gchar *action_name;
};

struct GtkAccelGroup;
struct GtkAccelGroupClass {
	GObjectClass parent_class;
	void (*accel_changed) (GtkAccelGroup *accel_group, guint keyval, GdkModifierType modifier, GClosure *accel_closure);
};

struct GtkAccelKey {
	guint accel_key;
	GdkModifierType accel_mods;
	guint accel_flags : 16;
};

typedef struct _GtkAccelMap GtkAccelMap;
typedef struct _GtkClipboard GtkClipboard;
typedef struct _GtkSettings GtkSettings;
struct GtkSettingsValue {
	/* origin should be something like "filename:linenumber" for rc files, * or e.g. "XProperty" for other sources */
	gchar *origin;
	/* valid types are LONG, DOUBLE and STRING corresponding to the token parsed, * or a GSTRING holding an unparsed statement */
	GValue value;
};

struct GtkBindingSet {
	gchar *set_name;
	gint priority;
	GSList *widget_path_pspecs;
	GSList *widget_class_pspecs;
	GSList *class_branch_pspecs;
	GtkBindingEntry *entries;
	GtkBindingEntry *current;
	guint parsed : 1;
};

struct GtkBindingEntry {
	/* key portion */
	guint keyval;
	GdkModifierType modifiers;
	GtkBindingSet *binding_set;
	guint destroyed : 1;
	guint in_emission : 1;
	guint marks_unbound : 1;
	GtkBindingEntry *set_next;
	GtkBindingEntry *hash_next;
	GtkBindingSignal *signals;
};

struct GtkBindingSignal {
	GtkBindingSignal *next;
	gchar *signal_name;
	guint n_args;
	GtkBindingArg *args;
};

struct GtkBindingArg {
	GType arg_type;
	union {
		glong long_data;
		gdouble double_data;
		gchar *string_data;
	} d;
};

typedef struct _GtkSelectionData GtkSelectionData;
struct GtkTargetEntry {
	gchar *target;
	guint flags;
	guint info;
};

typedef struct _GtkTargetList GtkTargetList;
struct GtkTargetPair {
	GdkAtom target;
	guint flags;
	guint info;
};

struct GtkMountOperation;
struct GtkMountOperationClass {
	GMountOperationClass parent_class;
};

typedef struct _GtkStyleContext GtkStyleContext;
struct GtkBorder {
	gint16 left;
	gint16 right;
	gint16 top;
	gint16 bottom;
};

struct GtkCssProvider;
typedef struct _GtkCssSection GtkCssSection;
struct GtkStyleProviderIface {
	gboolean (* get_style_property) (GtkStyleProvider *provider, GtkWidgetPath *path, GtkStateFlags state, GParamSpec *pspec, GValue *value);
};

typedef struct _GtkStyleProvider GtkStyleProvider;
typedef struct _GtkWidgetPath GtkWidgetPath;
typedef struct _GtkIconInfo GtkIconInfo;
struct GtkIconTheme;
struct GtkIconThemeClass {
	GObjectClass parent_class;
	void (* changed) (GtkIconTheme *icon_theme);
};

union 
typedef 	GdkRectangle	 GtkAllocation;	# A GtkAllocation of a widget represents regionwhich has been allocated to the widget by its parent. It is a subregionof its parents allocation. SeeGtkWidget’s geometry management section formore information.
#define GTK_BUILDER_WARN_INVALID_CHILD_TYPE(object, type)	# This macro should be used to emit a warning about and unexpected type valuein a GtkBuildable add_child implementation.
	object		# the GtkBuildable on which the warning ocurred
	type		# the unexpected type value
#define GTK_BUILDER_ERROR (gtk_builder_error_quark ())	
#define GTK_LEVEL_BAR_OFFSET_LOW "low"	# The name used for the stock low offset included by GtkLevelBar.
#define GTK_LEVEL_BAR_OFFSET_HIGH "high"	# The name used for the stock high offset included by GtkLevelBar.
#define GTK_LEVEL_BAR_OFFSET_FULL "full"	# The name used for the stock full offset included by GtkLevelBar.
#define GTK_INPUT_ERROR -1	# Constant to return from a signal handler for the “input”signal in case of conversion failure.
#define GTK_TEXT_VIEW_PRIORITY_VALIDATE (GDK_PRIORITY_REDRAW + 5)	# The priority at which the text view validates onscreen linesin an idle job in the background.
#define GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID (-1)	# The GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID can be used to make aGtkTreeSortable use the default sort function.
#define GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID (-2)	# The GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID can be used to make aGtkTreeSortable use no sorting.
#define GTK_CELL_AREA_WARN_INVALID_CELL_PROPERTY_ID(object, property_id, pspec)	# This macro should be used to emit a standard warning about unexpectedproperties in set_cell_property() and get_cell_property() implementations.
	object		# the GObject on which set_cell_property() or get_cell_property()was called
	property_id		# the numeric id of the property
	pspec		# the GParamSpec of the property
#define GTK_FILE_CHOOSER_ERROR (gtk_file_chooser_error_quark ())	# Used to get the GError quark for GtkFileChooser errors.
#define GTK_PRINT_ERROR gtk_print_error_quark ()	# The error domain for GtkPrintError errors.
#define GTK_PRINT_SETTINGS_PRINTER "printer"	
#define GTK_PRINT_SETTINGS_ORIENTATION "orientation"	
#define GTK_PRINT_SETTINGS_PAPER_FORMAT "paper-format"	
#define GTK_PRINT_SETTINGS_PAPER_WIDTH "paper-width"	
#define GTK_PRINT_SETTINGS_PAPER_HEIGHT "paper-height"	
#define GTK_PRINT_SETTINGS_USE_COLOR "use-color"	
#define GTK_PRINT_SETTINGS_COLLATE "collate"	
#define GTK_PRINT_SETTINGS_REVERSE "reverse"	
#define GTK_PRINT_SETTINGS_DUPLEX "duplex"	
#define GTK_PRINT_SETTINGS_QUALITY "quality"	
#define GTK_PRINT_SETTINGS_N_COPIES "n-copies"	
#define GTK_PRINT_SETTINGS_NUMBER_UP "number-up"	
#define GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT "number-up-layout"	
#define GTK_PRINT_SETTINGS_RESOLUTION "resolution"	
#define GTK_PRINT_SETTINGS_RESOLUTION_X "resolution-x"	
#define GTK_PRINT_SETTINGS_RESOLUTION_Y "resolution-y"	
#define GTK_PRINT_SETTINGS_PRINTER_LPI "printer-lpi"	
#define GTK_PRINT_SETTINGS_SCALE "scale"	
#define GTK_PRINT_SETTINGS_PRINT_PAGES "print-pages"	
#define GTK_PRINT_SETTINGS_PAGE_RANGES "page-ranges"	
#define GTK_PRINT_SETTINGS_PAGE_SET "page-set"	
#define GTK_PRINT_SETTINGS_DEFAULT_SOURCE "default-source"	
#define GTK_PRINT_SETTINGS_MEDIA_TYPE "media-type"	
#define GTK_PRINT_SETTINGS_DITHER "dither"	
#define GTK_PRINT_SETTINGS_FINISHINGS "finishings"	
#define GTK_PRINT_SETTINGS_OUTPUT_BIN "output-bin"	
#define GTK_PRINT_SETTINGS_OUTPUT_DIR "output-dir"	# The key used by the “Print to file” printer to store thedirectory to which the output should be written.
#define GTK_PRINT_SETTINGS_OUTPUT_BASENAME "output-basename"	# The key used by the “Print to file” printer to store the filename of the output without the path to the directory and thefile extension.
#define GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT "output-file-format"	# The key used by the “Print to file” printer to store the formatof the output. The supported values are “PS” and “PDF”.
#define GTK_PRINT_SETTINGS_OUTPUT_URI "output-uri"	# The key used by the “Print to file” printer to store the URIto which the output should be written. GTK+ itself supportsonly “file://” URIs.
#define GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA "win32-driver-extra"	
#define GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION "win32-driver-version"	
#define GTK_UNIT_PIXEL GTK_UNIT_NONE	
#define GTK_PAPER_NAME_A3 "iso_a3"	# Name for the A3 paper size.
#define GTK_PAPER_NAME_A4 "iso_a4"	# Name for the A4 paper size.
#define GTK_PAPER_NAME_A5 "iso_a5"	# Name for the A5 paper size.
#define GTK_PAPER_NAME_B5 "iso_b5"	# Name for the B5 paper size.
#define GTK_PAPER_NAME_LETTER "na_letter"	# Name for the Letter paper size.
#define GTK_PAPER_NAME_EXECUTIVE "na_executive"	# Name for the Executive paper size.
#define GTK_PAPER_NAME_LEGAL "na_legal"	# Name for the Legal paper size.
#define GTK_MAX_COMPOSE_LEN 7	# The maximum length of sequences in compose tables.
#define gtk_widget_class_bind_template_child(widget_class, TypeName, member_name)	# Binds a child widget defined in a template to the widget_class.
	widget_class		# a GtkWidgetClass
	TypeName		# the type name of this widget
	member_name		# name of the instance member in the instance struct for data_type
#define gtk_widget_class_bind_template_child_internal(widget_class, TypeName, member_name)	# Binds a child widget defined in a template to the widget_class, andalso makes it available as an internal child in GtkBuilder, under thename member_name.
	widget_class		# a GtkWidgetClass
	TypeName		# the type name, in CamelCase
	member_name		# name of the instance member in the instance struct for data_type
#define gtk_widget_class_bind_template_child_private(widget_class, TypeName, member_name)	# Binds a child widget defined in a template to the widget_class.
	widget_class		# a GtkWidgetClass
	TypeName		# the type name of this widget
	member_name		# name of the instance private member in the private struct for data_type
#define gtk_widget_class_bind_template_child_internal_private(widget_class, TypeName, member_name)	# Binds a child widget defined in a template to the widget_class, andalso makes it available as an internal child in GtkBuilder, under thename member_name.
	widget_class		# a GtkWidgetClass
	TypeName		# the type name, in CamelCase
	member_name		# name of the instance private member on the private struct for data_type
#define gtk_widget_class_bind_template_callback(widget_class, callback)	# Binds a callback function defined in a template to the widget_class.
	widget_class		# a GtkWidgetClass
	callback		# the callback symbol
#define GTK_CONTAINER_WARN_INVALID_CHILD_PROPERTY_ID(object, property_id, pspec)	# This macro should be used to emit a standard warning about unexpectedproperties in set_child_property() and get_child_property() implementations.
	object		# the GObject on which set_child_property() or get_child_property()was called
	property_id		# the numeric id of the property
	pspec		# the GParamSpec of the property
#define GTK_TYPE_NATIVE_DIALOG (gtk_native_dialog_get_type ())	
#define GTK_RECENT_MANAGER_ERROR (gtk_recent_manager_error_quark ())	# The GError domain for GtkRecentManager errors.
#define GTK_RECENT_CHOOSER_ERROR (gtk_recent_chooser_error_quark ())	# Used to get the GError quark for GtkRecentChooser errors.
#define GTK_PRIORITY_RESIZE (G_PRIORITY_HIGH_IDLE + 10)	# Use this priority for functionality related to size allocation.
#define GTK_CHECK_VERSION(major,minor,micro)	# Returns TRUE if the version of the GTK+ header filesis the same as or newer than the passed-in version.
	major		# major version (e.g. 1 for version 1.2.5)
	minor		# minor version (e.g. 2 for version 1.2.5)
	micro		# micro version (e.g. 5 for version 1.2.5)
	return:		#  TRUE if GTK+ headers are new enough 
#define GTK_MAJOR_VERSION (3)	# Like gtk_get_major_version(), but from the headers used atapplication compile time, rather than from the library linkedagainst at application run time.
#define GTK_MINOR_VERSION (91)	# Like gtk_get_minor_version(), but from the headers used atapplication compile time, rather than from the library linkedagainst at application run time.
#define GTK_MICRO_VERSION (0)	# Like gtk_get_micro_version(), but from the headers used atapplication compile time, rather than from the library linkedagainst at application run time.
#define GTK_BINARY_AGE (9100)	# Like gtk_get_binary_age(), but from the headers used atapplication compile time, rather than from the library linkedagainst at application run time.
#define GTK_INTERFACE_AGE (0)	# Like gtk_get_interface_age(), but from the headers used atapplication compile time, rather than from the library linkedagainst at application run time.
#define GTK_STYLE_PROPERTY_BACKGROUND_COLOR "background-color"	# A property holding the background color of rendered elements as a GdkRGBA.
#define GTK_STYLE_PROPERTY_COLOR "color"	# A property holding the foreground color of rendered elements as a GdkRGBA.
#define GTK_STYLE_PROPERTY_FONT "font"	# A property holding the font properties used when rendering textas a PangoFontDescription.
#define GTK_STYLE_PROPERTY_MARGIN "margin"	# A property holding the rendered element’s margin as a GtkBorder. Themargin is defined as the spacing between the border of the elementand its surrounding elements. It is external to GtkWidget'ssize allocations, and the most external spacing property of thepadding/border/margin series.
#define GTK_STYLE_PROPERTY_PADDING "padding"	# A property holding the rendered element’s padding as a GtkBorder. Thepadding is defined as the spacing between the inner part of the element borderand its child. It’s the innermost spacing property of the padding/border/marginseries.
#define GTK_STYLE_PROPERTY_BORDER_WIDTH "border-width"	# A property holding the rendered element’s border width in pixels asa GtkBorder. The border is the intermediary spacing property of thepadding/border/margin series.
#define GTK_STYLE_PROPERTY_BORDER_RADIUS "border-radius"	# A property holding the rendered element’s border radius in pixels as a gint.
#define GTK_STYLE_PROPERTY_BORDER_STYLE "border-style"	# A property holding the element’s border style as a GtkBorderStyle.
#define GTK_STYLE_PROPERTY_BORDER_COLOR "border-color"	# A property holding the element’s border color as a GdkRGBA.
#define GTK_STYLE_PROPERTY_BACKGROUND_IMAGE "background-image"	# A property holding the element’s background as a cairo_pattern_t.
#define GTK_STYLE_CLASS_ACCELERATOR "accelerator"	# A CSS class to match an accelerator.
#define GTK_STYLE_CLASS_ARROW "arrow"	# A CSS class used when rendering an arrow element.
#define GTK_STYLE_CLASS_BACKGROUND "background"	# A CSS class to match the window background.
#define GTK_STYLE_CLASS_BOTTOM "bottom"	# A CSS class to indicate an area at the bottom of a widget.
#define GTK_STYLE_CLASS_BUTTON "button"	# A CSS class to match buttons.
#define GTK_STYLE_CLASS_CALENDAR "calendar"	# A CSS class to match calendars.
#define GTK_STYLE_CLASS_CELL "cell"	# A CSS class to match content rendered in cell views.
#define GTK_STYLE_CLASS_COMBOBOX_ENTRY "combobox-entry"	# A CSS class to match combobox entries.
#define GTK_STYLE_CLASS_CONTEXT_MENU "context-menu"	# A CSS class to match context menus.
#define GTK_STYLE_CLASS_CHECK "check"	# A CSS class to match check boxes.
#define GTK_STYLE_CLASS_CSD "csd"	# A CSS class that gets added to windows which have client-side decorations.
#define GTK_STYLE_CLASS_CURSOR_HANDLE "cursor-handle"	# A CSS class used when rendering a drag handle fortext selection.
#define GTK_STYLE_CLASS_DEFAULT "default"	# A CSS class to match the default widget.
#define GTK_STYLE_CLASS_DESTRUCTIVE_ACTION "destructive-action"	# A CSS class used when an action (usually a button) isone that is expected to remove or destroy something visibleto the user.
#define GTK_STYLE_CLASS_DIM_LABEL "dim-label"	# A CSS class to match dimmed labels.
#define GTK_STYLE_CLASS_DND "dnd"	# A CSS class for a drag-and-drop indicator.
#define GTK_STYLE_CLASS_DOCK "dock"	# A CSS class defining a dock area.
#define GTK_STYLE_CLASS_ENTRY "entry"	# A CSS class to match text entries.
#define GTK_STYLE_CLASS_ERROR "error"	# A CSS class for an area displaying an error message,such as those in infobars.
#define GTK_STYLE_CLASS_EXPANDER "expander"	# A CSS class defining an expander, such as those in treeviews.
#define GTK_STYLE_CLASS_FRAME "frame"	# A CSS class defining a frame delimiting content, such asGtkFrame or the scrolled window frame around thescrollable area.
#define GTK_STYLE_CLASS_FLAT "flat"	# A CSS class that is added when widgets that usually havea frame or border (like buttons or entries) should appearwithout it.
#define GTK_STYLE_CLASS_HEADER "header"	# A CSS class to match a header element.
#define GTK_STYLE_CLASS_HIGHLIGHT "highlight"	# A CSS class defining a highlighted area, such as headings inassistants and calendars.
#define GTK_STYLE_CLASS_HORIZONTAL "horizontal"	# A CSS class for horizontally layered widgets.
#define GTK_STYLE_CLASS_IMAGE "image"	# A CSS class defining an image, such as the icon in an entry.
#define GTK_STYLE_CLASS_INFO "info"	# A CSS class for an area displaying an informational message,such as those in infobars.
#define GTK_STYLE_CLASS_INLINE_TOOLBAR "inline-toolbar"	# A CSS class to match inline toolbars.
#define GTK_STYLE_CLASS_INSERTION_CURSOR "insertion-cursor"	# A CSS class used when rendering a drag handle forthe insertion cursor position.
#define GTK_STYLE_CLASS_LABEL "label"	# A CSS class to match labels.
#define GTK_STYLE_CLASS_LEFT "left"	# A CSS class to indicate an area at the left of a widget.
#define GTK_STYLE_CLASS_LEVEL_BAR "level-bar"	# A CSS class used when rendering a level indicator, suchas a battery charge level, or a password strength.
#define GTK_STYLE_CLASS_LINKED "linked"	# A CSS class to match a linked area, such as a box containing buttonsbelonging to the same control.
#define GTK_STYLE_CLASS_LIST "list"	# A CSS class to match lists.
#define GTK_STYLE_CLASS_LIST_ROW "list-row"	# A CSS class to match list rows.
#define GTK_STYLE_CLASS_MARK "mark"	# A CSS class defining marks in a widget, such as in scales.
#define GTK_STYLE_CLASS_MENU "menu"	# A CSS class to match menus.
#define GTK_STYLE_CLASS_MENUBAR "menubar"	# A CSS class to menubars.
#define GTK_STYLE_CLASS_MENUITEM "menuitem"	# A CSS class to match menu items.
#define GTK_STYLE_CLASS_MESSAGE_DIALOG "message-dialog"	# A CSS class that is added to message dialogs.
#define GTK_STYLE_CLASS_MONOSPACE "monospace"	# A CSS class that is added to text view that should usea monospace font.
#define GTK_STYLE_CLASS_NEEDS_ATTENTION "needs-attention"	# A CSS class used when an element needs the user attention,for instance a button in a stack switcher corresponding toa hidden page that changed state.
#define GTK_STYLE_CLASS_NOTEBOOK "notebook"	# A CSS class defining a notebook.
#define GTK_STYLE_CLASS_OSD "osd"	# A CSS class used when rendering an OSD (On Screen Display) element,on top of another container.
#define GTK_STYLE_CLASS_OVERSHOOT "overshoot"	# A CSS class that is added on the visual hints that happenwhen scrolling is attempted past the limits of a scrollablearea.
#define GTK_STYLE_CLASS_PANE_SEPARATOR "pane-separator"	# A CSS class for a pane separator, such as those in GtkPaned.
#define GTK_STYLE_CLASS_PAPER "paper"	# A CSS class that is added to areas that should look like paper.
#define GTK_STYLE_CLASS_POPUP "popup"	# A CSS class that is added to the toplevel windows used for menus.
#define GTK_STYLE_CLASS_POPOVER "popover"	# A CSS class that matches popovers.
#define GTK_STYLE_CLASS_PRIMARY_TOOLBAR "primary-toolbar"	# A CSS class to match primary toolbars.
#define GTK_STYLE_CLASS_PROGRESSBAR "progressbar"	# A CSS class to use when rendering activity as a progressbar.
#define GTK_STYLE_CLASS_PULSE "pulse"	# A CSS class to use when rendering a pulse in an indeterminate progress bar.
#define GTK_STYLE_CLASS_QUESTION "question"	# A CSS class for an area displaying a question to the user,such as those in infobars.
#define GTK_STYLE_CLASS_RADIO "radio"	# A CSS class to match radio buttons.
#define GTK_STYLE_CLASS_RAISED "raised"	# A CSS class to match a raised control, such as a raisedbutton on a toolbar.
#define GTK_STYLE_CLASS_READ_ONLY "read-only"	# A CSS class used to indicate a read-only state.
#define GTK_STYLE_CLASS_RIGHT "right"	# A CSS class to indicate an area at the right of a widget.
#define GTK_STYLE_CLASS_RUBBERBAND "rubberband"	# A CSS class to match the rubberband selection rectangle.
#define GTK_STYLE_CLASS_SCALE "scale"	# A CSS class to match scale widgets.
#define GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE "scale-has-marks-above"	# A CSS class to match scale widgets with marks attached,all the marks are above for horizontal GtkScale.left for vertical GtkScale.
#define GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW "scale-has-marks-below"	# A CSS class to match scale widgets with marks attached,all the marks are below for horizontal GtkScale,right for vertical GtkScale.
#define GTK_STYLE_CLASS_SCROLLBAR "scrollbar"	# A CSS class to match scrollbars.
#define GTK_STYLE_CLASS_SCROLLBARS_JUNCTION "scrollbars-junction"	# A CSS class to match the junction area between an horizontaland vertical scrollbar, when they’re both shown.
#define GTK_STYLE_CLASS_SEPARATOR "separator"	# A CSS class for a separator.
#define GTK_STYLE_CLASS_SIDEBAR "sidebar"	# A CSS class defining a sidebar, such as the left side ina file chooser.
#define GTK_STYLE_CLASS_SLIDER "slider"	# A CSS class to match sliders.
#define GTK_STYLE_CLASS_SPINBUTTON "spinbutton"	# A CSS class defining an spinbutton.
#define GTK_STYLE_CLASS_SPINNER "spinner"	# A CSS class to use when rendering activity as a “spinner”.
#define GTK_STYLE_CLASS_STATUSBAR "statusbar"	# A CSS class to match statusbars.
#define GTK_STYLE_CLASS_SUBTITLE "subtitle"	# A CSS class used for the subtitle label in a titlebar ina toplevel window.
#define GTK_STYLE_CLASS_SUGGESTED_ACTION "suggested-action"	# A CSS class used when an action (usually a button) is theprimary suggested action in a specific context.
#define GTK_STYLE_CLASS_TITLE "title"	# A CSS class used for the title label in a titlebar ina toplevel window.
#define GTK_STYLE_CLASS_TITLEBAR "titlebar"	# A CSS class used when rendering a titlebar in a toplevel window.
#define GTK_STYLE_CLASS_TOOLBAR "toolbar"	# A CSS class to match toolbars.
#define GTK_STYLE_CLASS_TOOLTIP "tooltip"	# A CSS class to match tooltip windows.
#define GTK_STYLE_CLASS_TOUCH_SELECTION "touch-selection"	# A CSS class for touch selection popups on entriesand text views.
#define GTK_STYLE_CLASS_TOP "top"	# A CSS class to indicate an area at the top of a widget.
#define GTK_STYLE_CLASS_TROUGH "trough"	# A CSS class to match troughs, as in scrollbars and progressbars.
#define GTK_STYLE_CLASS_UNDERSHOOT "undershoot"	# A CSS class that is added on the visual hints that happenwhere content is 'scrolled off' and can be made visibleby scrolling.
#define GTK_STYLE_CLASS_VERTICAL "vertical"	# A CSS class for vertically layered widgets.
#define GTK_STYLE_CLASS_VIEW "view"	# A CSS class defining a view, such as iconviews or treeviews.
#define GTK_STYLE_CLASS_WARNING "warning"	# A CSS class for an area displaying a warning message,such as those in infobars.
#define GTK_STYLE_CLASS_WIDE "wide"	# A CSS class to indicate that a UI element should be 'wide'.Used by GtkPaned.
#define GTK_CSS_PROVIDER_ERROR (gtk_css_provider_error_quark ())	# Domain for GtkCssProvider errors.
#define GTK_STYLE_PROVIDER_PRIORITY_FALLBACK 1	# The priority used for default style informationthat is used in the absence of themes.
#define GTK_STYLE_PROVIDER_PRIORITY_THEME 200	# The priority used for style information providedby themes.
#define GTK_STYLE_PROVIDER_PRIORITY_SETTINGS 400	# The priority used for style information providedvia GtkSettings.
#define GTK_STYLE_PROVIDER_PRIORITY_APPLICATION 600	# A priority that can be used when adding a GtkStyleProviderfor application-specific style information.
#define GTK_STYLE_PROVIDER_PRIORITY_USER 800	# The priority used for the style information from~/.gtk-4.0.css.
#define GTK_ICON_THEME_ERROR gtk_icon_theme_error_quark ()	# The GQuark used for GtkIconThemeError errors.
enum GtkApplicationInhibitFlags	# Types of user actions that may be blocked by gtk_application_inhibit()</a>.
	GTK_APPLICATION_INHIBIT_LOGOUT	# Inhibit ending the user session    by logging out or by shutting down the computer
	GTK_APPLICATION_INHIBIT_SWITCH	# Inhibit user switching
	GTK_APPLICATION_INHIBIT_SUSPEND	# Inhibit suspending the    session or computer
	GTK_APPLICATION_INHIBIT_IDLE	# Inhibit the session being    marked as idle (and possibly locked)
enum GtkBuilderError	# Error codes that identify various errors that can occur while using<span class="type">GtkBuilder</span></a>.
	GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION	# A type-func attribute didn’t name a function that returns a GType.
	GTK_BUILDER_ERROR_UNHANDLED_TAG	# The input contained a tag that GtkBuilder can’t handle.
	GTK_BUILDER_ERROR_MISSING_ATTRIBUTE	# An attribute that is required by GtkBuilder was missing.
	GTK_BUILDER_ERROR_INVALID_ATTRIBUTE	# GtkBuilder found an attribute that it doesn’t understand.
	GTK_BUILDER_ERROR_INVALID_TAG	# GtkBuilder found a tag that it doesn’t understand.
	GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE	# A required property value was missing.
	GTK_BUILDER_ERROR_INVALID_VALUE	# GtkBuilder couldn’t parse some attribute value.
	GTK_BUILDER_ERROR_VERSION_MISMATCH	# The input file requires a newer version of GTK+.
	GTK_BUILDER_ERROR_DUPLICATE_ID	# An object id occurred twice.
	GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED	# A specified object type is of the same type or derived from the type of the composite class being extended with builder XML.
	GTK_BUILDER_ERROR_TEMPLATE_MISMATCH	# The wrong type was specified in a composite class’s template XML
	GTK_BUILDER_ERROR_INVALID_PROPERTY	# The specified property is unknown for the object class.
	GTK_BUILDER_ERROR_INVALID_SIGNAL	# The specified signal is unknown for the object class.
	GTK_BUILDER_ERROR_INVALID_ID	# An object id is unknown
enum GtkWindowType	# A <span class="type">GtkWindow</span></a> can be one of these types. Most things you’d consider a“window” should have type <span class="type">GTK_WINDOW_TOPLEVEL</span></a>; windows with this typeare managed by the window manager and have a frame by default (callgtk_window_set_decorated()</a> to toggle the frame).  Windows with type<span class="type">GTK_WINDOW_POPUP</span></a> are ignored by the window manager; window managerkeybindings won’t work on them, the window manager won’t decorate thewindow with a frame, many GTK+ features that rely on the windowmanager will not work (e.g. resize grips andmaximization/minimization). <span class="type">GTK_WINDOW_POPUP</span></a> is used to implementwidgets such as <span class="type">GtkMenu</span></a> or tooltips that you normally don’t think ofas windows per se. Nearly all windows should be <span class="type">GTK_WINDOW_TOPLEVEL</span></a>.In particular, do not use <span class="type">GTK_WINDOW_POPUP</span></a> just to turn offthe window borders; use gtk_window_set_decorated()</a> for that.
	GTK_WINDOW_TOPLEVEL	# A regular window, such as a dialog.
	GTK_WINDOW_POPUP	# A special window such as a tooltip.
enum GtkWindowPosition	# Window placement can be influenced using this enumeration. Note thatusing <span class="type">GTK_WIN_POS_CENTER_ALWAYS</span></a> is almost always a bad idea.It won’t necessarily work well with all window managers or on all windowing systems.
	GTK_WIN_POS_NONE	# No influence is made on placement.
	GTK_WIN_POS_CENTER	# Windows should be placed in the center of the screen.
	GTK_WIN_POS_MOUSE	# Windows should be placed at the current mouse position.
	GTK_WIN_POS_CENTER_ALWAYS	# Keep window centered as it changes size, etc.
	GTK_WIN_POS_CENTER_ON_PARENT	# Center the window on its transient parent (see gtk_window_set_transient_for()).
enum GtkDialogFlags	# Flags used to influence dialog construction.
	GTK_DIALOG_MODAL	# Make the constructed dialog modal,    see gtk_window_set_modal()
	GTK_DIALOG_DESTROY_WITH_PARENT	# Destroy the dialog when its    parent is destroyed, see gtk_window_set_destroy_with_parent()
	GTK_DIALOG_USE_HEADER_BAR	# Create dialog with actions in header    bar instead of action area. Since 3.12.
enum GtkResponseType	# Predefined values for use as response ids in gtk_dialog_add_button()</a>.All predefined values are negative, GTK+ leaves positive values forapplication-defined response ids.
	GTK_RESPONSE_NONE	# Returned if an action widget has no response id,    or if the dialog gets programmatically hidden or destroyed
	GTK_RESPONSE_REJECT	# Generic response id, not used by GTK+ dialogs
	GTK_RESPONSE_ACCEPT	# Generic response id, not used by GTK+ dialogs
	GTK_RESPONSE_DELETE_EVENT	# Returned if the dialog is deleted
	GTK_RESPONSE_OK	# Returned by OK buttons in GTK+ dialogs
	GTK_RESPONSE_CANCEL	# Returned by Cancel buttons in GTK+ dialogs
	GTK_RESPONSE_CLOSE	# Returned by Close buttons in GTK+ dialogs
	GTK_RESPONSE_YES	# Returned by Yes buttons in GTK+ dialogs
	GTK_RESPONSE_NO	# Returned by No buttons in GTK+ dialogs
	GTK_RESPONSE_APPLY	# Returned by Apply buttons in GTK+ dialogs
	GTK_RESPONSE_HELP	# Returned by Help buttons in GTK+ dialogs
enum GtkMessageType	# The type of message being displayed in the dialog.
	GTK_MESSAGE_INFO	# Informational message
	GTK_MESSAGE_WARNING	# Non-fatal warning message
	GTK_MESSAGE_QUESTION	# Question requiring a choice
	GTK_MESSAGE_ERROR	# Fatal error message
	GTK_MESSAGE_OTHER	# None of the above
enum GtkButtonsType	# Prebuilt sets of buttons for the dialog. Ifnone of these choices are appropriate, simply use <code class="literal">GTK_BUTTONS_NONE</a>then call gtk_dialog_add_buttons()</a>.
	GTK_BUTTONS_NONE	# no buttons at all
	GTK_BUTTONS_OK	# an OK button
	GTK_BUTTONS_CLOSE	# a Close button
	GTK_BUTTONS_CANCEL	# a Cancel button
	GTK_BUTTONS_YES_NO	# Yes and No buttons
	GTK_BUTTONS_OK_CANCEL	# OK and Cancel buttons
enum GtkLicense	# The type of license for an application.
	GTK_LICENSE_UNKNOWN	# No license specified
	GTK_LICENSE_CUSTOM	# A license text is going to be specified by the  developer
	GTK_LICENSE_GPL_2_0	# The GNU General Public License, version 2.0 or later
	GTK_LICENSE_GPL_3_0	# The GNU General Public License, version 3.0 or later
	GTK_LICENSE_LGPL_2_1	# The GNU Lesser General Public License, version 2.1 or later
	GTK_LICENSE_LGPL_3_0	# The GNU Lesser General Public License, version 3.0 or later
	GTK_LICENSE_BSD	# The BSD standard license
	GTK_LICENSE_MIT_X11	# The MIT/X11 standard license
	GTK_LICENSE_ARTISTIC	# The Artistic License, version 2.0
	GTK_LICENSE_GPL_2_0_ONLY	# The GNU General Public License, version 2.0 only. Since 3.12.
	GTK_LICENSE_GPL_3_0_ONLY	# The GNU General Public License, version 3.0 only. Since 3.12.
	GTK_LICENSE_LGPL_2_1_ONLY	# The GNU Lesser General Public License, version 2.1 only. Since 3.12.
	GTK_LICENSE_LGPL_3_0_ONLY	# The GNU Lesser General Public License, version 3.0 only. Since 3.12.
	GTK_LICENSE_AGPL_3_0	# The GNU Affero General Public License, version 3.0 or later. Since: 3.22.
enum GtkAssistantPageType	# An enum for determining the page role inside the <span class="type">GtkAssistant</span></a>. It'sused to handle buttons sensitivity and visibility.
	GTK_ASSISTANT_PAGE_CONTENT	# The page has regular contents. Both the Back and forward buttons will be shown.
	GTK_ASSISTANT_PAGE_INTRO	# The page contains an introduction to the assistant task. Only the Forward button will be shown if there is a  next page.
	GTK_ASSISTANT_PAGE_CONFIRM	# The page lets the user confirm or deny the changes. The Back and Apply buttons will be shown.
	GTK_ASSISTANT_PAGE_SUMMARY	# The page informs the user of the changes done. Only the Close button will be shown.
	GTK_ASSISTANT_PAGE_PROGRESS	# Used for tasks that take a long time to complete, blocks the assistant until the page is marked as complete.  Only the back button will be shown.
	GTK_ASSISTANT_PAGE_CUSTOM	# Used for when other page types are not appropriate. No buttons will be shown, and the application must add its own buttons through gtk_assistant_add_action_widget().
enum GtkRevealerTransitionType	# These enumeration values describe the possible transitionswhen the child of a <span class="type">GtkRevealer</span></a> widget is shown or hidden.
	GTK_REVEALER_TRANSITION_TYPE_NONE	# No transition
	GTK_REVEALER_TRANSITION_TYPE_CROSSFADE	# Fade in
	GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT	# Slide in from the left
	GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT	# Slide in from the right
	GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP	# Slide in from the bottom
	GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN	# Slide in from the top
enum GtkStackTransitionType	# These enumeration values describe the possible transitionsbetween pages in a <span class="type">GtkStack</span></a> widget.
	GTK_STACK_TRANSITION_TYPE_NONE	# No transition
	GTK_STACK_TRANSITION_TYPE_CROSSFADE	# A cross-fade
	GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT	# Slide from left to right
	GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT	# Slide from right to left
	GTK_STACK_TRANSITION_TYPE_SLIDE_UP	# Slide from bottom up
	GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN	# Slide from top down
	GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT	# Slide from left or right according to the children order
	GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN	# Slide from top down or bottom up according to the order
	GTK_STACK_TRANSITION_TYPE_OVER_UP	# Cover the old page by sliding up. Since 3.12
	GTK_STACK_TRANSITION_TYPE_OVER_DOWN	# Cover the old page by sliding down. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_OVER_LEFT	# Cover the old page by sliding to the left. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_OVER_RIGHT	# Cover the old page by sliding to the right. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_UNDER_UP	# Uncover the new page by sliding up. Since 3.12
	GTK_STACK_TRANSITION_TYPE_UNDER_DOWN	# Uncover the new page by sliding down. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_UNDER_LEFT	# Uncover the new page by sliding to the left. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT	# Uncover the new page by sliding to the right. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN	# Cover the old page sliding up or uncover the new page sliding down, according to order. Since: 3.12
	GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP	# Cover the old page sliding down or uncover the new page sliding up, according to order. Since: 3.14
	GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT	# Cover the old page sliding left or uncover the new page sliding right, according to order. Since: 3.14
	GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT	# Cover the old page sliding right or uncover the new page sliding left, according to order. Since: 3.14
enum GtkButtonBoxStyle	# Used to dictate the style that a <span class="type">GtkButtonBox</span></a> uses to layout the buttons itcontains.
	GTK_BUTTONBOX_SPREAD	# Buttons are evenly spread across the box.
	GTK_BUTTONBOX_EDGE	# Buttons are placed at the edges of the box.
	GTK_BUTTONBOX_START	# Buttons are grouped towards the start of the box,  (on the left for a HBox, or the top for a VBox).
	GTK_BUTTONBOX_END	# Buttons are grouped towards the end of the box,  (on the right for a HBox, or the bottom for a VBox).
	GTK_BUTTONBOX_CENTER	# Buttons are centered in the box. Since 2.12.
	GTK_BUTTONBOX_EXPAND	# Buttons expand to fill the box. This entails giving  buttons a "linked" appearance, making button sizes homogeneous, and  setting spacing to 0 (same as calling gtk_box_set_homogeneous() and  gtk_box_set_spacing() manually). Since 3.12.
enum GtkImageType	# Describes the image data representation used by a <span class="type">GtkImage</span></a>. If youwant to get the image from the widget, you can only get thecurrently-stored representation. e.g.  if thegtk_image_get_storage_type()</a> returns <span class="type">GTK_IMAGE_PIXBUF</span></a>, then you cancall gtk_image_get_pixbuf()</a>.  For empty images, you can request anystorage type (call any of the "get" functions), but they will allreturn <code class="literal">NULL</a> values.
	GTK_IMAGE_EMPTY	# there is no image displayed by the widget
	GTK_IMAGE_PIXBUF	# the widget contains a GdkPixbuf
	GTK_IMAGE_ANIMATION	# the widget contains a GdkPixbufAnimation
	GTK_IMAGE_ICON_NAME	# the widget contains a named icon. This image type was added in GTK+ 2.6
	GTK_IMAGE_GICON	# the widget contains a GIcon. This image type was added in GTK+ 2.14
	GTK_IMAGE_SURFACE	# the widget contains a cairo_surface_t. This image type was added in GTK+ 3.10
enum GtkLevelBarMode	# Describes how <span class="type">GtkLevelBar</span></a> contents should be rendered.Note that this enumeration could be extended with additional modesin the future.
	GTK_LEVEL_BAR_MODE_CONTINUOUS	# the bar has a continuous mode
	GTK_LEVEL_BAR_MODE_DISCRETE	# the bar has a discrete mode
enum GtkArrowType	# Used to indicate the direction in which an arrow should point.
	GTK_ARROW_UP	# Represents an upward pointing arrow.
	GTK_ARROW_DOWN	# Represents a downward pointing arrow.
	GTK_ARROW_LEFT	# Represents a left pointing arrow.
	GTK_ARROW_RIGHT	# Represents a right pointing arrow.
	GTK_ARROW_NONE	# No arrow. Since 2.10.
enum GtkButtonRole	# The role specifies the desired appearance of a <span class="type">GtkModelButton</span></a>.
	GTK_BUTTON_ROLE_NORMAL	# A plain button
	GTK_BUTTON_ROLE_CHECK	# A check button
	GTK_BUTTON_ROLE_RADIO	# A radio button
enum GtkEntryIconPosition	# Specifies the side of the entry at which an icon is placed.
	GTK_ENTRY_ICON_PRIMARY	# At the beginning of the entry (depending on the text direction).
	GTK_ENTRY_ICON_SECONDARY	# At the end of the entry (depending on the text direction).
enum GtkInputPurpose	# Describes primary purpose of the input widget. This information isuseful for on-screen keyboards and similar input methods to decidewhich keys should be presented to the user.
	GTK_INPUT_PURPOSE_FREE_FORM	# Allow any character
	GTK_INPUT_PURPOSE_ALPHA	# Allow only alphabetic characters
	GTK_INPUT_PURPOSE_DIGITS	# Allow only digits
	GTK_INPUT_PURPOSE_NUMBER	# Edited field expects numbers
	GTK_INPUT_PURPOSE_PHONE	# Edited field expects phone number
	GTK_INPUT_PURPOSE_URL	# Edited field expects URL
	GTK_INPUT_PURPOSE_EMAIL	# Edited field expects email address
	GTK_INPUT_PURPOSE_NAME	# Edited field expects the name of a person
	GTK_INPUT_PURPOSE_PASSWORD	# Like <em class="parameter"><code>GTK_INPUT_PURPOSE_FREE_FORM</em>, but characters are hidden
	GTK_INPUT_PURPOSE_PIN	# Like <em class="parameter"><code>GTK_INPUT_PURPOSE_DIGITS</em>, but characters are hidden
enum GtkInputHints	# Describes hints that might be taken into account by input methodsor applications. Note that input methods may already tailor theirbehaviour according to the <span class="type">GtkInputPurpose</span></a> of the entry.
	GTK_INPUT_HINT_NONE	# No special behaviour suggested
	GTK_INPUT_HINT_SPELLCHECK	# Suggest checking for typos
	GTK_INPUT_HINT_NO_SPELLCHECK	# Suggest not checking for typos
	GTK_INPUT_HINT_WORD_COMPLETION	# Suggest word completion
	GTK_INPUT_HINT_LOWERCASE	# Suggest to convert all text to lowercase
	GTK_INPUT_HINT_UPPERCASE_CHARS	# Suggest to capitalize all text
	GTK_INPUT_HINT_UPPERCASE_WORDS	# Suggest to capitalize the first    character of each word
	GTK_INPUT_HINT_UPPERCASE_SENTENCES	# Suggest to capitalize the    first word of each sentence
	GTK_INPUT_HINT_INHIBIT_OSK	# Suggest to not show an onscreen keyboard    (e.g for a calculator that already has all the keys).
	GTK_INPUT_HINT_VERTICAL_WRITING	# The text is vertical. Since 3.18
enum GtkSpinButtonUpdatePolicy	# The spin button update policy determines whether the spin button displaysvalues even if they are outside the bounds of its adjustment.See gtk_spin_button_set_update_policy()</a>.
	GTK_UPDATE_ALWAYS	# When refreshing your GtkSpinButton, the value is    always displayed
	GTK_UPDATE_IF_VALID	# When refreshing your GtkSpinButton, the value is    only displayed if it is valid within the bounds of the spin button's    adjustment
enum GtkSpinType	# The values of the GtkSpinType enumeration are used to specify thechange to make in gtk_spin_button_spin()</a>.
	GTK_SPIN_STEP_FORWARD	# Increment by the adjustments step increment.
	GTK_SPIN_STEP_BACKWARD	# Decrement by the adjustments step increment.
	GTK_SPIN_PAGE_FORWARD	# Increment by the adjustments page increment.
	GTK_SPIN_PAGE_BACKWARD	# Decrement by the adjustments page increment.
	GTK_SPIN_HOME	# Go to the adjustments lower bound.
	GTK_SPIN_END	# Go to the adjustments upper bound.
	GTK_SPIN_USER_DEFINED	# Change by a specified amount.
enum GtkTextSearchFlags	# Flags affecting how a search is done.
	GTK_TEXT_SEARCH_VISIBLE_ONLY	# Search only visible data. A search match mayhave invisible text interspersed.
	GTK_TEXT_SEARCH_TEXT_ONLY	# Search only text. A match may have pixbufs orchild widgets mixed inside the matched range.
	GTK_TEXT_SEARCH_CASE_INSENSITIVE	# The text will be matched regardless ofwhat case it is in.
enum GtkTextBufferTargetInfo	# These values are used as “info” for the targets contained in thelists returned by gtk_text_buffer_get_copy_target_list()</a> andgtk_text_buffer_get_paste_target_list()</a>.
	GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS	# Buffer contents
	GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT	# Rich text
	GTK_TEXT_BUFFER_TARGET_INFO_TEXT	# Text
enum GtkTextViewLayer	# Used to reference the layers of <span class="type">GtkTextView</span></a> for the purpose of customizeddrawing with the ::draw_layer vfunc.
	GTK_TEXT_VIEW_LAYER_BELOW	# GTK_TEXT_VIEW_LAYER_BELOW_TEXT instead
	GTK_TEXT_VIEW_LAYER_ABOVE	# GTK_TEXT_VIEW_LAYER_ABOVE_TEXT instead
	GTK_TEXT_VIEW_LAYER_BELOW_TEXT	# The layer rendered below the text (but above the background).  Since: 3.20
	GTK_TEXT_VIEW_LAYER_ABOVE_TEXT	# The layer rendered above the text.  Since: 3.20
enum GtkTextWindowType	# Used to reference the parts of <span class="type">GtkTextView</span></a>.
	GTK_TEXT_WINDOW_WIDGET	# Window that floats over scrolling areas.
	GTK_TEXT_WINDOW_TEXT	# Scrollable text window.
	GTK_TEXT_WINDOW_LEFT	# Left side border window.
	GTK_TEXT_WINDOW_RIGHT	# Right side border window.
	GTK_TEXT_WINDOW_TOP	# Top border window.
	GTK_TEXT_WINDOW_BOTTOM	# Bottom border window.
enum GtkTextExtendSelection	# Granularity types that extend the text selection. Use the<span class="type">“extend-selection”</span></a> signal to customize the selection.
	GTK_TEXT_EXTEND_SELECTION_WORD	# Selects the current word. It is triggered by  a double-click for example.
	GTK_TEXT_EXTEND_SELECTION_LINE	# Selects the current line. It is triggered by  a triple-click for example.
enum GtkWrapMode	# Describes a type of line wrapping.
	GTK_WRAP_NONE	# do not wrap lines; just make the text area wider
	GTK_WRAP_CHAR	# wrap text, breaking lines anywhere the cursor can    appear (between characters, usually - if you want to be technical,    between graphemes, see pango_get_log_attrs())
	GTK_WRAP_WORD	# wrap text, breaking lines in between words
	GTK_WRAP_WORD_CHAR	# wrap text, breaking lines in between words, or if    that is not enough, also between graphemes
enum GtkTreeModelFlags	# These flags indicate various properties of a <span class="type">GtkTreeModel</span></a>.
	GTK_TREE_MODEL_ITERS_PERSIST	# iterators survive all signals    emitted by the tree
	GTK_TREE_MODEL_LIST_ONLY	# the model is a list only, and never    has children
enum GtkTreeViewColumnSizing	# The sizing method the column uses to determine its width.  Please notethat <em class="parameter"><code>GTK_TREE_VIEW_COLUMN_AUTOSIZE</em> are inefficient for large views, andcan make columns appear choppy.
	GTK_TREE_VIEW_COLUMN_GROW_ONLY	# Columns only get bigger in reaction to changes in the model
	GTK_TREE_VIEW_COLUMN_AUTOSIZE	# Columns resize to be the optimal size everytime the model changes.
	GTK_TREE_VIEW_COLUMN_FIXED	# Columns are a fixed numbers of pixels wide.
enum GtkTreeViewDropPosition	# An enum for determining where a dropped row goes.
	GTK_TREE_VIEW_DROP_BEFORE	# dropped row is inserted before
	GTK_TREE_VIEW_DROP_AFTER	# dropped row is inserted after
	GTK_TREE_VIEW_DROP_INTO_OR_BEFORE	# dropped row becomes a child or is inserted before
	GTK_TREE_VIEW_DROP_INTO_OR_AFTER	# dropped row becomes a child or is inserted after
enum GtkTreeViewGridLines	# Used to indicate which grid lines to draw in a tree view.
	GTK_TREE_VIEW_GRID_LINES_NONE	# No grid lines.
	GTK_TREE_VIEW_GRID_LINES_HORIZONTAL	# Horizontal grid lines.
	GTK_TREE_VIEW_GRID_LINES_VERTICAL	# Vertical grid lines.
	GTK_TREE_VIEW_GRID_LINES_BOTH	# Horizontal and vertical grid lines.
enum GtkIconViewDropPosition	# An enum for determining where a dropped item goes.
	GTK_ICON_VIEW_NO_DROP	# no drop possible
	GTK_ICON_VIEW_DROP_INTO	# dropped item replaces the item
	GTK_ICON_VIEW_DROP_LEFT	# droppped item is inserted to the left
	GTK_ICON_VIEW_DROP_RIGHT	# dropped item is inserted to the right
	GTK_ICON_VIEW_DROP_ABOVE	# dropped item is inserted above
	GTK_ICON_VIEW_DROP_BELOW	# dropped item is inserted below
enum GtkCellRendererState	# Tells how a cell is to be rendered.
	GTK_CELL_RENDERER_SELECTED	# The cell is currently selected, and probably has a selection colored background to render to.
	GTK_CELL_RENDERER_PRELIT	# The mouse is hovering over the cell.
	GTK_CELL_RENDERER_INSENSITIVE	# The cell is drawn in an insensitive manner
	GTK_CELL_RENDERER_SORTED	# The cell is in a sorted row
	GTK_CELL_RENDERER_FOCUSED	# The cell is in the focus row.
	GTK_CELL_RENDERER_EXPANDABLE	# The cell is in a row that can be expanded. Since 3.4
	GTK_CELL_RENDERER_EXPANDED	# The cell is in a row that is expanded. Since 3.4
enum GtkCellRendererMode	# Identifies how the user can interact with a particular cell.
	GTK_CELL_RENDERER_MODE_INERT	# The cell is just for display and cannot be interacted with.  Note that this doesn’t mean that eg. the row being drawn can’t be selected -- just that a particular element of it cannot be individually modified.
	GTK_CELL_RENDERER_MODE_ACTIVATABLE	# The cell can be clicked.
	GTK_CELL_RENDERER_MODE_EDITABLE	# The cell can be edited or otherwise modified.
enum GtkCellRendererAccelMode	# Determines if the edited accelerators are GTK+ accelerators. Ifthey are, consumed modifiers are suppressed, only acceleratorsaccepted by GTK+ are allowed, and the accelerators are renderedin the same way as they are in menus.
	GTK_CELL_RENDERER_ACCEL_MODE_GTK	# GTK+ accelerators mode
	GTK_CELL_RENDERER_ACCEL_MODE_OTHER	# Other accelerator mode
enum GtkArrowPlacement	# Used to specify the placement of scroll arrows in scrolling menus.
	GTK_ARROWS_BOTH	# Place one arrow on each end of the menu.
	GTK_ARROWS_START	# Place both arrows at the top of the menu.
	GTK_ARROWS_END	# Place both arrows at the bottom of the menu.
enum GtkPackDirection	# Determines how widgets should be packed inside menubarsand menuitems contained in menubars.
	GTK_PACK_DIRECTION_LTR	# Widgets are packed left-to-right
	GTK_PACK_DIRECTION_RTL	# Widgets are packed right-to-left
	GTK_PACK_DIRECTION_TTB	# Widgets are packed top-to-bottom
	GTK_PACK_DIRECTION_BTT	# Widgets are packed bottom-to-top
enum GtkToolPaletteDragTargets	# Flags used to specify the supported drag targets.
	GTK_TOOL_PALETTE_DRAG_ITEMS	# Support drag of items.
	GTK_TOOL_PALETTE_DRAG_GROUPS	# Support drag of groups.
enum GtkPopoverConstraint	# Describes constraints to positioning of popovers. More valuesmay be added to this enumeration in the future.
	GTK_POPOVER_CONSTRAINT_NONE	# Don't constrain the popover position  beyond what is imposed by the implementation
	GTK_POPOVER_CONSTRAINT_WINDOW	# Constrain the popover to the boundaries  of the window that it is attached to
enum GtkFileChooserAction	# Describes whether a <span class="type">GtkFileChooser</span></a> is being used to open existing filesor to save to a possibly new file.
	GTK_FILE_CHOOSER_ACTION_OPEN	# Indicates open mode.  The file chooser will only let the user pick an existing file.
	GTK_FILE_CHOOSER_ACTION_SAVE	# Indicates save mode.  The file chooser will let the user pick an existing file, or type in a new filename.
	GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER	# Indicates an Open mode for selecting folders.  The file chooser will let the user pick an existing folder.
	GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER	# Indicates a mode for creating a new folder.  The file chooser will let the user name an existing or new folder.
enum GtkFileChooserConfirmation	# Used as a return value of handlers for the<span class="type">“confirm-overwrite”</span></a> signal of a <span class="type">GtkFileChooser</span></a>. Thisvalue determines whether the file chooser will present the stockconfirmation dialog, accept the user’s choice of a filename, orlet the user choose another filename.
	GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM	# The file chooser will present its stock dialog to confirm about overwriting an existing file.
	GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME	# The file chooser will terminate and accept the user’s choice of a file name.
	GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN	# The file chooser will continue running, so as to let the user select another file name.
enum GtkFileChooserError	# These identify the various errors that can occur while calling<span class="type">GtkFileChooser</span></a> functions.
	GTK_FILE_CHOOSER_ERROR_NONEXISTENT	# Indicates that a file does not exist.
	GTK_FILE_CHOOSER_ERROR_BAD_FILENAME	# Indicates a malformed filename.
	GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS	# Indicates a duplicate path (e.g. when adding a bookmark).
	GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME	# Indicates an incomplete hostname (e.g. "http://foo" without a slash after that).
enum GtkFileFilterFlags	# These flags indicate what parts of a <span class="type">GtkFileFilterInfo</span></a> structare filled or need to be filled.
	GTK_FILE_FILTER_FILENAME	# the filename of the file being tested
	GTK_FILE_FILTER_URI	# the URI for the file being tested
	GTK_FILE_FILTER_DISPLAY_NAME	# the string that will be used to   display the file in the file chooser
	GTK_FILE_FILTER_MIME_TYPE	# the mime type of the file
enum GtkPlacesOpenFlags	# These flags serve two purposes.  First, the application can call gtk_places_sidebar_set_open_flags()</a>using these flags as a bitmask.  This tells the sidebar that the application is able to openfolders selected from the sidebar in various ways, for example, in new tabs or in new windows inaddition to the normal mode.
	GTK_PLACES_OPEN_NORMAL	# This is the default mode that GtkPlacesSidebar uses if no other flags are specified.  It indicates that the calling application should open the selected location in the normal way, for example, in the folder view beside the sidebar.
	GTK_PLACES_OPEN_NEW_TAB	# When passed to gtk_places_sidebar_set_open_flags(), this indicates that the application can open folders selected from the sidebar in new tabs.  This value will be passed to the “open-location” signal when the user selects that a location be opened in a new tab instead of in the standard fashion.
	GTK_PLACES_OPEN_NEW_WINDOW	# Similar to <em class="parameter"><code>GTK_PLACES_OPEN_NEW_TAB</em>, but indicates that the application can open folders in new windows.
enum GtkPolicyType	# Determines how the size should be computed to achieve the one of thevisibility mode for the scrollbars.
	GTK_POLICY_ALWAYS	# The scrollbar is always visible. The view size is independent of the content.
	GTK_POLICY_AUTOMATIC	# The scrollbar will appear and disappear as necessary. For example, when all of a GtkTreeView can not be seen.
	GTK_POLICY_NEVER	# The scrollbar should never appear. In this mode the content determines the size.
	GTK_POLICY_EXTERNAL	# Don't show a scrollbar, but don't force the size to follow the content. This can be used e.g. to make multiple scrolled windows share a scrollbar. Since: 3.16
enum GtkCornerType	# Specifies which corner a child widget should be placed in when packed intoa <span class="type">GtkScrolledWindow</span></a>. This is effectively the opposite of where the scrollbars are placed.
	GTK_CORNER_TOP_LEFT	# Place the scrollbars on the right and bottom of the widget (default behaviour).
	GTK_CORNER_BOTTOM_LEFT	# Place the scrollbars on the top and right of the widget.
	GTK_CORNER_TOP_RIGHT	# Place the scrollbars on the left and bottom of the widget.
	GTK_CORNER_BOTTOM_RIGHT	# Place the scrollbars on the top and left of the widget.
enum GtkScrollablePolicy	# Defines the policy to be used in a scrollable widget when updatingthe scrolled window adjustments in a given orientation.
	GTK_SCROLL_MINIMUM	# Scrollable adjustments are based on the minimum size
	GTK_SCROLL_NATURAL	# Scrollable adjustments are based on the natural size
enum GtkPrintStatus	# The status gives a rough indication of the completion of a runningprint operation.
	GTK_PRINT_STATUS_INITIAL	# The printing has not started yet; this    status is set initially, and while the print dialog is shown.
	GTK_PRINT_STATUS_PREPARING	# This status is set while the begin-print    signal is emitted and during pagination.
	GTK_PRINT_STATUS_GENERATING_DATA	# This status is set while the    pages are being rendered.
	GTK_PRINT_STATUS_SENDING_DATA	# The print job is being sent off to the    printer.
	GTK_PRINT_STATUS_PENDING	# The print job has been sent to the printer,    but is not printed for some reason, e.g. the printer may be stopped.
	GTK_PRINT_STATUS_PENDING_ISSUE	# Some problem has occurred during    printing, e.g. a paper jam.
	GTK_PRINT_STATUS_PRINTING	# The printer is processing the print job.
	GTK_PRINT_STATUS_FINISHED	# The printing has been completed successfully.
	GTK_PRINT_STATUS_FINISHED_ABORTED	# The printing has been aborted.
enum GtkPrintOperationAction	# The <em class="parameter"><code>action</em> parameter to gtk_print_operation_run()</a>determines what action the print operation should perform.
	GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG	# Show the print dialog.
	GTK_PRINT_OPERATION_ACTION_PRINT	# Start to print without showing    the print dialog, based on the current print settings.
	GTK_PRINT_OPERATION_ACTION_PREVIEW	# Show the print preview.
	GTK_PRINT_OPERATION_ACTION_EXPORT	# Export to a file. This requires    the export-filename property to be set.
enum GtkPrintOperationResult	# A value of this type is returned by gtk_print_operation_run()</a>.
	GTK_PRINT_OPERATION_RESULT_ERROR	# An error has occurred.
	GTK_PRINT_OPERATION_RESULT_APPLY	# The print settings should be stored.
	GTK_PRINT_OPERATION_RESULT_CANCEL	# The print operation has been canceled,    the print settings should not be stored.
	GTK_PRINT_OPERATION_RESULT_IN_PROGRESS	# The print operation is not complete    yet. This value will only be returned when running asynchronously.
enum GtkPrintError	# Error codes that identify various errors that can occur whileusing the GTK+ printing support.
	GTK_PRINT_ERROR_GENERAL	# An unspecified error occurred.
	GTK_PRINT_ERROR_INTERNAL_ERROR	# An internal error occurred.
	GTK_PRINT_ERROR_NOMEM	# A memory allocation failed.
	GTK_PRINT_ERROR_INVALID_FILE	# An error occurred while loading a page setup    or paper size from a key file.
enum GtkPageOrientation	# See also gtk_print_settings_set_orientation()</a>.
	GTK_PAGE_ORIENTATION_PORTRAIT	# Portrait mode.
	GTK_PAGE_ORIENTATION_LANDSCAPE	# Landscape mode.
	GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT	# Reverse portrait mode.
	GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE	# Reverse landscape mode.
enum GtkPrintDuplex	# See also gtk_print_settings_set_duplex()</a>.
	GTK_PRINT_DUPLEX_SIMPLEX	# No duplex.
	GTK_PRINT_DUPLEX_HORIZONTAL	# Horizontal duplex.
	GTK_PRINT_DUPLEX_VERTICAL	# Vertical duplex.
enum GtkPrintQuality	# See also gtk_print_settings_set_quality()</a>.
	GTK_PRINT_QUALITY_LOW	# Low quality.
	GTK_PRINT_QUALITY_NORMAL	# Normal quality.
	GTK_PRINT_QUALITY_HIGH	# High quality.
	GTK_PRINT_QUALITY_DRAFT	# Draft quality.
enum GtkNumberUpLayout	# Used to determine the layout of pages on a sheet when printingmultiple pages per sheet.
	GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM	# <span class="inlinemediaobject"><img src="layout-lrtb.png">
	GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP	# <span class="inlinemediaobject"><img src="layout-lrbt.png">
	GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM	# <span class="inlinemediaobject"><img src="layout-rltb.png">
	GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP	# <span class="inlinemediaobject"><img src="layout-rlbt.png">
	GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT	# <span class="inlinemediaobject"><img src="layout-tblr.png">
	GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT	# <span class="inlinemediaobject"><img src="layout-tbrl.png">
	GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT	# <span class="inlinemediaobject"><img src="layout-btlr.png">
	GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT	# <span class="inlinemediaobject"><img src="layout-btrl.png">
enum GtkPrintPages	# See also gtk_print_job_set_pages()</a>
	GTK_PRINT_PAGES_ALL	# All pages.
	GTK_PRINT_PAGES_CURRENT	# Current page.
	GTK_PRINT_PAGES_RANGES	# Range of pages.
	GTK_PRINT_PAGES_SELECTION	# Selected pages.
enum GtkPageSet	# See also gtk_print_job_set_page_set()</a>.
	GTK_PAGE_SET_ALL	# All pages.
	GTK_PAGE_SET_EVEN	# Even pages.
	GTK_PAGE_SET_ODD	# Odd pages.
enum GtkUnit	# See also gtk_print_settings_set_paper_width()</a>.
	GTK_UNIT_NONE	# No units.
	GTK_UNIT_POINTS	# Dimensions in points.
	GTK_UNIT_INCH	# Dimensions in inches.
	GTK_UNIT_MM	# Dimensions in millimeters
enum GtkPrintCapabilities	# An enum for specifying which features the print dialog should offer.If neither <code class="literal">GTK_PRINT_CAPABILITY_GENERATE_PDF</a> nor<code class="literal">GTK_PRINT_CAPABILITY_GENERATE_PS</a> is specified, GTK+ assumes that allformats are supported.
	GTK_PRINT_CAPABILITY_PAGE_SET	# Print dialog will offer printing even/odd pages.
	GTK_PRINT_CAPABILITY_COPIES	# Print dialog will allow to print multiple copies.
	GTK_PRINT_CAPABILITY_COLLATE	# Print dialog will allow to collate multiple copies.
	GTK_PRINT_CAPABILITY_REVERSE	# Print dialog will allow to print pages in reverse order.
	GTK_PRINT_CAPABILITY_SCALE	# Print dialog will allow to scale the output.
	GTK_PRINT_CAPABILITY_GENERATE_PDF	# The program will send the document to  the printer in PDF format
	GTK_PRINT_CAPABILITY_GENERATE_PS	# The program will send the document to  the printer in Postscript format
	GTK_PRINT_CAPABILITY_PREVIEW	# Print dialog will offer a preview
	GTK_PRINT_CAPABILITY_NUMBER_UP	# Print dialog will offer printing multiple  pages per sheet. Since 2.12
	GTK_PRINT_CAPABILITY_NUMBER_UP_LAYOUT	# Print dialog will allow to rearrange  pages when printing multiple pages per sheet. Since 2.14
enum GtkShortcutType	# GtkShortcutType specifies the kind of shortcut that is being described.More values may be added to this enumeration over time.
	GTK_SHORTCUT_ACCELERATOR	#   The shortcut is a keyboard accelerator. The “accelerator”  property will be used.
	GTK_SHORTCUT_GESTURE_PINCH	#   The shortcut is a pinch gesture. GTK+ provides an icon and subtitle.
	GTK_SHORTCUT_GESTURE_STRETCH	#   The shortcut is a stretch gesture. GTK+ provides an icon and subtitle.
	GTK_SHORTCUT_GESTURE_ROTATE_CLOCKWISE	#   The shortcut is a clockwise rotation gesture. GTK+ provides an icon and subtitle.
	GTK_SHORTCUT_GESTURE_ROTATE_COUNTERCLOCKWISE	#   The shortcut is a counterclockwise rotation gesture. GTK+ provides an icon and subtitle.
	GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_LEFT	#   The shortcut is a two-finger swipe gesture. GTK+ provides an icon and subtitle.
	GTK_SHORTCUT_GESTURE_TWO_FINGER_SWIPE_RIGHT	#   The shortcut is a two-finger swipe gesture. GTK+ provides an icon and subtitle.
	GTK_SHORTCUT_GESTURE	#   The shortcut is a gesture. The “icon” property will be  used.
	GTK_SHORTCUT_GESTURE_SWIPE_LEFT	#   The shortcut is a swipe gesture. GTK+ provides an icon and subtitle. Since 3.90
	GTK_SHORTCUT_GESTURE_SWIPE_RIGHT	#   The shortcut is a swipe gesture. GTK+ provides an icon and subtitle. Since 3.90
enum GtkCalendarDisplayOptions	# These options can be used to influence the display and behaviour of a <span class="type">GtkCalendar</span></a>.
	GTK_CALENDAR_SHOW_HEADING	# Specifies that the month and year should be displayed.
	GTK_CALENDAR_SHOW_DAY_NAMES	# Specifies that three letter day descriptions should be present.
	GTK_CALENDAR_NO_MONTH_CHANGE	# Prevents the user from switching months with the calendar.
	GTK_CALENDAR_SHOW_WEEK_NUMBERS	# Displays each week numbers of the current year, down theleft side of the calendar.
	GTK_CALENDAR_SHOW_DETAILS	# Just show an indicator, not the full detailstext when details are provided. See gtk_calendar_set_detail_func().
enum GtkSizeGroupMode	# The mode of the size group determines the directions in which the sizegroup affects the requested sizes of its component widgets.
	GTK_SIZE_GROUP_NONE	# group has no effect
	GTK_SIZE_GROUP_HORIZONTAL	# group affects horizontal requisition
	GTK_SIZE_GROUP_VERTICAL	# group affects vertical requisition
	GTK_SIZE_GROUP_BOTH	# group affects both horizontal and vertical requisition
enum GtkTextDirection	# Reading directions for text.
	GTK_TEXT_DIR_NONE	# No direction.
	GTK_TEXT_DIR_LTR	# Left to right text direction.
	GTK_TEXT_DIR_RTL	# Right to left text direction.
enum GtkSizeRequestMode	# Specifies a preference for height-for-width orwidth-for-height geometry management.
	GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH	# Prefer height-for-width geometry management
	GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT	# Prefer width-for-height geometry management
	GTK_SIZE_REQUEST_CONSTANT_SIZE	# Don’t trade height-for-width or width-for-height
enum GtkAlign	# Controls how a widget deals with extra space in a single (x or y)dimension.
	GTK_ALIGN_FILL	# stretch to fill all space if possible, center if    no meaningful way to stretch
	GTK_ALIGN_START	# snap to left or top side, leaving space on right    or bottom
	GTK_ALIGN_END	# snap to right or bottom side, leaving space on left    or top
	GTK_ALIGN_CENTER	# center natural width of widget inside the    allocation
	GTK_ALIGN_BASELINE	# align the widget according to the baseline. Since 3.10.
enum GtkMenuDirectionType	# An enumeration representing directional movements within a menu.
	GTK_MENU_DIR_PARENT	# To the parent menu shell
	GTK_MENU_DIR_CHILD	# To the submenu, if any, associated with the item
	GTK_MENU_DIR_NEXT	# To the next menu item
	GTK_MENU_DIR_PREV	# To the previous menu item
enum GtkSensitivityType	# Determines how GTK+ handles the sensitivity of stepper arrowsat the end of range widgets.
	GTK_SENSITIVITY_AUTO	# The arrow is made insensitive if the  thumb is at the end
	GTK_SENSITIVITY_ON	# The arrow is always sensitive
	GTK_SENSITIVITY_OFF	# The arrow is always insensitive
enum GtkRecentManagerError	# Error codes for <span class="type">GtkRecentManager</span></a> operations
	GTK_RECENT_MANAGER_ERROR_NOT_FOUND	# the URI specified does not exists in  the recently used resources list.
	GTK_RECENT_MANAGER_ERROR_INVALID_URI	# the URI specified is not valid.
	GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING	# the supplied string is not  UTF-8 encoded.
	GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED	# no application has registered  the specified item.
	GTK_RECENT_MANAGER_ERROR_READ	# failure while reading the recently used  resources file.
	GTK_RECENT_MANAGER_ERROR_WRITE	# failure while writing the recently used  resources file.
	GTK_RECENT_MANAGER_ERROR_UNKNOWN	# unspecified error.
enum GtkRecentChooserError	# These identify the various errors that can occur while calling<span class="type">GtkRecentChooser</span></a> functions.
	GTK_RECENT_CHOOSER_ERROR_NOT_FOUND	# Indicates that a file does not exist
	GTK_RECENT_CHOOSER_ERROR_INVALID_URI	# Indicates a malformed URI
enum GtkRecentSortType	# Used to specify the sorting method to be applyed to the recentlyused resource list.
	GTK_RECENT_SORT_NONE	# Do not sort the returned list of recently used  resources.
	GTK_RECENT_SORT_MRU	# Sort the returned list with the most recently used  items first.
	GTK_RECENT_SORT_LRU	# Sort the returned list with the least recently used  items first.
	GTK_RECENT_SORT_CUSTOM	# Sort the returned list using a custom sorting  function passed using gtk_recent_chooser_set_sort_func().
enum GtkRecentFilterFlags	# These flags indicate what parts of a <span class="type">GtkRecentFilterInfo</span></a> structare filled or need to be filled.
	GTK_RECENT_FILTER_URI	# the URI of the file being tested
	GTK_RECENT_FILTER_DISPLAY_NAME	# the string that will be used to display the file in the recent chooser
	GTK_RECENT_FILTER_MIME_TYPE	# the mime type of the file
	GTK_RECENT_FILTER_APPLICATION	# the list of applications that have registered the file
	GTK_RECENT_FILTER_GROUP	# the groups to which the file belongs to
	GTK_RECENT_FILTER_AGE	# the number of days elapsed since the file has been registered
enum GtkPropagationPhase	# Describes the stage at which events are fed into a <span class="type">GtkEventController</span></a>.
	GTK_PHASE_NONE	# Events are not delivered automatically. Those can be  manually fed through gtk_event_controller_handle_event(). This should  only be used when full control about when, or whether the controller  handles the event is needed.
	GTK_PHASE_CAPTURE	# Events are delivered in the capture phase. The  capture phase happens before the bubble phase, runs from the toplevel down  to the event widget. This option should only be used on containers that  might possibly handle events before their children do.
	GTK_PHASE_BUBBLE	# Events are delivered in the bubble phase. The bubble  phase happens after the capture phase, and before the default handlers  are run. This phase runs from the event widget, up to the toplevel.
	GTK_PHASE_TARGET	# Events are delivered in the default widget event handlers,  note that widget implementations must chain up on button, motion, touch and  grab broken handlers for controllers in this phase to be run.
enum GtkEventSequenceState	# Describes the state of a <span class="type">GdkEventSequence</span></a> in a <span class="type">GtkGesture</span></a>.
	GTK_EVENT_SEQUENCE_NONE	# The sequence is handled, but not grabbed.
	GTK_EVENT_SEQUENCE_CLAIMED	# The sequence is handled and grabbed.
	GTK_EVENT_SEQUENCE_DENIED	# The sequence is denied.
enum GtkPanDirection	# Describes the panning direction of a <span class="type">GtkGesturePan</span></a>
	GTK_PAN_DIRECTION_LEFT	# panned towards the left
	GTK_PAN_DIRECTION_RIGHT	# panned towards the right
	GTK_PAN_DIRECTION_UP	# panned upwards
	GTK_PAN_DIRECTION_DOWN	# panned downwards
enum GtkPadActionType	# The type of a pad action.
	GTK_PAD_ACTION_BUTTON	# Action is triggered by a pad button
	GTK_PAD_ACTION_RING	# Action is triggered by a pad ring
	GTK_PAD_ACTION_STRIP	# Action is triggered by a pad strip
enum GtkAccelFlags	# Accelerator flags used with gtk_accel_group_connect()</a>.
	GTK_ACCEL_VISIBLE	# Accelerator is visible
	GTK_ACCEL_LOCKED	# Accelerator not removable
	GTK_ACCEL_MASK	# Mask
enum GtkDestDefaults	# The <span class="type">GtkDestDefaults</span></a> enumeration specifies the varioustypes of action that will be taken on behalfof the user for a drag destination site.
	GTK_DEST_DEFAULT_MOTION	# If set for a widget, GTK+, during a drag over this  widget will check if the drag matches this widget’s list of possible targets  and actions.  GTK+ will then call gdk_drag_status() as appropriate.
	GTK_DEST_DEFAULT_HIGHLIGHT	# If set for a widget, GTK+ will draw a highlight on  this widget as long as a drag is over this widget and the widget drag format  and action are acceptable.
	GTK_DEST_DEFAULT_DROP	# TRUE will be  passed for the <em class="parameter"><code>delete</em> parameter to gtk_drag_finish().
	GTK_DEST_DEFAULT_ALL	# If set, specifies that all default actions should  be taken.
enum GtkTargetFlags	# The <span class="type">GtkTargetFlags</span></a> enumeration is used to specifyconstraints on a <span class="type">GtkTargetEntry</span></a>.
	GTK_TARGET_SAME_APP	# If this is set, the target will only be selected  for drags within a single application.
	GTK_TARGET_SAME_WIDGET	# If this is set, the target will only be selected  for drags within a single widget.
	GTK_TARGET_OTHER_APP	# If this is set, the target will not be selected  for drags within a single application.
	GTK_TARGET_OTHER_WIDGET	# If this is set, the target will not be selected  for drags withing a single widget.
enum GtkDragResult	# Gives an indication why a drag operation failed.The value can by obtained by connecting to the<span class="type">“drag-failed”</span></a> signal.
	GTK_DRAG_RESULT_SUCCESS	# The drag operation was successful.
	GTK_DRAG_RESULT_NO_TARGET	# No suitable drag target.
	GTK_DRAG_RESULT_USER_CANCELLED	# The user cancelled the drag operation.
	GTK_DRAG_RESULT_TIMEOUT_EXPIRED	# The drag operation timed out.
	GTK_DRAG_RESULT_GRAB_BROKEN	# The pointer or keyboard grab used for the drag operation was broken.
	GTK_DRAG_RESULT_ERROR	# The drag operation failed due to some unspecified error.
enum GtkBaselinePosition	# Whenever a container has some form of natural row it may alignchildren in that row along a common typographical baseline. Ifthe amount of verical space in the row is taller than the totalrequested height of the baseline-aligned children then it can use a<span class="type">GtkBaselinePosition</span></a> to select where to put the baseline inside theextra availible space.
	GTK_BASELINE_POSITION_TOP	# Align the baseline at the top
	GTK_BASELINE_POSITION_CENTER	# Center the baseline
	GTK_BASELINE_POSITION_BOTTOM	# Align the baseline at the bottom
enum GtkDeleteType	# See also: <span class="type">“delete-from-cursor”</span></a>.
	GTK_DELETE_CHARS	# Delete characters.
	GTK_DELETE_WORD_ENDS	# Delete only the portion of the word to the  left/right of cursor if we’re in the middle of a word.
	GTK_DELETE_WORDS	# Delete words.
	GTK_DELETE_DISPLAY_LINES	# Delete display-lines. Display-lines  refers to the visible lines, with respect to to the current line  breaks. As opposed to paragraphs, which are defined by line  breaks in the input.
	GTK_DELETE_DISPLAY_LINE_ENDS	# Delete only the portion of the  display-line to the left/right of cursor.
	GTK_DELETE_PARAGRAPH_ENDS	# Delete to the end of the  paragraph. Like C-k in Emacs (or its reverse).
	GTK_DELETE_PARAGRAPHS	# Delete entire line. Like C-k in pico.
	GTK_DELETE_WHITESPACE	# Delete only whitespace. Like M- in Emacs.
enum GtkDirectionType	# Focus movement types.
	GTK_DIR_TAB_FORWARD	# Move forward.
	GTK_DIR_TAB_BACKWARD	# Move backward.
	GTK_DIR_UP	# Move up.
	GTK_DIR_DOWN	# Move down.
	GTK_DIR_LEFT	# Move left.
	GTK_DIR_RIGHT	# Move right.
enum GtkJustification	# Used for justifying the text inside a <span class="type">GtkLabel</span></a> widget. (See also<span class="type">GtkAlignment</span>).
	GTK_JUSTIFY_LEFT	# The text is placed at the left edge of the label.
	GTK_JUSTIFY_RIGHT	# The text is placed at the right edge of the label.
	GTK_JUSTIFY_CENTER	# The text is placed in the center of the label.
	GTK_JUSTIFY_FILL	# The text is placed is distributed across the label.
enum GtkMovementStep	# </a>GTK_MOVEMENT_LOGICAL_POSITIONS
	# Move forward or back by graphemes
	GTK_MOVEMENT_VISUAL_POSITIONS	# Move left or right by graphemes
	GTK_MOVEMENT_WORDS	# Move forward or back by words
	GTK_MOVEMENT_DISPLAY_LINES	# Move up or down lines (wrapped lines)
	GTK_MOVEMENT_DISPLAY_LINE_ENDS	# Move to either end of a line
	GTK_MOVEMENT_PARAGRAPHS	# Move up or down paragraphs (newline-ended lines)
	GTK_MOVEMENT_PARAGRAPH_ENDS	# Move to either end of a paragraph
	GTK_MOVEMENT_PAGES	# Move by pages
	GTK_MOVEMENT_BUFFER_ENDS	# Move to ends of the buffer
	GTK_MOVEMENT_HORIZONTAL_PAGES	# Move horizontally by pages
enum GtkOrientation	# Represents the orientation of widgets and other objects which can be switchedbetween horizontal and vertical orientation on the fly, like <span class="type">GtkToolbar</span></a> or<span class="type">GtkGesturePan</span></a>.
	GTK_ORIENTATION_HORIZONTAL	# The element is in horizontal orientation.
	GTK_ORIENTATION_VERTICAL	# The element is in vertical orientation.
enum GtkPackType	# Represents the packing location <span class="type">GtkBox</span></a> children. (See: <span class="type">GtkVBox</span>,<span class="type">GtkHBox</span>, and <span class="type">GtkButtonBox</span></a>).
	GTK_PACK_START	# The child is packed into the start of the box
	GTK_PACK_END	# The child is packed into the end of the box
enum GtkPositionType	# Describes which edge of a widget a certain feature is positioned at, e.g. thetabs of a <span class="type">GtkNotebook</span></a>, the handle of a <span class="type">GtkHandleBox</span> or the label of a<span class="type">GtkScale</span></a>.
	GTK_POS_LEFT	# The feature is at the left edge.
	GTK_POS_RIGHT	# The feature is at the right edge.
	GTK_POS_TOP	# The feature is at the top edge.
	GTK_POS_BOTTOM	# The feature is at the bottom edge.
enum GtkReliefStyle	# Indicated the relief to be drawn around a <span class="type">GtkButton</span></a>.
	GTK_RELIEF_NORMAL	# Draw a normal relief.
	GTK_RELIEF_NONE	# No relief.
enum GtkScrollStep	# </a>GTK_SCROLL_STEPS
	# Scroll in steps.
	GTK_SCROLL_PAGES	# Scroll by pages.
	GTK_SCROLL_ENDS	# Scroll to ends.
	GTK_SCROLL_HORIZONTAL_STEPS	# Scroll in horizontal steps.
	GTK_SCROLL_HORIZONTAL_PAGES	# Scroll by horizontal pages.
	GTK_SCROLL_HORIZONTAL_ENDS	# Scroll to the horizontal ends.
enum GtkScrollType	# Scrolling types.
	GTK_SCROLL_NONE	# No scrolling.
	GTK_SCROLL_JUMP	# Jump to new location.
	GTK_SCROLL_STEP_BACKWARD	# Step backward.
	GTK_SCROLL_STEP_FORWARD	# Step forward.
	GTK_SCROLL_PAGE_BACKWARD	# Page backward.
	GTK_SCROLL_PAGE_FORWARD	# Page forward.
	GTK_SCROLL_STEP_UP	# Step up.
	GTK_SCROLL_STEP_DOWN	# Step down.
	GTK_SCROLL_PAGE_UP	# Page up.
	GTK_SCROLL_PAGE_DOWN	# Page down.
	GTK_SCROLL_STEP_LEFT	# Step to the left.
	GTK_SCROLL_STEP_RIGHT	# Step to the right.
	GTK_SCROLL_PAGE_LEFT	# Page to the left.
	GTK_SCROLL_PAGE_RIGHT	# Page to the right.
	GTK_SCROLL_START	# Scroll to start.
	GTK_SCROLL_END	# Scroll to end.
enum GtkSelectionMode	# Used to control what selections users are allowed to make.
	GTK_SELECTION_NONE	# No selection is possible.
	GTK_SELECTION_SINGLE	# Zero or one element may be selected.
	GTK_SELECTION_BROWSE	# GTK_SELECTION_BROWSE. What is really enforced is that the user    can’t deselect a currently selected element except by selecting    another element.
	GTK_SELECTION_MULTIPLE	# Any number of elements may be selected.     The Ctrl key may be used to enlarge the selection, and Shift     key to select between the focus and the child pointed to.     Some widgets may also allow Click-drag to select a range of elements.
enum GtkShadowType	# Used to change the appearance of an outline typically provided by a <span class="type">GtkFrame</span></a>.
	GTK_SHADOW_NONE	# No outline.
	GTK_SHADOW_IN	# The outline is bevelled inwards.
	GTK_SHADOW_OUT	# The outline is bevelled outwards like a button.
	GTK_SHADOW_ETCHED_IN	# The outline has a sunken 3d appearance.
	GTK_SHADOW_ETCHED_OUT	# The outline has a raised 3d appearance.
enum GtkStateFlags	# Describes a widget state. Widget states are used to match the widgetagainst CSS pseudo-classes. Note that GTK extends the regular CSSclasses and sometimes uses different names.
	GTK_STATE_FLAG_NORMAL	# State during normal operation.
	GTK_STATE_FLAG_ACTIVE	# Widget is active.
	GTK_STATE_FLAG_PRELIGHT	# Widget has a mouse pointer over it.
	GTK_STATE_FLAG_SELECTED	# Widget is selected.
	GTK_STATE_FLAG_INSENSITIVE	# Widget is insensitive.
	GTK_STATE_FLAG_INCONSISTENT	# Widget is inconsistent.
	GTK_STATE_FLAG_FOCUSED	# Widget has the keyboard focus.
	GTK_STATE_FLAG_BACKDROP	# Widget is in a background toplevel window.
	GTK_STATE_FLAG_DIR_LTR	# Widget is in left-to-right text direction. Since 3.8
	GTK_STATE_FLAG_DIR_RTL	# Widget is in right-to-left text direction. Since 3.8
	GTK_STATE_FLAG_LINK	# Widget is a link. Since 3.12
	GTK_STATE_FLAG_VISITED	# The location the widget points to has already been visited. Since 3.12
	GTK_STATE_FLAG_CHECKED	# Widget is checked. Since 3.14
	GTK_STATE_FLAG_DROP_ACTIVE	# Widget is highlighted as a drop target for DND. Since 3.20
enum GtkToolbarStyle	# Used to customize the appearance of a <span class="type">GtkToolbar</span></a>. Note thatsetting the toolbar style overrides the user’s preferencesfor the default toolbar style.  Note that if the button has onlya label set and GTK_TOOLBAR_ICONS is used, the label will bevisible, and vice versa.
	GTK_TOOLBAR_ICONS	# Buttons display only icons in the toolbar.
	GTK_TOOLBAR_TEXT	# Buttons display only text labels in the toolbar.
	GTK_TOOLBAR_BOTH	# Buttons display text and icons in the toolbar.
	GTK_TOOLBAR_BOTH_HORIZ	# Buttons display icons and text alongside each other, rather than vertically stacked
enum GtkSortType	# Determines the direction of a sort.
	GTK_SORT_ASCENDING	# Sorting is in ascending order.
	GTK_SORT_DESCENDING	# Sorting is in descending order.
enum GtkBorderStyle	# Describes how the border of a UI element should be rendered.
	GTK_BORDER_STYLE_NONE	# No visible border
	GTK_BORDER_STYLE_SOLID	# A single line segment
	GTK_BORDER_STYLE_INSET	# Looks as if the content is sunken into the canvas
	GTK_BORDER_STYLE_OUTSET	# Looks as if the content is coming out of the canvas
	GTK_BORDER_STYLE_HIDDEN	# Same as <em class="parameter"><code>GTK_BORDER_STYLE_NONE</em>
	GTK_BORDER_STYLE_DOTTED	# A series of round dots
	GTK_BORDER_STYLE_DASHED	# A series of square-ended dashes
	GTK_BORDER_STYLE_DOUBLE	# Two parallel lines with some space between them
	GTK_BORDER_STYLE_GROOVE	# Looks as if it were carved in the canvas
	GTK_BORDER_STYLE_RIDGE	# Looks as if it were coming out of the canvas
enum GtkStyleContextPrintFlags	# Flags that modify the behavior of gtk_style_context_to_string()</a>.New values may be added to this enumeration.
	GTK_STYLE_CONTEXT_PRINT_NONE<td> <td> </tr><tr>	GTK_STYLE_CONTEXT_PRINT_RECURSE	# Print the entire tree of    CSS nodes starting at the style context's node
	GTK_STYLE_CONTEXT_PRINT_SHOW_STYLE	# Show the values of the    CSS properties for each node
enum GtkCssProviderError	# Error codes for <code class="literal">GTK_CSS_PROVIDER_ERROR</a>.
	GTK_CSS_PROVIDER_ERROR_FAILED	# Failed.
	GTK_CSS_PROVIDER_ERROR_SYNTAX	# Syntax error.
	GTK_CSS_PROVIDER_ERROR_IMPORT	# Import error.
	GTK_CSS_PROVIDER_ERROR_NAME	# Name error.
	GTK_CSS_PROVIDER_ERROR_DEPRECATED	# Deprecation error.
	GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE	# Unknown value.
enum GtkCssSectionType	# The different types of sections indicate parts of a CSS document asparsed by GTK’s CSS parser. They are oriented towards theCSS Grammar</a>,but may contain extensions.
	GTK_CSS_SECTION_DOCUMENT	# NULL.
	GTK_CSS_SECTION_IMPORT	# The section defines an import rule.
	GTK_CSS_SECTION_COLOR_DEFINITION	# The section defines a color. This  is a GTK extension to CSS.
	GTK_CSS_SECTION_BINDING_SET	# The section defines a binding set. This  is a GTK extension to CSS.
	GTK_CSS_SECTION_RULESET	# The section defines a CSS ruleset.
	GTK_CSS_SECTION_SELECTOR	# The section defines a CSS selector.
	GTK_CSS_SECTION_DECLARATION	# The section defines the declaration of  a CSS variable.
	GTK_CSS_SECTION_VALUE	# The section defines the value of a CSS declaration.
	GTK_CSS_SECTION_KEYFRAMES	# The section defines keyframes. See CSS  Animations for details. Since 3.6
enum GtkIconLookupFlags	# Used to specify options for gtk_icon_theme_lookup_icon()</a>
	GTK_ICON_LOOKUP_NO_SVG	# GTK_ICON_LOOKUP_FORCE_SVG.
	GTK_ICON_LOOKUP_FORCE_SVG	# GTK_ICON_LOOKUP_NO_SVG.
	GTK_ICON_LOOKUP_USE_BUILTIN	# NULL and you need to call gtk_icon_info_get_builtin_pixbuf().
	GTK_ICON_LOOKUP_GENERIC_FALLBACK	# Try to shorten icon name at '-'  characters before looking at inherited themes. This flag is only  supported in functions that take a single icon name. For more general  fallback, see gtk_icon_theme_choose_icon(). Since 2.12.
	GTK_ICON_LOOKUP_FORCE_SIZE	# Always get the icon scaled to the  requested size. Since 2.14.
	GTK_ICON_LOOKUP_FORCE_REGULAR	# Try to always load regular icons, even  when symbolic icon names are given. Since 3.14.
	GTK_ICON_LOOKUP_FORCE_SYMBOLIC	# Try to always load symbolic icons, even  when regular icon names are given. Since 3.14.
	GTK_ICON_LOOKUP_DIR_LTR	# Try to load a variant of the icon for left-to-right  text direction. Since 3.14.
	GTK_ICON_LOOKUP_DIR_RTL	# Try to load a variant of the icon for right-to-left  text direction. Since 3.14.
enum GtkIconThemeError	# Error codes for GtkIconTheme operations.
	GTK_ICON_THEME_NOT_FOUND	# The icon specified does not exist in the theme
	GTK_ICON_THEME_FAILED	# An unspecified error occurred.

#.# gsk
struct GskShadow {
	GdkRGBA color;
	float dx;
	float dy;
	float radius;
};

union 
	
	
enum GskRenderNodeType	# The type of a node determines what the node is rendering.
	GSK_NOT_A_RENDER_NODE	# Error type. No node will ever have this type.
	GSK_CONTAINER_NODE	# A node containing a stack of children
	GSK_CAIRO_NODE	# A node drawing a cairo_surface_t
	GSK_COLOR_NODE	# A node drawing a single color rectangle
	GSK_LINEAR_GRADIENT_NODE	# A node drawing a linear gradient
	GSK_REPEATING_LINEAR_GRADIENT_NODE	# A node drawing a repeating    linear gradient
	GSK_BORDER_NODE	# A node stroking a border around an area
	GSK_TEXTURE_NODE	# A node drawing a GskTexture
	GSK_INSET_SHADOW_NODE	# A node drawing an inset shadow
	GSK_OUTSET_SHADOW_NODE	# A node drawing an outset shadow
	GSK_TRANSFORM_NODE	# A node that renders its child after applying a    matrix transform
	GSK_OPACITY_NODE	# A node that changes the opacity of its child
	GSK_COLOR_MATRIX_NODE	# A node that applies a color matrix to every pixel
	GSK_REPEAT_NODE	# A node that repeats the child's contents
	GSK_CLIP_NODE	# A node that clips its child to a rectangular area
	GSK_ROUNDED_CLIP_NODE	# A node that clips its child to a rounded rectangle
	GSK_SHADOW_NODE	# A node that draws a shadow below its child
	GSK_BLEND_NODE	# A node the blends two children together
	GSK_CROSS_FADE_NODE	# A node the cross-fades between two children
enum GskSerializationError	# Errors that can happen during (de)serialization.
	GSK_SERIALIZATION_UNSUPPORTED_FORMAT	# The format can not be    identified
	GSK_SERIALIZATION_UNSUPPORTED_VERSION	# The version of the data    is not understood
	GSK_SERIALIZATION_INVALID_DATA	# The given data may not exist in    a proper serialization
enum GskScalingFilter	# The filters used when scaling texture data.
	GSK_SCALING_FILTER_LINEAR	# linear interpolation filter
	GSK_SCALING_FILTER_NEAREST	# nearest neighbor interpolation filter
	GSK_SCALING_FILTER_TRILINEAR	# linear interpolation along each axis,  plus mipmap generation, with linear interpolation along the mipmap  levels
enum GskBlendMode	# The blend modes available for render nodes.
	GSK_BLEND_MODE_DEFAULT	# The default blend mode, which specifies no blending
	GSK_BLEND_MODE_MULTIPLY	# The source color is multiplied by the destination  and replaces the destination
	GSK_BLEND_MODE_SCREEN	# ...
	GSK_BLEND_MODE_OVERLAY	# ...
	GSK_BLEND_MODE_DARKEN	# ...
	GSK_BLEND_MODE_LIGHTEN	# ...
	GSK_BLEND_MODE_COLOR_DODGE	# ...
	GSK_BLEND_MODE_COLOR_BURN	# ...
	GSK_BLEND_MODE_HARD_LIGHT	# ...
	GSK_BLEND_MODE_SOFT_LIGHT	# ...
	GSK_BLEND_MODE_DIFFERENCE	# ...
	GSK_BLEND_MODE_EXCLUSION	# ...
	GSK_BLEND_MODE_COLOR	# ...
	GSK_BLEND_MODE_HUE	# ...
	GSK_BLEND_MODE_SATURATION	# ...
	GSK_BLEND_MODE_LUMINOSITY	# ...

#.# gio
typedef struct _GFile GFile;
struct GFileIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	GFile * (* dup) (GFile *file);
	guint (* hash) (GFile *file);
	gboolean (* equal) (GFile *file1, GFile *file2);
	gboolean (* is_native) (GFile *file);
	gboolean (* has_uri_scheme) (GFile *file, const char *uri_scheme);
	char * (* get_uri_scheme) (GFile *file);
	char * (* get_basename) (GFile *file);
	char * (* get_path) (GFile *file);
	char * (* get_uri) (GFile *file);
	char * (* get_parse_name) (GFile *file);
	GFile * (* get_parent) (GFile *file);
	gboolean (* prefix_matches) (GFile *prefix, GFile *file);
	char * (* get_relative_path) (GFile *parent, GFile *descendant);
	GFile * (* resolve_relative_path) (GFile *file, const char *relative_path);
	GFile * (* get_child_for_display_name) (GFile *file, const char *display_name, GError **error);
	GFileEnumerator * (* enumerate_children) (GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
	void (* enumerate_children_async) (GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileEnumerator * (* enumerate_children_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileInfo * (* query_info) (GFile *file, const char *attributes, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
	void (* query_info_async) (GFile *file, const char *attributes, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileInfo * (* query_info_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileInfo * (* query_filesystem_info) (GFile *file, const char *attributes, GCancellable *cancellable, GError **error);
	void (* query_filesystem_info_async) (GFile *file, const char *attributes, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileInfo * (* query_filesystem_info_finish)(GFile *file, GAsyncResult *res, GError **error);
	GMount * (* find_enclosing_mount) (GFile *file, GCancellable *cancellable, GError **error);
	void (* find_enclosing_mount_async) (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GMount * (* find_enclosing_mount_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFile * (* set_display_name) (GFile *file, const char *display_name, GCancellable *cancellable, GError **error);
	void (* set_display_name_async) (GFile *file, const char *display_name, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFile * (* set_display_name_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileAttributeInfoList * (* query_settable_attributes) (GFile *file, GCancellable *cancellable, GError **error);
	void (* _query_settable_attributes_async) (void);
	void (* _query_settable_attributes_finish) (void);
	GFileAttributeInfoList * (* query_writable_namespaces) (GFile *file, GCancellable *cancellable, GError **error);
	void (* _query_writable_namespaces_async) (void);
	void (* _query_writable_namespaces_finish) (void);
	gboolean (* set_attribute) (GFile *file, const char *attribute, GFileAttributeType type, gpointer value_p, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
	gboolean (* set_attributes_from_info) (GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, GCancellable *cancellable, GError **error);
	void (* set_attributes_async) (GFile *file, GFileInfo *info, GFileQueryInfoFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* set_attributes_finish) (GFile *file, GAsyncResult *result, GFileInfo **info, GError **error);
	GFileInputStream * (* read_fn) (GFile *file, GCancellable *cancellable, GError **error);
	void (* read_async) (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileInputStream * (* read_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileOutputStream * (* append_to) (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
	void (* append_to_async) (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileOutputStream * (* append_to_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileOutputStream * (* create) (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
	void (* create_async) (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileOutputStream * (* create_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileOutputStream * (* replace) (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
	void (* replace_async) (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileOutputStream * (* replace_finish) (GFile *file, GAsyncResult *res, GError **error);
	gboolean (* delete_file) (GFile *file, GCancellable *cancellable, GError **error);
	void (* delete_file_async) (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* delete_file_finish) (GFile *file, GAsyncResult *result, GError **error);
	gboolean (* trash) (GFile *file, GCancellable *cancellable, GError **error);
	void (* trash_async) (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* trash_finish) (GFile *file, GAsyncResult *result, GError **error);
	gboolean (* make_directory) (GFile *file, GCancellable *cancellable, GError **error);
	void (* make_directory_async) (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* make_directory_finish) (GFile *file, GAsyncResult *result, GError **error);
	gboolean (* make_symbolic_link) (GFile *file, const char *symlink_value, GCancellable *cancellable, GError **error);
	void (* _make_symbolic_link_async) (void);
	void (* _make_symbolic_link_finish) (void);
	gboolean (* copy) (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);
	void (* copy_async) (GFile *source, GFile *destination, GFileCopyFlags flags, int io_priority, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* copy_finish) (GFile *file, GAsyncResult *res, GError **error);
	gboolean (* move) (GFile *source, GFile *destination, GFileCopyFlags flags, GCancellable *cancellable, GFileProgressCallback progress_callback, gpointer progress_callback_data, GError **error);
	void (* _move_async) (void);
	void (* _move_finish) (void);
	void (* mount_mountable) (GFile *file, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFile * (* mount_mountable_finish) (GFile *file, GAsyncResult *result, GError **error);
	void (* unmount_mountable) (GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* unmount_mountable_finish) (GFile *file, GAsyncResult *result, GError **error);
	void (* eject_mountable) (GFile *file, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_mountable_finish) (GFile *file, GAsyncResult *result, GError **error);
	void (* mount_enclosing_volume) (GFile *location, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* mount_enclosing_volume_finish) (GFile *location, GAsyncResult *result, GError **error);
	GFileMonitor * (* monitor_dir) (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);
	GFileMonitor * (* monitor_file) (GFile *file, GFileMonitorFlags flags, GCancellable *cancellable, GError **error);
	GFileIOStream * (* open_readwrite) (GFile *file, GCancellable *cancellable, GError **error);
	void (* open_readwrite_async) (GFile *file, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileIOStream * (* open_readwrite_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileIOStream * (* create_readwrite) (GFile *file, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
	void (* create_readwrite_async) (GFile *file, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileIOStream * (* create_readwrite_finish) (GFile *file, GAsyncResult *res, GError **error);
	GFileIOStream * (* replace_readwrite) (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, GCancellable *cancellable, GError **error);
	void (* replace_readwrite_async) (GFile *file, const char *etag, gboolean make_backup, GFileCreateFlags flags, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GFileIOStream * (* replace_readwrite_finish) (GFile *file, GAsyncResult *res, GError **error);
	void (* start_mountable) (GFile *file, GDriveStartFlags flags, GMountOperation *start_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* start_mountable_finish) (GFile *file, GAsyncResult *result, GError **error);
	void (* stop_mountable) (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* stop_mountable_finish) (GFile *file, GAsyncResult *result, GError **error);
	gboolean supports_thread_contexts;
	void (* unmount_mountable_with_operation) (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* unmount_mountable_with_operation_finish) (GFile *file, GAsyncResult *result, GError **error);
	void (* eject_mountable_with_operation) (GFile *file, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_mountable_with_operation_finish) (GFile *file, GAsyncResult *result, GError **error);
	void (* poll_mountable) (GFile *file, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* poll_mountable_finish) (GFile *file, GAsyncResult *result, GError **error);
	gboolean (* measure_disk_usage) (GFile *file, GFileMeasureFlags flags, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);
	void (* measure_disk_usage_async) (GFile *file, GFileMeasureFlags flags, gint io_priority, GCancellable *cancellable, GFileMeasureProgressCallback progress_callback, gpointer progress_data, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* measure_disk_usage_finish) (GFile *file, GAsyncResult *result, guint64 *disk_usage, guint64 *num_dirs, guint64 *num_files, GError **error);
};

typedef struct {
	char *name;
	GFileAttributeType type;
	GFileAttributeInfoFlags flags;
} GFileAttributeInfo;

typedef struct {
	GFileAttributeInfo *infos;
	int n_infos;
} GFileAttributeInfoList;

typedef struct _GFileAttributeMatcher GFileAttributeMatcher;
typedef struct _GFileInfo GFileInfo;
typedef struct _GFileEnumerator GFileEnumerator;
typedef struct _GMountOperation GMountOperation;
typedef struct _GFileMonitor GFileMonitor;
typedef struct _GFilenameCompleter GFilenameCompleter;
typedef struct _GCancellable GCancellable;
typedef struct _GAsyncResult GAsyncResult;
struct GAsyncResultIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	gpointer (* get_user_data) (GAsyncResult *res);
	GObject * (* get_source_object) (GAsyncResult *res);
	gboolean (* is_tagged) (GAsyncResult *res, gpointer source_tag);
};

typedef struct _GTask GTask;
typedef struct _GIOSchedulerJob GIOSchedulerJob;
typedef struct _GSimpleAsyncResult GSimpleAsyncResult;
typedef struct _GConverter GConverter;
struct GConverterIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	GConverterResult (* convert) (GConverter *converter, const void *inbuf, gsize inbuf_size, void *outbuf, gsize outbuf_size, GConverterFlags flags, gsize *bytes_read, gsize *bytes_written, GError **error);
	void (* reset) (GConverter *converter);
};

typedef struct _GCharsetConverter GCharsetConverter;
typedef struct _GZlibCompressor GZlibCompressor;
typedef struct _GZlibDecompressor GZlibDecompressor;
typedef struct _GSeekable GSeekable;
struct GSeekableIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	goffset (* tell) (GSeekable *seekable);
	gboolean (* can_seek) (GSeekable *seekable);
	gboolean (* seek) (GSeekable *seekable, goffset offset, GSeekType type, GCancellable *cancellable, GError **error);
	gboolean (* can_truncate) (GSeekable *seekable);
	gboolean (* truncate_fn) (GSeekable *seekable, goffset offset, GCancellable *cancellable, GError **error);
	/* TODO: Async seek/truncate */
};

typedef struct _GInputStream GInputStream;
typedef struct _GOutputStream GOutputStream;
typedef struct _GIOStream GIOStream;
typedef struct _GSimpleIOStream GSimpleIOStream;
typedef struct _GFileInputStream GFileInputStream;
typedef struct _GFileOutputStream GFileOutputStream;
typedef struct _GFileIOStream GFileIOStream;
typedef struct _GFileDescriptorBased GFileDescriptorBased;
struct GFileDescriptorBasedIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	int (*get_fd) (GFileDescriptorBased *fd_based);
};

typedef struct _GFilterInputStream GFilterInputStream;
typedef struct _GFilterOutputStream GFilterOutputStream;
typedef struct _GMemoryInputStream GMemoryInputStream;
typedef struct _GMemoryOutputStream GMemoryOutputStream;
typedef struct _GBufferedInputStream GBufferedInputStream;
typedef struct _GBufferedOutputStream GBufferedOutputStream;
typedef struct _GDataInputStream GDataInputStream;
struct GDataOutputStream;
struct GUnixInputStream;
struct GUnixOutputStream;
struct GWin32InputStream {
	GInputStream parent_instance;
};

struct GWin32OutputStream {
	GOutputStream parent_instance;
};

typedef struct _GConverterInputStream GConverterInputStream;
typedef struct _GConverterOutputStream GConverterOutputStream;
typedef struct _GPollableInputStream GPollableInputStream;
struct GPollableInputStreamInterface {
	GTypeInterface g_iface;
	/* Virtual Table */
	gboolean (*can_poll) (GPollableInputStream *stream);
	gboolean (*is_readable) (GPollableInputStream *stream);
	GSource * (*create_source) (GPollableInputStream *stream, GCancellable *cancellable);
	gssize (*read_nonblocking) (GPollableInputStream *stream, void *buffer, gsize count, GError **error);
};

typedef struct _GPollableOutputStream GPollableOutputStream;
struct GPollableOutputStreamInterface {
	GTypeInterface g_iface;
	/* Virtual Table */
	gboolean (*can_poll) (GPollableOutputStream *stream);
	gboolean (*is_writable) (GPollableOutputStream *stream);
	GSource * (*create_source) (GPollableOutputStream *stream, GCancellable *cancellable);
	gssize (*write_nonblocking) (GPollableOutputStream *stream, const void *buffer, gsize count, GError **error);
};

typedef struct _GAppInfo GAppInfo;
struct GAppInfoIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	GAppInfo * (* dup) (GAppInfo *appinfo);
	gboolean (* equal) (GAppInfo *appinfo1, GAppInfo *appinfo2);
	const char * (* get_id) (GAppInfo *appinfo);
	const char * (* get_name) (GAppInfo *appinfo);
	const char * (* get_description) (GAppInfo *appinfo);
	const char * (* get_executable) (GAppInfo *appinfo);
	GIcon * (* get_icon) (GAppInfo *appinfo);
	gboolean (* launch) (GAppInfo *appinfo, GList *files, GAppLaunchContext *launch_context, GError **error);
	gboolean (* supports_uris) (GAppInfo *appinfo);
	gboolean (* supports_files) (GAppInfo *appinfo);
	gboolean (* launch_uris) (GAppInfo *appinfo, GList *uris, GAppLaunchContext *launch_context, GError **error);
	gboolean (* should_show) (GAppInfo *appinfo);
	/* For changing associations */
	gboolean (* set_as_default_for_type) (GAppInfo *appinfo, const char *content_type, GError **error);
	gboolean (* set_as_default_for_extension) (GAppInfo *appinfo, const char *extension, GError **error);
	gboolean (* add_supports_type) (GAppInfo *appinfo, const char *content_type, GError **error);
	gboolean (* can_remove_supports_type) (GAppInfo *appinfo);
	gboolean (* remove_supports_type) (GAppInfo *appinfo, const char *content_type, GError **error);
	gboolean (* can_delete) (GAppInfo *appinfo);
	gboolean (* do_delete) (GAppInfo *appinfo);
	const char * (* get_commandline) (GAppInfo *appinfo);
	const char * (* get_display_name) (GAppInfo *appinfo);
	gboolean (* set_as_last_used_for_type) (GAppInfo *appinfo, const char *content_type, GError **error);
	const char ** (* get_supported_types) (GAppInfo *appinfo);
};

typedef struct _GAppLaunchContext GAppLaunchContext;
typedef struct _GDesktopAppInfo GDesktopAppInfo;
typedef struct _GDesktopAppInfoLookup GDesktopAppInfoLookup;
struct GDesktopAppInfoLookupIface {
	GTypeInterface g_iface;
	GAppInfo * (* get_default_for_uri_scheme) (GDesktopAppInfoLookup *lookup, const char *uri_scheme);
};

typedef struct _GVolumeMonitor GVolumeMonitor;
typedef struct _GVolume GVolume;
struct GVolumeIface {
	GTypeInterface g_iface;
	/* signals */
	void (* changed) (GVolume *volume);
	void (* removed) (GVolume *volume);
	/* Virtual Table */
	char * (* get_name) (GVolume *volume);
	GIcon * (* get_icon) (GVolume *volume);
	char * (* get_uuid) (GVolume *volume);
	GDrive * (* get_drive) (GVolume *volume);
	GMount * (* get_mount) (GVolume *volume);
	gboolean (* can_mount) (GVolume *volume);
	gboolean (* can_eject) (GVolume *volume);
	void (* mount_fn) (GVolume *volume, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* mount_finish) (GVolume *volume, GAsyncResult *result, GError **error);
	void (* eject) (GVolume *volume, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_finish) (GVolume *volume, GAsyncResult *result, GError **error);
	char * (* get_identifier) (GVolume *volume, const char *kind);
	char ** (* enumerate_identifiers) (GVolume *volume);
	gboolean (* should_automount) (GVolume *volume);
	GFile * (* get_activation_root) (GVolume *volume);
	void (* eject_with_operation) (GVolume *volume, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_with_operation_finish) (GVolume *volume, GAsyncResult *result, GError **error);
	const gchar * (* get_sort_key) (GVolume *volume);
	GIcon * (* get_symbolic_icon) (GVolume *volume);
};

typedef struct _GMount GMount;
struct GMountIface {
	GTypeInterface g_iface;
	/* signals */
	void (* changed) (GMount *mount);
	void (* unmounted) (GMount *mount);
	/* Virtual Table */
	GFile * (* get_root) (GMount *mount);
	char * (* get_name) (GMount *mount);
	GIcon * (* get_icon) (GMount *mount);
	char * (* get_uuid) (GMount *mount);
	GVolume * (* get_volume) (GMount *mount);
	GDrive * (* get_drive) (GMount *mount);
	gboolean (* can_unmount) (GMount *mount);
	gboolean (* can_eject) (GMount *mount);
	void (* unmount) (GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* unmount_finish) (GMount *mount, GAsyncResult *result, GError **error);
	void (* eject) (GMount *mount, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_finish) (GMount *mount, GAsyncResult *result, GError **error);
	void (* remount) (GMount *mount, GMountMountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* remount_finish) (GMount *mount, GAsyncResult *result, GError **error);
	void (* guess_content_type) (GMount *mount, gboolean force_rescan, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gchar ** (* guess_content_type_finish) (GMount *mount, GAsyncResult *result, GError **error);
	gchar ** (* guess_content_type_sync) (GMount *mount, gboolean force_rescan, GCancellable *cancellable, GError **error);
	/* Signal, not VFunc */
	void (* pre_unmount) (GMount *mount);
	void (* unmount_with_operation) (GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* unmount_with_operation_finish) (GMount *mount, GAsyncResult *result, GError **error);
	void (* eject_with_operation) (GMount *mount, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_with_operation_finish) (GMount *mount, GAsyncResult *result, GError **error);
	GFile * (* get_default_location) (GMount *mount);
	const gchar * (* get_sort_key) (GMount *mount);
	GIcon * (* get_symbolic_icon) (GMount *mount);
};

typedef struct _GDrive GDrive;
struct GDriveIface {
	GTypeInterface g_iface;
	/* signals */
	void (* changed) (GDrive *drive);
	void (* disconnected) (GDrive *drive);
	void (* eject_button) (GDrive *drive);
	/* Virtual Table */
	char * (* get_name) (GDrive *drive);
	GIcon * (* get_icon) (GDrive *drive);
	gboolean (* has_volumes) (GDrive *drive);
	GList * (* get_volumes) (GDrive *drive);
	gboolean (* is_media_removable) (GDrive *drive);
	gboolean (* has_media) (GDrive *drive);
	gboolean (* is_media_check_automatic) (GDrive *drive);
	gboolean (* can_eject) (GDrive *drive);
	gboolean (* can_poll_for_media) (GDrive *drive);
	void (* eject) (GDrive *drive, GMountUnmountFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_finish) (GDrive *drive, GAsyncResult *result, GError **error);
	void (* poll_for_media) (GDrive *drive, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* poll_for_media_finish) (GDrive *drive, GAsyncResult *result, GError **error);
	char * (* get_identifier) (GDrive *drive, const char *kind);
	char ** (* enumerate_identifiers) (GDrive *drive);
	GDriveStartStopType (* get_start_stop_type) (GDrive *drive);
	gboolean (* can_start) (GDrive *drive);
	gboolean (* can_start_degraded) (GDrive *drive);
	void (* start) (GDrive *drive, GDriveStartFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* start_finish) (GDrive *drive, GAsyncResult *result, GError **error);
	gboolean (* can_stop) (GDrive *drive);
	void (* stop) (GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* stop_finish) (GDrive *drive, GAsyncResult *result, GError **error);
	/* signal, not VFunc */
	void (* stop_button) (GDrive *drive);
	void (* eject_with_operation) (GDrive *drive, GMountUnmountFlags flags, GMountOperation *mount_operation, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* eject_with_operation_finish) (GDrive *drive, GAsyncResult *result, GError **error);
	const gchar * (* get_sort_key) (GDrive *drive);
	GIcon * (* get_symbolic_icon) (GDrive *drive);
	gboolean (* is_removable) (GDrive *drive);
};

typedef struct _GUnixMountPoint GUnixMountPoint;
typedef struct _GUnixMountEntry GUnixMountEntry;
typedef struct _GUnixMountMonitor GUnixMountMonitor;
typedef struct _GIcon GIcon;
struct GIconIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	guint (* hash) (GIcon *icon);
	gboolean (* equal) (GIcon *icon1, GIcon *icon2);
	gboolean (* to_tokens) (GIcon *icon, GPtrArray *tokens, gint *out_version);
	GIcon * (* from_tokens) (gchar **tokens, gint num_tokens, gint version, GError **error);
	GVariant * (* serialize) (GIcon *icon);
};

typedef struct _GFileIcon GFileIcon;
typedef struct _GBytesIcon GBytesIcon;
typedef struct _GLoadableIcon GLoadableIcon;
struct GLoadableIconIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	GInputStream * (* load) (GLoadableIcon *icon, int size, char **type, GCancellable *cancellable, GError **error);
	void (* load_async) (GLoadableIcon *icon, int size, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GInputStream * (* load_finish) (GLoadableIcon *icon, GAsyncResult *res, char **type, GError **error);
};

typedef struct _GThemedIcon GThemedIcon;
struct GEmblemedIcon;
typedef struct _GEmblem GEmblem;
typedef struct _GInitable GInitable;
struct GInitableIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	gboolean (* init) (GInitable *initable, GCancellable *cancellable, GError **error);
};

typedef struct _GAsyncInitable GAsyncInitable;
struct GAsyncInitableIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	void (* init_async) (GAsyncInitable *initable, int io_priority, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (* init_finish) (GAsyncInitable *initable, GAsyncResult *res, GError **error);
};

typedef struct _GSubprocess GSubprocess;
typedef struct _GSubprocessLauncher GSubprocessLauncher;
typedef struct _GSocket GSocket;
struct GInputVector {
	gpointer buffer;
	gsize size;
};

struct GInputMessage {
	GSocketAddress **address;
	GInputVector *vectors;
	guint num_vectors;
	gsize bytes_received;
	gint flags;
	GSocketControlMessage ***control_messages;
	guint *num_control_messages;
};

struct GOutputVector {
	gconstpointer buffer;
	gsize size;
};

struct GOutputMessage {
	GSocketAddress *address;
	GOutputVector *vectors;
	guint num_vectors;
	guint bytes_sent;
	GSocketControlMessage **control_messages;
	guint num_control_messages;
};

typedef struct _GDatagramBased GDatagramBased;
struct GDatagramBasedInterface {
	GTypeInterface g_iface;
	/* Virtual table */
	gint (*receive_messages) (GDatagramBased *datagram_based, GInputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);
	gint (*send_messages) (GDatagramBased *datagram_based, GOutputMessage *messages, guint num_messages, gint flags, gint64 timeout, GCancellable *cancellable, GError **error);
	GSource *(*create_source) (GDatagramBased *datagram_based, GIOCondition condition, GCancellable *cancellable);
	GIOCondition (*condition_check) (GDatagramBased *datagram_based, GIOCondition condition);
	gboolean (*condition_wait) (GDatagramBased *datagram_based, GIOCondition condition, gint64 timeout, GCancellable *cancellable, GError **error);
};

typedef struct _GInetAddress GInetAddress;
typedef struct _GInetAddressMask GInetAddressMask;
typedef struct _GSocketAddress GSocketAddress;
typedef struct _GInetSocketAddress GInetSocketAddress;
struct GUnixSocketAddress;
typedef struct _GSocketControlMessage GSocketControlMessage;
typedef struct _GUnixFDList GUnixFDList;
struct GUnixFDMessage;
typedef struct _GCredentials GCredentials;
typedef struct _GUnixCredentialsMessage GUnixCredentialsMessage;
struct GUnixCredentialsMessageClass {
	GSocketControlMessageClass parent_class;
};

typedef struct _GProxy GProxy;
struct GProxyInterface {
	GTypeInterface g_iface;
	/* Virtual Table */
	GIOStream * (* connect) (GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GError **error);
	void (* connect_async) (GProxy *proxy, GIOStream *connection, GProxyAddress *proxy_address, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GIOStream * (* connect_finish) (GProxy *proxy, GAsyncResult *result, GError **error);
	gboolean (* supports_hostname) (GProxy *proxy);
};

typedef struct _GProxyAddress GProxyAddress;
struct GProxyAddressClass {
	GInetSocketAddressClass parent_class;
};

typedef struct _GSocketClient GSocketClient;
typedef struct _GSocketConnection GSocketConnection;
struct GUnixConnection;
typedef struct _GTcpConnection GTcpConnection;
typedef struct _GTcpWrapperConnection GTcpWrapperConnection;
typedef struct _GSocketListener GSocketListener;
typedef struct _GSocketService GSocketService;
typedef struct _GThreadedSocketService GThreadedSocketService;
typedef struct _GNetworkMonitor GNetworkMonitor;
struct GNetworkMonitorInterface {
	GTypeInterface g_iface;
	void (*network_changed) (GNetworkMonitor *monitor, gboolean available);
	gboolean (*can_reach) (GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GError **error);
	void (*can_reach_async) (GNetworkMonitor *monitor, GSocketConnectable *connectable, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gboolean (*can_reach_finish) (GNetworkMonitor *monitor, GAsyncResult *result, GError **error);
};

typedef struct _GTlsCertificate GTlsCertificate;
typedef struct _GTlsConnection GTlsConnection;
typedef struct _GTlsClientConnection GTlsClientConnection;
struct GTlsClientConnectionInterface {
	GTypeInterface g_iface;
	void ( *copy_session_state ) (GTlsClientConnection *conn, GTlsClientConnection *source);
};

typedef struct _GTlsServerConnection GTlsServerConnection;
struct GTlsServerConnectionInterface {
	GTypeInterface g_iface;
};

typedef struct _GDtlsConnection GDtlsConnection;
typedef struct _GDtlsClientConnection GDtlsClientConnection;
struct GDtlsClientConnectionInterface {
	GTypeInterface g_iface;
};

typedef struct _GDtlsServerConnection GDtlsServerConnection;
struct GDtlsServerConnectionInterface {
	GTypeInterface g_iface;
};

typedef struct _GTlsBackend GTlsBackend;
struct GTlsBackendInterface {
	GTypeInterface g_iface;
	/* methods */
	gboolean ( *supports_tls) (GTlsBackend *backend);
	GType ( *get_certificate_type) (void);
	GType ( *get_client_connection_type) (void);
	GType ( *get_server_connection_type) (void);
	GType ( *get_file_database_type) (void);
	GTlsDatabase * ( *get_default_database) (GTlsBackend *backend);
	gboolean ( *supports_dtls) (GTlsBackend *backend);
	GType ( *get_dtls_client_connection_type) (void);
	GType ( *get_dtls_server_connection_type) (void);
};

typedef struct _GTlsDatabase GTlsDatabase;
struct GTlsDatabaseClass {
	GObjectClass parent_class;
	/* virtual methods */
	GTlsCertificateFlags (*verify_chain) (GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GError **error);
	void (*verify_chain_async) (GTlsDatabase *self, GTlsCertificate *chain, const gchar *purpose, GSocketConnectable *identity, GTlsInteraction *interaction, GTlsDatabaseVerifyFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GTlsCertificateFlags (*verify_chain_finish) (GTlsDatabase *self, GAsyncResult *result, GError **error);
	gchar* (*create_certificate_handle) (GTlsDatabase *self, GTlsCertificate *certificate);
	GTlsCertificate* (*lookup_certificate_for_handle) (GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);
	void (*lookup_certificate_for_handle_async) (GTlsDatabase *self, const gchar *handle, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GTlsCertificate* (*lookup_certificate_for_handle_finish) (GTlsDatabase *self, GAsyncResult *result, GError **error);
	GTlsCertificate* (*lookup_certificate_issuer) (GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);
	void (*lookup_certificate_issuer_async) (GTlsDatabase *self, GTlsCertificate *certificate, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GTlsCertificate* (*lookup_certificate_issuer_finish) (GTlsDatabase *self, GAsyncResult *result, GError **error);
	GList* (*lookup_certificates_issued_by) (GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GError **error);
	void (*lookup_certificates_issued_by_async) (GTlsDatabase *self, GByteArray *issuer_raw_dn, GTlsInteraction *interaction, GTlsDatabaseLookupFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GList* (*lookup_certificates_issued_by_finish) (GTlsDatabase *self, GAsyncResult *result, GError **error);
};

typedef struct _GTlsFileDatabase GTlsFileDatabase;
struct GTlsFileDatabaseInterface {
	GTypeInterface g_iface;
};

typedef struct _GTlsInteraction GTlsInteraction;
struct GTlsInteractionClass {
	GTlsInteractionResult (* ask_password) (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GError **error);
	void (* ask_password_async) (GTlsInteraction *interaction, GTlsPassword *password, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GTlsInteractionResult (* ask_password_finish) (GTlsInteraction *interaction, GAsyncResult *result, GError **error);
	GTlsInteractionResult (* request_certificate) (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GError **error);
	void (* request_certificate_async) (GTlsInteraction *interaction, GTlsConnection *connection, GTlsCertificateRequestFlags flags, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	GTlsInteractionResult (* request_certificate_finish) (GTlsInteraction *interaction, GAsyncResult *result, GError **error);
};

typedef struct _GTlsPassword GTlsPassword;
struct GTlsPasswordClass {
	GObjectClass parent_class;
	/* methods */
	const guchar * ( *get_value) (GTlsPassword *password, gsize *length);
	void ( *set_value) (GTlsPassword *password, guchar *value, gssize length, GDestroyNotify destroy);
	const gchar* ( *get_default_warning) (GTlsPassword *password);
};

typedef struct _GResolver GResolver;
typedef struct _GProxyResolver GProxyResolver;
struct GProxyResolverInterface {
	GTypeInterface g_iface;
	/* Virtual Table */
	gboolean (* is_supported) (GProxyResolver *resolver);
	gchar ** (* lookup) (GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GError **error);
	void (* lookup_async) (GProxyResolver *resolver, const gchar *uri, GCancellable *cancellable, GAsyncReadyCallback callback, gpointer user_data);
	gchar ** (* lookup_finish) (GProxyResolver *resolver, GAsyncResult *result, GError **error);
};

struct GSimpleProxyResolver;
typedef struct _GSocketConnectable GSocketConnectable;
struct GSocketConnectableIface {
	GTypeInterface g_iface;
	/* Virtual Table */
	GSocketAddressEnumerator * (* enumerate) (GSocketConnectable *connectable);
	GSocketAddressEnumerator * (* proxy_enumerate) (GSocketConnectable *connectable);
	gchar * (* to_string) (GSocketConnectable *connectable);
};

typedef struct _GSocketAddressEnumerator GSocketAddressEnumerator;
typedef struct _GProxyAddressEnumerator GProxyAddressEnumerator;
typedef struct _GNetworkAddress GNetworkAddress;
typedef struct _GNetworkService GNetworkService;
typedef struct _GSrvTarget GSrvTarget;
typedef struct {
	volatile gint ref_count;
	gchar *key;
	gchar *value;
	GDBusAnnotationInfo **annotations;
} GDBusAnnotationInfo;

typedef struct {
	volatile gint ref_count;
	gchar *name;
	gchar *signature;
	GDBusAnnotationInfo **annotations;
} GDBusArgInfo;

typedef struct {
	volatile gint ref_count;
	gchar *name;
	GDBusArgInfo **in_args;
	GDBusArgInfo **out_args;
	GDBusAnnotationInfo **annotations;
} GDBusMethodInfo;

typedef struct {
	volatile gint ref_count;
	gchar *name;
	GDBusArgInfo **args;
	GDBusAnnotationInfo **annotations;
} GDBusSignalInfo;

typedef struct {
	volatile gint ref_count;
	gchar *name;
	gchar *signature;
	GDBusPropertyInfoFlags flags;
	GDBusAnnotationInfo **annotations;
} GDBusPropertyInfo;

typedef struct {
	volatile gint ref_count;
	gchar *name;
	GDBusMethodInfo **methods;
	GDBusSignalInfo **signals;
	GDBusPropertyInfo **properties;
	GDBusAnnotationInfo **annotations;
} GDBusInterfaceInfo;

typedef struct {
	volatile gint ref_count;
	gchar *path;
	GDBusInterfaceInfo **interfaces;
	GDBusNodeInfo **nodes;
	GDBusAnnotationInfo **annotations;
} GDBusNodeInfo;

typedef struct {
	gint error_code;
	const gchar *dbus_error_name;
} GDBusErrorEntry;

typedef struct _GDBusMessage GDBusMessage;
typedef struct _GDBusConnection GDBusConnection;
typedef struct {
	GDBusInterfaceMethodCallFunc method_call;
	GDBusInterfaceGetPropertyFunc get_property;
	GDBusInterfaceSetPropertyFunc set_property;
} GDBusInterfaceVTable;

typedef struct {
	GDBusSubtreeEnumerateFunc enumerate;
	GDBusSubtreeIntrospectFunc introspect;
	GDBusSubtreeDispatchFunc dispatch;
} GDBusSubtreeVTable;

typedef struct _GDBusMethodInvocation GDBusMethodInvocation;
typedef struct _GDBusServer GDBusServer;
typedef struct _GDBusAuthObserver GDBusAuthObserver;
typedef struct _GDBusInterface GDBusInterface;
struct GDBusInterfaceIface {
	GTypeInterface parent_iface;
	/* Virtual Functions */
	GDBusInterfaceInfo *(*get_info) (GDBusInterface *interface_);
	GDBusObject *(*get_object) (GDBusInterface *interface_);
	void (*set_object) (GDBusInterface *interface_, GDBusObject *object);
	GDBusObject *(*dup_object) (GDBusInterface *interface_);
};

typedef struct _GDBusInterfaceSkeleton GDBusInterfaceSkeleton;
struct GDBusInterfaceSkeletonClass {
	GObjectClass parent_class;
	/* Virtual Functions */
	GDBusInterfaceInfo *(*get_info) (GDBusInterfaceSkeleton *interface_);
	GDBusInterfaceVTable *(*get_vtable) (GDBusInterfaceSkeleton *interface_);
	GVariant *(*get_properties) (GDBusInterfaceSkeleton *interface_);
	void (*flush) (GDBusInterfaceSkeleton *interface_);
	/* Signals */
	gboolean (*g_authorize_method) (GDBusInterfaceSkeleton *interface_, GDBusMethodInvocation *invocation);
};

typedef struct _GDBusProxy GDBusProxy;
struct GDBusProxyClass {
	/* Signals */
	void (*g_properties_changed) (GDBusProxy *proxy, GVariant *changed_properties, const gchar* const *invalidated_properties);
	void (*g_signal) (GDBusProxy *proxy, const gchar *sender_name, const gchar *signal_name, GVariant *parameters);
};

typedef struct _GDBusObject GDBusObject;
struct GDBusObjectIface {
	GTypeInterface parent_iface;
	/* Virtual Functions */
	const gchar *(*get_object_path) (GDBusObject *object);
	GList *(*get_interfaces) (GDBusObject *object);
	GDBusInterface *(*get_interface) (GDBusObject *object, const gchar *interface_name);
	/* Signals */
	void (*interface_added) (GDBusObject *object, GDBusInterface *interface_);
	void (*interface_removed) (GDBusObject *object, GDBusInterface *interface_);
};

typedef struct _GDBusObjectSkeleton GDBusObjectSkeleton;
struct GDBusObjectSkeletonClass {
	GObjectClass parent_class;
	/* Signals */
	gboolean (*authorize_method) (GDBusObjectSkeleton *object, GDBusInterfaceSkeleton *interface_, GDBusMethodInvocation *invocation);
};

typedef struct _GDBusObjectProxy GDBusObjectProxy;
struct GDBusObjectProxyClass {
	GObjectClass parent_class;
};

typedef struct _GDBusObjectManager GDBusObjectManager;
struct GDBusObjectManagerIface {
	GTypeInterface parent_iface;
	/* Virtual Functions */
	const gchar *(*get_object_path) (GDBusObjectManager *manager);
	GList *(*get_objects) (GDBusObjectManager *manager);
	GDBusObject *(*get_object) (GDBusObjectManager *manager, const gchar *object_path);
	GDBusInterface *(*get_interface) (GDBusObjectManager *manager, const gchar *object_path, const gchar *interface_name);
	/* Signals */
	void (*object_added) (GDBusObjectManager *manager, GDBusObject *object);
	void (*object_removed) (GDBusObjectManager *manager, GDBusObject *object);
	void (*interface_added) (GDBusObjectManager *manager, GDBusObject *object, GDBusInterface *interface_);
	void (*interface_removed) (GDBusObjectManager *manager, GDBusObject *object, GDBusInterface *interface_);
};

typedef struct _GDBusObjectManagerServer GDBusObjectManagerServer;
struct GDBusObjectManagerServerClass {
	GObjectClass parent_class;
};

typedef struct _GDBusObjectManagerClient GDBusObjectManagerClient;
struct GDBusObjectManagerClientClass {
	GObjectClass parent_class;
	/* signals */
	void (*interface_proxy_signal) (GDBusObjectManagerClient *manager, GDBusObjectProxy *object_proxy, GDBusProxy *interface_proxy, const gchar *sender_name, const gchar *signal_name, GVariant *parameters);
	void (*interface_proxy_properties_changed) (GDBusObjectManagerClient *manager, GDBusObjectProxy *object_proxy, GDBusProxy *interface_proxy, GVariant *changed_properties, const gchar* const *invalidated_properties);
};

typedef struct _GSettings GSettings;
typedef struct _GSettingsBackend GSettingsBackend;
struct GSettingsBackendClass {
	GObjectClass parent_class;
	GVariant * (*read) (GSettingsBackend *backend, const gchar *key, const GVariantType *expected_type, gboolean default_value);
	gboolean (*get_writable) (GSettingsBackend *backend, const gchar *key);
	gboolean (*write) (GSettingsBackend *backend, const gchar *key, GVariant *value, gpointer origin_tag);
	gboolean (*write_tree) (GSettingsBackend *backend, GTree *tree, gpointer origin_tag);
	void (*reset) (GSettingsBackend *backend, const gchar *key, gpointer origin_tag);
	void (*subscribe) (GSettingsBackend *backend, const gchar *name);
	void (*unsubscribe) (GSettingsBackend *backend, const gchar *name);
	void (*sync) (GSettingsBackend *backend);
	GPermission * (*get_permission) (GSettingsBackend *backend, const gchar *path);
	GVariant * (*read_user_value) (GSettingsBackend *backend, const gchar *key, const GVariantType *expected_type);
};

typedef struct _GSettingsSchemaSource GSettingsSchemaSource;
typedef struct _GSettingsSchema GSettingsSchema;
typedef struct _GSettingsSchemaKey GSettingsSchemaKey;
typedef struct _GResource GResource;
struct GStaticResource {
};

typedef struct _GPermission GPermission;
typedef struct _GSimplePermission GSimplePermission;
typedef struct _GListModel GListModel;
struct GListModelInterface {
	GTypeInterface g_iface;
	GType (* get_item_type) (GListModel *list);
	guint (* get_n_items) (GListModel *list);
	gpointer (* get_item) (GListModel *list, guint position);
};

typedef struct _GListStore GListStore;
struct GWin32RegistrySubkeyIter {
};

struct GWin32RegistryValueIter {
};

struct GWin32RegistryKey {
	GObject parent_instance;
};

typedef struct _GApplication GApplication;
struct GApplicationClass {
	/* signals */
	void (* startup) (GApplication *application);
	void (* activate) (GApplication *application);
	void (* open) (GApplication *application, GFile **files, gint n_files, const gchar *hint);
	int (* command_line) (GApplication *application, GApplicationCommandLine *command_line);
	/* vfuncs */
	/** * GApplicationClass::local_command_line: * @application: a #GApplication * @arguments: (inout) (array zero-terminated=1): array of command line arguments * @exit_status: (out): exit status to fill after processing the command line. * * This virtual function is always invoked in the local instance. It * gets passed a pointer to a %NULL-terminated copy of @argv and is * expected to remove arguments that it handled (shifting up remaining * arguments). * * The last argument to local_command_line() is a pointer to the @status * variable which can used to set the exit status that is returned from * g_application_run(). * * See g_application_run() for more details on #GApplication startup. * * Returns: %TRUE if the commandline has been completely handled */
	gboolean (* local_command_line) (GApplication *application, gchar ***arguments, int *exit_status);
	void (* before_emit) (GApplication *application, GVariant *platform_data);
	void (* after_emit) (GApplication *application, GVariant *platform_data);
	void (* add_platform_data) (GApplication *application, GVariantBuilder *builder);
	void (* quit_mainloop) (GApplication *application);
	void (* run_mainloop) (GApplication *application);
	void (* shutdown) (GApplication *application);
	gboolean (* dbus_register) (GApplication *application, GDBusConnection *connection, const gchar *object_path, GError **error);
	void (* dbus_unregister) (GApplication *application, GDBusConnection *connection, const gchar *object_path);
	gint (* handle_local_options)(GApplication *application, GVariantDict *options);
};

typedef struct _GApplicationCommandLine GApplicationCommandLine;
struct GApplicationCommandLineClass {
};

typedef struct _GActionGroup GActionGroup;
struct GActionGroupInterface {
	GTypeInterface g_iface;
	/* virtual functions */
	gboolean (* has_action) (GActionGroup *action_group, const gchar *action_name);
	gchar ** (* list_actions) (GActionGroup *action_group);
	gboolean (* get_action_enabled) (GActionGroup *action_group, const gchar *action_name);
	const GVariantType * (* get_action_parameter_type) (GActionGroup *action_group, const gchar *action_name);
	const GVariantType * (* get_action_state_type) (GActionGroup *action_group, const gchar *action_name);
	GVariant * (* get_action_state_hint) (GActionGroup *action_group, const gchar *action_name);
	GVariant * (* get_action_state) (GActionGroup *action_group, const gchar *action_name);
	void (* change_action_state) (GActionGroup *action_group, const gchar *action_name, GVariant *value);
	void (* activate_action) (GActionGroup *action_group, const gchar *action_name, GVariant *parameter);
	/* signals */
	void (* action_added) (GActionGroup *action_group, const gchar *action_name);
	void (* action_removed) (GActionGroup *action_group, const gchar *action_name);
	void (* action_enabled_changed) (GActionGroup *action_group, const gchar *action_name, gboolean enabled);
	void (* action_state_changed) (GActionGroup *action_group, const gchar *action_name, GVariant *state);
	/* more virtual functions */
	gboolean (* query_action) (GActionGroup *action_group, const gchar *action_name, gboolean *enabled, const GVariantType **parameter_type, const GVariantType **state_type, GVariant **state_hint, GVariant **state);
};

typedef struct _GActionMap GActionMap;
struct GActionMapInterface {
	GTypeInterface g_iface;
	GAction * (* lookup_action) (GActionMap *action_map, const gchar *action_name);
	void (* add_action) (GActionMap *action_map, GAction *action);
	void (* remove_action) (GActionMap *action_map, const gchar *action_name);
};

struct GActionEntry {
	const gchar *name;
	void (* activate) (GSimpleAction *action, GVariant *parameter, gpointer user_data);
	const gchar *parameter_type;
	const gchar *state;
	void (* change_state) (GSimpleAction *action, GVariant *value, gpointer user_data);
};

typedef struct _GSimpleActionGroup GSimpleActionGroup;
typedef struct _GAction GAction;
struct GActionInterface {
	GTypeInterface g_iface;
	/* virtual functions */
	const gchar * (* get_name) (GAction *action);
	const GVariantType * (* get_parameter_type) (GAction *action);
	const GVariantType * (* get_state_type) (GAction *action);
	GVariant * (* get_state_hint) (GAction *action);
	gboolean (* get_enabled) (GAction *action);
	GVariant * (* get_state) (GAction *action);
	void (* change_state) (GAction *action, GVariant *value);
	void (* activate) (GAction *action, GVariant *parameter);
};

typedef struct _GSimpleAction GSimpleAction;
typedef struct _GPropertyAction GPropertyAction;
typedef struct _GRemoteActionGroup GRemoteActionGroup;
struct GRemoteActionGroupInterface {
	GTypeInterface g_iface;
	void (* activate_action_full) (GRemoteActionGroup *remote, const gchar *action_name, GVariant *parameter, GVariant *platform_data);
	void (* change_action_state_full) (GRemoteActionGroup *remote, const gchar *action_name, GVariant *value, GVariant *platform_data);
};

typedef struct _GDBusActionGroup GDBusActionGroup;
typedef struct _GMenuModel GMenuModel;
struct GMenuAttributeIter;
struct GMenuLinkIter;
typedef struct _GMenu GMenu;
typedef struct _GMenuItem GMenuItem;
typedef struct _GDBusMenuModel GDBusMenuModel;
typedef struct _GNotification GNotification;
typedef struct _GVfs GVfs;
typedef struct _GIOModule GIOModule;
typedef struct _GIOModuleScope GIOModuleScope;
typedef struct _GIOExtension GIOExtension;
typedef struct _GIOExtensionPoint GIOExtensionPoint;
typedef struct _GTestDBus GTestDBus;
union 
	
#define G_FILE_ATTRIBUTE_STANDARD_TYPE "standard::type" /* uint32 (GFileType) */	# A key in the "standard" namespace for storing file types.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.The value for this key should contain a GFileType.
#define G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN "standard::is-hidden" /* boolean */	# A key in the "standard" namespace for checking if a file is hidden.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP "standard::is-backup" /* boolean */	# A key in the "standard" namespace for checking if a file is a backup file.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK "standard::is-symlink" /* boolean */	# A key in the "standard" namespace for checking if the file is a symlink.Typically the actual type is something else, if we followed the symlinkto get the type.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL "standard::is-virtual" /* boolean */	# A key in the "standard" namespace for checking if a file is virtual.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE "standard::is-volatile" /* boolean */	# A key in the "standard" namespace for checking if a file isvolatile. This is meant for opaque, non-POSIX-like backends toindicate that the URI is not persistent. Applications should lookat G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET for the persistent URI.
#define G_FILE_ATTRIBUTE_STANDARD_NAME "standard::name" /* byte string */	# A key in the "standard" namespace for getting the name of the file.The name is the on-disk filename which may not be in any known encoding,and can thus not be generally displayed as is.Use G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME if you need to display thename in a user interface.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#define G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME "standard::display-name" /* string */	# A key in the "standard" namespace for getting the display name of the file.A display name is guaranteed to be in UTF8 and can thus be displayed inthe UI.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME "standard::edit-name" /* string */	# A key in the "standard" namespace for edit name of the file.An edit name is similar to the display name, but it is meant to beused when you want to rename the file in the UI. The display namemight contain information you don't want in the new filename (such as"(invalid unicode)" if the filename was in an invalid encoding).
#define G_FILE_ATTRIBUTE_STANDARD_COPY_NAME "standard::copy-name" /* string */	# A key in the "standard" namespace for getting the copy name of the file.The copy name is an optional version of the name. If available it's alwaysin UTF8, and corresponds directly to the original filename (only transcoded toUTF8). This is useful if you want to copy the file to another filesystem thatmight have a different encoding. If the filename is not a valid string in theencoding selected for the filesystem it is in then the copy name will not be set.
#define G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION "standard::description" /* string */	# A key in the "standard" namespace for getting the description of the file.The description is a utf8 string that describes the file, generally containingthe filename, but can also contain furter information. Example descriptionscould be "filename (on hostname)" for a remote file or "filename (in trash)"for a file in the trash. This is useful for instance as the window titlewhen displaying a directory or for a bookmarks menu.
#define G_FILE_ATTRIBUTE_STANDARD_ICON "standard::icon" /* object (GIcon) */	# A key in the "standard" namespace for getting the icon for the file.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_OBJECT.The value for this key should contain a GIcon.
#define G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON "standard::symbolic-icon" /* object (GIcon) */	# A key in the "standard" namespace for getting the symbolic icon for the file.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_OBJECT.The value for this key should contain a GIcon.
#define G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE "standard::content-type" /* string */	# A key in the "standard" namespace for getting the content type of the file.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.The value for this key should contain a valid content type.
#define G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE "standard::fast-content-type" /* string */	# A key in the "standard" namespace for getting the fast content type.The fast content type isn't as reliable as the regular one, as itonly uses the filename to guess it, but it is faster to calculate than theregular content type.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_STANDARD_SIZE "standard::size" /* uint64 */	# A key in the "standard" namespace for getting the file's size (in bytes).Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE "standard::allocated-size" /* uint64 */	# A key in the "standard" namespace for getting the amount of disk spacethat is consumed by the file (in bytes). This will generally be largerthan the file size (due to block size overhead) but can occasionally besmaller (for example, for sparse files).Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET "standard::symlink-target" /* byte string */	# A key in the "standard" namespace for getting the symlink target, if the fileis a symlink. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#define G_FILE_ATTRIBUTE_STANDARD_TARGET_URI "standard::target-uri" /* string */	# A key in the "standard" namespace for getting the target URI for the file, inthe case of G_FILE_TYPE_SHORTCUT or G_FILE_TYPE_MOUNTABLE files.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER "standard::sort-order" /* int32 */	# A key in the "standard" namespace for setting the sort order of a file.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_INT32.An example use would be in file managers, which would use this keyto set the order files are displayed. Files with smaller sort ordershould be sorted first, and files without sort order as if sort orderwas zero.
#define G_FILE_ATTRIBUTE_ETAG_VALUE "etag::value" /* string */	# A key in the "etag" namespace for getting the value of the file'sentity tag. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_ID_FILE "id::file" /* string */	# A key in the "id" namespace for getting a file identifier.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.An example use would be during listing files, to avoid recursivedirectory scanning.
#define G_FILE_ATTRIBUTE_ID_FILESYSTEM "id::filesystem" /* string */	# A key in the "id" namespace for getting the file system identifier.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.An example use would be during drag and drop to see if the sourceand target are on the same filesystem (default to move) or not (defaultto copy).
#define G_FILE_ATTRIBUTE_ACCESS_CAN_READ "access::can-read" /* boolean */	# A key in the "access" namespace for getting read privileges.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.This attribute will be TRUE if the user is able to read the file.
#define G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE "access::can-write" /* boolean */	# A key in the "access" namespace for getting write privileges.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.This attribute will be TRUE if the user is able to write to the file.
#define G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE "access::can-execute" /* boolean */	# A key in the "access" namespace for getting execution privileges.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.This attribute will be TRUE if the user is able to execute the file.
#define G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE "access::can-delete" /* boolean */	# A key in the "access" namespace for checking deletion privileges.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.This attribute will be TRUE if the user is able to delete the file.
#define G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH "access::can-trash" /* boolean */	# A key in the "access" namespace for checking trashing privileges.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.This attribute will be TRUE if the user is able to move the file tothe trash.
#define G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME "access::can-rename" /* boolean */	# A key in the "access" namespace for checking renaming privileges.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.This attribute will be TRUE if the user is able to rename the file.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT "mountable::can-mount" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) is mountable.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT "mountable::can-unmount" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) is unmountable.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT "mountable::can-eject" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be ejected.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE "mountable::unix-device" /* uint32 */	# A key in the "mountable" namespace for getting the unix device.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE "mountable::unix-device-file" /* string */	# A key in the "mountable" namespace for getting the unix device file.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI "mountable::hal-udi" /* string */	# A key in the "mountable" namespace for getting the HAL UDI for the mountablefile. Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START "mountable::can-start" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be started.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED "mountable::can-start-degraded" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be starteddegraded.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP "mountable::can-stop" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be stopped.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE "mountable::start-stop-type" /* uint32 (GDriveStartStopType) */	# A key in the "mountable" namespace for getting the GDriveStartStopType.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL "mountable::can-poll" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE) can be polled.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC "mountable::is-media-check-automatic" /* boolean */	# A key in the "mountable" namespace for checking if a file (of type G_FILE_TYPE_MOUNTABLE)is automatically polled for media.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_TIME_MODIFIED "time::modified" /* uint64 */	# A key in the "time" namespace for getting the time the file was lastmodified. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT64, and contains the time since thefile was modified, in seconds since the UNIX epoch.
#define G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC "time::modified-usec" /* uint32 */	# A key in the "time" namespace for getting the microseconds of the timethe file was last modified. This should be used in conjunction withG_FILE_ATTRIBUTE_TIME_MODIFIED. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_TIME_ACCESS "time::access" /* uint64 */	# A key in the "time" namespace for getting the time the file was lastaccessed. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT64, and contains the time since thefile was last accessed, in seconds since the UNIX epoch.
#define G_FILE_ATTRIBUTE_TIME_ACCESS_USEC "time::access-usec" /* uint32 */	# A key in the "time" namespace for getting the microseconds of the timethe file was last accessed. This should be used in conjunction withG_FILE_ATTRIBUTE_TIME_ACCESS. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_TIME_CHANGED "time::changed" /* uint64 */	# A key in the "time" namespace for getting the time the file was lastchanged. Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64,and contains the time since the file was last changed, in seconds since theUNIX epoch.
#define G_FILE_ATTRIBUTE_TIME_CHANGED_USEC "time::changed-usec" /* uint32 */	# A key in the "time" namespace for getting the microseconds of the timethe file was last changed. This should be used in conjunction withG_FILE_ATTRIBUTE_TIME_CHANGED. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_TIME_CREATED "time::created" /* uint64 */	# A key in the "time" namespace for getting the time the file was created.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64,and contains the time since the file was created, in seconds since the UNIXepoch.
#define G_FILE_ATTRIBUTE_TIME_CREATED_USEC "time::created-usec" /* uint32 */	# A key in the "time" namespace for getting the microseconds of the timethe file was created. This should be used in conjunction withG_FILE_ATTRIBUTE_TIME_CREATED. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_DEVICE "unix::device" /* uint32 */	# A key in the "unix" namespace for getting the device id of the device thefile is located on (see stat() documentation). This attribute is onlyavailable for UNIX file systems. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_INODE "unix::inode" /* uint64 */	# A key in the "unix" namespace for getting the inode of the file.This attribute is only available for UNIX file systems. CorrespondingGFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_UNIX_MODE "unix::mode" /* uint32 */	# A key in the "unix" namespace for getting the mode of the file(e.g. whether the file is a regular file, symlink, etc). See lstat()documentation. This attribute is only available for UNIX file systems.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_NLINK "unix::nlink" /* uint32 */	# A key in the "unix" namespace for getting the number of hard linksfor a file. See lstat() documentation. This attribute is only availablefor UNIX file systems. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_UID "unix::uid" /* uint32 */	# A key in the "unix" namespace for getting the user ID for the file.This attribute is only available for UNIX file systems.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_GID "unix::gid" /* uint32 */	# A key in the "unix" namespace for getting the group ID for the file.This attribute is only available for UNIX file systems.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_RDEV "unix::rdev" /* uint32 */	# A key in the "unix" namespace for getting the device ID for the file(if it is a special file). See lstat() documentation. This attributeis only available for UNIX file systems. Corresponding GFileAttributeTypeis G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE "unix::block-size" /* uint32 */	# A key in the "unix" namespace for getting the block size for the filesystem. This attribute is only available for UNIX file systems.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_UNIX_BLOCKS "unix::blocks" /* uint64 */	# A key in the "unix" namespace for getting the number of blocks allocatedfor the file. This attribute is only available for UNIX file systems.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT "unix::is-mountpoint" /* boolean */	# A key in the "unix" namespace for checking if the file represents aUNIX mount point. This attribute is TRUE if the file is a UNIX mountpoint. This attribute is only available for UNIX file systems.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE "dos::is-archive" /* boolean */	# A key in the "dos" namespace for checking if the file's archive flagis set. This attribute is TRUE if the archive flag is set. This attributeis only available for DOS file systems. Corresponding GFileAttributeTypeis G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_DOS_IS_SYSTEM "dos::is-system" /* boolean */	# A key in the "dos" namespace for checking if the file's backup flagis set. This attribute is TRUE if the backup flag is set. This attributeis only available for DOS file systems. Corresponding GFileAttributeTypeis G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_OWNER_USER "owner::user" /* string */	# A key in the "owner" namespace for getting the user name of thefile's owner. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_OWNER_USER_REAL "owner::user-real" /* string */	# A key in the "owner" namespace for getting the real name of theuser that owns the file. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_OWNER_GROUP "owner::group" /* string */	# A key in the "owner" namespace for getting the file owner's group.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_THUMBNAIL_PATH "thumbnail::path" /* bytestring */	# A key in the "thumbnail" namespace for getting the path to the thumbnailimage. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#define G_FILE_ATTRIBUTE_THUMBNAILING_FAILED "thumbnail::failed" /* boolean */	# A key in the "thumbnail" namespace for checking if thumbnailing failed.This attribute is TRUE if thumbnailing failed. CorrespondingGFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID "thumbnail::is-valid" /* boolean */	# A key in the "thumbnail" namespace for checking whether the thumbnail is outdated.This attribute is TRUE if the thumbnail is up-to-date with the file it represents,and FALSE if the file has been modified since the thumbnail was generated.
#define G_FILE_ATTRIBUTE_PREVIEW_ICON "preview::icon" /* object (GIcon) */	# A key in the "preview" namespace for getting a GIcon that can beused to get preview of the file. For example, it may be a lowresolution thumbnail without metadata. CorrespondingGFileAttributeType is G_FILE_ATTRIBUTE_TYPE_OBJECT. The valuefor this key should contain a GIcon.
#define G_FILE_ATTRIBUTE_FILESYSTEM_SIZE "filesystem::size" /* uint64 */	# A key in the "filesystem" namespace for getting the total size (in bytes) of the file system,used in g_file_query_filesystem_info(). Corresponding GFileAttributeTypeis G_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_FILESYSTEM_FREE "filesystem::free" /* uint64 */	# A key in the "filesystem" namespace for getting the number of bytes of free space left on thefile system. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_FILESYSTEM_USED "filesystem::used" /* uint64 */	# A key in the "filesystem" namespace for getting the number of bytes of used on thefile system. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_UINT64.
#define G_FILE_ATTRIBUTE_FILESYSTEM_TYPE "filesystem::type" /* string */	# A key in the "filesystem" namespace for getting the file system's type.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_FILESYSTEM_READONLY "filesystem::readonly" /* boolean */	# A key in the "filesystem" namespace for checking if the file systemis read only. Is set to TRUE if the file system is read only.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW "filesystem::use-preview" /* uint32 (GFilesystemPreviewType) */	# A key in the "filesystem" namespace for hinting a file managerapplication whether it should preview (e.g. thumbnail) files on thefile system. The value for this key contain aGFilesystemPreviewType.
#define G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE "filesystem::remote" /* boolean */	# A key in the "filesystem" namespace for checking if the file systemis remote. Is set to TRUE if the file system is remote.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_BOOLEAN.
#define G_FILE_ATTRIBUTE_GVFS_BACKEND "gvfs::backend" /* string */	# A key in the "gvfs" namespace that gets the name of the currentGVFS backend in use. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_SELINUX_CONTEXT "selinux::context" /* string */	# A key in the "selinux" namespace for getting the file's SELinuxcontext. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_STRING. Note that this attribute is onlyavailable if GLib has been built with SELinux support.
#define G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT "trash::item-count" /* uint32 */	# A key in the "trash" namespace. When requested againsttrash:/// returns the number of (toplevel) items in the trash folder.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_UINT32.
#define G_FILE_ATTRIBUTE_TRASH_ORIG_PATH "trash::orig-path" /* byte string */	# A key in the "trash" namespace. When requested againstitems in trash:///, will return the original path to the file before itwas trashed. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_BYTE_STRING.
#define G_FILE_ATTRIBUTE_TRASH_DELETION_DATE "trash::deletion-date" /* string */	# A key in the "trash" namespace. When requested againstitems in trash:///, will return the date and time when the filewas trashed. The format of the returned string is YYYY-MM-DDThh:mm:ss.Corresponding GFileAttributeType is G_FILE_ATTRIBUTE_TYPE_STRING.
#define G_FILE_ATTRIBUTE_RECENT_MODIFIED "recent::modified" /* int64 (time_t) */	# A key in the "recent" namespace for getting time, when the metadata for thefile in recent:/// was last changed. Corresponding GFileAttributeType isG_FILE_ATTRIBUTE_TYPE_INT64.
#define G_IO_ERROR g_io_error_quark()	# Error domain for GIO. Errors in this domain will be from the GIOErrorEnum enumeration.See GError for more information on error domains.
#define G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME "gio-desktop-app-info-lookup"	# G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME is deprecated and should not be used in newly-written code.
#define G_VOLUME_MONITOR_EXTENSION_POINT_NAME "gio-volume-monitor"	# Extension point for volume monitor functionality.See Extending GIO.
#define G_VOLUME_IDENTIFIER_KIND_HAL_UDI "hal-udi"	# The string used to obtain a Hal UDI with g_volume_get_identifier().
#define G_VOLUME_IDENTIFIER_KIND_LABEL "label"	# The string used to obtain a filesystem label with g_volume_get_identifier().
#define G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT "nfs-mount"	# The string used to obtain a NFS mount with g_volume_get_identifier().
#define G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE "unix-device"	# The string used to obtain a Unix device path with g_volume_get_identifier().
#define G_VOLUME_IDENTIFIER_KIND_UUID "uuid"	# The string used to obtain a UUID with g_volume_get_identifier().
#define G_VOLUME_IDENTIFIER_KIND_CLASS "class"	# The string used to obtain the volume class with g_volume_get_identifier().
#define G_PROXY_EXTENSION_POINT_NAME "gio-proxy"	# Extension point for proxy functionality.See Extending GIO.
#define G_NETWORK_MONITOR_EXTENSION_POINT_NAME "gio-network-monitor"	# Extension point for network status monitoring functionality.See Extending GIO.
#define G_TLS_ERROR (g_tls_error_quark ())	# Error domain for TLS. Errors in this domain will be from theGTlsError enumeration. See GError for more information on errordomains.
#define G_TLS_BACKEND_EXTENSION_POINT_NAME "gio-tls-backend"	# Extension point for TLS functionality via GTlsBackend.See Extending GIO.
#define G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER "1.3.6.1.5.5.7.3.1"	# The purpose used to verify the server certificate in a TLS connection. Thisis the most common purpose in use. Used by TLS clients.
#define G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT "1.3.6.1.5.5.7.3.2"	# The purpose used to verify the client certificate in a TLS connection.Used by TLS servers.
#define G_RESOLVER_ERROR (g_resolver_error_quark ())	# Error domain for GResolver. Errors in this domain will be from theGResolverError enumeration. See GError for more information onerror domains.
#define G_PROXY_RESOLVER_EXTENSION_POINT_NAME "gio-proxy-resolver"	# Extension point for proxy resolving functionality.See Extending GIO.
#define G_TYPE_DBUS_NODE_INFO (g_dbus_node_info_get_type ())	# The GType for a boxed type holding a GDBusNodeInfo.
#define G_TYPE_DBUS_INTERFACE_INFO (g_dbus_interface_info_get_type ())	# The GType for a boxed type holding a GDBusInterfaceInfo.
#define G_TYPE_DBUS_METHOD_INFO (g_dbus_method_info_get_type ())	# The GType for a boxed type holding a GDBusMethodInfo.
#define G_TYPE_DBUS_SIGNAL_INFO (g_dbus_signal_info_get_type ())	# The GType for a boxed type holding a GDBusSignalInfo.
#define G_TYPE_DBUS_PROPERTY_INFO (g_dbus_property_info_get_type ())	# The GType for a boxed type holding a GDBusPropertyInfo.
#define G_TYPE_DBUS_ARG_INFO (g_dbus_arg_info_get_type ())	# The GType for a boxed type holding a GDBusArgInfo.
#define G_TYPE_DBUS_ANNOTATION_INFO (g_dbus_annotation_info_get_type ())	# The GType for a boxed type holding a GDBusAnnotationInfo.
#define G_DBUS_ERROR g_dbus_error_quark()	# Error domain for errors generated by a remote message bus. Errorsin this domain will be from the GDBusError enumeration. SeeGError for more information on error domains.
#define G_SETTINGS_BACKEND_EXTENSION_POINT_NAME "gsettings-backend"	# Extension point for GSettingsBackend functionality.
#define G_RESOURCE_ERROR (g_resource_error_quark ())	# Error domain for GResource. Errors in this domain will be from theGResourceError enumeration. See GError for more information onerror domains.
#define G_MENU_ATTRIBUTE_ACTION "action"	# The menu item attribute which holds the action name of the item. Actionnames are namespaced with an identifier for the action group in which theaction resides. For example, "win." for window-specific actions and "app."for application-wide actions.
#define G_MENU_ATTRIBUTE_ACTION_NAMESPACE "action-namespace"	# The menu item attribute that holds the namespace for all action names inmenus that are linked from this item.
#define G_MENU_ATTRIBUTE_TARGET "target"	# The menu item attribute which holds the target with which the item's actionwill be activated.
#define G_MENU_ATTRIBUTE_LABEL "label"	# The menu item attribute which holds the label of the item.
#define G_MENU_ATTRIBUTE_ICON "icon"	# The menu item attribute which holds the icon of the item.
#define G_MENU_LINK_SECTION "section"	# The name of the link that associates a menu item with a section. The linkedmenu will usually be shown in place of the menu item, using the item's labelas a header.
#define G_MENU_LINK_SUBMENU "submenu"	# The name of the link that associates a menu item with a submenu.
#define G_VFS_EXTENSION_POINT_NAME "gio-vfs"	# Extension point for GVfs functionality.See Extending GIO.
enum GFileQueryInfoFlags	# Flags used when querying a <span class="type">GFileInfo</span></a>.
	G_FILE_QUERY_INFO_NONE	# No flags set.
	G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS	# Don't follow symlinks.
enum GFileCreateFlags	# Flags used when an operation may create a file.
	G_FILE_CREATE_NONE	# No flags set.
	G_FILE_CREATE_PRIVATE	# Create a file that can only be   accessed by the current user.
	G_FILE_CREATE_REPLACE_DESTINATION	# Replace the destination   as if it didn't exist before. Don't try to keep any old   permissions, replace instead of following links. This   is generally useful if you're doing a "copy over"   rather than a "save new version of" replace operation.   You can think of it as "unlink destination" before   writing to it, although the implementation may not   be exactly like that. Since 2.20
enum GFileCopyFlags	# Flags used when copying or moving files.
	G_FILE_COPY_NONE	# No flags set.
	G_FILE_COPY_OVERWRITE	# Overwrite any existing files
	G_FILE_COPY_BACKUP	# Make a backup of any existing files.
	G_FILE_COPY_NOFOLLOW_SYMLINKS	# Don't follow symlinks.
	G_FILE_COPY_ALL_METADATA	# Copy all file metadata instead of just default set used for copy (see GFileInfo).
	G_FILE_COPY_NO_FALLBACK_FOR_MOVE	# Don't use copy and delete fallback if native move not supported.
	G_FILE_COPY_TARGET_DEFAULT_PERMS	# Leaves target file with default perms, instead of setting the source file perms.
enum GFileMonitorFlags	# Flags used to set what a <span class="type">GFileMonitor</span></a> will watch for.
	G_FILE_MONITOR_NONE	# No flags set.
	G_FILE_MONITOR_WATCH_MOUNTS	# Watch for mount events.
	G_FILE_MONITOR_SEND_MOVED	# G_FILE_MONITOR_WATCH_MOVES instead.
	G_FILE_MONITOR_WATCH_HARD_LINKS	# Watch for changes to the file made  via another hard link. Since 2.36.
	G_FILE_MONITOR_WATCH_MOVES	# G_FILE_MONITOR_EVENT_RENAMED,  <code class="literal">G_FILE_MONITOR_EVENT_MOVED_IN and <code class="literal">G_FILE_MONITOR_EVENT_MOVED_OUT  events to be emitted when possible.  Since: 2.46.
enum GFileMeasureFlags	# Flags that can be used with g_file_measure_disk_usage()</a>.
	G_FILE_MEASURE_NONE	# No flags set.
	G_FILE_MEASURE_REPORT_ANY_ERROR	# Report any error encountered  while traversing the directory tree.  Normally errors are only  reported for the toplevel file.
	G_FILE_MEASURE_APPARENT_SIZE	# du --apparent-size.
	G_FILE_MEASURE_NO_XDEV	# du -x.
enum GFilesystemPreviewType	# Indicates a hint from the file system whether files should bepreviewed in a file manager. Returned as the value of the key<span class="type">G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW</span></a>.
	G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS	# Only preview files if user has explicitly requested it.
	G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL	# Preview files if user has requested preview of "local" files.
	G_FILESYSTEM_PREVIEW_TYPE_NEVER	# Never preview files.
enum GFileAttributeType	# The data types for file attributes.
	G_FILE_ATTRIBUTE_TYPE_INVALID	# indicates an invalid or uninitalized type.
	G_FILE_ATTRIBUTE_TYPE_STRING	# a null terminated UTF8 string.
	G_FILE_ATTRIBUTE_TYPE_BYTE_STRING	# a zero terminated string of non-zero bytes.
	G_FILE_ATTRIBUTE_TYPE_BOOLEAN	# a boolean value.
	G_FILE_ATTRIBUTE_TYPE_UINT32	# an unsigned 4-byte/32-bit integer.
	G_FILE_ATTRIBUTE_TYPE_INT32	# a signed 4-byte/32-bit integer.
	G_FILE_ATTRIBUTE_TYPE_UINT64	# an unsigned 8-byte/64-bit integer.
	G_FILE_ATTRIBUTE_TYPE_INT64	# a signed 8-byte/64-bit integer.
	G_FILE_ATTRIBUTE_TYPE_OBJECT	# a GObject.
	G_FILE_ATTRIBUTE_TYPE_STRINGV	# NULL terminated char **. Since 2.22
enum GFileAttributeInfoFlags	# Flags specifying the behaviour of an attribute.
	G_FILE_ATTRIBUTE_INFO_NONE	# no flags set.
	G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE	# copy the attribute values when the file is copied.
	G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED	# copy the attribute values when the file is moved.
enum GFileAttributeStatus	# Used by g_file_set_attributes_from_info()</a> when setting file attributes.
	G_FILE_ATTRIBUTE_STATUS_UNSET	# Attribute value is unset (empty).
	G_FILE_ATTRIBUTE_STATUS_SET	# Attribute value is set.
	G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING	# Indicates an error in setting the value.
enum GFileType	# Indicates the file's on-disk type.
	G_FILE_TYPE_UNKNOWN	# File's type is unknown.
	G_FILE_TYPE_REGULAR	# File handle represents a regular file.
	G_FILE_TYPE_DIRECTORY	# File handle represents a directory.
	G_FILE_TYPE_SYMBOLIC_LINK	# File handle represents a symbolic link   (Unix systems).
	G_FILE_TYPE_SPECIAL	# File is a "special" file, such as a socket, fifo,   block device, or character device.
	G_FILE_TYPE_SHORTCUT	# File is a shortcut (Windows systems).
	G_FILE_TYPE_MOUNTABLE	# File is a mountable location.
enum GIOErrorEnum	# Error codes returned by GIO functions.
	G_IO_ERROR_FAILED	# Generic error condition for when an operation fails    and no more specific GIOErrorEnum value is defined.
	G_IO_ERROR_NOT_FOUND	# File not found.
	G_IO_ERROR_EXISTS	# File already exists.
	G_IO_ERROR_IS_DIRECTORY	# File is a directory.
	G_IO_ERROR_NOT_DIRECTORY	# File is not a directory.
	G_IO_ERROR_NOT_EMPTY	# File is a directory that isn't empty.
	G_IO_ERROR_NOT_REGULAR_FILE	# File is not a regular file.
	G_IO_ERROR_NOT_SYMBOLIC_LINK	# File is not a symbolic link.
	G_IO_ERROR_NOT_MOUNTABLE_FILE	# File cannot be mounted.
	G_IO_ERROR_FILENAME_TOO_LONG	# Filename is too many characters.
	G_IO_ERROR_INVALID_FILENAME	# Filename is invalid or contains invalid characters.
	G_IO_ERROR_TOO_MANY_LINKS	# File contains too many symbolic links.
	G_IO_ERROR_NO_SPACE	# No space left on drive.
	G_IO_ERROR_INVALID_ARGUMENT	# Invalid argument.
	G_IO_ERROR_PERMISSION_DENIED	# Permission denied.
	G_IO_ERROR_NOT_SUPPORTED	# Operation (or one of its parameters) not supported
	G_IO_ERROR_NOT_MOUNTED	# File isn't mounted.
	G_IO_ERROR_ALREADY_MOUNTED	# File is already mounted.
	G_IO_ERROR_CLOSED	# File was closed.
	G_IO_ERROR_CANCELLED	# Operation was cancelled. See GCancellable.
	G_IO_ERROR_PENDING	# Operations are still pending.
	G_IO_ERROR_READ_ONLY	# File is read only.
	G_IO_ERROR_CANT_CREATE_BACKUP	# Backup couldn't be created.
	G_IO_ERROR_WRONG_ETAG	# File's Entity Tag was incorrect.
	G_IO_ERROR_TIMED_OUT	# Operation timed out.
	G_IO_ERROR_WOULD_RECURSE	# Operation would be recursive.
	G_IO_ERROR_BUSY	# File is busy.
	G_IO_ERROR_WOULD_BLOCK	# Operation would block.
	G_IO_ERROR_HOST_NOT_FOUND	# Host couldn't be found (remote operations).
	G_IO_ERROR_WOULD_MERGE	# Operation would merge files.
	G_IO_ERROR_FAILED_HANDLED	# Operation failed and a helper program has    already interacted with the user. Do not display any error dialog.
	G_IO_ERROR_TOO_MANY_OPEN_FILES	# The current process has too many files    open and can't open any more. Duplicate descriptors do count toward    this limit. Since 2.20
	G_IO_ERROR_NOT_INITIALIZED	# The object has not been initialized. Since 2.22
	G_IO_ERROR_ADDRESS_IN_USE	# The requested address is already in use. Since 2.22
	G_IO_ERROR_PARTIAL_INPUT	# Need more input to finish operation. Since 2.24
	G_IO_ERROR_INVALID_DATA	# The input data was invalid. Since 2.24
	G_IO_ERROR_DBUS_ERROR	# A remote object generated an error that    doesn't correspond to a locally registered GError error    domain. Use g_dbus_error_get_remote_error() to extract the D-Bus    error name and g_dbus_error_strip_remote_error() to fix up the    message so it matches what was received on the wire. Since 2.26.
	G_IO_ERROR_HOST_UNREACHABLE	# Host unreachable. Since 2.26
	G_IO_ERROR_NETWORK_UNREACHABLE	# Network unreachable. Since 2.26
	G_IO_ERROR_CONNECTION_REFUSED	# Connection refused. Since 2.26
	G_IO_ERROR_PROXY_FAILED	# Connection to proxy server failed. Since 2.26
	G_IO_ERROR_PROXY_AUTH_FAILED	# Proxy authentication failed. Since 2.26
	G_IO_ERROR_PROXY_NEED_AUTH	# Proxy server needs authentication. Since 2.26
	G_IO_ERROR_PROXY_NOT_ALLOWED	# Proxy connection is not allowed by ruleset.    Since 2.26
	G_IO_ERROR_BROKEN_PIPE	# Broken pipe. Since 2.36
	G_IO_ERROR_CONNECTION_CLOSED	# G_IO_ERROR_BROKEN_PIPE; before 2.44 some    "connection closed" errors returned <code class="literal">G_IO_ERROR_BROKEN_PIPE, but others    returned <code class="literal">G_IO_ERROR_FAILED. Now they should all return the same    value, which has this more logical name. Since 2.44.
	G_IO_ERROR_NOT_CONNECTED	# Transport endpoint is not connected. Since 2.44
	G_IO_ERROR_MESSAGE_TOO_LARGE	# Message too large. Since 2.48.
enum GAskPasswordFlags	# <span class="type">GAskPasswordFlags</span></a> are used to request specific information from theuser, or to notify the user of their choices in an authenticationsituation.
	G_ASK_PASSWORD_NEED_PASSWORD	# operation requires a password.
	G_ASK_PASSWORD_NEED_USERNAME	# operation requires a username.
	G_ASK_PASSWORD_NEED_DOMAIN	# operation requires a domain.
	G_ASK_PASSWORD_SAVING_SUPPORTED	# operation supports saving settings.
	G_ASK_PASSWORD_ANONYMOUS_SUPPORTED	# operation supports anonymous users.
enum GPasswordSave	# <span class="type">GPasswordSave</span></a> is used to indicate the lifespan of a saved password.
	G_PASSWORD_SAVE_NEVER	# never save a password.
	G_PASSWORD_SAVE_FOR_SESSION	# save a password for the session.
	G_PASSWORD_SAVE_PERMANENTLY	# save a password permanently.
enum GMountOperationResult	# <span class="type">GMountOperationResult</span></a> is returned as a result when a request forinformation is send by the mounting operation.
	G_MOUNT_OPERATION_HANDLED	# The request was fulfilled and the    user specified data is now available
	G_MOUNT_OPERATION_ABORTED	# The user requested the mount operation    to be aborted
	G_MOUNT_OPERATION_UNHANDLED	# The request was unhandled (i.e. not    implemented)
enum GFileMonitorEvent	# Specifies what type of event a monitor event is.
	G_FILE_MONITOR_EVENT_CHANGED	# a file changed.
	G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT	# a hint that this was probably the last change in a set of changes.
	G_FILE_MONITOR_EVENT_DELETED	# a file was deleted.
	G_FILE_MONITOR_EVENT_CREATED	# a file was created.
	G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED	# a file attribute was changed.
	G_FILE_MONITOR_EVENT_PRE_UNMOUNT	# the file location will soon be unmounted.
	G_FILE_MONITOR_EVENT_UNMOUNTED	# the file location was unmounted.
	G_FILE_MONITOR_EVENT_MOVED	# G_FILE_MONITOR_SEND_MOVED flag is set
	G_FILE_MONITOR_EVENT_RENAMED	# G_FILE_MONITOR_WATCH_MOVES  flag is set.  Since: 2.46.
	G_FILE_MONITOR_EVENT_MOVED_IN	# G_FILE_MONITOR_WATCH_MOVES flag is set.  Since: 2.46.
	G_FILE_MONITOR_EVENT_MOVED_OUT	# G_FILE_MONITOR_WATCH_MOVES flag is set.  Since: 2.46
enum GConverterResult	# Results returned from g_converter_convert()</a>.
	G_CONVERTER_ERROR	# There was an error during conversion.
	G_CONVERTER_CONVERTED	# Some data was consumed or produced
	G_CONVERTER_FINISHED	# The conversion is finished
	G_CONVERTER_FLUSHED	# Flushing is finished
enum GConverterFlags	# Flags used when calling a g_converter_convert()</a>.
	G_CONVERTER_NO_FLAGS	# No flags.
	G_CONVERTER_INPUT_AT_END	# At end of input data
	G_CONVERTER_FLUSH	# Flush data
enum GZlibCompressorFormat	# Used to select the type of data format to use for <span class="type">GZlibDecompressor</span></a>and <span class="type">GZlibCompressor</span></a>.
	G_ZLIB_COMPRESSOR_FORMAT_ZLIB	# deflate compression with zlib header
	G_ZLIB_COMPRESSOR_FORMAT_GZIP	# gzip file format
	G_ZLIB_COMPRESSOR_FORMAT_RAW	# deflate compression with no header
enum GOutputStreamSpliceFlags	# GOutputStreamSpliceFlags determine how streams should be spliced.
	G_OUTPUT_STREAM_SPLICE_NONE	# Do not close either stream.
	G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE	# Close the source stream after    the splice.
	G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET	# Close the target stream after    the splice.
enum GIOStreamSpliceFlags	# GIOStreamSpliceFlags determine how streams should be spliced.
	G_IO_STREAM_SPLICE_NONE	# Do not close either stream.
	G_IO_STREAM_SPLICE_CLOSE_STREAM1	# Close the first stream after    the splice.
	G_IO_STREAM_SPLICE_CLOSE_STREAM2	# Close the second stream after    the splice.
	G_IO_STREAM_SPLICE_WAIT_FOR_BOTH	# Wait for both splice operations to finish    before calling the callback.
enum GDataStreamByteOrder	# <span class="type">GDataStreamByteOrder</span></a> is used to ensure proper endianness of streaming data sourcesacross various machine architectures.
	G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN	# Selects Big Endian byte order.
	G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN	# Selects Little Endian byte order.
	G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN	# Selects endianness based on host machine's architecture.
enum GDataStreamNewlineType	# <span class="type">GDataStreamNewlineType</span></a> is used when checking for or setting the line endings for a given file.
	G_DATA_STREAM_NEWLINE_TYPE_LF	# Selects "LF" line endings, common on most modern UNIX platforms.
	G_DATA_STREAM_NEWLINE_TYPE_CR	# Selects "CR" line endings.
	G_DATA_STREAM_NEWLINE_TYPE_CR_LF	# Selects "CR, LF" line ending, common on Microsoft Windows.
	G_DATA_STREAM_NEWLINE_TYPE_ANY	# Automatically try to handle any line ending type.
enum GAppInfoCreateFlags	# Flags used when creating a <span class="type">GAppInfo</span></a>.
	G_APP_INFO_CREATE_NONE	# No flags.
	G_APP_INFO_CREATE_NEEDS_TERMINAL	# Application opens in a terminal window.
	G_APP_INFO_CREATE_SUPPORTS_URIS	# Application supports URI arguments.
	G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION	# Application supports startup notification. Since 2.26
enum GMountMountFlags	# Flags used when mounting a mount.
	G_MOUNT_MOUNT_NONE	# No flags set.
enum GMountUnmountFlags	# Flags used when an unmounting a mount.
	G_MOUNT_UNMOUNT_NONE	# No flags set.
	G_MOUNT_UNMOUNT_FORCE	# Unmount even if there are outstanding file operations on the mount.
enum GDriveStartFlags	# Flags used when starting a drive.
	G_DRIVE_START_NONE	# No flags set.
enum GDriveStartStopType	# Enumeration describing how a drive can be started/stopped.
	G_DRIVE_START_STOP_TYPE_UNKNOWN	# Unknown or drive doesn't support   start/stop.
	G_DRIVE_START_STOP_TYPE_SHUTDOWN	# The stop method will physically   shut down the drive and e.g. power down the port the drive is   attached to.
	G_DRIVE_START_STOP_TYPE_NETWORK	# The start/stop methods are used   for connecting/disconnect to the drive over the network.
	G_DRIVE_START_STOP_TYPE_MULTIDISK	# The start/stop methods will   assemble/disassemble a virtual drive from several physical   drives.
	G_DRIVE_START_STOP_TYPE_PASSWORD	# The start/stop methods will   unlock/lock the disk (for example using the ATA &lt;quote&gt;SECURITY   UNLOCK DEVICE&lt;/quote&gt; command)
enum GEmblemOrigin	# GEmblemOrigin is used to add information about the origin of the emblemto <span class="type">GEmblem</span></a>.
	G_EMBLEM_ORIGIN_UNKNOWN	# Emblem of unknown origin
	G_EMBLEM_ORIGIN_DEVICE	# Emblem adds device-specific information
	G_EMBLEM_ORIGIN_LIVEMETADATA	# Emblem depicts live metadata, such as "readonly"
	G_EMBLEM_ORIGIN_TAG	# Emblem comes from a user-defined tag, e.g. set by nautilus (in the future)
enum GSubprocessFlags	# Flags to define the behaviour of a <span class="type">GSubprocess</span></a>.
	G_SUBPROCESS_FLAGS_NONE	# No flags.
	G_SUBPROCESS_FLAGS_STDIN_PIPE	# create a pipe for the stdin of the  spawned process that can be accessed with  g_subprocess_get_stdin_pipe().
	G_SUBPROCESS_FLAGS_STDIN_INHERIT	# stdin is inherited from the  calling process.
	G_SUBPROCESS_FLAGS_STDOUT_PIPE	# create a pipe for the stdout of the  spawned process that can be accessed with  g_subprocess_get_stdout_pipe().
	G_SUBPROCESS_FLAGS_STDOUT_SILENCE	# silence the stdout of the spawned  process (ie: redirect to /dev/null).
	G_SUBPROCESS_FLAGS_STDERR_PIPE	# create a pipe for the stderr of the  spawned process that can be accessed with  g_subprocess_get_stderr_pipe().
	G_SUBPROCESS_FLAGS_STDERR_SILENCE	# silence the stderr of the spawned  process (ie: redirect to /dev/null).
	G_SUBPROCESS_FLAGS_STDERR_MERGE	# merge the stderr of the spawned  process with whatever the stdout happens to be.  This is a good way  of directing both streams to a common log file, for example.
	G_SUBPROCESS_FLAGS_INHERIT_FDS	# spawned processes will inherit the  file descriptors of their parent, unless those descriptors have  been explicitly marked as close-on-exec.  This flag has no effect  over the "standard" file descriptors (stdin, stdout, stderr).
enum GSocketType	# Flags used when creating a <span class="type">GSocket</span></a>. Some protocols may not implementall the socket types.
	G_SOCKET_TYPE_INVALID	# Type unknown or wrong
	G_SOCKET_TYPE_STREAM	# Reliable connection-based byte streams (e.g. TCP).
	G_SOCKET_TYPE_DATAGRAM	# Connectionless, unreliable datagram passing.    (e.g. UDP)
	G_SOCKET_TYPE_SEQPACKET	# Reliable connection-based passing of datagrams    of fixed maximum length (e.g. SCTP).
enum GSocketProtocol	# A protocol identifier is specified when creating a <span class="type">GSocket</span></a>, which is afamily/type specific identifier, where 0 means the default protocol forthe particular family/type.
	G_SOCKET_PROTOCOL_UNKNOWN	# The protocol type is unknown
	G_SOCKET_PROTOCOL_DEFAULT	# The default protocol for the family/type
	G_SOCKET_PROTOCOL_TCP	# TCP over IP
	G_SOCKET_PROTOCOL_UDP	# UDP over IP
	G_SOCKET_PROTOCOL_SCTP	# SCTP over IP
enum GSocketMsgFlags	# Flags used in g_socket_receive_message()</a> and g_socket_send_message()</a>.The flags listed in the enum are some commonly available flags, but thevalues used for them are the same as on the platform, and any other flagsare passed in/out as is. So to use a platform specific flag, just includethe right system header and pass in the flag.
	G_SOCKET_MSG_NONE	# No flags.
	G_SOCKET_MSG_OOB	# Request to send/receive out of band data.
	G_SOCKET_MSG_PEEK	# Read data from the socket without removing it from    the queue.
	G_SOCKET_MSG_DONTROUTE	# Don't use a gateway to send out the packet,    only send to hosts on directly connected networks.
enum GSocketFamily	# The protocol family of a <span class="type">GSocketAddress</span></a>. (These values areidentical to the system defines <code class="literal">AF_INET, <code class="literal">AF_INET6 and <code class="literal">AF_UNIX,if available.)
	G_SOCKET_FAMILY_INVALID	# no address family
	G_SOCKET_FAMILY_UNIX	# the UNIX domain family
	G_SOCKET_FAMILY_IPV4	# the IPv4 family
	G_SOCKET_FAMILY_IPV6	# the IPv6 family
enum GUnixSocketAddressType	# The type of name used by a <span class="type">GUnixSocketAddress</span></a>.<code class="literal">G_UNIX_SOCKET_ADDRESS_PATH</a> indicates a traditional unix domainsocket bound to a filesystem path. <code class="literal">G_UNIX_SOCKET_ADDRESS_ANONYMOUS</a>indicates a socket not bound to any name (eg, a client-side socket,or a socket created with socketpair()).
	G_UNIX_SOCKET_ADDRESS_INVALID	# invalid
	G_UNIX_SOCKET_ADDRESS_ANONYMOUS	# anonymous
	G_UNIX_SOCKET_ADDRESS_PATH	# a filesystem path
	G_UNIX_SOCKET_ADDRESS_ABSTRACT	# an abstract name
	G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED	# an abstract name, 0-padded  to the full length of a unix socket name
enum GCredentialsType	# Enumeration describing different kinds of native credential types.
	G_CREDENTIALS_TYPE_INVALID	# Indicates an invalid native credential type.
	G_CREDENTIALS_TYPE_LINUX_UCRED	# The native credentials type is a struct ucred.
	G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED	# The native credentials type is a struct cmsgcred.
	G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED	# The native credentials type is a struct sockpeercred. Added in 2.30.
	G_CREDENTIALS_TYPE_SOLARIS_UCRED	# The native credentials type is a ucred_t. Added in 2.40.
	G_CREDENTIALS_TYPE_NETBSD_UNPCBID	# The native credentials type is a struct unpcbid.
enum GSocketClientEvent	# Describes an event occurring on a <span class="type">GSocketClient</span></a>. See the<span class="type">“event”</span></a> signal for more details.
	G_SOCKET_CLIENT_RESOLVING	# The client is doing a DNS lookup.
	G_SOCKET_CLIENT_RESOLVED	# The client has completed a DNS lookup.
	G_SOCKET_CLIENT_CONNECTING	# The client is connecting to a remote  host (either a proxy or the destination server).
	G_SOCKET_CLIENT_CONNECTED	# The client has connected to a remote  host.
	G_SOCKET_CLIENT_PROXY_NEGOTIATING	# The client is negotiating  with a proxy to connect to the destination server.
	G_SOCKET_CLIENT_PROXY_NEGOTIATED	# The client has negotiated  with the proxy server.
	G_SOCKET_CLIENT_TLS_HANDSHAKING	# The client is performing a  TLS handshake.
	G_SOCKET_CLIENT_TLS_HANDSHAKED	# The client has performed a  TLS handshake.
	G_SOCKET_CLIENT_COMPLETE	# The client is done with a particular  GSocketConnectable.
enum GSocketListenerEvent	# Describes an event occurring on a <span class="type">GSocketListener</span></a>. See the<span class="type">“event”</span></a> signal for more details.
	G_SOCKET_LISTENER_BINDING	# The listener is about to bind a socket.
	G_SOCKET_LISTENER_BOUND	# The listener has bound a socket.
	G_SOCKET_LISTENER_LISTENING	# The listener is about to start   listening on this socket.
	G_SOCKET_LISTENER_LISTENED	# The listener is now listening on  this socket.
enum GNetworkConnectivity	# The host's network connectivity state, as reported by <span class="type">GNetworkMonitor</span></a>.
	G_NETWORK_CONNECTIVITY_LOCAL	# The host is not configured with a  route to the Internet; it may or may not be connected to a local  network.
	G_NETWORK_CONNECTIVITY_LIMITED	# The host is connected to a network, but  does not appear to be able to reach the full Internet, perhaps  due to upstream network problems.
	G_NETWORK_CONNECTIVITY_PORTAL	# The host is behind a captive portal and  cannot reach the full Internet.
	G_NETWORK_CONNECTIVITY_FULL	# The host is connected to a network, and  appears to be able to reach the full Internet.
enum GTlsError	# An error code used with <code class="literal">G_TLS_ERROR</a> in a <span class="type">GError</span></a> returned from aTLS-related routine.
	G_TLS_ERROR_UNAVAILABLE	# No TLS provider is available
	G_TLS_ERROR_MISC	# Miscellaneous TLS error
	G_TLS_ERROR_BAD_CERTIFICATE	# A certificate could not be parsed
	G_TLS_ERROR_NOT_TLS	# The TLS handshake failed because the  peer does not seem to be a TLS server.
	G_TLS_ERROR_HANDSHAKE	# The TLS handshake failed because the  peer's certificate was not acceptable.
	G_TLS_ERROR_CERTIFICATE_REQUIRED	# The TLS handshake failed because  the server requested a client-side certificate, but none was  provided. See g_tls_connection_set_certificate().
	G_TLS_ERROR_EOF	# The TLS connection was closed without proper  notice, which may indicate an attack. See  g_tls_connection_set_require_close_notify().
enum GTlsAuthenticationMode	# The client authentication mode for a <span class="type">GTlsServerConnection</span></a>.
	G_TLS_AUTHENTICATION_NONE	# client authentication not required
	G_TLS_AUTHENTICATION_REQUESTED	# client authentication is requested
	G_TLS_AUTHENTICATION_REQUIRED	# client authentication is required
enum GTlsCertificateFlags	# A set of flags describing TLS certification validation. This can beused to set which validation steps to perform (eg, withg_tls_client_connection_set_validation_flags()</a>), or to describe whya particular certificate was rejected (eg, in<span class="type">“accept-certificate”</span></a>).
	G_TLS_CERTIFICATE_UNKNOWN_CA	# The signing certificate authority is  not known.
	G_TLS_CERTIFICATE_BAD_IDENTITY	# The certificate does not match the  expected identity of the site that it was retrieved from.
	G_TLS_CERTIFICATE_NOT_ACTIVATED	# The certificate's activation time  is still in the future
	G_TLS_CERTIFICATE_EXPIRED	# The certificate has expired
	G_TLS_CERTIFICATE_REVOKED	# The certificate has been revoked  according to the GTlsConnection's certificate revocation list.
	G_TLS_CERTIFICATE_INSECURE	# The certificate's algorithm is  considered insecure.
	G_TLS_CERTIFICATE_GENERIC_ERROR	# Some other error occurred validating  the certificate
	G_TLS_CERTIFICATE_VALIDATE_ALL	# the combination of all of the above  flags
enum GTlsRehandshakeMode	# When to allow rehandshaking. Seeg_tls_connection_set_rehandshake_mode()</a>.
	G_TLS_REHANDSHAKE_NEVER	# Never allow rehandshaking
	G_TLS_REHANDSHAKE_SAFELY	# Allow safe rehandshaking only
	G_TLS_REHANDSHAKE_UNSAFELY	# Allow unsafe rehandshaking
enum GTlsDatabaseVerifyFlags	# Flags for g_tls_database_verify_chain()</a>.
	G_TLS_DATABASE_VERIFY_NONE	# No verification flags
enum GTlsDatabaseLookupFlags	# Flags for g_tls_database_lookup_certificate_handle(),g_tls_database_lookup_certificate_issuer()</a>,and g_tls_database_lookup_certificates_issued_by()</a>.
	G_TLS_DATABASE_LOOKUP_NONE	# No lookup flags
	G_TLS_DATABASE_LOOKUP_KEYPAIR	# Restrict lookup to certificates that have    a private key.
enum GTlsInteractionResult	# <span class="type">GTlsInteractionResult</span></a> is returned by various functions in <span class="type">GTlsInteraction</span></a>when finishing an interaction request.
	G_TLS_INTERACTION_UNHANDLED	# The interaction was unhandled (i.e. not    implemented).
	G_TLS_INTERACTION_HANDLED	# The interaction completed, and resulting data    is available.
	G_TLS_INTERACTION_FAILED	# The interaction has failed, or was cancelled.    and the operation should be aborted.
enum GTlsCertificateRequestFlags	# Flags for g_tls_interaction_request_certificate()</a>,g_tls_interaction_request_certificate_async()</a>, andg_tls_interaction_invoke_request_certificate()</a>.
	G_TLS_CERTIFICATE_REQUEST_NONE	# No flags
enum GTlsPasswordFlags	# Various flags for the password.
	G_TLS_PASSWORD_NONE	# No flags
	G_TLS_PASSWORD_RETRY	# The password was wrong, and the user should retry.
	G_TLS_PASSWORD_MANY_TRIES	# Hint to the user that the password has been   wrong many times, and the user may not have many chances left.
	G_TLS_PASSWORD_FINAL_TRY	# Hint to the user that this is the last try to get   this password right.
enum GResolverRecordType	# The type of record that g_resolver_lookup_records()</a> org_resolver_lookup_records_async()</a> should retrieve. The records are returnedas lists of <span class="type">GVariant</span></a> tuples. Each record type has different values inthe variant tuples returned.
	G_RESOLVER_RECORD_SRV	# lookup DNS SRV records for a domain
	G_RESOLVER_RECORD_MX	# lookup DNS MX records for a domain
	G_RESOLVER_RECORD_TXT	# lookup DNS TXT records for a name
	G_RESOLVER_RECORD_SOA	# lookup DNS SOA records for a zone
	G_RESOLVER_RECORD_NS	# lookup DNS NS records for a domain
enum GResolverError	# An error code used with <code class="literal">G_RESOLVER_ERROR</a> in a <span class="type">GError</span></a> returnedfrom a <span class="type">GResolver</span></a> routine.
	G_RESOLVER_ERROR_NOT_FOUND	# the requested name/address/service was not    found
	G_RESOLVER_ERROR_TEMPORARY_FAILURE	# the requested information could not    be looked up due to a network error or similar problem
	G_RESOLVER_ERROR_INTERNAL	# unknown error
enum GDBusPropertyInfoFlags	# Flags describing the access control of a D-Bus property.
	G_DBUS_PROPERTY_INFO_FLAGS_NONE	# No flags set.
	G_DBUS_PROPERTY_INFO_FLAGS_READABLE	# Property is readable.
	G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE	# Property is writable.
enum GDBusError	# Error codes for the <code class="literal">G_DBUS_ERROR</a> error domain.
	G_DBUS_ERROR_FAILED	# A generic error; "something went wrong" - see the error message formore.
	G_DBUS_ERROR_NO_MEMORY	# There was not enough memory to complete an operation.
	G_DBUS_ERROR_SERVICE_UNKNOWN	# The bus doesn't know how to launch a service to supply the bus nameyou wanted.
	G_DBUS_ERROR_NAME_HAS_NO_OWNER	# The bus name you referenced doesn't exist (i.e. no application ownsit).
	G_DBUS_ERROR_NO_REPLY	# No reply to a message expecting one, usually means a timeout occurred.
	G_DBUS_ERROR_IO_ERROR	# Something went wrong reading or writing to a socket, for example.
	G_DBUS_ERROR_BAD_ADDRESS	# A D-Bus bus address was malformed.
	G_DBUS_ERROR_NOT_SUPPORTED	# Requested operation isn't supported (like ENOSYS on UNIX).
	G_DBUS_ERROR_LIMITS_EXCEEDED	# Some limited resource is exhausted.
	G_DBUS_ERROR_ACCESS_DENIED	# Security restrictions don't allow doing what you're trying to do.
	G_DBUS_ERROR_AUTH_FAILED	# Authentication didn't work.
	G_DBUS_ERROR_NO_SERVER	# Unable to connect to server (probably caused by ECONNREFUSED on asocket).
	G_DBUS_ERROR_TIMEOUT	# G_DBUS_ERROR_NO_REPLY is used for message reply timeouts. Warning:this is confusingly-named given that <code class="literal">G_DBUS_ERROR_TIMED_OUT alsoexists. We can't fix it for compatibility reasons so just becareful.
	G_DBUS_ERROR_NO_NETWORK	# No network access (probably ENETUNREACH on a socket).
	G_DBUS_ERROR_ADDRESS_IN_USE	# Can't bind a socket since its address is in use (i.e. EADDRINUSE).
	G_DBUS_ERROR_DISCONNECTED	# The connection is disconnected and you're trying to use it.
	G_DBUS_ERROR_INVALID_ARGS	# Invalid arguments passed to a method call.
	G_DBUS_ERROR_FILE_NOT_FOUND	# Missing file.
	G_DBUS_ERROR_FILE_EXISTS	# Existing file and the operation you're using does not silently overwrite.
	G_DBUS_ERROR_UNKNOWN_METHOD	# Method name you invoked isn't known by the object you invoked it on.
	G_DBUS_ERROR_TIMED_OUT	# G_DBUS_ERROR_TIMEOUT also exists. Wecan't fix it for compatibility reasons so just be careful.
	G_DBUS_ERROR_MATCH_RULE_NOT_FOUND	# Tried to remove or modify a match rule that didn't exist.
	G_DBUS_ERROR_MATCH_RULE_INVALID	# The match rule isn't syntactically valid.
	G_DBUS_ERROR_SPAWN_EXEC_FAILED	# While starting a new process, the exec() call failed.
	G_DBUS_ERROR_SPAWN_FORK_FAILED	# While starting a new process, the fork() call failed.
	G_DBUS_ERROR_SPAWN_CHILD_EXITED	# While starting a new process, the child exited with a status code.
	G_DBUS_ERROR_SPAWN_CHILD_SIGNALED	# While starting a new process, the child exited on a signal.
	G_DBUS_ERROR_SPAWN_FAILED	# While starting a new process, something went wrong.
	G_DBUS_ERROR_SPAWN_SETUP_FAILED	# We failed to setup the environment correctly.
	G_DBUS_ERROR_SPAWN_CONFIG_INVALID	# We failed to setup the config parser correctly.
	G_DBUS_ERROR_SPAWN_SERVICE_INVALID	# Bus name was not valid.
	G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND	# Service file not found in system-services directory.
	G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID	# Permissions are incorrect on the setuid helper.
	G_DBUS_ERROR_SPAWN_FILE_INVALID	# Service file invalid (Name, User or Exec missing).
	G_DBUS_ERROR_SPAWN_NO_MEMORY	# Tried to get a UNIX process ID and it wasn't available.
	G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN	# Tried to get a UNIX process ID and it wasn't available.
	G_DBUS_ERROR_INVALID_SIGNATURE	# A type signature is not valid.
	G_DBUS_ERROR_INVALID_FILE_CONTENT	# A file contains invalid syntax or is otherwise broken.
	G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN	# Asked for SELinux security context and it wasn't available.
	G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN	# Asked for ADT audit data and it wasn't available.
	G_DBUS_ERROR_OBJECT_PATH_IN_USE	# There's already an object with the requested object path.
	G_DBUS_ERROR_UNKNOWN_OBJECT	# Object you invoked a method on isn't known. Since 2.42
	G_DBUS_ERROR_UNKNOWN_INTERFACE	# Interface you invoked a method on isn't known by the object. Since 2.42
	G_DBUS_ERROR_UNKNOWN_PROPERTY	# Property you tried to access isn't known by the object. Since 2.42
	G_DBUS_ERROR_PROPERTY_READ_ONLY	# Property you tried to set is read-only. Since 2.42
enum GDBusMessageType	# Message types used in <span class="type">GDBusMessage</span></a>.
	G_DBUS_MESSAGE_TYPE_INVALID	# Message is of invalid type.
	G_DBUS_MESSAGE_TYPE_METHOD_CALL	# Method call.
	G_DBUS_MESSAGE_TYPE_METHOD_RETURN	# Method reply.
	G_DBUS_MESSAGE_TYPE_ERROR	# Error reply.
	G_DBUS_MESSAGE_TYPE_SIGNAL	# Signal emission.
enum GDBusMessageFlags	# Message flags used in <span class="type">GDBusMessage</span></a>.
	G_DBUS_MESSAGE_FLAGS_NONE	# No flags set.
	G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED	# A reply is not expected.
	G_DBUS_MESSAGE_FLAGS_NO_AUTO_START	# The bus must not launch anowner for the destination name in response to this message.
	G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION	# If set on a methodcall, this flag means that the caller is prepared to wait for interactiveauthorization. Since 2.46.
enum GDBusMessageHeaderField	# Header fields used in <span class="type">GDBusMessage</span></a>.
	G_DBUS_MESSAGE_HEADER_FIELD_INVALID	# Not a valid header field.
	G_DBUS_MESSAGE_HEADER_FIELD_PATH	# The object path.
	G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE	# The interface name.
	G_DBUS_MESSAGE_HEADER_FIELD_MEMBER	# The method or signal name.
	G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME	# The name of the error that occurred.
	G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL	# The serial number the message is a reply to.
	G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION	# The name the message is intended for.
	G_DBUS_MESSAGE_HEADER_FIELD_SENDER	# Unique name of the sender of the message (filled in by the bus).
	G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE	# The signature of the message body.
	G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS	# The number of UNIX file descriptors that accompany the message.
enum GDBusMessageByteOrder	# Enumeration used to describe the byte order of a D-Bus message.
	G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN	# The byte order is big endian.
	G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN	# The byte order is little endian.
enum GBusType	# An enumeration for well-known message buses.
	G_BUS_TYPE_STARTER	# An alias for the message bus that activated the process, if any.
	G_BUS_TYPE_NONE	# Not a message bus.
	G_BUS_TYPE_SYSTEM	# The system-wide message bus.
	G_BUS_TYPE_SESSION	# The login session message bus.
enum GDBusConnectionFlags	# Flags used when creating a new <span class="type">GDBusConnection</span></a>.
	G_DBUS_CONNECTION_FLAGS_NONE	# No flags set.
	G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT	# Perform authentication against server.
	G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER	# Perform authentication against client.
	G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS	# Whenauthenticating as a server, allow the anonymous authenticationmethod.
	G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION	# Pass this flag if connecting to a peer that is amessage bus. This means that the Hello() method will be invoked as part of the connection setup.
	G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING	# If set, processing of D-Bus messages isdelayed until g_dbus_connection_start_message_processing() is called.
enum GDBusCapabilityFlags	# Capabilities negotiated with the remote peer.
	G_DBUS_CAPABILITY_FLAGS_NONE	# No flags set.
	G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING	# The connectionsupports exchanging UNIX file descriptors with the remote peer.
enum GDBusCallFlags	# Flags used in g_dbus_connection_call()</a> and similar APIs.
	G_DBUS_CALL_FLAGS_NONE	# No flags set.
	G_DBUS_CALL_FLAGS_NO_AUTO_START	# The bus must not launchan owner for the destination name in response to this methodinvocation.
	G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION	# the caller is prepared towait for interactive authorization. Since 2.46.
enum GDBusSignalFlags	# Flags used when subscribing to signals via g_dbus_connection_signal_subscribe()</a>.
	G_DBUS_SIGNAL_FLAGS_NONE	# No flags set.
	G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE	# Don't actually send the AddMatchD-Bus call for this signal subscription.  This gives you more controlover which match rules you add (but you must add them manually).
	G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE	# Match first arguments thatcontain a bus or interface name with the given namespace.
	G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH	# Match first arguments thatcontain an object path that is either equivalent to the given path,or one of the paths is a subpath of the other.
enum GDBusSendMessageFlags	# Flags used when sending <span class="type">GDBusMessages</span></a> on a <span class="type">GDBusConnection</span></a>.
	G_DBUS_SEND_MESSAGE_FLAGS_NONE	# No flags set.
	G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL	# Do not automaticallyassign a serial number from the GDBusConnection object whensending a message.
enum GDBusSubtreeFlags	# Flags passed to g_dbus_connection_register_subtree()</a>.
	G_DBUS_SUBTREE_FLAGS_NONE	# No flags set.
	G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES	# Method calls to objects not in the enumerated range                                                      will still be dispatched. This is useful if you want                                                      to dynamically spawn objects in the subtree.
enum GDBusServerFlags	# Flags used when creating a <span class="type">GDBusServer</span></a>.
	G_DBUS_SERVER_FLAGS_NONE	# No flags set.
	G_DBUS_SERVER_FLAGS_RUN_IN_THREAD	# All “new-connection”signals will run in separated dedicated threads (see signal fordetails).
	G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS	# Allow the anonymousauthentication method.
enum GBusNameOwnerFlags	# Flags used in g_bus_own_name()</a>.
	G_BUS_NAME_OWNER_FLAGS_NONE	# No flags set.
	G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT	# Allow another message bus connection to claim the name.
	G_BUS_NAME_OWNER_FLAGS_REPLACE	# If another message bus connection owns the name and havespecified G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT, then take the name from the other connection.
enum GBusNameWatcherFlags	# Flags used in g_bus_watch_name()</a>.
	G_BUS_NAME_WATCHER_FLAGS_NONE	# No flags set.
	G_BUS_NAME_WATCHER_FLAGS_AUTO_START	# If no-one owns the name whenbeginning to watch the name, ask the bus to launch an owner for thename.
enum GDBusInterfaceSkeletonFlags	# Flags describing the behavior of a <span class="type">GDBusInterfaceSkeleton</span></a> instance.
	G_DBUS_INTERFACE_SKELETON_FLAGS_NONE	# No flags set.
	G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD	# Each method invocation is handled in  a thread dedicated to the invocation. This means that the method implementation can use blocking IO  without blocking any other part of the process. It also means that the method implementation must  use locking to access data structures used by other threads.
enum GDBusProxyFlags	# Flags used when constructing an instance of a <span class="type">GDBusProxy</span></a> derived class.
	G_DBUS_PROXY_FLAGS_NONE	# No flags set.
	G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES	# Don't load properties.
	G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS	# Don't connect to signals on the remote object.
	G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START	# If the proxy is for a well-known name,do not ask the bus to launch an owner during proxy initialization or a method call.This flag is only meaningful in proxies for well-known names.
	G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES	# PropertiesChanged D-Bus signal and the property will not cause emission of the “g-properties-changed” signal. When the value is received the “g-properties-changed” signal is emitted for the property along with the retrieved value. Since 2.32.
	G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION	# G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START is not also specified.
enum GDBusObjectManagerClientFlags	# Flags used when constructing a <span class="type">GDBusObjectManagerClient</span></a>.
	G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE	# No flags set.
	G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START	# If not set and the  manager is for a well-known name, then request the bus to launch  an owner for the name if no-one owns the name. This flag can only  be used in managers for well-known names.
enum GSettingsBindFlags	# Flags used when creating a binding. These flags determine in whichdirection the binding works. The default is to synchronize in bothdirections.
	G_SETTINGS_BIND_DEFAULT	# G_SETTINGS_BIND_GET|G_SETTINGS_BIND_SET
	G_SETTINGS_BIND_GET	# Update the GObject property when the setting changes.    It is an error to use this flag if the property is not writable.
	G_SETTINGS_BIND_SET	# Update the setting when the GObject property changes.    It is an error to use this flag if the property is not readable.
	G_SETTINGS_BIND_NO_SENSITIVITY	# Do not try to bind a "sensitivity" property to the writability of the setting
	G_SETTINGS_BIND_GET_NO_CHANGES	# When set in addition to G_SETTINGS_BIND_GET, set the GObject property    value initially from the setting, but do not listen for changes of the setting
	G_SETTINGS_BIND_INVERT_BOOLEAN	# When passed to g_settings_bind(), uses a pair of mapping functions that invert    the boolean value when mapping between the setting and the property.  The setting and property must both    be booleans.  You cannot pass this flag to g_settings_bind_with_mapping().
enum GResourceFlags	# GResourceFlags give information about a particular file inside a resourcebundle.
	G_RESOURCE_FLAGS_NONE	# No flags set.
	G_RESOURCE_FLAGS_COMPRESSED	# The file is compressed.
enum GResourceLookupFlags	# GResourceLookupFlags determine how resource path lookups are handled.
	G_RESOURCE_LOOKUP_FLAGS_NONE	# No flags set.
enum GResourceError	# An error code used with <code class="literal">G_RESOURCE_ERROR</a> in a <span class="type">GError</span></a> returnedfrom a <span class="type">GResource</span></a> routine.
	G_RESOURCE_ERROR_NOT_FOUND	# no file was found at the requested path
	G_RESOURCE_ERROR_INTERNAL	# unknown error
enum GWin32RegistryValueType	# </a>G_WIN32_REGISTRY_VALUE_NONE
	G_WIN32_REGISTRY_VALUE_BINARY<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_UINT32LE<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_UINT32BE<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_UINT32<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_UINT32<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_EXPAND_STR<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_LINK<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_MULTI_STR<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_UINT64LE<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_UINT64<td> <td> </tr><tr>	G_WIN32_REGISTRY_VALUE_STR<td> <td> </tr></tbody></table></div></div></div><hr>enum GWin32RegistryKeyWatcherFlags	# </a>G_WIN32_REGISTRY_WATCH_NAME
	G_WIN32_REGISTRY_WATCH_ATTRIBUTES<td> <td> </tr><tr>	G_WIN32_REGISTRY_WATCH_VALUES<td> <td> </tr><tr>	G_WIN32_REGISTRY_WATCH_SECURITY<td> <td> </tr></tbody></table></div></div></div></div></div><div class="footer"><hr>Generated by GTK-Doc V1.25.1</div></body></html>enum GApplicationFlags	# Flags used to define the behaviour of a <span class="type">GApplication</span></a>.
	G_APPLICATION_FLAGS_NONE	# Default
	G_APPLICATION_IS_SERVICE	# Run as a service. In this mode, registration     fails if the service is already running, and the application     will initially wait up to 10 seconds for an initial activation     message to arrive.
	G_APPLICATION_IS_LAUNCHER	# Don't try to become the primary instance.
	G_APPLICATION_HANDLES_OPEN	# G_APPLICATION_HANDLES_COMMAND_LINE is given.    See g_application_run() for details.
	G_APPLICATION_HANDLES_COMMAND_LINE	# This application handles command line    arguments (in the primary instance). Note that this flag only affect    the default implementation of local_command_line().    See g_application_run() for details.
	G_APPLICATION_SEND_ENVIRONMENT	# GIT_COMMITTER_NAME environment variable    when editing a git commit message. The environment is available    to the “command-line” signal handler, via    g_application_command_line_getenv().
	G_APPLICATION_NON_UNIQUE	# Make no attempts to do any of the typical    single-instance application negotiation, even if the application    ID is given.  The application neither attempts to become the    owner of the application ID nor does it check if an existing    owner already exists.  Everything occurs in the local process.    Since: 2.30.
	G_APPLICATION_CAN_OVERRIDE_APP_ID	# --gapplication-app-id.    Since: 2.48
enum GNotificationPriority	# Priority levels for <span class="type">GNotifications</span></a>.
	G_NOTIFICATION_PRIORITY_NORMAL	# the default priority, to be used for the  majority of notifications (for example email messages, software updates,  completed download/sync operations)
	G_NOTIFICATION_PRIORITY_LOW	# for notifications that do not require  immediate attention - typically used for contextual background  information, such as contact birthdays or local weather
	G_NOTIFICATION_PRIORITY_HIGH	# for events that require more attention,  usually because responses are time-sensitive (for example chat and SMS  messages or alarms)
	G_NOTIFICATION_PRIORITY_URGENT	# for urgent notifications, or notifications  that require a response in a short space of time (for example phone calls  or emergency warnings)
enum GIOModuleScopeFlags	# Flags for use with g_io_module_scope_new()</a>.
	G_IO_MODULE_SCOPE_NONE	# No module scan flags
	G_IO_MODULE_SCOPE_BLOCK_DUPLICATES	# When using this scope to load or    scan modules, automatically block a modules which has the same base    basename as previously loaded module.
enum GTestDBusFlags	# Flags to define future <span class="type">GTestDBus</span></a> behaviour.
	G_TEST_DBUS_NONE	# No flags.

#.# glib
typedef struct _GMainLoop GMainLoop;
typedef struct _GMainContext GMainContext;
struct GPollFD {
	#if defined (G_OS_WIN32) &amp;&amp;
	GLIB_SIZEOF_VOID_P == 8 #endif #else gintfd;
	#endif gushort events;
	gushort revents;
};

struct GSource {
};

struct GSourceFuncs {
	gboolean (*prepare) (GSource *source, gint *timeout_);
	gboolean (*check) (GSource *source);
	gboolean (*dispatch) (GSource *source, GSourceFunc callback, gpointer user_data);
	void (*finalize) (GSource *source);
	/* Can be NULL */
};

struct GSourceCallbackFuncs {
	void (*ref) (gpointer cb_data);
	void (*unref) (gpointer cb_data);
	void (*get) (gpointer cb_data, GSource *source, GSourceFunc *func, gpointer *data);
};

typedef struct {
} GThread;

struct GRecMutex {
};

struct GRWLock {
};

struct GCond {
};

struct GPrivate {
};

struct GOnce {
	volatile GOnceStatus status;
	volatile gpointer retval;
};

struct GThreadPool {
	GFunc func;
	gpointer user_data;
	gboolean exclusive;
};

typedef struct _GAsyncQueue GAsyncQueue;
typedef struct _GModule GModule;
struct GMemVTable {
	gpointer (*malloc) (gsize n_bytes);
	gpointer (*realloc) (gpointer mem, gsize n_bytes);
	void (*free) (gpointer mem);
	/* optional;
	set to NULL if not used ! */
	gpointer (*calloc) (gsize n_blocks, gsize n_block_bytes);
	gpointer (*try_malloc) (gsize n_bytes);
	gpointer (*try_realloc) (gpointer mem, gsize n_bytes);
};

struct GIOChannel {
};

struct GIOFuncs {
	GIOStatus (*io_read) (GIOChannel *channel, gchar *buf, gsize count, gsize *bytes_read, GError **err);
	GIOStatus (*io_write) (GIOChannel *channel, const gchar *buf, gsize count, gsize *bytes_written, GError **err);
	GIOStatus (*io_seek) (GIOChannel *channel, gint64 offset, GSeekType type, GError **err);
	GIOStatus (*io_close) (GIOChannel *channel, GError **err);
	GSource* (*io_create_watch) (GIOChannel *channel, GIOCondition condition);
	void (*io_free) (GIOChannel *channel);
	GIOStatus (*io_set_flags) (GIOChannel *channel, GIOFlags flags, GError **err);
	GIOFlags (*io_get_flags) (GIOChannel *channel);
};

struct GError {
	GQuark domain;
	gint code;
	gchar *message;
};

struct GLogField {
	const gchar *key;
	gconstpointer value;
	gssize length;
};

typedef struct _GIConv GIConv;
typedef struct _GChecksum GChecksum;
typedef struct _GHmac GHmac;
struct GTimeVal {
	glong tv_sec;
	glong tv_usec;
};

struct GDate {
	guint julian_days : 32;
	/* julian days representation - we use a * bitfield hoping that 64 bit platforms * will pack this whole struct in one big * int */
	guint julian : 1;
	/* julian is valid */
	guint dmy : 1;
	/* dmy is valid */
	/* DMY representation */
	guint day : 6;
	guint month : 4;
	guint year : 16;
};

typedef struct _GTimeZone GTimeZone;
typedef struct _GDateTime GDateTime;
typedef struct _GRand GRand;
struct GHookList {
	gulong seq_id;
	guint hook_size : 16;
	guint is_setup : 1;
	GHook *hooks;
	gpointer dummy3;
	GHookFinalizeFunc finalize_hook;
	gpointer dummy[2];
};

struct GHook {
	gpointer data;
	GHook*next;
	GHook*prev;
	guint ref_count;
	gulong hook_id;
	guint flags;
	gpointer func;
	GDestroyNotify destroy;
};

struct GDebugKey {
	const gchar *key;
	guint value;
};

struct GScanner {
	/* unused fields */
	gpointeruser_data;
	guintmax_parse_errors;
	/* g_scanner_error() increments this field */
	guintparse_errors;
	/* name of input stream, featured by the default message handler */
	const gchar*input_name;
	/* quarked data */
	GData*qdata;
	/* link into the scanner configuration */
	GScannerConfig *config;
	/* fields filled in after g_scanner_get_next_token() */
	GTokenTypetoken;
	GTokenValuevalue;
	guintline;
	guintposition;
	/* fields filled in after g_scanner_peek_next_token() */
	GTokenTypenext_token;
	GTokenValuenext_value;
	guintnext_line;
	guintnext_position;
	/* handler function for _warn and _error */
	GScannerMsgFunc msg_handler;
};

struct GScannerConfig {
	/* Character sets */
	gchar*cset_skip_characters;/* default: " tn" */
	gchar*cset_identifier_first;
	gchar*cset_identifier_nth;
	gchar*cpair_comment_single;/* default: "#n" */
	/* Should symbol lookup work case sensitive? */
	guintcase_sensitive : 1;
	/* Boolean values to be adjusted "on the fly" * to configure scanning behaviour. */
	guintskip_comment_multi : 1;/* C like comment */
	guintskip_comment_single : 1; /* single line comment */
	guintscan_comment_multi : 1;/* scan multi line comments? */
	guintscan_identifier : 1;
	guintscan_identifier_1char : 1;
	guintscan_identifier_NULL : 1;
	guintscan_symbols : 1;
	guintscan_binary : 1;
	guintscan_octal : 1;
	guintscan_float : 1;
	guintscan_hex : 1;/* '0x0ff0' */
	guintscan_hex_dollar : 1;/* '$0ff0' */
	guintscan_string_sq : 1;/* string: 'anything' */
	guintscan_string_dq : 1;/* string: "\-escapes!n" */
	guintnumbers_2_int : 1;/* bin, octal, hex =&gt;
	int */
	guintint_2_float : 1;/* int =&gt;
	G_TOKEN_FLOAT? */
	guintidentifier_2_string : 1;
	guintchar_2_token : 1;/* return G_TOKEN_CHAR? */
	guintsymbol_2_token : 1;
	guintscope_0_fallback : 1;/* try scope 0 on lookups? */
	guintstore_int64 : 1;
	/* use value.v_int64 rather than v_int */
};

typedef struct _GTimer GTimer;
typedef struct _GDir GDir;
typedef struct _GMappedFile GMappedFile;
typedef struct _GOptionContext GOptionContext;
struct GOptionEntry {
	const gchar *long_name;
	gchar short_name;
	gint flags;
	GOptionArg arg;
	gpointer arg_data;
	const gchar *description;
	const gchar *arg_description;
};

typedef struct _GOptionGroup GOptionGroup;
typedef struct _GPatternSpec GPatternSpec;
typedef struct _GRegex GRegex;
typedef struct _GMatchInfo GMatchInfo;
typedef struct _GMarkupParseContext GMarkupParseContext;
struct GMarkupParser {
	/* Called for open tags &lt;foo bar="baz"&gt;
	*/
	void (*start_element) (GMarkupParseContext *context, const gchar *element_name, const gchar **attribute_names, const gchar **attribute_values, gpointer user_data, GError **error);
	/* Called for close tags &lt;/foo&gt;
	*/
	void (*end_element) (GMarkupParseContext *context, const gchar *element_name, gpointer user_data, GError **error);
	/* Called for character data */
	/* text is not nul-terminated */
	void (*text) (GMarkupParseContext *context, const gchar *text, gsize text_len, gpointer user_data, GError **error);
	/* Called for strings that should be re-saved verbatim in this same * position, but are not otherwise interpretable. At the moment * this includes comments and processing instructions. */
	/* text is not nul-terminated. */
	void (*passthrough) (GMarkupParseContext *context, const gchar *passthrough_text, gsize text_len, gpointer user_data, GError **error);
	/* Called on error, including one set by other * methods in the vtable. The GError should not be freed. */
	void (*error) (GMarkupParseContext *context, GError *error, gpointer user_data);
};

typedef struct _GKeyFile GKeyFile;
typedef struct _GBookmarkFile GBookmarkFile;
struct GList {
	gpointer data;
	GList *next;
	GList *prev;
};

struct GSList {
	gpointer data;
	GSList *next;
};

struct GQueue {
	GList *head;
	GList *tail;
	guint length;
};

typedef struct _GSequence GSequence;
struct GTrashStack {
	GTrashStack *next;
};

typedef struct _GHashTable GHashTable;
struct GHashTableIter {
};

struct GString {
	gchar *str;
	gsize len;
	gsize allocated_len;
};

typedef struct _GStringChunk GStringChunk;
struct GArray {
	gchar *data;
	guint len;
};

struct GPtrArray {
	gpointer *pdata;
	guint len;
};

struct GByteArray {
	guint8 *data;
	guint len;
};

typedef struct _GBytes GBytes;
typedef struct _GTree GTree;
struct GNode {
	gpointer data;
	GNode *next;
	GNode *prev;
	GNode *parent;
	GNode *children;
};

typedef struct _GData GData;
typedef struct _GVariantType GVariantType;
typedef struct _GVariant GVariant;
struct GVariantIter {
};

struct GVariantBuilder {
};

struct GVariantDict {
};

typedef struct _GStaticMutex GStaticMutex;
struct GStaticRecMutex {
};

struct GStaticRWLock {
};

struct GStaticPrivate {
};

typedef struct _GCache GCache;
typedef struct _GRelation GRelation;
struct GTuples {
	guint len;
};

struct GCompletion {
	GList* items;
	GCompletionFunc func;
	gchar* prefix;
	GList* cache;
	GCompletionStrncmpFunc strncmp_func;
};

union GFloatIEEE754
union GDoubleIEEE754
	gdouble v_double;
union GMutex
union GTokenValue
	gpointer v_symbol;
	gchar *v_identifier;
	gulong v_binary;
	gulong v_octal;
	gulong v_int;
	guint64 v_int64;
	gdouble v_float;
	gulong v_hex;
	gchar *v_string;
	gchar *v_comment;
	guchar v_char;
	guint v_error;
typedef gint gboolean;	# A standard boolean type.Variables of this type should only contain the value<code class="literal">TRUE or <code class="literal">FALSE.
typedef void* gpointer;	# An untyped pointer.gpointer looks better and is easier to use than void*.
typedef const void *gconstpointer;	# An untyped pointer to constant data.The data pointed to should not be changed.
typedef char gchar;	# Corresponds to the standard C char type.
typedef unsigned char guchar;	# Corresponds to the standard C unsigned char type.
typedef short gshort;	# Corresponds to the standard C short type.Values of this type can range from G_MINSHORT to G_MAXSHORT.
typedef unsigned short gushort;	# Corresponds to the standard C unsigned short type.Values of this type can range from 0 to G_MAXUSHORT.
typedef long glong;	# Corresponds to the standard C long type.Values of this type can range from G_MINLONG to G_MAXLONG.
typedef unsigned long gulong;	# Corresponds to the standard C unsigned long type.Values of this type can range from 0 to G_MAXULONG.
typedef signed char gint8;	# A signed integer guaranteed to be 8 bits on all platforms.Values of this type can range from G_MININT8 (= -128) toG_MAXINT8 (= 127).
typedef unsigned char guint8;	# An unsigned integer guaranteed to be 8 bits on all platforms.Values of this type can range from 0 to G_MAXUINT8 (= 255).
typedef signed short gint16;	# A signed integer guaranteed to be 16 bits on all platforms.Values of this type can range from G_MININT16 (= -32,768) toG_MAXINT16 (= 32,767).
typedef unsigned short guint16;	# An unsigned integer guaranteed to be 16 bits on all platforms.Values of this type can range from 0 to G_MAXUINT16 (= 65,535).
typedef signed int gint32;	# A signed integer guaranteed to be 32 bits on all platforms.Values of this type can range from G_MININT32 (= -2,147,483,648)to G_MAXINT32 (= 2,147,483,647).
typedef unsigned int guint32;	# An unsigned integer guaranteed to be 32 bits on all platforms.Values of this type can range from 0 to G_MAXUINT32 (= 4,294,967,295).
typedef signed long gint64;	# A signed integer guaranteed to be 64 bits on all platforms.Values of this type can range from G_MININT64(= -9,223,372,036,854,775,808) to G_MAXINT64(= 9,223,372,036,854,775,807).
typedef unsigned long guint64;	# An unsigned integer guaranteed to be 64-bits on all platforms.Values of this type can range from 0 to G_MAXUINT64(= 18,446,744,073,709,551,615).
typedef float gfloat;	# Corresponds to the standard C float type.Values of this type can range from -G_MAXFLOAT to G_MAXFLOAT.
typedef double gdouble;	# Corresponds to the standard C double type.Values of this type can range from -G_MAXDOUBLE to G_MAXDOUBLE.
typedef unsigned long gsize;	# An unsigned integer type of the result of the sizeof operator,corresponding to the size_t type defined in C99.This type is wide enough to hold the numeric value of a pointer,so it is usually 32 bit wide on a 32-bit platform and 64 bit wideon a 64-bit platform. Values of this type can range from 0 toG_MAXSIZE.
typedef signed long gssize;	# A signed variant of gsize, corresponding to thessize_t defined on most platforms.Values of this type can range from G_MINSSIZEto G_MAXSSIZE.
typedef gint64 goffset;	# A signed integer type that is used for file offsets,corresponding to the C99 type off64_t.Values of this type can range from G_MINOFFSET toG_MAXOFFSET.
typedef signed long gintptr;	# Corresponds to the C99 type intptr_t,a signed integer type that can hold any pointer.
typedef unsigned long guintptr;	# Corresponds to the C99 type uintptr_t,an unsigned integer type that can hold any pointer.
typedef int GPid;	# A type which is used to hold a process identification.
typedef void GMutexLocker;	# Opaque type. See g_mutex_locker_new() for details.
typedef gchar** GStrv;	# A typedef alias for gchar**. This is mostly useful when used together withg_auto().
typedef guint32 gunichar;	# A type which can hold any UTF-32 or UCS-4 character code,also known as a Unicode code point.
typedef guint16 gunichar2;	# A type which can hold any UTF-16 codepoint&lt;footnote id="utf16_surrogate_pairs"&gt;UTF-16 also has so called&lt;firstterm&gt;surrogate pairs&lt;/firstterm&gt; to encode characters beyondthe BMP as pairs of 16bit numbers. Surrogate pairs cannot be storedin a single gunichar2 field, but all GLib functions accepting gunichar2arrays will correctly interpret surrogate pairs.&lt;/footnote&gt;.
typedef gint32 GTime;	# Simply a replacement for time_t. It has been deprecatedsince it is not equivalent to time_t on 64-bit platformswith a 64-bit time_t. Unrelated to GTimer.
typedef guint8 GDateDay; /* day of the month */	# Integer representing a day of the month; between 1 and 31.G_DATE_BAD_DAY represents an invalid day of the month.
typedef guint16 GDateYear;	# Integer representing a year; G_DATE_BAD_YEAR is the invalidvalue. The year must be 1 or higher; negative (BC) years are notallowed. The year is represented with four digits.
typedef gint64 GTimeSpan;	# A value representing an interval of time, in microseconds.
typedef struct _stat32 GStatBuf;	# A type corresponding to the appropriate struct type for the stat()system call, depending on the platform and/or compiler being used.
typedef struct GTestCase GTestCase;	# An opaque structure representing a test case.
typedef struct GTestSuite GTestSuite;	# An opaque structure representing a test suite.
typedef struct _GSequenceNode GSequenceIter;	# The GSequenceIter struct is an opaque data type representing aniterator pointing into a GSequence.
typedef guint32 GQuark;	# A GQuark is a non-zero integer which uniquely identifies aparticular string. A GQuark value of zero is associated to <code class="literal">NULL.
#define GLIB_CHECK_VERSION(major,minor,micro)	# Checks the version of the GLib library that is being compiledagainst. See glib_check_version() for a runtime check.
	major		# the major version to check for
	minor		# the minor version to check for
	micro		# the micro version to check for
	return:		#  TRUE if the version of the GLib header filesis the same as or newer than the passed-in version. 
#define GLIB_MAJOR_VERSION 2	# The major version number of the GLib library.
#define GLIB_MINOR_VERSION 53	# The minor version number of the GLib library.
#define GLIB_MICRO_VERSION 3	# The micro version number of the GLib library.
#define GLIB_VERSION_2_26 (G_ENCODE_VERSION (2, 26))	# A macro that evaluates to the 2.26 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_28 (G_ENCODE_VERSION (2, 28))	# A macro that evaluates to the 2.28 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_30 (G_ENCODE_VERSION (2, 30))	# A macro that evaluates to the 2.30 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_32 (G_ENCODE_VERSION (2, 32))	# A macro that evaluates to the 2.32 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_34 (G_ENCODE_VERSION (2, 34))	# A macro that evaluates to the 2.34 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_36 (G_ENCODE_VERSION (2, 36))	# A macro that evaluates to the 2.36 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_38 (G_ENCODE_VERSION (2, 38))	# A macro that evaluates to the 2.38 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_40 (G_ENCODE_VERSION (2, 40))	# A macro that evaluates to the 2.40 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_42 (G_ENCODE_VERSION (2, 42))	# A macro that evaluates to the 2.42 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_44 (G_ENCODE_VERSION (2, 44))	# A macro that evaluates to the 2.44 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_46 (G_ENCODE_VERSION (2, 46))	# A macro that evaluates to the 2.46 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_48 (G_ENCODE_VERSION (2, 48))	# A macro that evaluates to the 2.48 version of GLib, in a formatthat can be used by the C pre-processor.
#define GLIB_VERSION_2_50 (G_ENCODE_VERSION (2, 50))	# A macro that evaluates to the 2.50 version of GLib, in a formatthat can be used by the C pre-processor.
# define GLIB_VERSION_MIN_REQUIRED (GLIB_VERSION_CUR_STABLE)	# A macro that should be defined by the user prior to includingthe glib.h header.The definition should be one of the predefined GLib versionmacros: GLIB_VERSION_2_26, GLIB_VERSION_2_28,...
# define GLIB_VERSION_MAX_ALLOWED (GLIB_VERSION_CUR_STABLE)	# A macro that should be defined by the user prior to includingthe glib.h header.The definition should be one of the predefined GLib versionmacros: GLIB_VERSION_2_26, GLIB_VERSION_2_28,...
#ifdef GLIB_DISABLE_DEPRECATION_WARNINGS	# A macro that should be defined before including the glib.h header.If it is defined, no compiler warnings will be produced for usesof deprecated GLib APIs.
#define G_GINT64_CONSTANT(val) (val##L)	# This macro is used to insert 64-bit integer literalsinto the source code.
	val		# a literal integer value, e.g. 0x1d636b02300a7aa7
#define G_GUINT64_CONSTANT(val) (val##UL)	# This macro is used to insert 64-bit unsigned integerliterals into the source code.
	val		# a literal integer value, e.g. 0x1d636b02300a7aa7U
#define G_GOFFSET_CONSTANT(val) G_GINT64_CONSTANT(val)	# This macro is used to insert goffset 64-bit integer literalsinto the source code.
	val		# a literal integer value, e.g. 0x1d636b02300a7aa7
#define G_MININT INT_MIN	# The minimum value which can be held in a gint.
#define G_MAXINT INT_MAX	# The maximum value which can be held in a gint.
#define G_MAXUINT UINT_MAX	# The maximum value which can be held in a guint.
#define G_MINSHORT SHRT_MIN	# The minimum value which can be held in a gshort.
#define G_MAXSHORT SHRT_MAX	# The maximum value which can be held in a gshort.
#define G_MAXUSHORT USHRT_MAX	# The maximum value which can be held in a gushort.
#define G_MINLONG LONG_MIN	# The minimum value which can be held in a glong.
#define G_MAXLONG LONG_MAX	# The maximum value which can be held in a glong.
#define G_MAXULONG ULONG_MAX	# The maximum value which can be held in a gulong.
#define G_MININT8 ((gint8) -0x80)	# The minimum value which can be held in a gint8.
#define G_MAXINT8 ((gint8) 0x7f)	# The maximum value which can be held in a gint8.
#define G_MAXUINT8 ((guint8) 0xff)	# The maximum value which can be held in a guint8.
#define G_MININT16 ((gint16) -0x8000)	# The minimum value which can be held in a gint16.
#define G_MAXINT16 ((gint16) 0x7fff)	# The maximum value which can be held in a gint16.
#define G_GINT16_MODIFIER "h"	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type gint16 or guint16. Itis a string literal, but doesn't include the percent-sign, suchthat you can add precision and length modifiers between percent-signand conversion specifier and append a conversion specifier.
#define G_GINT16_FORMAT "hi"	# This is the platform dependent conversion specifier for scanning andprinting values of type gint16. It is a string literal, but doesn'tinclude the percent-sign, such that you can add precision and lengthmodifiers between percent-sign and conversion specifier.
#define G_MAXUINT16 ((guint16) 0xffff)	# The maximum value which can be held in a guint16.
#define G_GUINT16_FORMAT "hu"	# This is the platform dependent conversion specifier for scanningand printing values of type guint16. See also G_GINT16_FORMAT
#define G_MININT32 ((gint32) -0x80000000)	# The minimum value which can be held in a gint32.
#define G_MAXINT32 ((gint32) 0x7fffffff)	# The maximum value which can be held in a gint32.
#define G_GINT32_MODIFIER ""	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type gint32 or guint32. Itis a string literal. See also G_GINT16_MODIFIER.
#define G_GINT32_FORMAT "i"	# This is the platform dependent conversion specifier for scanningand printing values of type gint32. See also G_GINT16_FORMAT.
#define G_MAXUINT32 ((guint32) 0xffffffff)	# The maximum value which can be held in a guint32.
#define G_GUINT32_FORMAT "u"	# This is the platform dependent conversion specifier for scanningand printing values of type guint32. See also G_GINT16_FORMAT.
#define G_MININT64 ((gint64) G_GINT64_CONSTANT(-0x8000000000000000))	# The minimum value which can be held in a gint64.
#define G_MAXINT64 G_GINT64_CONSTANT(0x7fffffffffffffff)	# The maximum value which can be held in a gint64.
#define G_GINT64_MODIFIER "l"	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type gint64 or guint64.It is a string literal.
#define G_GINT64_FORMAT "li"	# This is the platform dependent conversion specifier for scanningand printing values of type gint64. See also G_GINT16_FORMAT.
#define G_MAXUINT64 G_GUINT64_CONSTANT(0xffffffffffffffff)	# The maximum value which can be held in a guint64.
#define G_GUINT64_FORMAT "lu"	# This is the platform dependent conversion specifier for scanningand printing values of type guint64. See also G_GINT16_FORMAT.
#define G_MINFLOAT FLT_MIN	# The minimum positive value which can be held in a gfloat.
#define G_MAXFLOAT FLT_MAX	# The maximum value which can be held in a gfloat.
#define G_MINDOUBLE DBL_MIN	# The minimum positive value which can be held in a gdouble.
#define G_MAXDOUBLE DBL_MAX	# The maximum value which can be held in a gdouble.
#define G_MAXSIZE G_MAXULONG	# The maximum value which can be held in a gsize.
#define G_GSIZE_MODIFIER "l"	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type gsize. Itis a string literal.
#define G_GSIZE_FORMAT "lu"	# This is the platform dependent conversion specifier for scanningand printing values of type gsize. See also G_GINT16_FORMAT.
#define G_MINSSIZE G_MINLONG	# The minimum value which can be held in a gssize.
#define G_MAXSSIZE G_MAXLONG	# The maximum value which can be held in a gssize.
#define G_GSSIZE_MODIFIER "l"	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type gssize. Itis a string literal.
#define G_GSSIZE_FORMAT "li"	# This is the platform dependent conversion specifier for scanningand printing values of type gssize. See also G_GINT16_FORMAT.
#define G_MINOFFSET G_MININT64	# The minimum value which can be held in a goffset.
#define G_MAXOFFSET G_MAXINT64	# The maximum value which can be held in a goffset.
#define G_GOFFSET_MODIFIER G_GINT64_MODIFIER	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type goffset. It is a stringliteral. See also G_GINT64_MODIFIER.
#define G_GOFFSET_FORMAT G_GINT64_FORMAT	# This is the platform dependent conversion specifier for scanningand printing values of type goffset. See also G_GINT64_FORMAT.
#define G_GINTPTR_MODIFIER "l"	# The platform dependent length modifier for conversion specifiersfor scanning and printing values of type gintptr or guintptr.It is a string literal.
#define G_GINTPTR_FORMAT "li"	# This is the platform dependent conversion specifier for scanningand printing values of type gintptr.
#define G_GUINTPTR_FORMAT "lu"	# This is the platform dependent conversion specifierfor scanning and printing values of type guintptr.
#define G_IS_DIR_SEPARATOR(c) ((c) == G_DIR_SEPARATOR || (c) == '/')	# Checks whether a character is a directoryseparator. It returns TRUE for '/' on UNIXmachines and for '' or '/' under Windows.
	c		# a character
#define MIN(a, b) (((a) &lt; (b)) ? (a) : (b))	# Calculates the minimum of a and b.
	a		# a numeric value
	b		# a numeric value
	return:		#  the minimum of aand b. 
#define MAX(a, b) (((a) &gt; (b)) ? (a) : (b))	# Calculates the maximum of a and b.
	a		# a numeric value
	b		# a numeric value
	return:		#  the maximum of aand b. 
#define ABS(a)	 (((a) &lt; 0) ? -(a) : (a))	# Calculates the absolute value of a.The absolute value is simply the number with any negative sign taken away.
	a		# a numeric value
	return:		#  the absolute value of a. 
#define CLAMP(x, low, high) (((x) &gt; (high)) ? (high) : (((x) &lt; (low)) ? (low) : (x)))	# Ensures that x is between the limits set by low and high. If low isgreater than high the result is undefined.
	x		# the value to clamp
	low		# the minimum value allowed
	high		# the maximum value allowed
	return:		#  the value of xclamped to the range between lowand high 
#define G_STRUCT_MEMBER(member_type, struct_p, struct_offset)	# Returns a member of a structure at a given offset, using the given type.
	member_type		# the type of the struct field
	struct_p		# a pointer to a struct
	struct_offset		# the offset of the field from the start of the struct,in bytes
	return:		#  the struct member 
#define G_STRUCT_MEMBER_P(struct_p, struct_offset)	# Returns an untyped pointer to a given offset of a struct.
	struct_p		# a pointer to a struct
	struct_offset		# the offset from the start of the struct, in bytes
	return:		#  an untyped pointer to struct_pplus struct_offsetbytes 
#define G_STRUCT_OFFSET(struct_type, member)	# Returns the offset, in bytes, of a member of a struct.
	struct_type		# a structure type, e.g. GtkWidget
	member		# a field in the structure, e.g. window
	return:		#  the offset of memberfrom the start of struct_type 
#define G_N_ELEMENTS(arr)		(sizeof (arr) / sizeof ((arr)[0]))	# Determines the number of elements in an array. The array must bedeclared so the compiler knows its size at compile-time; thismacro will not work on an array allocated on the heap, only staticarrays or arrays on the stack.
	arr		# the array
#define G_OS_WIN32	# This macro is defined only on Windows. So you can bracketWindows-specific code in "#ifdef G_OS_WIN32".
#define G_OS_UNIX	# This macro is defined only on UNIX. So you can bracketUNIX-specific code in "#ifdef G_OS_UNIX".
#define G_DIR_SEPARATOR '\'	# The directory separator character.This is '/' on UNIX machines and '' under Windows.
#define G_DIR_SEPARATOR_S "\"	# The directory separator as a string.This is "/" on UNIX machines and "" under Windows.
#define G_SEARCHPATH_SEPARATOR ';'	# The search path separator character.This is ':' on UNIX machines and ';' under Windows.
#define G_SEARCHPATH_SEPARATOR_S ";"	# The search path separator as a string.This is ":" on UNIX machines and ";" under Windows.
#define TRUE (!FALSE)	# Defines the TRUE value for the gboolean type.
#define FALSE (0)	# Defines the FALSE value for the gboolean type.
# define NULL (0L)	# Defines the standard NULL pointer.
# define G_MEM_ALIGN GLIB_SIZEOF_VOID_P	# Indicates the number of bytes to which memory will be aligned on thecurrent platform.
#define G_CONST_RETURN	# G_CONST_RETURN has been deprecated since version 2.30 and should not be used in newly-written code.
#define GINT_TO_POINTER(i) ((gpointer) (glong) (i))	# Stuffs an integer into a pointer type.
	i		# integer to stuff into a pointer
#define GPOINTER_TO_INT(p) ((gint) (glong) (p))	# Extracts an integer from a pointer. The integer must havebeen stored in the pointer with GINT_TO_POINTER().
	p		# pointer containing an integer
#define GUINT_TO_POINTER(u) ((gpointer) (gulong) (u))	# Stuffs an unsigned integer into a pointer type.
	u		# unsigned integer to stuff into the pointer
#define GPOINTER_TO_UINT(p) ((guint) (gulong) (p))	# Extracts an unsigned integer from a pointer. The integer must havebeen stored in the pointer with GUINT_TO_POINTER().
	p		# pointer to extract an unsigned integer from
#define GSIZE_TO_POINTER(s) ((gpointer) (gsize) (s))	# Stuffs a gsize into a pointer type.
	s		# gsize to stuff into the pointer
#define GPOINTER_TO_SIZE(p) ((gsize) (p))	# Extracts a gsize from a pointer. The gsize must havebeen stored in the pointer with GSIZE_TO_POINTER().
	p		# pointer to extract a gsize from
#define g_htonl(val)	# Converts a 32-bit integer value from host to network byte order.
	val		# a 32-bit integer value in host byte order
	return:		#  valconverted to network byte order 
#define g_htons(val)	# Converts a 16-bit integer value from host to network byte order.
	val		# a 16-bit integer value in host byte order
	return:		#  valconverted to network byte order 
#define g_ntohl(val)	# Converts a 32-bit integer value from network to host byte order.
	val		# a 32-bit integer value in network byte order
	return:		#  valconverted to host byte order. 
#define g_ntohs(val)	# Converts a 16-bit integer value from network to host byte order.
	val		# a 16-bit integer value in network byte order
	return:		#  valconverted to host byte order 
#define GINT_FROM_BE(val) (GINT_TO_BE (val))	# Converts a gint value from big-endian to host byte order.
	val		# a gint value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GINT_FROM_LE(val) (GINT_TO_LE (val))	# Converts a gint value from little-endian to host byte order.
	val		# a gint value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GINT_TO_BE(val)		((gint) GINT32_TO_BE (val))	# Converts a gint value from host byte order to big-endian.
	val		# a gint value in host byte order
	return:		#  valconverted to big-endian byte order 
#define GINT_TO_LE(val)		((gint) GINT32_TO_LE (val))	# Converts a gint value from host byte order to little-endian.
	val		# a gint value in host byte order
	return:		#  valconverted to little-endian byte order 
#define GUINT_FROM_BE(val) (GUINT_TO_BE (val))	# Converts a guint value from big-endian to host byte order.
	val		# a guint value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT_FROM_LE(val) (GUINT_TO_LE (val))	# Converts a guint value from little-endian to host byte order.
	val		# a guint value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT_TO_BE(val) ((guint) GUINT32_TO_BE (val))	# Converts a guint value from host byte order to big-endian.
	val		# a guint value in host byte order
	return:		#  valconverted to big-endian byte order 
#define GUINT_TO_LE(val) ((guint) GUINT32_TO_LE (val))	# Converts a guint value from host byte order to little-endian.
	val		# a guint value in host byte order
	return:		#  valconverted to little-endian byte order. 
#define GLONG_FROM_BE(val) (GLONG_TO_BE (val))	# Converts a glong value from big-endian to the host byte order.
	val		# a glong value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GLONG_FROM_LE(val) (GLONG_TO_LE (val))	# Converts a glong value from little-endian to host byte order.
	val		# a glong value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GLONG_TO_BE(val) ((glong) GINT64_TO_BE (val))	# Converts a glong value from host byte order to big-endian.
	val		# a glong value in host byte order
	return:		#  valconverted to big-endian byte order 
#define GLONG_TO_LE(val) ((glong) GINT64_TO_LE (val))	# Converts a glong value from host byte order to little-endian.
	val		# a glong value in host byte order
	return:		#  valconverted to little-endian 
#define GULONG_FROM_BE(val) (GULONG_TO_BE (val))	# Converts a gulong value from big-endian to host byte order.
	val		# a gulong value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GULONG_FROM_LE(val) (GULONG_TO_LE (val))	# Converts a gulong value from little-endian to host byte order.
	val		# a gulong value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GULONG_TO_BE(val) ((gulong) GUINT64_TO_BE (val))	# Converts a gulong value from host byte order to big-endian.
	val		# a gulong value in host byte order
	return:		#  valconverted to big-endian 
#define GULONG_TO_LE(val) ((gulong) GUINT64_TO_LE (val))	# Converts a gulong value from host byte order to little-endian.
	val		# a gulong value in host byte order
	return:		#  valconverted to little-endian 
#define GSIZE_FROM_BE(val) (GSIZE_TO_BE (val))	# Converts a gsize value from big-endian to the host byte order.
	val		# a gsize value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GSIZE_FROM_LE(val) (GSIZE_TO_LE (val))	# Converts a gsize value from little-endian to host byte order.
	val		# a gsize value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GSIZE_TO_BE(val) ((gsize) GUINT64_TO_BE (val))	# Converts a gsize value from host byte order to big-endian.
	val		# a gsize value in host byte order
	return:		#  valconverted to big-endian byte order 
#define GSIZE_TO_LE(val) ((gsize) GUINT64_TO_LE (val))	# Converts a gsize value from host byte order to little-endian.
	val		# a gsize value in host byte order
	return:		#  valconverted to little-endian 
#define GSSIZE_FROM_BE(val) (GSSIZE_TO_BE (val))	# Converts a gssize value from big-endian to host byte order.
	val		# a gssize value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GSSIZE_FROM_LE(val) (GSSIZE_TO_LE (val))	# Converts a gssize value from little-endian to host byte order.
	val		# a gssize value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GSSIZE_TO_BE(val) ((gssize) GINT64_TO_BE (val))	# Converts a gssize value from host byte order to big-endian.
	val		# a gssize value in host byte order
	return:		#  valconverted to big-endian 
#define GSSIZE_TO_LE(val) ((gssize) GINT64_TO_LE (val))	# Converts a gssize value from host byte order to little-endian.
	val		# a gssize value in host byte order
	return:		#  valconverted to little-endian 
#define GINT16_FROM_BE(val) (GINT16_TO_BE (val))	# Converts a gint16 value from big-endian to host byte order.
	val		# a gint16 value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GINT16_FROM_LE(val) (GINT16_TO_LE (val))	# Converts a gint16 value from little-endian to host byte order.
	val		# a gint16 value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GINT16_TO_BE(val) ((gint16) GUINT16_SWAP_LE_BE (val))	# Converts a gint16 value from host byte order to big-endian.
	val		# a gint16 value in host byte order
	return:		#  valconverted to big-endian 
#define GINT16_TO_LE(val) ((gint16) (val))	# Converts a gint16 value from host byte order to little-endian.
	val		# a gint16 value in host byte order
	return:		#  valconverted to little-endian 
#define GUINT16_FROM_BE(val) (GUINT16_TO_BE (val))	# Converts a guint16 value from big-endian to host byte order.
	val		# a guint16 value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT16_FROM_LE(val) (GUINT16_TO_LE (val))	# Converts a guint16 value from little-endian to host byte order.
	val		# a guint16 value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT16_TO_BE(val) (GUINT16_SWAP_LE_BE (val))	# Converts a guint16 value from host byte order to big-endian.
	val		# a guint16 value in host byte order
	return:		#  valconverted to big-endian 
#define GUINT16_TO_LE(val) ((guint16) (val))	# Converts a guint16 value from host byte order to little-endian.
	val		# a guint16 value in host byte order
	return:		#  valconverted to little-endian 
#define GINT32_FROM_BE(val) (GINT32_TO_BE (val))	# Converts a gint32 value from big-endian to host byte order.
	val		# a gint32 value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GINT32_FROM_LE(val) (GINT32_TO_LE (val))	# Converts a gint32 value from little-endian to host byte order.
	val		# a gint32 value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GINT32_TO_BE(val) ((gint32) GUINT32_SWAP_LE_BE (val))	# Converts a gint32 value from host byte order to big-endian.
	val		# a gint32 value in host byte order
	return:		#  valconverted to big-endian 
#define GINT32_TO_LE(val) ((gint32) (val))	# Converts a gint32 value from host byte order to little-endian.
	val		# a gint32 value in host byte order
	return:		#  valconverted to little-endian 
#define GUINT32_FROM_BE(val) (GUINT32_TO_BE (val))	# Converts a guint32 value from big-endian to host byte order.
	val		# a guint32 value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT32_FROM_LE(val) (GUINT32_TO_LE (val))	# Converts a guint32 value from little-endian to host byte order.
	val		# a guint32 value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT32_TO_BE(val) (GUINT32_SWAP_LE_BE (val))	# Converts a guint32 value from host byte order to big-endian.
	val		# a guint32 value in host byte order
	return:		#  valconverted to big-endian 
#define GUINT32_TO_LE(val) ((guint32) (val))	# Converts a guint32 value from host byte order to little-endian.
	val		# a guint32 value in host byte order
	return:		#  valconverted to little-endian 
#define GINT64_FROM_BE(val) (GINT64_TO_BE (val))	# Converts a gint64 value from big-endian to host byte order.
	val		# a gint64 value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GINT64_FROM_LE(val) (GINT64_TO_LE (val))	# Converts a gint64 value from little-endian to host byte order.
	val		# a gint64 value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GINT64_TO_BE(val) ((gint64) GUINT64_SWAP_LE_BE (val))	# Converts a gint64 value from host byte order to big-endian.
	val		# a gint64 value in host byte order
	return:		#  valconverted to big-endian 
#define GINT64_TO_LE(val) ((gint64) (val))	# Converts a gint64 value from host byte order to little-endian.
	val		# a gint64 value in host byte order
	return:		#  valconverted to little-endian 
#define GUINT64_FROM_BE(val) (GUINT64_TO_BE (val))	# Converts a guint64 value from big-endian to host byte order.
	val		# a guint64 value in big-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT64_FROM_LE(val) (GUINT64_TO_LE (val))	# Converts a guint64 value from little-endian to host byte order.
	val		# a guint64 value in little-endian byte order
	return:		#  valconverted to host byte order 
#define GUINT64_TO_BE(val) (GUINT64_SWAP_LE_BE (val))	# Converts a guint64 value from host byte order to big-endian.
	val		# a guint64 value in host byte order
	return:		#  valconverted to big-endian 
#define GUINT64_TO_LE(val) ((guint64) (val))	# Converts a guint64 value from host byte order to little-endian.
	val		# a guint64 value in host byte order
	return:		#  valconverted to little-endian 
#define GUINT16_SWAP_BE_PDP(val) (GUINT16_SWAP_LE_BE (val))	# Converts a guint16 value between big-endian and pdp-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint16 value in big-endian or pdp-endian byte order
	return:		#  valconverted to the opposite byte order 
# define GUINT16_SWAP_LE_BE(val) (GUINT16_SWAP_LE_BE_IA32 (val))	# Converts a guint16 value between little-endian and big-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint16 value in little-endian or big-endian byte order
	return:		#  valconverted to the opposite byte order 
#define GUINT16_SWAP_LE_PDP(val) ((guint16) (val))	# Converts a guint16 value between little-endian and pdp-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint16 value in little-endian or pdp-endian byte order
	return:		#  valconverted to the opposite byte order 
#define GUINT32_SWAP_BE_PDP(val)	# Converts a guint32 value between big-endian and pdp-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint32 value in big-endian or pdp-endian byte order
	return:		#  valconverted to the opposite byte order 
# define GUINT32_SWAP_LE_BE(val) ((guint32) __builtin_bswap32 ((gint32) (val)))	# Converts a guint32 value between little-endian and big-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint32 value in little-endian or big-endian byte order
	return:		#  valconverted to the opposite byte order 
#define GUINT32_SWAP_LE_PDP(val)	# Converts a guint32 value between little-endian and pdp-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint32 value in little-endian or pdp-endian byte order
	return:		#  valconverted to the opposite byte order 
# define GUINT64_SWAP_LE_BE(val) ((guint64) __builtin_bswap64 ((gint64) (val)))	# Converts a guint64 value between little-endian and big-endian byte order.The conversion is symmetric so it can be used both ways.
	val		# a guint64 value in little-endian or big-endian byte order
	return:		#  valconverted to the opposite byte order 
#define G_BYTE_ORDER G_LITTLE_ENDIAN	# The host byte order.This can be either G_LITTLE_ENDIAN or G_BIG_ENDIAN (support forG_PDP_ENDIAN may be added in future.)
#define G_LITTLE_ENDIAN 1234	# Specifies one of the possible types of byte order.See G_BYTE_ORDER.
#define G_BIG_ENDIAN 4321	# Specifies one of the possible types of byte order.See G_BYTE_ORDER.
#define G_PDP_ENDIAN 3412		/* unused, need specific PDP check */		# Specifies one of the possible types of byte order(currently unused). See G_BYTE_ORDER.
#define g_uint_checked_add(dest, a, b)	# Performs a checked addition of a and b, storing the result indest.
	dest		# a pointer to the guint destination
	a		# the guint left operand
	b		# the guint right operand
	return:		#  TRUE if there was no overflow 
#define g_uint_checked_mul(dest, a, b)	# Performs a checked multiplication of a and b, storing the result indest.
	dest		# a pointer to the guint destination
	a		# the guint left operand
	b		# the guint right operand
	return:		#  TRUE if there was no overflow 
#define g_uint64_checked_add(dest, a, b)	# Performs a checked addition of a and b, storing the result indest.
	dest		# a pointer to the guint64 destination
	a		# the guint64 left operand
	b		# the guint64 right operand
	return:		#  TRUE if there was no overflow 
#define g_uint64_checked_mul(dest, a, b)	# Performs a checked multiplication of a and b, storing the result indest.
	dest		# a pointer to the guint64 destination
	a		# the guint64 left operand
	b		# the guint64 right operand
	return:		#  TRUE if there was no overflow 
#define g_size_checked_add(dest, a, b)	# Performs a checked addition of a and b, storing the result indest.
	dest		# a pointer to the gsize destination
	a		# the gsize left operand
	b		# the gsize right operand
	return:		#  TRUE if there was no overflow 
#define g_size_checked_mul(dest, a, b)	# Performs a checked multiplication of a and b, storing the result indest.
	dest		# a pointer to the gsize destination
	a		# the gsize left operand
	b		# the gsize right operand
	return:		#  TRUE if there was no overflow 
#define G_IEEE754_FLOAT_BIAS (127)	# The bias by which exponents in single-precision floats are offset.
#define G_IEEE754_DOUBLE_BIAS (1023)	# The bias by which exponents in double-precision floats are offset.
#define G_E 2.7182818284590452353602874713526624977572470937000	# The base of natural logarithms.
#define G_LN2 0.69314718055994530941723212145817656807550013436026	# The natural logarithm of 2.
#define G_LN10 2.3025850929940456840179914546843642076011014886288	# The natural logarithm of 10.
#define G_PI 3.1415926535897932384626433832795028841971693993751	# The value of pi (ratio of circle's circumference to its diameter).
#define G_PI_2 1.5707963267948966192313216916397514420985846996876	# Pi divided by 2.
#define G_PI_4 0.78539816339744830961566084581987572104929234984378	# Pi divided by 4.
#define G_SQRT2 1.4142135623730950488016887242096980785696718753769	# The square root of two.
#define G_LOG_2_BASE_10		(0.30102999566398119521)	# Multiplying the base 2 exponent by this number yields the base 10 exponent.
#define g_auto(TypeName)	# Helper to declare a variable with automatic cleanup.
	TypeName		# a supported variable type
#define g_autoptr(TypeName)	# Helper to declare a pointer variable with automatic cleanup.
	TypeName		# a supported variable type
#define G_DEFINE_AUTOPTR_CLEANUP_FUNC(TypeName, func)	# Defines the appropriate cleanup function for a pointer type.
	TypeName		# a type name to define a g_autoptr() cleanup function for
	func		# the cleanup function
#define G_DEFINE_AUTO_CLEANUP_CLEAR_FUNC(TypeName, func)	# Defines the appropriate cleanup function for a type.
	TypeName		# a type name to define a g_auto() cleanup function for
	func		# the clear function
#define G_DEFINE_AUTO_CLEANUP_FREE_FUNC(TypeName, func, none)	# Defines the appropriate cleanup function for a type.
	TypeName		# a type name to define a g_auto() cleanup function for
	func		# the free function
	none		# the "none" value for the type
#define G_VA_COPY(ap1,ap2)	# Portable way to copy va_list variables.
	ap1		# the va_list variable to place a copy of ap2in
	ap2		# a va_list
#define G_STRINGIFY(macro_or_string) G_STRINGIFY_ARG (macro_or_string)	# Accepts a macro or a string and converts it into a string afterpreprocessor argument expansion. For example, the following code:
	macro_or_string		# a macro or a string
#define G_PASTE(identifier1,identifier2) G_PASTE_ARGS (identifier1, identifier2)	# Yields a new preprocessor pasted identifieridentifier1identifier2 from its expandedarguments identifier1 and identifier2. For example,the following code:
	identifier1		# an identifier
	identifier2		# an identifier
#define G_STATIC_ASSERT(expr) typedef char G_PASTE (_GStaticAssertCompileTimeAssertion_, __COUNTER__)[(expr) ? 1 : -1] G_GNUC_UNUSED	# The G_STATIC_ASSERT() macro lets the programmer checka condition at compile time, the condition needs tobe compile time computable. The macro can be used inany place where a typedef is valid.
	expr		# a constant expression
#define G_STATIC_ASSERT_EXPR(expr) ((void) sizeof (char[(expr) ? 1 : -1]))	# The G_STATIC_ASSERT_EXPR() macro lets the programmer checka condition at compile time. The condition needs to becompile time computable.
	expr		# a constant expression
#define G_GNUC_CHECK_VERSION(major, minor)	# Expands to a a check for a compiler with __GNUC__ defined and a versiongreater than or equal to the major and minor numbers provided. For example,the following would only match on compilers such as GCC 4.8 or newer.
#define G_GNUC_ALLOC_SIZE(x) __attribute__((__alloc_size__(x)))	# Expands to the GNU C alloc_size function attribute if the compileris a new enough gcc. This attribute tells the compiler that thefunction returns a pointer to memory of a size that is specifiedby the xth function parameter.
	x		# the index of the argument specifying the allocation size
#define G_GNUC_ALLOC_SIZE2(x,y) __attribute__((__alloc_size__(x,y)))	# Expands to the GNU C alloc_size function attribute if the compiler is anew enough gcc. This attribute tells the compiler that the function returnsa pointer to memory of a size that is specified by the product of twofunction parameters.
	x		# the index of the argument specifying one factor of the allocation size
	y		# the index of the argument specifying the second factor of the allocation size
#define G_GNUC_DEPRECATED_FOR(f)	# Like G_GNUC_DEPRECATED, but names the intended replacement for thedeprecated symbol if the version of gcc in use is new enough to supportcustom deprecation messages.
	f		# the intended replacement for the deprecated symbol,such as the name of a function
#define G_GNUC_PRINTF( format_idx, arg_idx )	# Expands to the GNU C format function attribute if the compiler is gcc.This is used for declaring functions which take a variable number ofarguments, with the same syntax as printf(). It allows the compilerto type-check the arguments passed to the function.
	format_idx		# the index of the argument corresponding to theformat string (the arguments are numbered from 1)
	arg_idx		# the index of the first of the format arguments, or 0 ifthere are no format arguments
#define G_GNUC_SCANF( format_idx, arg_idx )	# Expands to the GNU C format function attribute if the compiler is gcc.This is used for declaring functions which take a variable number ofarguments, with the same syntax as scanf(). It allows the compilerto type-check the arguments passed to the function.
	format_idx		# the index of the argument corresponding tothe format string (the arguments are numbered from 1)
	arg_idx		# the index of the first of the format arguments, or 0 ifthere are no format arguments
#define G_GNUC_FORMAT( arg_idx )	# Expands to the GNU C format_arg function attribute if the compileris gcc. This function attribute specifies that a function takes aformat string for a printf(), scanf(), strftime() or strfmon() stylefunction and modifies it, so that the result can be passed to a printf(),scanf(), strftime() or strfmon() style function (with the remainingarguments to the format function the same as they would have beenfor the unmodified string).
	arg_idx		# the index of the argument
#define G_DEPRECATED_FOR(f) __attribute__((__deprecated__("Use '" #f "' instead")))	# This macro is similar to G_GNUC_DEPRECATED_FOR, and can be used to markfunctions declarations as deprecated. Unlike G_GNUC_DEPRECATED_FOR, itis meant to be portable across different compilers and must be placedbefore the function declaration.
	f		# the name of the function that this function was deprecated for
#define G_UNAVAILABLE(maj,min) __attribute__((deprecated("Not available before " #maj "." #min)))	# This macro can be used to mark a function declaration as unavailable.It must be placed before the function declaration. Use of a functionthat has been annotated with this macros will produce a compiler warning.
	maj		# the major version that introduced the symbol
	min		# the minor version that introduced the symbol
#define G_LIKELY(expr) (__builtin_expect (_G_BOOLEAN_EXPR((expr)), 1))	# Hints the compiler that the expression is likely to evaluate toa true value. The compiler may use this information for optimizations.
	expr		# the expression
	return:		#  the value of expr 
#define G_UNLIKELY(expr) (__builtin_expect (_G_BOOLEAN_EXPR((expr)), 0))	# Hints the compiler that the expression is unlikely to evaluate toa true value. The compiler may use this information for optimizations.
	expr		# the expression
	return:		#  the value of expr 
# define G_INLINE_FUNC extern	# G_INLINE_FUNC has been deprecated since version 2.48 and should not be used in newly-written code.
#define g_autofree	# Macro to add an attribute to pointer variable to ensure automaticcleanup using g_free().
#define G_STMT_START do	# Used within multi-statement macros so that they can be used in placeswhere only one statement is expected by the compiler.
#define G_STMT_END	# Used within multi-statement macros so that they can be used in placeswhere only one statement is expected by the compiler.
#define G_BEGIN_DECLS extern "C" {	# Used (along with G_END_DECLS) to bracket header files. If thecompiler in use is a C++ compiler, adds extern "C"around the header.
#define G_END_DECLS }	# Used (along with G_BEGIN_DECLS) to bracket header files. If thecompiler in use is a C++ compiler, adds extern "C"around the header.
#define G_GNUC_EXTENSION __extension__	# Expands to __extension__ when gcc is used as the compiler. This simplytells gcc not to warn about the following non-standard code when compilingwith the -pedantic option.
#define G_GNUC_CONST	# Expands to the GNU C const function attribute if the compiler is gcc.Declaring a function as const enables better optimization of calls tothe function. A const function doesn't examine any values except itsparameters, and has no effects except its return value.
#define G_GNUC_PURE __attribute__((__pure__))	# Expands to the GNU C pure function attribute if the compiler is gcc.Declaring a function as pure enables better optimization of calls tothe function. A pure function has no effects except its return valueand the return value depends only on the parameters and/or globalvariables.
#define G_GNUC_MALLOC __attribute__((__malloc__))	# Expands to the GNU C malloc function attribute if the compiler is gcc.Declaring a function as malloc enables better optimization of the function.A function can have the malloc attribute if it returns a pointer which isguaranteed to not alias with any other pointer when the function returns(in practice, this means newly allocated memory).
#define G_GNUC_DEPRECATED __attribute__((__deprecated__))	# Expands to the GNU C deprecated attribute if the compiler is gcc.It can be used to mark typedefs, variables and functions as deprecated.When called with the -Wdeprecated-declarations option,gcc will generate warnings when deprecated interfaces are used.
#define G_GNUC_BEGIN_IGNORE_DEPRECATIONS	# Tells gcc (if it is a new enough version) to temporarily stop emittingwarnings when functions marked with G_GNUC_DEPRECATED orG_GNUC_DEPRECATED_FOR are called. This is useful for when you haveone deprecated function calling another one, or when you still haveregression tests for deprecated functions.
#define G_GNUC_END_IGNORE_DEPRECATIONS	# Undoes the effect of G_GNUC_BEGIN_IGNORE_DEPRECATIONS, tellinggcc to begin outputting warnings again (assuming those warningshad been enabled to begin with).
#define G_GNUC_NORETURN	# Expands to the GNU C noreturn function attribute if the compiler is gcc.It is used for declaring functions which never return. It enablesoptimization of the function, and avoids possible compiler warnings.
#define G_GNUC_UNUSED	# Expands to the GNU C unused function attribute if the compiler is gcc.It is used for declaring functions and arguments which may never be used.It avoids possible compiler warnings.
#define G_GNUC_NULL_TERMINATED __attribute__((__sentinel__))	# Expands to the GNU C sentinel function attribute if the compiler is gcc.This function attribute only applies to variadic functions and instructsthe compiler to check that the argument list is terminated with anexplicit NULL.
#define G_GNUC_WARN_UNUSED_RESULT __attribute__((warn_unused_result))	# Expands to the GNU C warn_unused_result function attribute if the compileris gcc. This function attribute makes the compiler emit a warning if theresult of a function call is ignored.
#define G_GNUC_FUNCTION __FUNCTION__	# G_GNUC_FUNCTION has been deprecated since version 2.16 and should not be used in newly-written code.
#define G_GNUC_PRETTY_FUNCTION __PRETTY_FUNCTION__	# G_GNUC_PRETTY_FUNCTION has been deprecated since version 2.16 and should not be used in newly-written code.
#define G_GNUC_NO_INSTRUMENT	# Expands to the GNU C no_instrument_function function attribute if thecompiler is gcc. Functions with this attribute will not be instrumentedfor profiling, when the compiler is called with the-finstrument-functions option.
#define G_HAVE_GNUC_VISIBILITY 1	# Defined to 1 if gcc-style visibility handling is supported.
#define G_GNUC_INTERNAL __attribute__((visibility("hidden")))	# This attribute can be used for marking library functions as being usedinternally to the library only, which may allow the compiler to handlefunction calls more efficiently. Note that static functions do not needto be marked as internal in this way. See the GNU C documentation fordetails.
#define G_GNUC_MAY_ALIAS __attribute__((may_alias))	# Expands to the GNU C may_alias type attribute if the compiler is gcc.Types with this attribute will not be subjected to type-based aliasanalysis, but are assumed to alias with any other type, just like char.
#define G_DEPRECATED __attribute__((__deprecated__))	# This macro is similar to G_GNUC_DEPRECATED, and can be used to markfunctions declarations as deprecated. Unlike G_GNUC_DEPRECATED, it ismeant to be portable across different compilers and must be placedbefore the function declaration.
#define G_STRLOC __FILE__ ":" G_STRINGIFY (__LINE__) ":" __PRETTY_FUNCTION__ "()"	# Expands to a string identifying the current code position.
#define G_STRFUNC ((const char*) (__PRETTY_FUNCTION__))	# Expands to a string identifying the current function.
#define G_ATOMIC_LOCK_FREE	# This macro is defined if the atomic operations of GLib areimplemented using real hardware atomic operations. This means thatthe GLib atomic API can be used between processes and safely mixedwith other (hardware) atomic APIs.
#define g_main_new(is_running)	# g_main_new has been deprecated since version 2.2 and should not be used in newly-written code.
	is_running		# set to TRUE to indicate that the loop is running. Thisis not very important since calling g_main_run() will set thisto TRUE anyway.
	return:		#  a new GMainLoop 
#define g_main_destroy(loop)	# g_main_destroy has been deprecated since version 2.2 and should not be used in newly-written code.
	loop		# a GMainLoop
#define g_main_run(loop)	# g_main_run has been deprecated since version 2.2 and should not be used in newly-written code.
	loop		# a GMainLoop
#define g_main_quit(loop)	# g_main_quit has been deprecated since version 2.2 and should not be used in newly-written code.
	loop		# a GMainLoop
#define g_main_is_running(loop)	# g_main_is_running has been deprecated since version 2.2 and should not be used in newly-written code.
	loop		# a GMainLoop
	return:		#  TRUE if the main loop is running 
#define g_main_iteration(may_block)	# g_main_iteration has been deprecated since version 2.2 and should not be used in newly-written code.
	may_block		# set to TRUE if it should block (i.e. wait) until an eventsource becomes ready. It will return after an event source has beenprocessed. If set to FALSE it will return immediately if no eventsource is ready to be processed.
	return:		#  TRUE if more events are pending. 
#define g_main_pending()	# g_main_pending is deprecated and should not be used in newly-written code.
	return:		#  TRUE if any events are pending. 
#define g_main_set_poll_func(func)	# g_main_set_poll_func has been deprecated since version 2.2 and should not be used in newly-written code.
	func		# the function to call to poll all file descriptors
#define G_PRIORITY_HIGH -100	# Use this for high priority event sources.
#define G_PRIORITY_DEFAULT 0	# Use this for default priority event sources.
#define G_PRIORITY_HIGH_IDLE 100	# Use this for high priority idle functions.
#define G_PRIORITY_DEFAULT_IDLE 200	# Use this for default priority idle functions.
#define G_PRIORITY_LOW 300	# Use this for very low priority background tasks.
#define G_SOURCE_CONTINUE TRUE	# Use this macro as the return value of a GSourceFunc to leavethe GSource in the main loop.
#define G_SOURCE_REMOVE FALSE	# Use this macro as the return value of a GSourceFunc to removethe GSource from the main loop.
#define G_PID_FORMAT "i"	# A format specifier that can be used in printf()-style format stringswhen printing a GPid.
#define G_POLLFD_FORMAT "0"	# A format specifier that can be used in printf()-style format stringswhen printing the fd member of a GPollFD.
#define G_LOCK_DEFINE(name) 	# The G_LOCK_ macros provide a convenient interface to GMutex.G_LOCK_DEFINE defines a lock. It can appear in any place wherevariable definitions may appear in programs, i.e. in the first blockof a function or outside of functions. The name parameter will bemangled to get the name of the GMutex. This means that youcan use names of existing variables as the parameter - e.g. the nameof the variable you intend to protect with the lock. Look at ourgive_me_next_number() example using the G_LOCK macros:
	name		# the name of the lock
#define G_LOCK_DEFINE_STATIC(name)	# This works like G_LOCK_DEFINE, but it creates a static object.
	name		# the name of the lock
#define G_LOCK_EXTERN(name) 	# This declares a lock, that is defined with G_LOCK_DEFINE in anothermodule.
	name		# the name of the lock
#define G_LOCK(name)	# Works like g_mutex_lock(), but for a lock defined withG_LOCK_DEFINE.
	name		# the name of the lock
#define G_TRYLOCK(name)	# Works like g_mutex_trylock(), but for a lock defined withG_LOCK_DEFINE.
	name		# the name of the lock
	return:		#  TRUE, if the lock could be locked. 
#define G_UNLOCK(name)	# Works like g_mutex_unlock(), but for a lock defined withG_LOCK_DEFINE.
	name		# the name of the lock
#define G_PRIVATE_INIT(notify)	# A macro to assist with the static initialisation of a GPrivate.
	notify		# a GDestroyNotify
#define g_once(once, func, arg)	# The first call to this routine by a process with a given GOncestruct calls func with the given argument. Thereafter, subsequentcalls to g_once() with the same GOnce struct do not call funcagain, but return the stored result of the first call. On returnfrom g_once(), the status of once will be G_ONCE_STATUS_READY.
	once		# a GOnce structure
	func		# the GThreadFunc function associated to once. This functionis called only once, regardless of the number of times it andits associated GOnce struct are passed to g_once().
	arg		# data to be passed to func
#define G_THREAD_ERROR g_thread_error_quark ()	# The error domain of the GLib thread subsystem.
#define G_ONCE_INIT { G_ONCE_STATUS_NOTCALLED, NULL }	# A GOnce must be initialized with this macro before it can be used.
#define G_MODULE_SUFFIX "so"	# Expands to the proper shared library suffix for the current platformwithout the leading dot. For most Unices and Linux this is "so", andfor Windows this is "dll".
# define G_MODULE_EXPORT		__declspec(dllexport)	# Used to declare functions exported by libraries or modules.
#define G_MODULE_IMPORT		extern	# Used to declare functions imported from modules.
#define g_new(struct_type, n_structs)	# Allocates n_structs elements of type struct_type.The returned pointer is cast to a pointer to the given type.If n_structs is 0 it returns NULL.Care is taken to avoid overflow when calculating the size of the allocated block.
	struct_type		# the type of the elements to allocate
	n_structs		# the number of elements to allocate
	return:		#  a pointer to the allocated memory, cast to a pointer to struct_type 
#define g_new0(struct_type, n_structs)	# Allocates n_structs elements of type struct_type, initialized to 0's.The returned pointer is cast to a pointer to the given type.If n_structs is 0 it returns NULL.Care is taken to avoid overflow when calculating the size of the allocated block.
	struct_type		# the type of the elements to allocate.
	n_structs		# the number of elements to allocate.
	return:		#  a pointer to the allocated memory, cast to a pointer to struct_type. 
#define g_renew(struct_type, mem, n_structs)	# Reallocates the memory pointed to by mem, so that it now has space forn_structs elements of type struct_type. It returns the new address ofthe memory, which may have been moved.Care is taken to avoid overflow when calculating the size of the allocated block.
	struct_type		# the type of the elements to allocate
	mem		# the currently allocated memory
	n_structs		# the number of elements to allocate
	return:		#  a pointer to the new allocated memory, cast to a pointer to struct_type 
#define g_try_new(struct_type, n_structs)	# Attempts to allocate n_structs elements of type struct_type, and returnsNULL on failure. Contrast with g_new(), which aborts the program on failure.The returned pointer is cast to a pointer to the given type.The function returns NULL when n_structs is 0 of if an overflow occurs.
	struct_type		# the type of the elements to allocate
	n_structs		# the number of elements to allocate
	return:		#  a pointer to the allocated memory, cast to a pointer to struct_type 
#define g_try_new0(struct_type, n_structs)	# Attempts to allocate n_structs elements of type struct_type, initializedto 0's, and returns NULL on failure. Contrast with g_new0(), which abortsthe program on failure.The returned pointer is cast to a pointer to the given type.The function returns NULL when n_structs is 0 or if an overflow occurs.
	struct_type		# the type of the elements to allocate
	n_structs		# the number of elements to allocate
	return:		#  a pointer to the allocated memory, cast to a pointer to struct_type 
#define g_try_renew(struct_type, mem, n_structs)	# Attempts to reallocate the memory pointed to by mem, so that it now hasspace for n_structs elements of type struct_type, and returns NULL onfailure. Contrast with g_renew(), which aborts the program on failure.It returns the new address of the memory, which may have been moved.The function returns NULL if an overflow occurs.
	struct_type		# the type of the elements to allocate
	mem		# the currently allocated memory
	n_structs		# the number of elements to allocate
	return:		#  a pointer to the new allocated memory, cast to a pointer to struct_type 
#define g_alloca(size)	# Allocates size bytes on the stack; these bytes will be freed when the currentstack frame is cleaned up. This macro essentially just wraps the alloca()function present on most UNIX variants.Thus it provides the same advantages and pitfalls as alloca():
	size		# number of bytes to allocate.
	return:		#  space for sizebytes, allocated on the stack 
#define g_newa(struct_type, n_structs)	# Wraps g_alloca() in a more typesafe manner.
	struct_type		# Type of memory chunks to be allocated
	n_structs		# Number of chunks to be allocated
	return:		#  Pointer to stack space for n_structschunks of type struct_type 
#define g_memmove(dest,src,len)	# g_memmove has been deprecated since version 2.40 and should not be used in newly-written code.
	dest		# the destination address to copy the bytes to.
	src		# the source address to copy the bytes from.
	len		# the number of bytes to copy.
#define g_slice_new(type)	# A convenience macro to allocate a block of memory from theslice allocator.
	type		# the type to allocate, typically a structure name
	return:		#  a pointer to the allocated block, cast to a pointerto type.  
#define g_slice_new0(type)	# A convenience macro to allocate a block of memory from theslice allocator and set the memory to 0.
	type		# the type to allocate, typically a structure name
	return:		#  a pointer to the allocated block, cast to a pointerto type.  
#define g_slice_dup(type, mem)	# A convenience macro to duplicate a block of memory usingthe slice allocator.
	type		# the type to duplicate, typically a structure name
	mem		#  the memory to copy into the allocated block. 
	return:		#  a pointer to the allocated block, cast to a pointerto type.  
#define g_slice_free(type, mem)	# A convenience macro to free a block of memory that hasbeen allocated from the slice allocator.
	type		# the type of the block to free, typically a structure name
	mem		# a pointer to the block to free
#define g_slice_free_chain(type, mem_chain, next)	# Frees a linked list of memory blocks of structure type type.The memory blocks must be equal-sized, allocated viag_slice_alloc() or g_slice_alloc0() and linked together bya next pointer (similar to GSList). The name of thenext field in type is passed as third argument.Note that the exact release behaviour can be changed with theG_DEBUG=gc-friendly environment variable, also seeG_SLICE for related debugging options.
	type		# the type of the mem_chainblocks
	mem_chain		# a pointer to the first block of the chain
	next		# the field name of the next pointer in type
#define G_IO_CHANNEL_ERROR g_io_channel_error_quark()	# Error domain for GIOChannel operations. Errors in this domain willbe from the GIOChannelError enumeration. See GError forinformation on error domains.
#define g_return_if_fail(expr)	# Verifies that the expression expr, usually representing a precondition,evaluates to TRUE. If the function returns a value, useg_return_val_if_fail() instead.
	expr		# the expression to check
#define g_return_val_if_fail(expr,val)	# Verifies that the expression expr, usually representing a precondition,evaluates to TRUE. If the function does not return a value, useg_return_if_fail() instead.
	expr		# the expression to check
	val		# the value to return from the current functionif the expression is not true
#define g_return_if_reached()	# Logs a critical message and returns from the current function.This can only be used in functions which do not return a value.
#define g_return_val_if_reached(val)	# Logs a critical message and returns val.
	val		# the value to return from the current function
#define g_warn_if_fail(expr)	# Logs a warning if the expression is not true.
	expr		# the expression to check
#define g_warn_if_reached()	# Logs a warning.
# define G_BREAKPOINT() G_STMT_START{ __asm__ __volatile__ ("int $03"); }G_STMT_END	# Inserts a breakpoint instruction into the code.
#define g_message(...)	# A convenience function/macro to log a normal message.
	...		# format string, followed by parameters to insertinto the format string (as with printf())
#define g_warning(...)	# A convenience function/macro to log a warning message.
	...		# format string, followed by parameters to insertinto the format string (as with printf())
#define g_critical(...)	# Logs a "critical warning" (G_LOG_LEVEL_CRITICAL).It's more or less application-defined what constitutesa critical vs. a regular warning. You could callg_log_set_always_fatal() to make critical warnings exitthe program, then use g_critical() for fatal errors, forexample.
	...		# format string, followed by parameters to insertinto the format string (as with printf())
#define g_error(...)	# A convenience function/macro to log an error message.
	...		# format string, followed by parameters to insertinto the format string (as with printf())
#define g_info(...)	# A convenience function/macro to log an informational message. Seldom used.
	...		# format string, followed by parameters to insertinto the format string (as with printf())
#define g_debug(...)	# A convenience function/macro to log a debug message.
	...		# format string, followed by parameters to insertinto the format string (as with printf())
#define G_DEBUG_HERE()	# A convenience form of g_log_structured(), recommended to be added tofunctions when debugging. It prints the current monotonic time and the codelocation using G_STRLOC.
#define G_LOG_DOMAIN ((gchar*) 0)	# Defines the log domain.
#define G_LOG_FATAL_MASK (G_LOG_FLAG_RECURSION | G_LOG_LEVEL_ERROR)	# GLib log levels that are considered fatal by default.
#define G_LOG_LEVEL_USER_SHIFT (8)	# Log levels below 1&lt;&lt;G_LOG_LEVEL_USER_SHIFT are used by GLib.Higher bits can be used for user-defined log levels.
#define g_strstrip( string )	# Removes leading and trailing whitespace from a string.See g_strchomp() and g_strchug().
	string		# a string to remove the leading and trailing whitespace from
	return:		#  string 
#define G_ASCII_DTOSTR_BUF_SIZE (29 + 10)	# A good size for a buffer to be passed into g_ascii_dtostr().It is guaranteed to be enough for all output of that functionon systems with 64bit IEEE-compatible doubles.
#define G_NUMBER_PARSER_ERROR (g_number_parser_error_quark ())	# Domain for errors returned by functions converting a string to anumber.
#define	 G_STR_DELIMITERS "_-|&gt; &lt;."	# The standard delimiters, used in g_strdelimit().
#define G_CONVERT_ERROR g_convert_error_quark()	# Error domain for character set conversions. Errors in this domain willbe from the GConvertError enumeration. See GError for information onerror domains.
#define g_utf8_next_char(p)	# Skips to the next character in a UTF-8 string. The string must bevalid; this macro is as fast as possible, and has no error-checking.You would use this macro to iterate over a string character bycharacter. The macro returns the start of the next UTF-8 character.Before using this macro, use g_utf8_validate() to validate stringsthat may contain invalid UTF-8.
	p		# Pointer to the start of a valid UTF-8 character
#define G_UNICHAR_MAX_DECOMPOSITION_LENGTH 18 /* codepoints */	# The maximum length (in codepoints) of a compatibility or canonicaldecomposition of a single Unicode character.
#define G_UNICODE_COMBINING_MARK G_UNICODE_SPACING_MARK	# G_UNICODE_COMBINING_MARK has been deprecated since version 2.30 and should not be used in newly-written code.
#define Q_(String)	# Like _(), but handles context in message ids. This has the advantagethat the string can be adorned with a prefix to guarantee uniquenessand provide context to the translator.
	String		# the string to be translated, with a '|'-separated prefixwhich must not be translated
	return:		#  the translated message 
#define C_(Context,String)	# Uses gettext to get the translation for String. Context isused as a context. This is mainly useful for short strings whichmay need different translations, depending on the context in whichthey are used.
	Context		# a message context, must be a string literal
	String		# a message id, must be a string literal
	return:		#  the translated message 
#define N_(String)	# Only marks a string for translation. This is useful in situationswhere the translated strings can't be directly used, e.g. in stringarray initializers. To get the translated string, call gettext()at runtime.
	String		# the string to be translated
#define NC_(Context, String)	# Only marks a string for translation, with context.This is useful in situations where the translated strings can'tbe directly used, e.g. in string array initializers. To get thetranslated string, you should call g_dpgettext2() at runtime.
	Context		# a message context, must be a string literal
	String		# a message id, must be a string literal
#define G_USEC_PER_SEC 1000000	# Number of microseconds in one second (1 million).This macro is provided for code readability.
#define G_DATE_BAD_DAY 0U	# Represents an invalid GDateDay.
#define G_DATE_BAD_JULIAN 0U	# Represents an invalid Julian day number.
#define G_DATE_BAD_YEAR 0U	# Represents an invalid year.
#define G_TIME_SPAN_DAY (G_GINT64_CONSTANT (86400000000))	# Evaluates to a time span of one day.
#define G_TIME_SPAN_HOUR (G_GINT64_CONSTANT (3600000000))	# Evaluates to a time span of one hour.
#define G_TIME_SPAN_MINUTE (G_GINT64_CONSTANT (60000000))	# Evaluates to a time span of one minute.
#define G_TIME_SPAN_SECOND (G_GINT64_CONSTANT (1000000))	# Evaluates to a time span of one second.
#define G_TIME_SPAN_MILLISECOND (G_GINT64_CONSTANT (1000))	# Evaluates to a time span of one millisecond.
#define g_rand_boolean(rand_)	# Returns a random gboolean from rand_.This corresponds to a unbiased coin toss.
	rand_		# a GRand
	return:		#  a random gboolean 
#define g_random_boolean()	# Returns a random gboolean.This corresponds to a unbiased coin toss.
	return:		#  a random gboolean 
#define g_hook_append( hook_list, hook )	# Appends a GHook onto the end of a GHookList.
	hook_list		# a GHookList
	hook		# the GHook to add to the end of hook_list
#define G_HOOK_FLAGS(hook)		(G_HOOK (hook)-&gt;flags)	# Gets the flags of a hook.
	hook		# a GHook
#define G_HOOK(hook)			((GHook*) (hook))	# Casts a pointer to a GHook*.
	hook		# a pointer
#define G_HOOK_IS_VALID(hook)	# Returns TRUE if the GHook is valid, i.e. it is in a GHookList,it is active and it has not been destroyed.
	hook		# a GHook
	return:		#  TRUE if the GHook is valid 
#define G_HOOK_ACTIVE(hook)	# Returns TRUE if the GHook is active, which is normally the caseuntil the GHook is destroyed.
	hook		# a GHook
	return:		#  TRUE if the GHook is active 
#define G_HOOK_IN_CALL(hook)	# Returns TRUE if the GHook function is currently executing.
	hook		# a GHook
	return:		#  TRUE if the GHook function is currently executing 
#define G_HOOK_IS_UNLINKED(hook)	# Returns TRUE if the GHook is not in a GHookList.
	hook		# a GHook
	return:		#  TRUE if the GHook is not in a GHookList 
#define G_HOOK_FLAG_USER_SHIFT (4)	# The position of the first bit which is not reserved for internaluse be the GHook implementation, i.e.1 &lt;&lt; G_HOOK_FLAG_USER_SHIFT is the firstbit which can be used for application-defined flags.
#define g_bit_nth_lsf(mask, nth_bit)	# Find the position of the first bit set in mask, searchingfrom (but not including) nth_bit upwards. Bits are numberedfrom 0 (least significant) to sizeof(gulong) * 8 - 1 (31 or 63,usually). To start searching from the 0th bit, set nth_bit to -1.
	mask		# a gulong containing flags
	nth_bit		# the index of the bit to start the search from
	return:		#  the index of the first bit set which is higher than nth_bit, or -1if no higher bits are set 
#define g_bit_nth_msf(mask, nth_bit)	# Find the position of the first bit set in mask, searchingfrom (but not including) nth_bit downwards. Bits are numberedfrom 0 (least significant) to sizeof(gulong) * 8 - 1 (31 or 63,usually). To start searching from the last bit, set nth_bit to-1 or GLIB_SIZEOF_LONG * 8.
	mask		# a gulong containing flags
	nth_bit		# the index of the bit to start the search from
	return:		#  the index of the first bit set which is lower than nth_bit, or -1if no lower bits are set 
#define g_bit_storage(number)	# Gets the number of bits used to hold number,e.g. if number is 4, 3 bits are needed.
	number		# a guint
	return:		#  the number of bits used to hold number 
#define g_dirname	# g_dirname is deprecated and should not be used in newly-written code.
	file_name		#  the name of the file. 
	return:		#  the directory components of the file.  
#define g_scanner_add_symbol( scanner, symbol, value )	# g_scanner_add_symbol has been deprecated since version 2.2 and should not be used in newly-written code.
	scanner		# a GScanner
	symbol		# the symbol to add
	value		# the value of the symbol
#define g_scanner_remove_symbol( scanner, symbol )	# g_scanner_remove_symbol has been deprecated since version 2.2 and should not be used in newly-written code.
	scanner		# a GScanner
	symbol		# the symbol to remove
#define g_scanner_foreach_symbol( scanner, func, data )	# g_scanner_foreach_symbol has been deprecated since version 2.2 and should not be used in newly-written code.
	scanner		# a GScanner
	func		# the function to call with each symbol
	data		# data to pass to the function
#define g_scanner_freeze_symbol_table(scanner)	# g_scanner_freeze_symbol_table has been deprecated since version 2.2 and should not be used in newly-written code.
	scanner		# a GScanner
#define g_scanner_thaw_symbol_table(scanner)	# g_scanner_thaw_symbol_table has been deprecated since version 2.2 and should not be used in newly-written code.
	scanner		# a GScanner
#define G_CSET_a_2_z "abcdefghijklmnopqrstuvwxyz"	# The set of lowercase ASCII alphabet characters.Used for specifying valid identifier charactersin GScannerConfig.
#define G_CSET_A_2_Z "ABCDEFGHIJKLMNOPQRSTUVWXYZ"	# The set of uppercase ASCII alphabet characters.Used for specifying valid identifier charactersin GScannerConfig.
#define G_CSET_DIGITS "0123456789"	# The set of ASCII digits.Used for specifying valid identifier charactersin GScannerConfig.
#define G_CSET_LATINC	# The set of uppercase ISO 8859-1 alphabet characterswhich are not ASCII characters.Used for specifying valid identifier charactersin GScannerConfig.
#define G_CSET_LATINS	# The set of lowercase ISO 8859-1 alphabet characterswhich are not ASCII characters.Used for specifying valid identifier charactersin GScannerConfig.
#define G_SPAWN_ERROR g_spawn_error_quark ()	# Error domain for spawning processes. Errors in this domain willbe from the GSpawnError enumeration. See GError for information onerror domains.
#define G_SPAWN_EXIT_ERROR g_spawn_exit_error_quark ()	# Error domain used by g_spawn_check_exit_status(). The codewill be the program exit code.
#define G_FILE_ERROR g_file_error_quark ()	# Error domain for file operations. Errors in this domain willbe from the GFileError enumeration. See GError for informationon error domains.
#define G_URI_RESERVED_CHARS_ALLOWED_IN_PATH G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT "/"	# Allowed characters in a path. Includes "!$&amp;'()*+,;=:@/".
#define G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS ":@"	# Allowed characters in path elements. Includes "!$&amp;'()*+,;=:@".
#define G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS ":"	# Allowed characters in userinfo as defined in RFC 3986. Includes "!$&amp;'()*+,;=:".
#define G_URI_RESERVED_CHARS_GENERIC_DELIMITERS ":/?#[]@"	# Generic delimiters characters as defined in RFC 3986. Includes ":/?#[]@".
#define G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS "!$&amp;'()*+,;="	# Subcomponent delimiter characters as defined in RFC 3986. Includes "!$&amp;'()*+,;=".
#define G_SHELL_ERROR g_shell_error_quark ()	# Error domain for shell functions. Errors in this domain will be fromthe GShellError enumeration. See GError for information on errordomains.
#define G_OPTION_ERROR (g_option_error_quark ())	# Error domain for option parsing. Errors in this domain willbe from the GOptionError enumeration. See GError for information on error domains.
#define G_OPTION_REMAINING ""	# If a long option in the main group has this name, it is not treated as a regular option. Instead it collects all non-option arguments which wouldotherwise be left in argv. The option must be of typeG_OPTION_ARG_CALLBACK, G_OPTION_ARG_STRING_ARRAYor G_OPTION_ARG_FILENAME_ARRAY.
#define G_REGEX_ERROR g_regex_error_quark ()	# Error domain for regular expressions. Errors in this domain will befrom the GRegexError enumeration. See GError for information onerror domains.
#define G_MARKUP_ERROR g_markup_error_quark ()	# Error domain for markup parsing.Errors in this domain will be from the GMarkupError enumeration.See GError for information on error domains.
#define G_KEY_FILE_ERROR g_key_file_error_quark()	# Error domain for key file parsing. Errors in this domain willbe from the GKeyFileError enumeration.
#define G_KEY_FILE_DESKTOP_GROUP "Desktop Entry"	# The name of the main group of a desktop entry file, as defined in theDesktop Entry Specification.Consult the specification for moredetails about the meanings of the keys below.
#define G_KEY_FILE_DESKTOP_KEY_TYPE "Type"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a stringgiving the type of the desktop entry. UsuallyG_KEY_FILE_DESKTOP_TYPE_APPLICATION,G_KEY_FILE_DESKTOP_TYPE_LINK, orG_KEY_FILE_DESKTOP_TYPE_DIRECTORY.
#define G_KEY_FILE_DESKTOP_KEY_VERSION "Version"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a stringgiving the version of the Desktop Entry Specification used forthe desktop entry file.
#define G_KEY_FILE_DESKTOP_KEY_NAME "Name"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a localizedstring giving the specific name of the desktop entry.
#define G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME "GenericName"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a localizedstring giving the generic name of the desktop entry.
#define G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY "NoDisplay"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a booleanstating whether the desktop entry should be shown in menus.
#define G_KEY_FILE_DESKTOP_KEY_COMMENT "Comment"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a localizedstring giving the tooltip for the desktop entry.
#define G_KEY_FILE_DESKTOP_KEY_ICON "Icon"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a localizedstring giving the name of the icon to be displayed for the desktopentry.
#define G_KEY_FILE_DESKTOP_KEY_HIDDEN "Hidden"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a booleanstating whether the desktop entry has been deleted by the user.
#define G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN "OnlyShowIn"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a list ofstrings identifying the environments that should display thedesktop entry.
#define G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN "NotShowIn"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a list ofstrings identifying the environments that should not display thedesktop entry.
#define G_KEY_FILE_DESKTOP_KEY_TRY_EXEC "TryExec"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a stringgiving the file name of a binary on disk used to determine if theprogram is actually installed. It is only valid for desktop entrieswith the Application type.
#define G_KEY_FILE_DESKTOP_KEY_EXEC "Exec"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a stringgiving the command line to execute. It is only valid for desktopentries with the Application type.
#define G_KEY_FILE_DESKTOP_KEY_PATH "Path"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a stringcontaining the working directory to run the program in. It is onlyvalid for desktop entries with the Application type.
#define G_KEY_FILE_DESKTOP_KEY_TERMINAL "Terminal"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a booleanstating whether the program should be run in a terminal window.It is only valid for desktop entries with theApplication type.
#define G_KEY_FILE_DESKTOP_KEY_MIME_TYPE "MimeType"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a listof strings giving the MIME types supported by this desktop entry.
#define G_KEY_FILE_DESKTOP_KEY_CATEGORIES "Categories"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a listof strings giving the categories in which the desktop entryshould be shown in a menu.
#define G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY "StartupNotify"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a booleanstating whether the application supports theStartup Notification Protocol Specification.
#define G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS "StartupWMClass"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is stringidentifying the WM class or name hint of a window that the applicationwill create, which can be used to emulate Startup Notification witholder applications.
#define G_KEY_FILE_DESKTOP_KEY_URL "URL"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a stringgiving the URL to access. It is only valid for desktop entrieswith the Link type.
#define G_KEY_FILE_DESKTOP_KEY_ACTIONS "Actions"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a string listgiving the available application actions.
#define G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE "DBusActivatable"	# A key under G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean set to trueif the application is D-Bus activatable.
#define G_KEY_FILE_DESKTOP_TYPE_APPLICATION "Application"	# The value of the G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktopentries representing applications.
#define G_KEY_FILE_DESKTOP_TYPE_LINK "Link"	# The value of the G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktopentries representing links to documents.
#define G_KEY_FILE_DESKTOP_TYPE_DIRECTORY "Directory"	# The value of the G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktopentries representing directories.
#define G_BOOKMARK_FILE_ERROR (g_bookmark_file_error_quark ())	# Error domain for bookmark file parsing.Errors in this domain will be from the GBookmarkFileErrorenumeration. See GError for information on error domains.
#define g_test_initialized()	# Returns TRUE if g_test_init() has been called.
	return:		#  TRUE if g_test_init() has been called. 
#define g_test_quick()	# Returns TRUE if tests are run in quick mode.Exactly one of g_test_quick() and g_test_slow() is active in any run;there is no "medium speed".
	return:		#  TRUE if in quick mode 
#define g_test_slow()	# Returns TRUE if tests are run in slow mode.Exactly one of g_test_quick() and g_test_slow() is active in any run;there is no "medium speed".
	return:		#  the opposite of g_test_quick() 
#define g_test_thorough()	# Returns TRUE if tests are run in thorough mode, equivalent tog_test_slow().
	return:		#  the same thing as g_test_slow() 
#define g_test_perf()	# Returns TRUE if tests are run in performance mode.
	return:		#  TRUE if in performance mode 
#define g_test_verbose()	# Returns TRUE if tests are run in verbose mode.The default is neither g_test_verbose() nor g_test_quiet().
	return:		#  TRUE if in verbose mode 
#define g_test_undefined()	# Returns TRUE if tests may provoke assertions and other formally-undefinedbehaviour, to verify that appropriate warnings are given. It might, in somecases, be useful to turn this off if running tests under valgrind.
	return:		#  TRUE if tests may provoke programming errors 
#define g_test_quiet()	# Returns TRUE if tests are run in quiet mode.The default is neither g_test_verbose() nor g_test_quiet().
	return:		#  TRUE if in quiet mode 
#define g_test_add(testpath, Fixture, tdata, fsetup, ftest, fteardown)	# Hook up a new test case at testpath, similar to g_test_add_func().A fixture data structure with setup and teardown functions may be provided,similar to g_test_create_case().
	testpath		# The test path for a new test case.
	Fixture		# The type of a fixture data structure.
	tdata		# Data argument for the test functions.
	fsetup		# The function to set up the fixture data.
	ftest		# The actual test function.
	fteardown		# The function to tear down the fixture data.
#define g_test_queue_unref(gobject)	# Enqueue an object to be released with g_object_unref() duringthe next teardown phase. This is equivalent to callingg_test_queue_destroy() with a destroy callback of g_object_unref().
	gobject		# the object to unref
#define g_test_assert_expected_messages()	# Asserts that all messages previously indicated viag_test_expect_message() have been seen and suppressed.
#define g_test_trap_assert_passed()	# Assert that the last test subprocess passed.See g_test_trap_subprocess().
#define g_test_trap_assert_failed()	# Assert that the last test subprocess failed.See g_test_trap_subprocess().
#define g_test_trap_assert_stdout(soutpattern)	# Assert that the stdout output of the last test subprocess matchessoutpattern. See g_test_trap_subprocess().
	soutpattern		# a glob-style pattern
#define g_test_trap_assert_stdout_unmatched(soutpattern)	# Assert that the stdout output of the last test subprocessdoes not match soutpattern. See g_test_trap_subprocess().
	soutpattern		# a glob-style pattern
#define g_test_trap_assert_stderr(serrpattern)	# Assert that the stderr output of the last test subprocessmatches serrpattern. See g_test_trap_subprocess().
	serrpattern		# a glob-style pattern
#define g_test_trap_assert_stderr_unmatched(serrpattern)	# Assert that the stderr output of the last test subprocessdoes not match serrpattern. See g_test_trap_subprocess().
	serrpattern		# a glob-style pattern
#define g_test_rand_bit()	# Get a reproducible random bit (0 or 1), see g_test_rand_int()for details on test case random numbers.
#define g_assert(expr)	# Debugging macro to terminate the application if the assertionfails. If the assertion fails (i.e. the expression is not true),an error message is logged and the application is terminated.
	expr		# the expression to check
#define g_assert_not_reached()	# Debugging macro to terminate the application if it is everreached. If it is reached, an error message is logged and theapplication is terminated.
#define g_assert_cmpstr(s1, cmp, s2)	# Debugging macro to compare two strings. If the comparison fails,an error message is logged and the application is either terminatedor the testcase marked as failed.The strings are compared using g_strcmp0().
	s1		# a string (may be NULL)
	cmp		# The comparison operator to use.One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
	s2		# another string (may be NULL)
#define g_assert_cmpint(n1, cmp, n2)	# Debugging macro to compare two integers.
	n1		# an integer
	cmp		# The comparison operator to use.One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
	n2		# another integer
#define g_assert_cmpuint(n1, cmp, n2)	# Debugging macro to compare two unsigned integers.
	n1		# an unsigned integer
	cmp		# The comparison operator to use.One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
	n2		# another unsigned integer
#define g_assert_cmphex(n1, cmp, n2)	# Debugging macro to compare to unsigned integers.
	n1		# an unsigned integer
	cmp		# The comparison operator to use.One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
	n2		# another unsigned integer
#define g_assert_cmpfloat(n1,cmp,n2)	# Debugging macro to compare two floating point numbers.
	n1		# an floating point number
	cmp		# The comparison operator to use.One of ==, !=, &lt;, &gt;, &lt;=, &gt;=.
	n2		# another floating point number
#define g_assert_cmpmem(m1, l1, m2, l2)	# Debugging macro to compare memory regions. If the comparison fails,an error message is logged and the application is either terminatedor the testcase marked as failed.
	m1		# pointer to a buffer
	l1		# length of m1
	m2		# pointer to another buffer
	l2		# length of m2
#define g_assert_no_error(err)	# Debugging macro to check that a GError is not set.
	err		# a GError, possibly NULL
#define g_assert_error(err, dom, c)	# Debugging macro to check that a method has returnedthe correct GError.
	err		# a GError, possibly NULL
	dom		# the expected error domain (a GQuark)
	c		# the expected error code
#define g_assert_true(expr)	# Debugging macro to check that an expression is true.
	expr		# the expression to check
#define g_assert_false(expr)	# Debugging macro to check an expression is false.
	expr		# the expression to check
#define g_assert_null(expr)	# Debugging macro to check an expression is NULL.
	expr		# the expression to check
#define g_assert_nonnull(expr)	# Debugging macro to check an expression is not NULL.
	expr		# the expression to check
#define G_UNIX_ERROR (g_unix_error_quark())	# Error domain for API in the g_unix_ namespace. Note that there is noexported enumeration mapping errno. Instead, all functions ensure thaterrno is relevant. The code for all G_UNIX_ERROR is always 0, and theerror message is always generated via g_strerror().
# define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)	# G_WIN32_DLLMAIN_FOR_DLL_NAME is deprecated and should not be used in newly-written code.
	static		# empty or "static"
	dll_name		# the name of the (pointer to the) char array wherethe DLL name will be stored. If this is used, you must alsoinclude windows.h. If you need a more complex DLL entrypoint function, you cannot use this
#define G_WIN32_HAVE_WIDECHAR_API() TRUE	# On Windows, this macro defines an expression which evaluates toTRUE if the code is running on a version of Windows where the widecharacter versions of the Win32 API functions, and the wide characterversions of the C library functions work. (They are always present inthe DLLs, but don't work on Windows 9x and Me.)
#define G_WIN32_IS_NT_BASED() TRUE	# On Windows, this macro defines an expression which evaluates toTRUE if the code is running on an NT-based Windows operating system.
#define MAXPATHLEN 1024	# Provided for UNIX emulation on Windows; equivalent to UNIXmacro MAXPATHLEN, which is the maximum length of a filename(including full path).
#define g_list_previous(list)	# A convenience macro to get the previous element in a GList.Note that it is considered perfectly acceptable to accesslist-&gt;previous directly.
	list		# an element in a GList
	return:		#  the previous element, or NULL if there are no previouselements 
#define g_list_next(list)	# A convenience macro to get the next element in a GList.Note that it is considered perfectly acceptable to accesslist-&gt;next directly.
	list		# an element in a GList
	return:		#  the next element, or NULL if there are no more elements 
#define g_list_free1	# Another name for g_list_free_1().
#define g_slist_next(slist)	# A convenience macro to get the next element in a GSList.
	slist		# an element in a GSList.
	return:		#  the next element, or NULL if there are no more elements. 
#define g_slist_free1	# A macro which does the same as g_slist_free_1().
#define G_QUEUE_INIT { NULL, NULL, 0 }	# A statically-allocated GQueue must be initialized with thismacro before it can be used. This macro can be used to initializea variable, but it cannot be assigned to a variable. In that caseyou have to use g_queue_init().
#define g_hash_table_freeze(hash_table)	# g_hash_table_freeze is deprecated and should not be used in newly-written code.
	hash_table		# a GHashTable
#define g_hash_table_thaw(hash_table)	# g_hash_table_thaw is deprecated and should not be used in newly-written code.
	hash_table		# a GHashTable
#define g_string_sprintf	# g_string_sprintf is deprecated and should not be used in newly-written code.
	string		# a GString
	format		# the string format. See the sprintf() documentation
	...		# the parameters to insert into the format string
#define g_string_sprintfa	# g_string_sprintfa is deprecated and should not be used in newly-written code.
	string		# a GString
	format		# the string format. See the sprintf() documentation
	...		# the parameters to insert into the format string
#define g_array_append_val(a,v)	# Adds the value on to the end of the array. The array will grow insize automatically if necessary.
	a		# a GArray
	v		# the value to append to the GArray
	return:		#  the GArray 
#define g_array_prepend_val(a,v)	# Adds the value on to the start of the array. The array will grow insize automatically if necessary.
	a		# a GArray
	v		# the value to prepend to the GArray
	return:		#  the GArray 
#define g_array_insert_val(a,i,v)	# Inserts an element into an array at the given index.
	a		# a GArray
	i		# the index to place the element at
	v		# the value to insert into the array
	return:		#  the GArray 
#define g_array_index(a,t,i)	# Returns the element of a GArray at the given index. The returnvalue is cast to the given type.
	a		# a GArray
	t		# the type of the elements
	i		# the index of the element to return
	return:		#  the element of the GArray at the index given by i 
#define g_ptr_array_index(array,index_)	# Returns the pointer at the given index of the pointer array.
	array		# a GPtrArray
	index_		# the index of the pointer to return
	return:		#  the pointer at the given index 
#define g_node_append(parent, node)	# Inserts a GNode as the last child of the given parent.
	parent		# the GNode to place the new GNode under
	node		# the GNode to insert
	return:		#  the inserted GNode 
#define g_node_insert_data(parent, position, data)	# Inserts a new GNode at the given position.
	parent		# the GNode to place the new GNode under
	position		# the position to place the new GNode at. If position is -1,the new GNode is inserted as the last child of parent
	data		# the data for the new GNode
	return:		#  the new GNode 
#define g_node_insert_data_after(parent, sibling, data)	# Inserts a new GNode after the given sibling.
	parent		# the GNode to place the new GNode under
	sibling		# the sibling GNode to place the new GNode after
	data		# the data for the new GNode
	return:		#  the new GNode 
#define g_node_insert_data_before(parent, sibling, data)	# Inserts a new GNode before the given sibling.
	parent		# the GNode to place the new GNode under
	sibling		# the sibling GNode to place the new GNode before
	data		# the data for the new GNode
	return:		#  the new GNode 
#define g_node_append_data(parent, data)	# Inserts a new GNode as the last child of the given parent.
	parent		# the GNode to place the new GNode under
	data		# the data for the new GNode
	return:		#  the new GNode 
#define g_node_prepend_data(parent, data)	# Inserts a new GNode as the first child of the given parent.
	parent		# the GNode to place the new GNode under
	data		# the data for the new GNode
	return:		#  the new GNode 
#define g_node_first_child(node)	# Gets the first child of a GNode.
	node		# a GNode
	return:		#  the first child of node, or NULL if nodeis NULLor has no children 
#define g_node_next_sibling(node)	# Gets the next sibling of a GNode.
	node		# a GNode
	return:		#  the next sibling of node, or NULL if nodeis the last nodeor NULL 
#define g_node_prev_sibling(node)	# Gets the previous sibling of a GNode.
	node		# a GNode
	return:		#  the previous sibling of node, or NULL if nodeis the firstnode or NULL 
#define	 G_NODE_IS_LEAF(node) (((GNode*) (node))-&gt;children == NULL)	# Returns TRUE if a GNode is a leaf node.
	node		# a GNode
	return:		#  TRUE if the GNode is a leaf node(i.e. it has no children) 
#define G_NODE_IS_ROOT(node)	# Returns TRUE if a GNode is the root of a tree.
	node		# a GNode
	return:		#  TRUE if the GNode is the root of a tree(i.e. it has no parent or siblings) 
#define G_DEFINE_QUARK(QN, q_n)	# A convenience macro which defines a function returning theGQuark for the name QN. The function will be namedq_n_quark().
	QN		# the name to return a GQuark for
	q_n		# prefix for the function name
#define g_datalist_id_set_data(dl, q, d)	# Sets the data corresponding to the given GQuark id. Any previousdata with the same key is removed, and its destroy function iscalled.
	dl		# a datalist.
	q		# the GQuark to identify the data element.
	d		#  the data element, or NULL to remove any previous elementcorresponding to q. 
#define g_datalist_id_remove_data(dl, q)	# Removes an element, using its GQuark identifier.
	dl		# a datalist.
	q		# the GQuark identifying the data element.
#define g_datalist_set_data(dl, k, d)	# Sets the data element corresponding to the given string identifier.
	dl		# a datalist.
	k		# the string to identify the data element.
	d		#  the data element, or NULL to remove any previous elementcorresponding to k. 
#define g_datalist_set_data_full(dl, k, d, f)	# Sets the data element corresponding to the given string identifier,and the function to be called when the data element is removed.
	dl		# a datalist.
	k		# the string to identify the data element.
	d		#  the data element, or NULL to remove any previous elementcorresponding to k. 
#define g_datalist_remove_data(dl, k)	# Removes an element using its string identifier. The data element'sdestroy function is called if it has been set.
	dl		# a datalist.
	k		# the string identifying the data element.
#define g_datalist_remove_no_notify(dl, k)	# Removes an element, without calling its destroy notifier.
	dl		# a datalist.
	k		# the string identifying the data element.
#define G_DATALIST_FLAGS_MASK 0x3	# A bitmask that restricts the possible flags passed tog_datalist_set_flags(). Passing a flags value whereflags &amp; ~G_DATALIST_FLAGS_MASK != 0 is an error.
#define g_dataset_id_set_data(l, k, d)	# Sets the data element associated with the given GQuark id. Anyprevious data with the same key is removed, and its destroy functionis called.
	l		# the location identifying the dataset.
	k		# the GQuark id to identify the data element.
	d		# the data element.
#define g_dataset_id_remove_data(l, k)	# Removes a data element from a dataset. The data element's destroyfunction is called if it has been set.
	l		# the location identifying the dataset.
	k		# the GQuark id identifying the data element.
#define g_dataset_set_data(l, k, d)	# Sets the data corresponding to the given string identifier.
	l		# the location identifying the dataset.
	k		# the string to identify the data element.
	d		# the data element.
#define g_dataset_set_data_full(l, k, d, f)	# Sets the data corresponding to the given string identifier, and thefunction to call when the data element is destroyed.
	l		# the location identifying the dataset.
	k		# the string to identify the data element.
	d		# the data element.
	f		# the function to call when the data element is removed. Thisfunction will be called with the data element and can be used tofree any memory allocated for it.
#define g_dataset_get_data(l, k)	# Gets the data element corresponding to a string.
	l		# the location identifying the dataset.
	k		# the string identifying the data element.
	return:		#  the data element corresponding to the string, or NULL ifit is not found. 
#define g_dataset_remove_data(l, k)	# Removes a data element corresponding to a string. Its destroyfunction is called if it has been set.
	l		# the location identifying the dataset.
	k		# the string identifying the data element.
#define g_dataset_remove_no_notify(l, k)	# Removes an element, without calling its destroy notifier.
	l		# the location identifying the dataset.
	k		# the string identifying the data element.
# define G_VARIANT_TYPE(type_string) (g_variant_type_checked_ ((type_string)))	# Converts a string to a const GVariantType. Depending on thecurrent debugging level, this function may perform a runtime checkto ensure that string is a valid GVariant type string.
	type_string		# a well-formed GVariantType type string
#define G_VARIANT_TYPE_BOOLEAN ((const GVariantType *) "b")	# The type of a value that can be either TRUE or FALSE.
#define G_VARIANT_TYPE_BYTE ((const GVariantType *) "y")	# The type of an integer value that can range from 0 to 255.
#define G_VARIANT_TYPE_INT16 ((const GVariantType *) "n")	# The type of an integer value that can range from -32768 to 32767.
#define G_VARIANT_TYPE_UINT16 ((const GVariantType *) "q")	# The type of an integer value that can range from 0 to 65535.There were about this many people living in Toronto in the 1870s.
#define G_VARIANT_TYPE_INT32 ((const GVariantType *) "i")	# The type of an integer value that can range from -2147483648 to2147483647.
#define G_VARIANT_TYPE_UINT32 ((const GVariantType *) "u")	# The type of an integer value that can range from 0 to 4294967295.That's one number for everyone who was around in the late 1970s.
#define G_VARIANT_TYPE_INT64 ((const GVariantType *) "x")	# The type of an integer value that can range from-9223372036854775808 to 9223372036854775807.
#define G_VARIANT_TYPE_UINT64 ((const GVariantType *) "t")	# The type of an integer value that can range from 0to 18446744073709551615 (inclusive). That's a really big number,but a Rubik's cube can have a bit more than twice as many possiblepositions.
#define G_VARIANT_TYPE_HANDLE ((const GVariantType *) "h")	# The type of a 32bit signed integer value, that by convention, is usedas an index into an array of file descriptors that are sent alongsidea D-Bus message.
#define G_VARIANT_TYPE_DOUBLE ((const GVariantType *) "d")	# The type of a double precision IEEE754 floating point number.These guys go up to about 1.80e308 (plus and minus) but miss out onsome numbers in between. In any case, that's far greater than theestimated number of fundamental particles in the observableuniverse.
#define G_VARIANT_TYPE_STRING ((const GVariantType *) "s")	# The type of a string. "" is a string. NULL is not a string.
#define G_VARIANT_TYPE_OBJECT_PATH ((const GVariantType *) "o")	# The type of a D-Bus object reference. These are strings of aspecific format used to identify objects at a given destination onthe bus.
#define G_VARIANT_TYPE_SIGNATURE ((const GVariantType *) "g")	# The type of a D-Bus type signature. These are strings of a specificformat used as type signatures for D-Bus methods and messages.
#define G_VARIANT_TYPE_VARIANT ((const GVariantType *) "v")	# The type of a box that contains any other value (including anothervariant).
#define G_VARIANT_TYPE_ANY ((const GVariantType *) "*")	# An indefinite type that is a supertype of every type (includingitself).
#define G_VARIANT_TYPE_BASIC ((const GVariantType *) "?")	# An indefinite type that is a supertype of every basic (ie:non-container) type.
#define G_VARIANT_TYPE_MAYBE ((const GVariantType *) "m*")	# An indefinite type that is a supertype of every maybe type.
#define G_VARIANT_TYPE_ARRAY ((const GVariantType *) "a*")	# An indefinite type that is a supertype of every array type.
#define G_VARIANT_TYPE_TUPLE ((const GVariantType *) "r")	# An indefinite type that is a supertype of every tuple type,regardless of the number of items in the tuple.
#define G_VARIANT_TYPE_UNIT ((const GVariantType *) "()")	# The empty tuple type. Has only one instance. Known also as "triv"or "void".
#define G_VARIANT_TYPE_DICT_ENTRY ((const GVariantType *) "{?*}")	# An indefinite type that is a supertype of every dictionary entrytype.
#define G_VARIANT_TYPE_DICTIONARY ((const GVariantType *) "a{?*}")	# An indefinite type that is a supertype of every dictionary type --that is, any array type that has an element type equal to anydictionary entry type.
#define G_VARIANT_TYPE_STRING_ARRAY ((const GVariantType *) "as")	# The type of an array of strings.
#define G_VARIANT_TYPE_OBJECT_PATH_ARRAY ((const GVariantType *) "ao")	# The type of an array of object paths.
#define G_VARIANT_TYPE_BYTESTRING ((const GVariantType *) "ay")	# The type of an array of bytes. This type is commonly used to passaround strings that may not be valid utf8. In that case, theconvention is that the nul terminator character should be included asthe last character in the array.
#define G_VARIANT_TYPE_BYTESTRING_ARRAY ((const GVariantType *) "aay")	# The type of an array of byte strings (an array of arrays of bytes).
#define G_VARIANT_TYPE_VARDICT ((const GVariantType *) "a{sv}")	# The type of a dictionary mapping strings to variants (the ubiquitous"a{sv}" type).
#define G_VARIANT_BUILDER_INIT(variant_type) { { { 2942751021u, variant_type, { 0, } } } }	# A stack-allocated GVariantBuilder must be initialized if it isused together with g_auto() to avoid warnings or crashes iffunction returns before g_variant_builder_init() is called on thebuilder. This macro can be used as initializer instead of anexplicit zeroing a variable when declaring it and a followingg_variant_builder_init(), but it cannot be assigned to a variable.
	variant_type		# a const GVariantType*
#define G_VARIANT_PARSE_ERROR (g_variant_parse_error_quark ())	# Error domain for GVariant text format parsing. Specific error codesare not currently defined for this domain. See GError forinformation on error domains.
#define G_THREADS_IMPL_POSIX	# G_THREADS_IMPL_POSIX has been deprecated since version 2.32 and should not be used in newly-written code.
#define G_THREADS_IMPL_NONE	# G_THREADS_IMPL_WIN32 has been deprecated since version 2.32 and should not be used in newly-written code.
#define G_STATIC_MUTEX_INIT	# G_STATIC_MUTEX_INIT is deprecated and should not be used in newly-written code.
#define G_STATIC_REC_MUTEX_INIT { G_STATIC_MUTEX_INIT }	# G_STATIC_REC_MUTEX_INIT is deprecated and should not be used in newly-written code.
#define G_STATIC_RW_LOCK_INIT { G_STATIC_MUTEX_INIT, NULL, NULL, 0, FALSE, 0, 0 }	# G_STATIC_RW_LOCK_INIT is deprecated and should not be used in newly-written code.
#define G_STATIC_PRIVATE_INIT 	# G_STATIC_PRIVATE_INIT is deprecated and should not be used in newly-written code.
enum GThreadError	# Possible errors of thread related functions.
	G_THREAD_ERROR_AGAIN	# a thread couldn't be created due to resource                       shortage. Try again later.
enum GOnceStatus	# The possible statuses of a one-time initialization functioncontrolled by a <span class="type">GOnce</span></a> struct.
	G_ONCE_STATUS_NOTCALLED	# the function has not been called yet.
	G_ONCE_STATUS_PROGRESS	# the function call is currently in progress.
	G_ONCE_STATUS_READY	# the function has been called.
enum GModuleFlags	# Flags passed to g_module_open()</a>.Note that these flags are not supported on all platforms.
	G_MODULE_BIND_LAZY	# specifies that symbols are only resolved when    needed. The default action is to bind all symbols when the module    is loaded.
	G_MODULE_BIND_LOCAL	# specifies that symbols in the module should    not be added to the global name space. The default action on most    platforms is to place symbols in the module in the global name space,    which may cause conflicts with existing symbols.
	G_MODULE_BIND_MASK	# mask for all flags.
enum GSeekType	# An enumeration specifying the base position for ag_io_channel_seek_position()</a> operation.
	G_SEEK_CUR	# the current position in the file.
	G_SEEK_SET	# the start of the file.
	G_SEEK_END	# the end of the file.
enum GIOStatus	# Stati returned by most of the <span class="type">GIOFuncs</span></a> functions.
	G_IO_STATUS_ERROR	# An error occurred.
	G_IO_STATUS_NORMAL	# Success.
	G_IO_STATUS_EOF	# End of file.
	G_IO_STATUS_AGAIN	# Resource temporarily unavailable.
enum GIOChannelError	# Error codes returned by <span class="type">GIOChannel</span></a> operations.
	G_IO_CHANNEL_ERROR_FBIG	# File too large.
	G_IO_CHANNEL_ERROR_INVAL	# Invalid argument.
	G_IO_CHANNEL_ERROR_IO	# IO error.
	G_IO_CHANNEL_ERROR_ISDIR	# File is a directory.
	G_IO_CHANNEL_ERROR_NOSPC	# No space left on device.
	G_IO_CHANNEL_ERROR_NXIO	# No such device or address.
	G_IO_CHANNEL_ERROR_OVERFLOW	# Value too large for defined datatype.
	G_IO_CHANNEL_ERROR_PIPE	# Broken pipe.
	G_IO_CHANNEL_ERROR_FAILED	# Some other error.
enum GIOCondition	# A bitwise combination representing a condition to watch for on anevent source.
	G_IO_IN	# There is data to read.
	G_IO_OUT	# Data can be written (without blocking).
	G_IO_PRI	# There is urgent data to read.
	G_IO_ERR	# Error condition.
	G_IO_HUP	# Hung up (the connection has been broken, usually for           pipes and sockets).
	G_IO_NVAL	# Invalid request. The file descriptor is not open.
enum GIOFlags	# Specifies properties of a <span class="type">GIOChannel</span></a>. Some of the flags can only beread with g_io_channel_get_flags()</a>, but not changed withg_io_channel_set_flags()</a>.
	G_IO_FLAG_APPEND	# O_APPEND    (see the documentation of the UNIX open() syscall)
	G_IO_FLAG_NONBLOCK	# O_NONBLOCK/<code class="literal">O_NDELAY (see the documentation of the UNIX open()    syscall)
	G_IO_FLAG_IS_READABLE	# indicates that the io channel is readable.    This flag cannot be changed.
	G_IO_FLAG_IS_WRITABLE	# indicates that the io channel is writable.    This flag cannot be changed.
	G_IO_FLAG_IS_WRITEABLE	# a misspelled version of <em class="parameter"><code>G_IO_FLAG_IS_WRITABLE</em>    that existed before the spelling was fixed in GLib 2.30. It is kept    here for compatibility reasons. Deprecated since 2.30
	G_IO_FLAG_IS_SEEKABLE	# indicates that the io channel is seekable,    i.e. that g_io_channel_seek_position() can be used on it.    This flag cannot be changed.
	G_IO_FLAG_MASK	# the mask that specifies all the valid flags.
	G_IO_FLAG_GET_MASK	# the mask of the flags that are returned from    g_io_channel_get_flags()
	G_IO_FLAG_SET_MASK	# the mask of the flags that the user can modify    with g_io_channel_set_flags()
enum GIOError	# <span class="type">GIOError</span></a> is only used by the deprecated functionsg_io_channel_read()</a>, g_io_channel_write()</a>, and g_io_channel_seek()</a>.
	G_IO_ERROR_NONE	# no error
	G_IO_ERROR_AGAIN	# an EAGAIN error occurred
	G_IO_ERROR_INVAL	# an EINVAL error occurred
	G_IO_ERROR_UNKNOWN	# another error occurred
enum GLogLevelFlags	# Flags specifying the level of log messages.
	G_LOG_FLAG_RECURSION	# internal flag
	G_LOG_FLAG_FATAL	# internal flag
	G_LOG_LEVEL_ERROR	# log level for errors, see g_error().    This level is also used for messages produced by g_assert().
	G_LOG_LEVEL_CRITICAL	# log level for critical warning messages, see    g_critical().    This level is also used for messages produced by g_return_if_fail()    and g_return_val_if_fail().
	G_LOG_LEVEL_WARNING	# log level for warnings, see g_warning()
	G_LOG_LEVEL_MESSAGE	# log level for messages, see g_message()
	G_LOG_LEVEL_INFO	# log level for informational messages, see g_info()
	G_LOG_LEVEL_DEBUG	# log level for debug messages, see g_debug()
	G_LOG_LEVEL_MASK	# a mask including all log levels
enum GLogWriterOutput	# Return values from <span class="type">GLogWriterFuncs</span></a> to indicate whether the given log entrywas successfully handled by the writer, or whether there was an error inhandling it (and hence a fallback writer should be used).
	G_LOG_WRITER_HANDLED	# Log writer has handled the log entry.
	G_LOG_WRITER_UNHANDLED	# Log writer could not handle the log entry.
enum GNumberParserError	# Error codes returned by functions converting a string to a number.
	G_NUMBER_PARSER_ERROR_INVALID	# String was not a valid number.
	G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS	# String was a number, but out of bounds.
enum GConvertError	# Error codes returned by character set conversion routines.
	G_CONVERT_ERROR_NO_CONVERSION	# Conversion between the requested character    sets is not supported.
	G_CONVERT_ERROR_ILLEGAL_SEQUENCE	# Invalid byte sequence in conversion input.
	G_CONVERT_ERROR_FAILED	# Conversion failed for some reason.
	G_CONVERT_ERROR_PARTIAL_INPUT	# Partial character sequence at end of input.
	G_CONVERT_ERROR_BAD_URI	# URI is invalid.
	G_CONVERT_ERROR_NOT_ABSOLUTE_PATH	# Pathname is not an absolute path.
	G_CONVERT_ERROR_NO_MEMORY	# No memory available. Since: 2.40
enum GUnicodeType	# These are the possible character classifications from theUnicode specification.See Unicode Character Database</a>.
	G_UNICODE_CONTROL	# General category "Other, Control" (Cc)
	G_UNICODE_FORMAT	# General category "Other, Format" (Cf)
	G_UNICODE_UNASSIGNED	# General category "Other, Not Assigned" (Cn)
	G_UNICODE_PRIVATE_USE	# General category "Other, Private Use" (Co)
	G_UNICODE_SURROGATE	# General category "Other, Surrogate" (Cs)
	G_UNICODE_LOWERCASE_LETTER	# General category "Letter, Lowercase" (Ll)
	G_UNICODE_MODIFIER_LETTER	# General category "Letter, Modifier" (Lm)
	G_UNICODE_OTHER_LETTER	# General category "Letter, Other" (Lo)
	G_UNICODE_TITLECASE_LETTER	# General category "Letter, Titlecase" (Lt)
	G_UNICODE_UPPERCASE_LETTER	# General category "Letter, Uppercase" (Lu)
	G_UNICODE_SPACING_MARK	# General category "Mark, Spacing" (Mc)
	G_UNICODE_ENCLOSING_MARK	# General category "Mark, Enclosing" (Me)
	G_UNICODE_NON_SPACING_MARK	# General category "Mark, Nonspacing" (Mn)
	G_UNICODE_DECIMAL_NUMBER	# General category "Number, Decimal Digit" (Nd)
	G_UNICODE_LETTER_NUMBER	# General category "Number, Letter" (Nl)
	G_UNICODE_OTHER_NUMBER	# General category "Number, Other" (No)
	G_UNICODE_CONNECT_PUNCTUATION	# General category "Punctuation, Connector" (Pc)
	G_UNICODE_DASH_PUNCTUATION	# General category "Punctuation, Dash" (Pd)
	G_UNICODE_CLOSE_PUNCTUATION	# General category "Punctuation, Close" (Pe)
	G_UNICODE_FINAL_PUNCTUATION	# General category "Punctuation, Final quote" (Pf)
	G_UNICODE_INITIAL_PUNCTUATION	# General category "Punctuation, Initial quote" (Pi)
	G_UNICODE_OTHER_PUNCTUATION	# General category "Punctuation, Other" (Po)
	G_UNICODE_OPEN_PUNCTUATION	# General category "Punctuation, Open" (Ps)
	G_UNICODE_CURRENCY_SYMBOL	# General category "Symbol, Currency" (Sc)
	G_UNICODE_MODIFIER_SYMBOL	# General category "Symbol, Modifier" (Sk)
	G_UNICODE_MATH_SYMBOL	# General category "Symbol, Math" (Sm)
	G_UNICODE_OTHER_SYMBOL	# General category "Symbol, Other" (So)
	G_UNICODE_LINE_SEPARATOR	# General category "Separator, Line" (Zl)
	G_UNICODE_PARAGRAPH_SEPARATOR	# General category "Separator, Paragraph" (Zp)
	G_UNICODE_SPACE_SEPARATOR	# General category "Separator, Space" (Zs)
enum GUnicodeBreakType	# These are the possible line break classifications.
	G_UNICODE_BREAK_MANDATORY	# Mandatory Break (BK)
	G_UNICODE_BREAK_CARRIAGE_RETURN	# Carriage Return (CR)
	G_UNICODE_BREAK_LINE_FEED	# Line Feed (LF)
	G_UNICODE_BREAK_COMBINING_MARK	# Attached Characters and Combining Marks (CM)
	G_UNICODE_BREAK_SURROGATE	# Surrogates (SG)
	G_UNICODE_BREAK_ZERO_WIDTH_SPACE	# Zero Width Space (ZW)
	G_UNICODE_BREAK_INSEPARABLE	# Inseparable (IN)
	G_UNICODE_BREAK_NON_BREAKING_GLUE	# Non-breaking ("Glue") (GL)
	G_UNICODE_BREAK_CONTINGENT	# Contingent Break Opportunity (CB)
	G_UNICODE_BREAK_SPACE	# Space (SP)
	G_UNICODE_BREAK_AFTER	# Break Opportunity After (BA)
	G_UNICODE_BREAK_BEFORE	# Break Opportunity Before (BB)
	G_UNICODE_BREAK_BEFORE_AND_AFTER	# Break Opportunity Before and After (B2)
	G_UNICODE_BREAK_HYPHEN	# Hyphen (HY)
	G_UNICODE_BREAK_NON_STARTER	# Nonstarter (NS)
	G_UNICODE_BREAK_OPEN_PUNCTUATION	# Opening Punctuation (OP)
	G_UNICODE_BREAK_CLOSE_PUNCTUATION	# Closing Punctuation (CL)
	G_UNICODE_BREAK_QUOTATION	# Ambiguous Quotation (QU)
	G_UNICODE_BREAK_EXCLAMATION	# Exclamation/Interrogation (EX)
	G_UNICODE_BREAK_IDEOGRAPHIC	# Ideographic (ID)
	G_UNICODE_BREAK_NUMERIC	# Numeric (NU)
	G_UNICODE_BREAK_INFIX_SEPARATOR	# Infix Separator (Numeric) (IS)
	G_UNICODE_BREAK_SYMBOL	# Symbols Allowing Break After (SY)
	G_UNICODE_BREAK_ALPHABETIC	# Ordinary Alphabetic and Symbol Characters (AL)
	G_UNICODE_BREAK_PREFIX	# Prefix (Numeric) (PR)
	G_UNICODE_BREAK_POSTFIX	# Postfix (Numeric) (PO)
	G_UNICODE_BREAK_COMPLEX_CONTEXT	# Complex Content Dependent (South East Asian) (SA)
	G_UNICODE_BREAK_AMBIGUOUS	# Ambiguous (Alphabetic or Ideographic) (AI)
	G_UNICODE_BREAK_UNKNOWN	# Unknown (XX)
	G_UNICODE_BREAK_NEXT_LINE	# Next Line (NL)
	G_UNICODE_BREAK_WORD_JOINER	# Word Joiner (WJ)
	G_UNICODE_BREAK_HANGUL_L_JAMO	# Hangul L Jamo (JL)
	G_UNICODE_BREAK_HANGUL_V_JAMO	# Hangul V Jamo (JV)
	G_UNICODE_BREAK_HANGUL_T_JAMO	# Hangul T Jamo (JT)
	G_UNICODE_BREAK_HANGUL_LV_SYLLABLE	# Hangul LV Syllable (H2)
	G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE	# Hangul LVT Syllable (H3)
	G_UNICODE_BREAK_CLOSE_PARANTHESIS	# Closing Parenthesis (CP). Since 2.28
	G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER	# Conditional Japanese Starter (CJ). Since: 2.32
	G_UNICODE_BREAK_HEBREW_LETTER	# Hebrew Letter (HL). Since: 2.32
	G_UNICODE_BREAK_REGIONAL_INDICATOR	# Regional Indicator (RI). Since: 2.36
	G_UNICODE_BREAK_EMOJI_BASE	# Emoji Base (EB). Since: 2.50
	G_UNICODE_BREAK_EMOJI_MODIFIER	# Emoji Modifier (EM). Since: 2.50
	G_UNICODE_BREAK_ZERO_WIDTH_JOINER	# Zero Width Joiner (ZWJ). Since: 2.50
enum GUnicodeScript	# The <span class="type">GUnicodeScript</span></a> enumeration identifies different writingsystems. The values correspond to the names as defined in theUnicode standard. The enumeration has been added in GLib 2.14,and is interchangeable with <span class="type">PangoScript</span></a>.
	G_UNICODE_SCRIPT_INVALID_CODE	#                               a value never returned from g_unichar_get_script()
	G_UNICODE_SCRIPT_COMMON	# a character used by multiple different scripts
	G_UNICODE_SCRIPT_INHERITED	# a mark glyph that takes its script from the                              base glyph to which it is attached
	G_UNICODE_SCRIPT_ARABIC	# Arabic
	G_UNICODE_SCRIPT_ARMENIAN	# Armenian
	G_UNICODE_SCRIPT_BENGALI	# Bengali
	G_UNICODE_SCRIPT_BOPOMOFO	# Bopomofo
	G_UNICODE_SCRIPT_CHEROKEE	# Cherokee
	G_UNICODE_SCRIPT_COPTIC	# Coptic
	G_UNICODE_SCRIPT_CYRILLIC	# Cyrillic
	G_UNICODE_SCRIPT_DESERET	# Deseret
	G_UNICODE_SCRIPT_DEVANAGARI	# Devanagari
	G_UNICODE_SCRIPT_ETHIOPIC	# Ethiopic
	G_UNICODE_SCRIPT_GEORGIAN	# Georgian
	G_UNICODE_SCRIPT_GOTHIC	# Gothic
	G_UNICODE_SCRIPT_GREEK	# Greek
	G_UNICODE_SCRIPT_GUJARATI	# Gujarati
	G_UNICODE_SCRIPT_GURMUKHI	# Gurmukhi
	G_UNICODE_SCRIPT_HAN	# Han
	G_UNICODE_SCRIPT_HANGUL	# Hangul
	G_UNICODE_SCRIPT_HEBREW	# Hebrew
	G_UNICODE_SCRIPT_HIRAGANA	# Hiragana
	G_UNICODE_SCRIPT_KANNADA	# Kannada
	G_UNICODE_SCRIPT_KATAKANA	# Katakana
	G_UNICODE_SCRIPT_KHMER	# Khmer
	G_UNICODE_SCRIPT_LAO	# Lao
	G_UNICODE_SCRIPT_LATIN	# Latin
	G_UNICODE_SCRIPT_MALAYALAM	# Malayalam
	G_UNICODE_SCRIPT_MONGOLIAN	# Mongolian
	G_UNICODE_SCRIPT_MYANMAR	# Myanmar
	G_UNICODE_SCRIPT_OGHAM	# Ogham
	G_UNICODE_SCRIPT_OLD_ITALIC	# Old Italic
	G_UNICODE_SCRIPT_ORIYA	# Oriya
	G_UNICODE_SCRIPT_RUNIC	# Runic
	G_UNICODE_SCRIPT_SINHALA	# Sinhala
	G_UNICODE_SCRIPT_SYRIAC	# Syriac
	G_UNICODE_SCRIPT_TAMIL	# Tamil
	G_UNICODE_SCRIPT_TELUGU	# Telugu
	G_UNICODE_SCRIPT_THAANA	# Thaana
	G_UNICODE_SCRIPT_THAI	# Thai
	G_UNICODE_SCRIPT_TIBETAN	# Tibetan
	G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL	#                               Canadian Aboriginal
	G_UNICODE_SCRIPT_YI	# Yi
	G_UNICODE_SCRIPT_TAGALOG	# Tagalog
	G_UNICODE_SCRIPT_HANUNOO	# Hanunoo
	G_UNICODE_SCRIPT_BUHID	# Buhid
	G_UNICODE_SCRIPT_TAGBANWA	# Tagbanwa
	G_UNICODE_SCRIPT_BRAILLE	# Braille
	G_UNICODE_SCRIPT_CYPRIOT	# Cypriot
	G_UNICODE_SCRIPT_LIMBU	# Limbu
	G_UNICODE_SCRIPT_OSMANYA	# Osmanya
	G_UNICODE_SCRIPT_SHAVIAN	# Shavian
	G_UNICODE_SCRIPT_LINEAR_B	# Linear B
	G_UNICODE_SCRIPT_TAI_LE	# Tai Le
	G_UNICODE_SCRIPT_UGARITIC	# Ugaritic
	G_UNICODE_SCRIPT_NEW_TAI_LUE	#                               New Tai Lue
	G_UNICODE_SCRIPT_BUGINESE	# Buginese
	G_UNICODE_SCRIPT_GLAGOLITIC	# Glagolitic
	G_UNICODE_SCRIPT_TIFINAGH	# Tifinagh
	G_UNICODE_SCRIPT_SYLOTI_NAGRI	#                               Syloti Nagri
	G_UNICODE_SCRIPT_OLD_PERSIAN	#                               Old Persian
	G_UNICODE_SCRIPT_KHAROSHTHI	# Kharoshthi
	G_UNICODE_SCRIPT_UNKNOWN	# an unassigned code point
	G_UNICODE_SCRIPT_BALINESE	# Balinese
	G_UNICODE_SCRIPT_CUNEIFORM	# Cuneiform
	G_UNICODE_SCRIPT_PHOENICIAN	# Phoenician
	G_UNICODE_SCRIPT_PHAGS_PA	# Phags-pa
	G_UNICODE_SCRIPT_NKO	# N'Ko
	G_UNICODE_SCRIPT_KAYAH_LI	# Kayah Li. Since 2.16.3
	G_UNICODE_SCRIPT_LEPCHA	# Lepcha. Since 2.16.3
	G_UNICODE_SCRIPT_REJANG	# Rejang. Since 2.16.3
	G_UNICODE_SCRIPT_SUNDANESE	# Sundanese. Since 2.16.3
	G_UNICODE_SCRIPT_SAURASHTRA	# Saurashtra. Since 2.16.3
	G_UNICODE_SCRIPT_CHAM	# Cham. Since 2.16.3
	G_UNICODE_SCRIPT_OL_CHIKI	# Ol Chiki. Since 2.16.3
	G_UNICODE_SCRIPT_VAI	# Vai. Since 2.16.3
	G_UNICODE_SCRIPT_CARIAN	# Carian. Since 2.16.3
	G_UNICODE_SCRIPT_LYCIAN	# Lycian. Since 2.16.3
	G_UNICODE_SCRIPT_LYDIAN	# Lydian. Since 2.16.3
	G_UNICODE_SCRIPT_AVESTAN	# Avestan. Since 2.26
	G_UNICODE_SCRIPT_BAMUM	# Bamum. Since 2.26
	G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS	#                               Egyptian Hieroglpyhs. Since 2.26
	G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC	#                               Imperial Aramaic. Since 2.26
	G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI	#                               Inscriptional Pahlavi. Since 2.26
	G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN	#                               Inscriptional Parthian. Since 2.26
	G_UNICODE_SCRIPT_JAVANESE	# Javanese. Since 2.26
	G_UNICODE_SCRIPT_KAITHI	# Kaithi. Since 2.26
	G_UNICODE_SCRIPT_LISU	# Lisu. Since 2.26
	G_UNICODE_SCRIPT_MEETEI_MAYEK	#                               Meetei Mayek. Since 2.26
	G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN	#                               Old South Arabian. Since 2.26
	G_UNICODE_SCRIPT_OLD_TURKIC	# Old Turkic. Since 2.28
	G_UNICODE_SCRIPT_SAMARITAN	# Samaritan. Since 2.26
	G_UNICODE_SCRIPT_TAI_THAM	# Tai Tham. Since 2.26
	G_UNICODE_SCRIPT_TAI_VIET	# Tai Viet. Since 2.26
	G_UNICODE_SCRIPT_BATAK	# Batak. Since 2.28
	G_UNICODE_SCRIPT_BRAHMI	# Brahmi. Since 2.28
	G_UNICODE_SCRIPT_MANDAIC	# Mandaic. Since 2.28
	G_UNICODE_SCRIPT_CHAKMA	# Chakma. Since: 2.32
	G_UNICODE_SCRIPT_MEROITIC_CURSIVE	# Meroitic Cursive. Since: 2.32
	G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS	# Meroitic Hieroglyphs. Since: 2.32
	G_UNICODE_SCRIPT_MIAO	# Miao. Since: 2.32
	G_UNICODE_SCRIPT_SHARADA	# Sharada. Since: 2.32
	G_UNICODE_SCRIPT_SORA_SOMPENG	# Sora Sompeng. Since: 2.32
	G_UNICODE_SCRIPT_TAKRI	# Takri. Since: 2.32
	G_UNICODE_SCRIPT_BASSA_VAH	# Bassa. Since: 2.42
	G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN	# Caucasian Albanian. Since: 2.42
	G_UNICODE_SCRIPT_DUPLOYAN	# Duployan. Since: 2.42
	G_UNICODE_SCRIPT_ELBASAN	# Elbasan. Since: 2.42
	G_UNICODE_SCRIPT_GRANTHA	# Grantha. Since: 2.42
	G_UNICODE_SCRIPT_KHOJKI	# Kjohki. Since: 2.42
	G_UNICODE_SCRIPT_KHUDAWADI	# Khudawadi, Sindhi. Since: 2.42
	G_UNICODE_SCRIPT_LINEAR_A	# Linear A. Since: 2.42
	G_UNICODE_SCRIPT_MAHAJANI	# Mahajani. Since: 2.42
	G_UNICODE_SCRIPT_MANICHAEAN	# Manichaean. Since: 2.42
	G_UNICODE_SCRIPT_MENDE_KIKAKUI	# Mende Kikakui. Since: 2.42
	G_UNICODE_SCRIPT_MODI	# Modi. Since: 2.42
	G_UNICODE_SCRIPT_MRO	# Mro. Since: 2.42
	G_UNICODE_SCRIPT_NABATAEAN	# Nabataean. Since: 2.42
	G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN	# Old North Arabian. Since: 2.42
	G_UNICODE_SCRIPT_OLD_PERMIC	# Old Permic. Since: 2.42
	G_UNICODE_SCRIPT_PAHAWH_HMONG	# Pahawh Hmong. Since: 2.42
	G_UNICODE_SCRIPT_PALMYRENE	# Palmyrene. Since: 2.42
	G_UNICODE_SCRIPT_PAU_CIN_HAU	# Pau Cin Hau. Since: 2.42
	G_UNICODE_SCRIPT_PSALTER_PAHLAVI	# Psalter Pahlavi. Since: 2.42
	G_UNICODE_SCRIPT_SIDDHAM	# Siddham. Since: 2.42
	G_UNICODE_SCRIPT_TIRHUTA	# Tirhuta. Since: 2.42
	G_UNICODE_SCRIPT_WARANG_CITI	# Warang Citi. Since: 2.42
	G_UNICODE_SCRIPT_AHOM	# Ahom. Since: 2.48
	G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS	# Anatolian Hieroglyphs. Since: 2.48
	G_UNICODE_SCRIPT_HATRAN	# Hatran. Since: 2.48
	G_UNICODE_SCRIPT_MULTANI	# Multani. Since: 2.48
	G_UNICODE_SCRIPT_OLD_HUNGARIAN	# Old Hungarian. Since: 2.48
	G_UNICODE_SCRIPT_SIGNWRITING	# Signwriting. Since: 2.48
	G_UNICODE_SCRIPT_ADLAM	# Adlam. Since: 2.50
	G_UNICODE_SCRIPT_BHAIKSUKI	# Bhaiksuki. Since: 2.50
	G_UNICODE_SCRIPT_MARCHEN	# Marchen. Since: 2.50
	G_UNICODE_SCRIPT_NEWA	# Newa. Since: 2.50
	G_UNICODE_SCRIPT_OSAGE	# Osage. Since: 2.50
	G_UNICODE_SCRIPT_TANGUT	# Tangut. Since: 2.50
enum GNormalizeMode	# Defines how a Unicode string is transformed in a canonicalform, standardizing such issues as whether a character withan accent is represented as a base character and combiningaccent or as a single precomposed character. Unicode stringsshould generally be normalized before comparing them.
	G_NORMALIZE_DEFAULT	# standardize differences that do not affect the    text content, such as the above-mentioned accent representation
	G_NORMALIZE_NFD	# G_NORMALIZE_DEFAULT
	G_NORMALIZE_DEFAULT_COMPOSE	# G_NORMALIZE_DEFAULT, but with    composed forms rather than a maximally decomposed form
	G_NORMALIZE_NFC	# G_NORMALIZE_DEFAULT_COMPOSE
	G_NORMALIZE_ALL	# G_NORMALIZE_DEFAULT also standardize the    "compatibility" characters in Unicode, such as SUPERSCRIPT THREE    to the standard forms (in this case DIGIT THREE). Formatting    information may be lost but for most text operations such    characters should be considered the same
	G_NORMALIZE_NFKD	# G_NORMALIZE_ALL
	G_NORMALIZE_ALL_COMPOSE	# G_NORMALIZE_ALL, but with composed    forms rather than a maximally decomposed form
	G_NORMALIZE_NFKC	# G_NORMALIZE_ALL_COMPOSE
enum GChecksumType	# The hashing algorithm to be used by <span class="type">GChecksum</span></a> when performing thedigest of some data.
	G_CHECKSUM_MD5	# Use the MD5 hashing algorithm
	G_CHECKSUM_SHA1	# Use the SHA-1 hashing algorithm
	G_CHECKSUM_SHA256	# Use the SHA-256 hashing algorithm
	G_CHECKSUM_SHA512	# Use the SHA-512 hashing algorithm (Since: 2.36)
	G_CHECKSUM_SHA384	# Use the SHA-384 hashing algorithm (Since: 2.51)
enum GDateDMY	# This enumeration isn't used in the API, but may be useful if you needto mark a number as a day, month, or year.
	G_DATE_DAY	# a day
	G_DATE_MONTH	# a month
	G_DATE_YEAR	# a year
enum GDateMonth	# Enumeration representing a month; values are <span class="type">G_DATE_JANUARY</span></a>,<span class="type">G_DATE_FEBRUARY</span></a>, etc. <span class="type">G_DATE_BAD_MONTH</span></a> is the invalid value.
	G_DATE_BAD_MONTH	# invalid value
	G_DATE_JANUARY	# January
	G_DATE_FEBRUARY	# February
	G_DATE_MARCH	# March
	G_DATE_APRIL	# April
	G_DATE_MAY	# May
	G_DATE_JUNE	# June
	G_DATE_JULY	# July
	G_DATE_AUGUST	# August
	G_DATE_SEPTEMBER	# September
	G_DATE_OCTOBER	# October
	G_DATE_NOVEMBER	# November
	G_DATE_DECEMBER	# December
enum GDateWeekday	# Enumeration representing a day of the week; <span class="type">G_DATE_MONDAY</span></a>,<span class="type">G_DATE_TUESDAY</span></a>, etc. <span class="type">G_DATE_BAD_WEEKDAY</span></a> is an invalid weekday.
	G_DATE_BAD_WEEKDAY	# invalid value
	G_DATE_MONDAY	# Monday
	G_DATE_TUESDAY	# Tuesday
	G_DATE_WEDNESDAY	# Wednesday
	G_DATE_THURSDAY	# Thursday
	G_DATE_FRIDAY	# Friday
	G_DATE_SATURDAY	# Saturday
	G_DATE_SUNDAY	# Sunday
enum GTimeType	# Disambiguates a given time in two ways.
	G_TIME_TYPE_STANDARD	# the time is in local standard time
	G_TIME_TYPE_DAYLIGHT	# the time is in local daylight time
	G_TIME_TYPE_UNIVERSAL	# the time is in UTC
enum GHookFlagMask	# Flags used internally in the <span class="type">GHook</span></a> implementation.
	G_HOOK_FLAG_ACTIVE	# set if the hook has not been destroyed
	G_HOOK_FLAG_IN_CALL	# set if the hook is currently being run
	G_HOOK_FLAG_MASK	# G_HOOK_FLAG_USER_SHIFT
enum GUserDirectory	# These are logical ids for special directories which are defineddepending on the platform used. You should use g_get_user_special_dir()</a>to retrieve the full path associated to the logical id.
	G_USER_DIRECTORY_DESKTOP	# the user's Desktop directory
	G_USER_DIRECTORY_DOCUMENTS	# the user's Documents directory
	G_USER_DIRECTORY_DOWNLOAD	# the user's Downloads directory
	G_USER_DIRECTORY_MUSIC	# the user's Music directory
	G_USER_DIRECTORY_PICTURES	# the user's Pictures directory
	G_USER_DIRECTORY_PUBLIC_SHARE	# the user's shared directory
	G_USER_DIRECTORY_TEMPLATES	# the user's Templates directory
	G_USER_DIRECTORY_VIDEOS	# the user's Movies directory
	G_USER_N_DIRECTORIES	# the number of enum values
enum GFormatSizeFlags	# Flags to modify the format of the string returned by g_format_size_full()</a>.
	G_FORMAT_SIZE_DEFAULT	# behave the same as g_format_size()
	G_FORMAT_SIZE_LONG_FORMAT	# include the exact number of bytes as part    of the returned string.  For example, "45.6 kB (45,612 bytes)".
	G_FORMAT_SIZE_IEC_UNITS	# use IEC (base 1024) units with "KiB"-style    suffixes. IEC units should only be used for reporting things with    a strong "power of 2" basis, like RAM sizes or RAID stripe sizes.    Network and storage sizes should be reported in the normal SI units.
enum GTokenType	# The possible types of token returned from eachg_scanner_get_next_token()</a> call.
	G_TOKEN_EOF	# the end of the file
	G_TOKEN_LEFT_PAREN	# a '(' character
	G_TOKEN_RIGHT_PAREN	# a ')' character
	G_TOKEN_LEFT_CURLY	# a '{' character
	G_TOKEN_RIGHT_CURLY	# a '}' character
	G_TOKEN_LEFT_BRACE	# a '[' character
	G_TOKEN_RIGHT_BRACE	# a ']' character
	G_TOKEN_EQUAL_SIGN	# a '=' character
	G_TOKEN_COMMA	# a ',' character
	G_TOKEN_NONE	# not a token
	G_TOKEN_ERROR	# an error occurred
	G_TOKEN_CHAR	# a character
	G_TOKEN_BINARY	# a binary integer
	G_TOKEN_OCTAL	# an octal integer
	G_TOKEN_INT	# an integer
	G_TOKEN_HEX	# a hex integer
	G_TOKEN_FLOAT	# a floating point number
	G_TOKEN_STRING	# a string
	G_TOKEN_SYMBOL	# a symbol
	G_TOKEN_IDENTIFIER	# an identifier
	G_TOKEN_IDENTIFIER_NULL	# a null identifier
	G_TOKEN_COMMENT_SINGLE	# one line comment
	G_TOKEN_COMMENT_MULTI	# multi line comment
enum GErrorType	# The possible errors, used in the <em class="parameter"><code>v_error</em> fieldof <span class="type">GTokenValue</span></a>, when the token is a <code class="literal">G_TOKEN_ERROR</a>.
	G_ERR_UNKNOWN	# unknown error
	G_ERR_UNEXP_EOF	# unexpected end of file
	G_ERR_UNEXP_EOF_IN_STRING	# unterminated string constant
	G_ERR_UNEXP_EOF_IN_COMMENT	# unterminated comment
	G_ERR_NON_DIGIT_IN_CONST	# non-digit character in a number
	G_ERR_DIGIT_RADIX	# digit beyond radix in a number
	G_ERR_FLOAT_RADIX	# non-decimal floating point number
	G_ERR_FLOAT_MALFORMED	# malformed floating point number
enum GSpawnError	# Error codes returned by spawning processes.
	G_SPAWN_ERROR_FORK	# Fork failed due to lack of memory.
	G_SPAWN_ERROR_READ	# Read or select on pipes failed.
	G_SPAWN_ERROR_CHDIR	# Changing to working directory failed.
	G_SPAWN_ERROR_ACCES	# EACCES
	G_SPAWN_ERROR_PERM	# EPERM
	G_SPAWN_ERROR_TOO_BIG	# E2BIG
	G_SPAWN_ERROR_2BIG	# G_SPAWN_ERROR_TOO_BIG
	G_SPAWN_ERROR_NOEXEC	# ENOEXEC
	G_SPAWN_ERROR_NAMETOOLONG	# ENAMETOOLONG
	G_SPAWN_ERROR_NOENT	# ENOENT
	G_SPAWN_ERROR_NOMEM	# ENOMEM
	G_SPAWN_ERROR_NOTDIR	# ENOTDIR
	G_SPAWN_ERROR_LOOP	# ELOOP
	G_SPAWN_ERROR_TXTBUSY	# ETXTBUSY
	G_SPAWN_ERROR_IO	# EIO
	G_SPAWN_ERROR_NFILE	# ENFILE
	G_SPAWN_ERROR_MFILE	# EMFILE
	G_SPAWN_ERROR_INVAL	# EINVAL
	G_SPAWN_ERROR_ISDIR	# EISDIR
	G_SPAWN_ERROR_LIBBAD	# ELIBBAD
	G_SPAWN_ERROR_FAILED	# error-&gt;message should explain.
enum GSpawnFlags	# Flags passed to g_spawn_sync()</a>, g_spawn_async()</a> and g_spawn_async_with_pipes()</a>.
	G_SPAWN_DEFAULT	# no flags, default behaviour
	G_SPAWN_LEAVE_DESCRIPTORS_OPEN	# the parent's open file descriptors will    be inherited by the child; otherwise all descriptors except stdin,    stdout and stderr will be closed before calling exec() in the child.
	G_SPAWN_DO_NOT_REAP_CHILD	# SIGCHLD yourself), or the child will become a zombie.
	G_SPAWN_SEARCH_PATH	# argv[0] need not be an absolute path, it will be    looked for in the user's <code class="literal">PATH.
	G_SPAWN_STDOUT_TO_DEV_NULL	# the child's standard output will be discarded,    instead of going to the same location as the parent's standard output.
	G_SPAWN_STDERR_TO_DEV_NULL	# the child's standard error will be discarded.
	G_SPAWN_CHILD_INHERITS_STDIN	# /dev/null).
	G_SPAWN_FILE_AND_ARGV_ZERO	# argv is the file to    execute, while the remaining elements are the actual argument vector    to pass to the file. Normally g_spawn_async_with_pipes() uses <code class="literal">argv[0]    as the file to execute, and passes all of <code class="literal">argv to the child.
	G_SPAWN_SEARCH_PATH_FROM_ENVP	# argv[0] is not an abolute path,    it will be looked for in the <code class="literal">PATH from the passed child environment.    Since: 2.34
	G_SPAWN_CLOEXEC_PIPES	# O_CLOEXEC flag set.    Since: 2.40
enum GFileError	# Values corresponding to <em class="parameter"><code>errno</em> codes returned from file operationson UNIX. Unlike <em class="parameter"><code>errno</em> codes, GFileError values are available onall systems, even Windows. The exact meaning of each code dependson what sort of file operation you were performing; the UNIXdocumentation gives more details. The following error code descriptionscome from the GNU C Library manual, and are under the copyrightof that manual.
	G_FILE_ERROR_EXIST	# Operation not permitted; only the owner of    the file (or other resource) or processes with special privileges    can perform the operation.
	G_FILE_ERROR_ISDIR	# File is a directory; you cannot open a directory    for writing, or create or remove hard links to it.
	G_FILE_ERROR_ACCES	# Permission denied; the file permissions do not    allow the attempted operation.
	G_FILE_ERROR_NAMETOOLONG	# Filename too long.
	G_FILE_ERROR_NOENT	# No such file or directory. This is a "file    doesn't exist" error for ordinary files that are referenced in    contexts where they are expected to already exist.
	G_FILE_ERROR_NOTDIR	# A file that isn't a directory was specified when    a directory is required.
	G_FILE_ERROR_NXIO	# No such device or address. The system tried to    use the device represented by a file you specified, and it    couldn't find the device. This can mean that the device file was    installed incorrectly, or that the physical device is missing or    not correctly attached to the computer.
	G_FILE_ERROR_NODEV	# The underlying file system of the specified file    does not support memory mapping.
	G_FILE_ERROR_ROFS	# The directory containing the new link can't be    modified because it's on a read-only file system.
	G_FILE_ERROR_TXTBSY	# Text file busy.
	G_FILE_ERROR_FAULT	# You passed in a pointer to bad memory.    (GLib won't reliably return this, don't pass in pointers to bad    memory.)
	G_FILE_ERROR_LOOP	# Too many levels of symbolic links were encountered    in looking up a file name. This often indicates a cycle of symbolic    links.
	G_FILE_ERROR_NOSPC	# No space left on device; write operation on a    file failed because the disk is full.
	G_FILE_ERROR_NOMEM	# No memory available. The system cannot allocate    more virtual memory because its capacity is full.
	G_FILE_ERROR_MFILE	# The current process has too many files open and    can't open any more. Duplicate descriptors do count toward this    limit.
	G_FILE_ERROR_NFILE	# There are too many distinct file openings in the    entire system.
	G_FILE_ERROR_BADF	# Bad file descriptor; for example, I/O on a    descriptor that has been closed or reading from a descriptor open    only for writing (or vice versa).
	G_FILE_ERROR_INVAL	# Invalid argument. This is used to indicate    various kinds of problems with passing the wrong argument to a    library function.
	G_FILE_ERROR_PIPE	# Broken pipe; there is no process reading from the    other end of a pipe. Every library function that returns this    error code also generates a 'SIGPIPE' signal; this signal    terminates the program if not handled or blocked. Thus, your    program will never actually see this code unless it has handled    or blocked 'SIGPIPE'.
	G_FILE_ERROR_AGAIN	# Resource temporarily unavailable; the call might    work if you try again later.
	G_FILE_ERROR_INTR	# Interrupted function call; an asynchronous signal    occurred and prevented completion of the call. When this    happens, you should try the call again.
	G_FILE_ERROR_IO	# Input/output error; usually used for physical read   or write errors. i.e. the disk or other physical device hardware   is returning errors.
	G_FILE_ERROR_PERM	# Operation not permitted; only the owner of the   file (or other resource) or processes with special privileges can   perform the operation.
	G_FILE_ERROR_NOSYS	# Function not implemented; this indicates that   the system is missing some functionality.
	G_FILE_ERROR_FAILED	# Does not correspond to a UNIX error code; this   is the standard "failed for unspecified reason" error code present   in all GError error code enumerations. Returned if no specific   code applies.
enum GFileTest	# A test to perform on a file using g_file_test()</a>.
	G_FILE_TEST_IS_REGULAR	# TRUE if the file is a regular file    (not a directory). Note that this test will also return <code class="literal">TRUE    if the tested file is a symlink to a regular file.
	G_FILE_TEST_IS_SYMLINK	# TRUE if the file is a symlink.
	G_FILE_TEST_IS_DIR	# TRUE if the file is a directory.
	G_FILE_TEST_IS_EXECUTABLE	# TRUE if the file is executable.
	G_FILE_TEST_EXISTS	# TRUE if the file exists. It may or may not    be a regular file.
enum GShellError	# Error codes returned by shell functions.
	G_SHELL_ERROR_BAD_QUOTING	# Mismatched or otherwise mangled quoting.
	G_SHELL_ERROR_EMPTY_STRING	# String to be parsed was empty.
	G_SHELL_ERROR_FAILED	# Some other error.
enum GOptionError	# Error codes returned by option parsing.
	G_OPTION_ERROR_UNKNOWN_OPTION	# An option was not known to the parser. This error will only be reported, if the parser hasn't been instructed to ignore unknown options, see g_option_context_set_ignore_unknown_options().
	G_OPTION_ERROR_BAD_VALUE	# A value couldn't be parsed.
	G_OPTION_ERROR_FAILED	# A GOptionArgFunc callback failed.
enum GOptionArg	# The <span class="type">GOptionArg</span></a> enum values determine which type of extra argument theoptions expect to find. If an option expects an extra argument, it canbe specified in several ways; with a short option: <code class="literal">-x arg, with a longoption: <code class="literal">--name arg or combined in a single argument: <code class="literal">--name=arg.
	G_OPTION_ARG_NONE	# No extra argument. This is useful for simple flags.
	G_OPTION_ARG_STRING	# The option takes a string argument.
	G_OPTION_ARG_INT	# The option takes an integer argument.
	G_OPTION_ARG_CALLBACK	# The option provides a callback (of type    GOptionArgFunc) to parse the extra argument.
	G_OPTION_ARG_FILENAME	# The option takes a filename as argument.
	G_OPTION_ARG_STRING_ARRAY	# The option takes a string argument, multiple    uses of the option are collected into an array of strings.
	G_OPTION_ARG_FILENAME_ARRAY	# The option takes a filename as argument,     multiple uses of the option are collected into an array of strings.
	G_OPTION_ARG_DOUBLE	# The option takes a double argument. The argument    can be formatted either for the user's locale or for the "C" locale.    Since 2.12
	G_OPTION_ARG_INT64	# G_OPTION_ARG_INT but for larger numbers. The number can be in    decimal base, or in hexadecimal (when prefixed with <code class="literal">0x, for    example, <code class="literal">0xffffffff). Since 2.12
enum GOptionFlags	# Flags which modify individual options.
	G_OPTION_FLAG_NONE	# No flags. Since: 2.42.
	G_OPTION_FLAG_HIDDEN	# --help output.
	G_OPTION_FLAG_IN_MAIN	# --help output, even if it is defined in a group.
	G_OPTION_FLAG_REVERSE	# G_OPTION_ARG_NONE kind, this    flag indicates that the sense of the option is reversed.
	G_OPTION_FLAG_NO_ARG	# G_OPTION_ARG_CALLBACK kind,    this flag indicates that the callback does not take any argument    (like a <code class="literal">G_OPTION_ARG_NONE option). Since 2.8
	G_OPTION_FLAG_FILENAME	# G_OPTION_ARG_CALLBACK    kind, this flag indicates that the argument should be passed to the    callback in the GLib filename encoding rather than UTF-8. Since 2.8
	G_OPTION_FLAG_OPTIONAL_ARG	# G_OPTION_ARG_CALLBACK     kind, this flag indicates that the argument supply is optional.    If no argument is given then data of <code class="literal">GOptionParseFunc will be    set to NULL. Since 2.8
	G_OPTION_FLAG_NOALIAS	# groupname- if     there is a conflict. This option should only be used in situations    where aliasing is necessary to model some legacy commandline interface.    It is not safe to use this option, unless all option groups are under    your direct control. Since 2.8.
enum GRegexError	# Error codes returned by regular expressions functions.
	G_REGEX_ERROR_COMPILE	# Compilation of the regular expression failed.
	G_REGEX_ERROR_OPTIMIZE	# Optimization of the regular expression failed.
	G_REGEX_ERROR_REPLACE	# Replacement failed due to an ill-formed replacement    string.
	G_REGEX_ERROR_MATCH	# The match process failed.
	G_REGEX_ERROR_INTERNAL	# Internal error of the regular expression engine.    Since 2.16
	G_REGEX_ERROR_STRAY_BACKSLASH	# "" at end of pattern. Since 2.16
	G_REGEX_ERROR_MISSING_CONTROL_CHAR	# "c" at end of pattern. Since 2.16
	G_REGEX_ERROR_UNRECOGNIZED_ESCAPE	# Unrecognized character follows "".    Since 2.16
	G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER	# Numbers out of order in "{}"    quantifier. Since 2.16
	G_REGEX_ERROR_QUANTIFIER_TOO_BIG	# Number too big in "{}" quantifier.    Since 2.16
	G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS	# Missing terminating "]" for    character class. Since 2.16
	G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS	# Invalid escape sequence    in character class. Since 2.16
	G_REGEX_ERROR_RANGE_OUT_OF_ORDER	# Range out of order in character class.    Since 2.16
	G_REGEX_ERROR_NOTHING_TO_REPEAT	# Nothing to repeat. Since 2.16
	G_REGEX_ERROR_UNRECOGNIZED_CHARACTER	# Unrecognized character after "(?",    "(?&lt;" or "(?P". Since 2.16
	G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS	# POSIX named classes are    supported only within a class. Since 2.16
	G_REGEX_ERROR_UNMATCHED_PARENTHESIS	# Missing terminating ")" or ")"    without opening "(". Since 2.16
	G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE	# Reference to non-existent    subpattern. Since 2.16
	G_REGEX_ERROR_UNTERMINATED_COMMENT	# Missing terminating ")" after comment.    Since 2.16
	G_REGEX_ERROR_EXPRESSION_TOO_LARGE	# Regular expression too large.    Since 2.16
	G_REGEX_ERROR_MEMORY_ERROR	# Failed to get memory. Since 2.16
	G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND	# Lookbehind assertion is not    fixed length. Since 2.16
	G_REGEX_ERROR_MALFORMED_CONDITION	# Malformed number or name after "(?(".    Since 2.16
	G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES	# Conditional group contains    more than two branches. Since 2.16
	G_REGEX_ERROR_ASSERTION_EXPECTED	# Assertion expected after "(?(".    Since 2.16
	G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME	# Unknown POSIX class name.    Since 2.16
	G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED	# POSIX collating    elements are not supported. Since 2.16
	G_REGEX_ERROR_HEX_CODE_TOO_LARGE	# Character value in "x{...}" sequence    is too large. Since 2.16
	G_REGEX_ERROR_INVALID_CONDITION	# Invalid condition "(?(0)". Since 2.16
	G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND	# C not allowed in    lookbehind assertion. Since 2.16
	G_REGEX_ERROR_INFINITE_LOOP	# Recursive call could loop indefinitely.    Since 2.16
	G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR	# Missing terminator    in subpattern name. Since 2.16
	G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME	# Two named subpatterns have    the same name. Since 2.16
	G_REGEX_ERROR_MALFORMED_PROPERTY	# Malformed "P" or "p" sequence.    Since 2.16
	G_REGEX_ERROR_UNKNOWN_PROPERTY	# Unknown property name after "P" or    "p". Since 2.16
	G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG	# Subpattern name is too long    (maximum 32 characters). Since 2.16
	G_REGEX_ERROR_TOO_MANY_SUBPATTERNS	# Too many named subpatterns (maximum    10,000). Since 2.16
	G_REGEX_ERROR_INVALID_OCTAL_VALUE	# Octal value is greater than "377".    Since 2.16
	G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE	# "DEFINE" group contains more    than one branch. Since 2.16
	G_REGEX_ERROR_DEFINE_REPETION	# Repeating a "DEFINE" group is not allowed.    This error is never raised. Since: 2.16 Deprecated: 2.34
	G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS	# Inconsistent newline options.    Since 2.16
	G_REGEX_ERROR_MISSING_BACK_REFERENCE	# "g" is not followed by a braced,     angle-bracketed, or quoted name or number, or by a plain number. Since: 2.16
	G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE	# relative reference must not be zero. Since: 2.34
	G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN	# the backtracing    control verb used does not allow an argument. Since: 2.34
	G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB	# unknown backtracing     control verb. Since: 2.34
	G_REGEX_ERROR_NUMBER_TOO_BIG	# number is too big in escape sequence. Since: 2.34
	G_REGEX_ERROR_MISSING_SUBPATTERN_NAME	# Missing subpattern name. Since: 2.34
	G_REGEX_ERROR_MISSING_DIGIT	# Missing digit. Since 2.34
	G_REGEX_ERROR_INVALID_DATA_CHARACTER	# In JavaScript compatibility mode,    "[" is an invalid data character. Since: 2.34
	G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME	# different names for subpatterns of the     same number are not allowed. Since: 2.34
	G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED	# the backtracing control    verb requires an argument. Since: 2.34
	G_REGEX_ERROR_INVALID_CONTROL_CHAR	# "c" must be followed by an ASCII     character. Since: 2.34
	G_REGEX_ERROR_MISSING_NAME	# "k" is not followed by a braced, angle-bracketed, or     quoted name. Since: 2.34
	G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS	# "N" is not supported in a class. Since: 2.34
	G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES	# too many forward references. Since: 2.34
	G_REGEX_ERROR_NAME_TOO_LONG	# the name is too long in "(*MARK)", "(*PRUNE)",     "(*SKIP)", or "(*THEN)". Since: 2.34
	G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE	# the character value in the u sequence is    too large. Since: 2.34
enum GRegexCompileFlags	# Flags specifying compile-time options.
	G_REGEX_CASELESS	# Letters in the pattern match both upper- and    lowercase letters. This option can be changed within a pattern    by a "(?i)" option setting.
	G_REGEX_MULTILINE	# By default, GRegex treats the strings as consisting    of a single line of characters (even if it actually contains    newlines). The "start of line" metacharacter ("^") matches only    at the start of the string, while the "end of line" metacharacter    ("$") matches only at the end of the string, or before a terminating    newline (unless G_REGEX_DOLLAR_ENDONLY is set). When    G_REGEX_MULTILINE is set, the "start of line" and "end of line"    constructs match immediately following or immediately before any    newline in the string, respectively, as well as at the very start    and end. This can be changed within a pattern by a "(?m)" option    setting.
	G_REGEX_DOTALL	# A dot metacharater (".") in the pattern matches all    characters, including newlines. Without it, newlines are excluded.    This option can be changed within a pattern by a ("?s") option setting.
	G_REGEX_EXTENDED	# Whitespace data characters in the pattern are    totally ignored except when escaped or inside a character class.    Whitespace does not include the VT character (code 11). In addition,    characters between an unescaped "#" outside a character class and    the next newline character, inclusive, are also ignored. This can    be changed within a pattern by a "(?x)" option setting.
	G_REGEX_ANCHORED	# The pattern is forced to be "anchored", that is,    it is constrained to match only at the first matching point in the    string that is being searched. This effect can also be achieved by    appropriate constructs in the pattern itself such as the "^"    metacharater.
	G_REGEX_DOLLAR_ENDONLY	# A dollar metacharacter ("$") in the pattern    matches only at the end of the string. Without this option, a    dollar also matches immediately before the final character if    it is a newline (but not before any other newlines). This option    is ignored if G_REGEX_MULTILINE is set.
	G_REGEX_UNGREEDY	# Inverts the "greediness" of the quantifiers so that    they are not greedy by default, but become greedy if followed by "?".    It can also be set by a "(?U)" option setting within the pattern.
	G_REGEX_RAW	# Usually strings must be valid UTF-8 strings, using this    flag they are considered as a raw sequence of bytes.
	G_REGEX_NO_AUTO_CAPTURE	# Disables the use of numbered capturing    parentheses in the pattern. Any opening parenthesis that is not    followed by "?" behaves as if it were followed by "?:" but named    parentheses can still be used for capturing (and they acquire numbers    in the usual way).
	G_REGEX_OPTIMIZE	# Optimize the regular expression. If the pattern will    be used many times, then it may be worth the effort to optimize it    to improve the speed of matches.
	G_REGEX_FIRSTLINE	# Limits an unanchored pattern to match before (or at) the    first newline. Since: 2.34
	G_REGEX_DUPNAMES	# Names used to identify capturing subpatterns need not    be unique. This can be helpful for certain types of pattern when it    is known that only one instance of the named subpattern can ever be    matched.
	G_REGEX_NEWLINE_CR	# Usually any newline character or character sequence is    recognized. If this option is set, the only recognized newline character    is 'r'.
	G_REGEX_NEWLINE_LF	# Usually any newline character or character sequence is    recognized. If this option is set, the only recognized newline character    is 'n'.
	G_REGEX_NEWLINE_CRLF	# Usually any newline character or character sequence is    recognized. If this option is set, the only recognized newline character    sequence is 'rn'.
	G_REGEX_NEWLINE_ANYCRLF	# Usually any newline character or character sequence    is recognized. If this option is set, the only recognized newline character    sequences are 'r', 'n', and 'rn'. Since: 2.34
	G_REGEX_BSR_ANYCRLF	# Usually any newline character or character sequence    is recognised. If this option is set, then "R" only recognizes the newline   characters 'r', 'n' and 'rn'. Since: 2.34
	G_REGEX_JAVASCRIPT_COMPAT	# Changes behaviour so that it is compatible with    JavaScript rather than PCRE. Since: 2.34
enum GRegexMatchFlags	# Flags specifying match-time options.
	G_REGEX_MATCH_ANCHORED	# The pattern is forced to be "anchored", that is,    it is constrained to match only at the first matching point in the    string that is being searched. This effect can also be achieved by    appropriate constructs in the pattern itself such as the "^"    metacharater.
	G_REGEX_MATCH_NOTBOL	# Specifies that first character of the string is    not the beginning of a line, so the circumflex metacharacter should    not match before it. Setting this without G_REGEX_MULTILINE (at    compile time) causes circumflex never to match. This option affects    only the behaviour of the circumflex metacharacter, it does not    affect "A".
	G_REGEX_MATCH_NOTEOL	# Specifies that the end of the subject string is    not the end of a line, so the dollar metacharacter should not match    it nor (except in multiline mode) a newline immediately before it.    Setting this without G_REGEX_MULTILINE (at compile time) causes    dollar never to match. This option affects only the behaviour of    the dollar metacharacter, it does not affect "Z" or "z".
	G_REGEX_MATCH_NOTEMPTY	# An empty string is not considered to be a valid    match if this option is set. If there are alternatives in the pattern,    they are tried. If all the alternatives match the empty string, the    entire match fails. For example, if the pattern "a?b?" is applied to    a string not beginning with "a" or "b", it matches the empty string    at the start of the string. With this flag set, this match is not    valid, so GRegex searches further into the string for occurrences    of "a" or "b".
	G_REGEX_MATCH_PARTIAL	# Turns on the partial matching feature, for more    documentation on partial matching see g_match_info_is_partial_match().
	G_REGEX_MATCH_NEWLINE_CR	# Overrides the newline definition set when    creating a new GRegex, setting the 'r' character as line terminator.
	G_REGEX_MATCH_NEWLINE_LF	# Overrides the newline definition set when    creating a new GRegex, setting the 'n' character as line terminator.
	G_REGEX_MATCH_NEWLINE_CRLF	# Overrides the newline definition set when    creating a new GRegex, setting the 'rn' characters sequence as line terminator.
	G_REGEX_MATCH_NEWLINE_ANY	# Overrides the newline definition set when    creating a new GRegex, any Unicode newline sequence    is recognised as a newline. These are 'r', 'n' and 'rn', and the    single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),    U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and    U+2029 PARAGRAPH SEPARATOR.
	G_REGEX_MATCH_NEWLINE_ANYCRLF	# Overrides the newline definition set when    creating a new GRegex; any 'r', 'n', or 'rn' character sequence    is recognized as a newline. Since: 2.34
	G_REGEX_MATCH_BSR_ANYCRLF	# Overrides the newline definition for "R" set when    creating a new GRegex; only 'r', 'n', or 'rn' character sequences    are recognized as a newline by "R". Since: 2.34
	G_REGEX_MATCH_BSR_ANY	# Overrides the newline definition for "R" set when    creating a new GRegex; any Unicode newline character or character sequence    are recognized as a newline by "R". These are 'r', 'n' and 'rn', and the    single characters U+000B LINE TABULATION, U+000C FORM FEED (FF),    U+0085 NEXT LINE (NEL), U+2028 LINE SEPARATOR and    U+2029 PARAGRAPH SEPARATOR. Since: 2.34
	G_REGEX_MATCH_PARTIAL_SOFT	# An alias for G_REGEX_MATCH_PARTIAL. Since: 2.34
	G_REGEX_MATCH_PARTIAL_HARD	# Turns on the partial matching feature. In contrast to    to G_REGEX_MATCH_PARTIAL_SOFT, this stops matching as soon as a partial match    is found, without continuing to search for a possible complete match. See    g_match_info_is_partial_match() for more information. Since: 2.34
	G_REGEX_MATCH_NOTEMPTY_ATSTART	# Like G_REGEX_MATCH_NOTEMPTY, but only applied to    the start of the matched string. For anchored    patterns this can only happen for pattern containing "K". Since: 2.34
enum GMarkupError	# Error codes returned by markup parsing.
	G_MARKUP_ERROR_BAD_UTF8	# text being parsed was not valid UTF-8
	G_MARKUP_ERROR_EMPTY	# document contained nothing, or only whitespace
	G_MARKUP_ERROR_PARSE	# document was ill-formed
	G_MARKUP_ERROR_UNKNOWN_ELEMENT	# error should be set by GMarkupParser    functions; element wasn't known
	G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE	# error should be set by GMarkupParser    functions; attribute wasn't known
	G_MARKUP_ERROR_INVALID_CONTENT	# error should be set by GMarkupParser    functions; content was invalid
	G_MARKUP_ERROR_MISSING_ATTRIBUTE	# error should be set by GMarkupParser    functions; a required attribute was missing
enum GMarkupParseFlags	# Flags that affect the behaviour of the parser.
	G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG	# flag you should not use
	G_MARKUP_TREAT_CDATA_AS_TEXT	# &lt;![CDATA[ and <code class="literal">]]&gt;) is    passed to the <em class="parameter"><code>text</em> function. This flag was added in GLib 2.12
	G_MARKUP_PREFIX_ERROR_POSITION	# Normally errors caught by GMarkup    itself have line/column information prefixed to them to let the    caller know the location of the error. When this flag is set the    location information is also prefixed to errors generated by the    GMarkupParser implementation functions
	G_MARKUP_IGNORE_QUALIFIED	# Ignore (don't report) qualified    attributes and tags, along with their contents.  A qualified    attribute or tag is one that contains ':' in its name (ie: is in    another namespace).  Since: 2.40.
enum GMarkupCollectType	# A mixed enumerated type and flags field. You must specify one type(string, strdup, boolean, tristate).  Additionally, you may  optionallybitwise OR the type with the flag <code class="literal">G_MARKUP_COLLECT_OPTIONAL</a>.
	G_MARKUP_COLLECT_INVALID	# used to terminate the list of attributes    to collect
	G_MARKUP_COLLECT_STRING	# G_MARKUP_COLLECT_OPTIONAL is specified and the    attribute isn't present then the pointer will be set to <code class="literal">NULL
	G_MARKUP_COLLECT_STRDUP	# G_MARKUP_COLLECT_STRING, but    expects a parameter of type (char **) and g_strdup()s the    returned pointer. The pointer must be freed with g_free()
	G_MARKUP_COLLECT_BOOLEAN	# FALSE if the    attribute isn't present. Valid boolean values consist of    (case-insensitive) "false", "f", "no", "n", "0" and "true", "t",    "yes", "y", "1"
	G_MARKUP_COLLECT_TRISTATE	# G_MARKUP_COLLECT_BOOLEAN, but    in the case of a missing attribute a value is set that compares    equal to neither <code class="literal">FALSE nor <code class="literal">TRUE G_MARKUP_COLLECT_OPTIONAL is    implied
	G_MARKUP_COLLECT_OPTIONAL	# can be bitwise ORed with the other fields.    If present, allows the attribute not to appear. A default value    is set depending on what value type is used
enum GKeyFileError	# Error codes returned by key file parsing.
	G_KEY_FILE_ERROR_UNKNOWN_ENCODING	# the text being parsed was in    an unknown encoding
	G_KEY_FILE_ERROR_PARSE	# document was ill-formed
	G_KEY_FILE_ERROR_NOT_FOUND	# the file was not found
	G_KEY_FILE_ERROR_KEY_NOT_FOUND	# a requested key was not found
	G_KEY_FILE_ERROR_GROUP_NOT_FOUND	# a requested group was not found
	G_KEY_FILE_ERROR_INVALID_VALUE	# a value could not be parsed
enum GKeyFileFlags	# Flags which influence the parsing.
	G_KEY_FILE_NONE	# No flags, default behaviour
	G_KEY_FILE_KEEP_COMMENTS	# Use this flag if you plan to write the    (possibly modified) contents of the key file back to a file;    otherwise all comments will be lost when the key file is    written back.
	G_KEY_FILE_KEEP_TRANSLATIONS	# Use this flag if you plan to write the    (possibly modified) contents of the key file back to a file;    otherwise only the translations for the current language will be    written back.
enum GBookmarkFileError	# Error codes returned by bookmark file parsing.
	G_BOOKMARK_FILE_ERROR_INVALID_URI	# URI was ill-formed
	G_BOOKMARK_FILE_ERROR_INVALID_VALUE	# a requested field was not found
	G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED	# a requested application did    not register a bookmark
	G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND	# a requested URI was not found
	G_BOOKMARK_FILE_ERROR_READ	# document was ill formed
	G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING	# the text being parsed was    in an unknown encoding
	G_BOOKMARK_FILE_ERROR_WRITE	# an error occurred while writing
	G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND	# requested file was not found
enum GTestFileType	# The type of file to return the filename for, when used withg_test_build_filename()</a>.
	G_TEST_DIST	# a file that was included in the distribution tarball
	G_TEST_BUILT	# a file that was built on the compiling machine
enum GTestTrapFlags	# <code class="literal">GTestTrapFlags is deprecated and should not be used in newly-written code.
	G_TEST_TRAP_SILENCE_STDOUT	# /dev/null so it cannot be observed on the console during test    runs. The actual output is still captured though to allow later    tests with g_test_trap_assert_stdout().
	G_TEST_TRAP_SILENCE_STDERR	# /dev/null so it cannot be observed on the console during test    runs. The actual output is still captured though to allow later    tests with g_test_trap_assert_stderr().
	G_TEST_TRAP_INHERIT_STDIN	# /dev/null otherwise.
enum GTestSubprocessFlags	# Flags to pass to g_test_trap_subprocess()</a> to control input and output.
	G_TEST_SUBPROCESS_INHERIT_STDIN	# /dev/null.
	G_TEST_SUBPROCESS_INHERIT_STDOUT	# If this flag is given, the child    process will inherit the parent's stdout. Otherwise, the child's    stdout will not be visible, but it will be captured to allow    later tests with g_test_trap_assert_stdout().
	G_TEST_SUBPROCESS_INHERIT_STDERR	# If this flag is given, the child    process will inherit the parent's stderr. Otherwise, the child's    stderr will not be visible, but it will be captured to allow    later tests with g_test_trap_assert_stderr().
enum GWin32OSType	# Type of Windows edition to check for at run-time.
	G_WIN32_OS_ANY	# The running system can be a workstation or a server edition of Windows.  The type of the running system is therefore not checked.
	G_WIN32_OS_WORKSTATION	# The running system is a workstation edition of Windows, such as Windows 7 Professional.
	G_WIN32_OS_SERVER	# The running system is a server edition of Windows, such as Windows Server 2008 R2.
enum GTraverseType	# Specifies the type of traveral performed by g_tree_traverse()</a>,g_node_traverse()</a> and g_node_find()</a>. The different orders areillustrated here:
	G_IN_ORDER	# vists a node's left child first, then the node itself,             then its right child. This is the one to use if you             want the output sorted according to the compare             function.
	G_PRE_ORDER	# visits a node, then its children.
	G_POST_ORDER	# visits the node's children, then the node itself.
	G_LEVEL_ORDER	# is not implemented for             balanced binary trees.             For n-ary trees, it             vists the root node first, then its children, then             its grandchildren, and so on. Note that this is less             efficient than the other orders.
enum GTraverseFlags	# Specifies which nodes are visited during several of the treefunctions, including g_node_traverse()</a> and g_node_find()</a>.
	G_TRAVERSE_LEAVES	# G_TRAVERSE_LEAFS.
	G_TRAVERSE_NON_LEAVES	# G_TRAVERSE_NON_LEAFS.
	G_TRAVERSE_ALL	# all nodes should be visited.
	G_TRAVERSE_MASK	# a mask of all traverse flags.
	G_TRAVERSE_LEAFS	# G_TRAVERSE_LEAVES.
	G_TRAVERSE_NON_LEAFS	# G_TRAVERSE_NON_LEAVES.
enum GVariantClass	# The range of possible top-level types of <span class="type">GVariant</span></a> instances.
	G_VARIANT_CLASS_BOOLEAN	# The GVariant is a boolean.
	G_VARIANT_CLASS_BYTE	# The GVariant is a byte.
	G_VARIANT_CLASS_INT16	# The GVariant is a signed 16 bit integer.
	G_VARIANT_CLASS_UINT16	# The GVariant is an unsigned 16 bit integer.
	G_VARIANT_CLASS_INT32	# The GVariant is a signed 32 bit integer.
	G_VARIANT_CLASS_UINT32	# The GVariant is an unsigned 32 bit integer.
	G_VARIANT_CLASS_INT64	# The GVariant is a signed 64 bit integer.
	G_VARIANT_CLASS_UINT64	# The GVariant is an unsigned 64 bit integer.
	G_VARIANT_CLASS_HANDLE	# The GVariant is a file handle index.
	G_VARIANT_CLASS_DOUBLE	# The GVariant is a double precision floating                          point value.
	G_VARIANT_CLASS_STRING	# The GVariant is a normal string.
	G_VARIANT_CLASS_OBJECT_PATH	# The GVariant is a D-Bus object path                               string.
	G_VARIANT_CLASS_SIGNATURE	# The GVariant is a D-Bus signature string.
	G_VARIANT_CLASS_VARIANT	# The GVariant is a variant.
	G_VARIANT_CLASS_MAYBE	# The GVariant is a maybe-typed value.
	G_VARIANT_CLASS_ARRAY	# The GVariant is an array.
	G_VARIANT_CLASS_TUPLE	# The GVariant is a tuple.
	G_VARIANT_CLASS_DICT_ENTRY	# The GVariant is a dictionary entry.
enum GVariantParseError	# Error codes returned by parsing text-format GVariants.
	G_VARIANT_PARSE_ERROR_FAILED	# generic error (unused)
	G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED	# a non-basic GVariantType was given where a basic type was expected
	G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE	# cannot infer the GVariantType
	G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED	# an indefinite GVariantType was given where a definite type was expected
	G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END	# extra data after parsing finished
	G_VARIANT_PARSE_ERROR_INVALID_CHARACTER	# invalid character in number or unicode escape
	G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING	# not a valid GVariant format string
	G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH	# not a valid object path
	G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE	# not a valid type signature
	G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING	# not a valid GVariant type string
	G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE	# could not find a common type for array entries
	G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE	# the numerical value is out of range of the given type
	G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG	# the numerical value is out of range for any type
	G_VARIANT_PARSE_ERROR_TYPE_ERROR	# cannot parse as variant of the specified type
	G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN	# an unexpected token was encountered
	G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD	# an unknown keyword was encountered
	G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT	# unterminated string constant
	G_VARIANT_PARSE_ERROR_VALUE_EXPECTED	# no value given
enum GThreadPriority	# <code class="literal">GThreadPriority has been deprecated since version 2.32 and should not be used in newly-written code.
	G_THREAD_PRIORITY_LOW	# a priority lower than normal
	G_THREAD_PRIORITY_NORMAL	# the default priority
	G_THREAD_PRIORITY_HIGH	# a priority higher than normal
	G_THREAD_PRIORITY_URGENT	# the highest priority

#.# gobject
struct GTypeInterface {
};

struct GTypeInstance {
};

struct GTypeClass {
};

struct GTypeInfo {
	/* interface types, classed types, instantiated types */
	guint16 class_size;
	GBaseInitFunc base_init;
	GBaseFinalizeFunc base_finalize;
	/* interface types, classed types, instantiated types */
	GClassInitFunc class_init;
	GClassFinalizeFunc class_finalize;
	gconstpointer class_data;
	/* instantiated types */
	guint16 instance_size;
	guint16 n_preallocs;
	GInstanceInitFunc instance_init;
	/* value handling */
	const GTypeValueTable *value_table;
};

struct GTypeFundamentalInfo {
	GTypeFundamentalFlags type_flags;
};

struct GInterfaceInfo {
	GInterfaceInitFunc interface_init;
	GInterfaceFinalizeFunc interface_finalize;
	gpointer interface_data;
};

struct GTypeValueTable {
	void (*value_init) (GValue *value);
	void (*value_free) (GValue *value);
	void (*value_copy) (const GValue *src_value, GValue *dest_value);
	/* varargs functionality (optional) */
	gpointer (*value_peek_pointer) (const GValue *value);
	const gchar *collect_format;
	gchar* (*collect_value) (GValue *value, guint n_collect_values, GTypeCValue *collect_values, guintcollect_flags);
	const gchar *lcopy_format;
	gchar* (*lcopy_value) (const GValue *value, guint n_collect_values, GTypeCValue *collect_values, guintcollect_flags);
};

struct GTypeQuery {
	GTypetype;
	const gchar *type_name;
	guintclass_size;
	guintinstance_size;
};

typedef struct _GTypePlugin GTypePlugin;
struct GTypePluginClass {
	GTypePluginUse use_plugin;
	GTypePluginUnuse unuse_plugin;
	GTypePluginCompleteTypeInfo complete_type_info;
	GTypePluginCompleteInterfaceInfo complete_interface_info;
};

struct GTypeModule {
	gchar *name;
};

struct GTypeModuleClass {
	GObjectClass parent_class;
	gboolean (* load) (GTypeModule *module);
	void (* unload) (GTypeModule *module);
};

struct GObject;
struct GObjectClass {
	GTypeClass g_type_class;
	/* seldom overidden */
	GObject* (*constructor) (GType type, guint n_construct_properties, GObjectConstructParam *construct_properties);
	/* overridable methods */
	void (*set_property)(GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
	void (*get_property)(GObject *object, guint property_id, GValue *value, GParamSpec *pspec);
	void (*dispose)(GObject *object);
	void (*finalize)(GObject *object);
	/* seldom overidden */
	void (*dispatch_properties_changed) (GObject *object, guint n_pspecs, GParamSpec **pspecs);
	/* signals */
	void (*notify)(GObject *object, GParamSpec *pspec);
	/* called when done constructing */
	void (*constructed)(GObject *object);
};

struct GObjectConstructParam {
	GParamSpec *pspec;
	GValue *value;
};

struct GParameter {
	const gchar *name;
	GValue value;
};

typedef struct {
} GWeakRef;

struct GEnumClass {
	GTypeClass g_type_class;
	gint minimum;
	gint maximum;
	guint n_values;
	GEnumValue *values;
};

struct GFlagsClass {
	GTypeClass g_type_class;
	guint mask;
	guint n_values;
	GFlagsValue *values;
};

struct GEnumValue {
	gint value;
	const gchar *value_name;
	const gchar *value_nick;
};

struct GFlagsValue {
	guint value;
	const gchar *value_name;
	const gchar *value_nick;
};

typedef struct {
} GValue;

struct GParamSpecBoolean {
	GParamSpec parent_instance;
	gboolean default_value;
};

struct GParamSpecChar {
	GParamSpec parent_instance;
	gint8 minimum;
	gint8 maximum;
	gint8 default_value;
};

struct GParamSpecUChar {
	GParamSpec parent_instance;
	guint8 minimum;
	guint8 maximum;
	guint8 default_value;
};

struct GParamSpecInt {
	GParamSpec parent_instance;
	gint minimum;
	gint maximum;
	gint default_value;
};

struct GParamSpecUInt {
	GParamSpec parent_instance;
	guint minimum;
	guint maximum;
	guint default_value;
};

struct GParamSpecLong {
	GParamSpec parent_instance;
	glong minimum;
	glong maximum;
	glong default_value;
};

struct GParamSpecULong {
	GParamSpec parent_instance;
	gulong minimum;
	gulong maximum;
	gulong default_value;
};

struct GParamSpecInt64 {
	GParamSpec parent_instance;
	gint64 minimum;
	gint64 maximum;
	gint64 default_value;
};

struct GParamSpecUInt64 {
	GParamSpec parent_instance;
	guint64 minimum;
	guint64 maximum;
	guint64 default_value;
};

struct GParamSpecFloat {
	GParamSpec parent_instance;
	gfloat minimum;
	gfloat maximum;
	gfloat default_value;
	gfloat epsilon;
};

struct GParamSpecDouble {
	GParamSpec parent_instance;
	gdouble minimum;
	gdouble maximum;
	gdouble default_value;
	gdouble epsilon;
};

struct GParamSpecEnum {
	GParamSpec parent_instance;
	GEnumClass *enum_class;
	gint default_value;
};

struct GParamSpecFlags {
	GParamSpec parent_instance;
	GFlagsClass *flags_class;
	guint default_value;
};

struct GParamSpecString {
	GParamSpec parent_instance;
	gchar *default_value;
	gchar *cset_first;
	gchar *cset_nth;
	gchar substitutor;
	guint null_fold_if_empty : 1;
	guint ensure_non_null : 1;
};

struct GParamSpecParam {
	GParamSpec parent_instance;
};

struct GParamSpecBoxed {
	GParamSpec parent_instance;
};

struct GParamSpecPointer {
	GParamSpec parent_instance;
};

struct GParamSpecObject {
	GParamSpec parent_instance;
};

struct GParamSpecUnichar {
	GParamSpec parent_instance;
	gunichar default_value;
};

struct GParamSpecValueArray {
	GParamSpec parent_instance;
	GParamSpec *element_spec;
	guintfixed_n_elements;
};

struct GParamSpecOverride {
};

struct GParamSpecGType {
	GParamSpec parent_instance;
	GType is_a_type;
};

struct GParamSpecVariant {
	GParamSpec parent_instance;
	GVariantType *type;
	GVariant *default_value;
};

struct GParamSpec {
	GTypeInstance g_type_instance;
	const gchar *name;
	/* interned string */
	GParamFlags flags;
	GType value_type;
	GType owner_type; /* class or interface using this property */
};

struct GParamSpecClass {
	GTypeClass g_type_class;
	GType value_type;
	void (*finalize)(GParamSpec *pspec);
	/* GParam methods */
	void (*value_set_default) (GParamSpec *pspec, GValue *value);
	gboolean (*value_validate) (GParamSpec *pspec, GValue *value);
	gint (*values_cmp) (GParamSpec *pspec, const GValue *value1, const GValue *value2);
};

struct GParamSpecTypeInfo {
	/* type system portion */
	guint16 instance_size;
	/* obligatory */
	guint16 n_preallocs;
	/* optional */
	void(*instance_init) (GParamSpec *pspec);
	/* optional */
	/* class portion */
	GType value_type;
	/* obligatory */
	void (*finalize) (GParamSpec *pspec);
	/* optional */
	void (*value_set_default) (GParamSpec *pspec, /* recommended */
	GValue *value);
	gboolean (*value_validate) (GParamSpec *pspec, /* optional */
	GValue *value);
	gint (*values_cmp) (GParamSpec *pspec, /* recommended */
	const GValue *value1, const GValue *value2);
};

typedef struct _GParamSpecPool GParamSpecPool;
struct GSignalInvocationHint {
	guintsignal_id;
	GQuark detail;
	GSignalFlags run_type;
};

struct GSignalQuery {
	guintsignal_id;
	const gchar *signal_name;
	GTypeitype;
	GSignalFlags signal_flags;
	GTypereturn_type;
	/* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
	guintn_params;
	const GType *param_types;
	/* mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag */
};

struct GClosure {
	volatile guint in_marshal : 1;
	volatile guint is_invalid : 1;
};

struct GCClosure {
	GClosure closure;
	gpointer callback;
};

struct GValueArray {
	guint n_values;
	GValue *values;
};

typedef struct _GBinding GBinding;
union GTypeCValue
	gint v_int;
	glong v_long;
	gint64 v_int64;
	gdouble v_double;
	gpointer v_pointer;
	# A numerical value which represents the unique identifier of a registeredtype.
typedef struct _GObject GInitiallyUnowned;	# All the fields in the GInitiallyUnowned structure are private to the GInitiallyUnowned implementation and should never be accessed directly.
typedef struct _GObjectClass GInitiallyUnownedClass;	# The class structure for the GInitiallyUnowned type.
typedef gchar* gchararray;	# A C representable type name for G_TYPE_STRING.
typedef GClosureMarshal			 GSignalCMarshaller;	# This is the signature of marshaller functions, required to marshallarrays of parameter values to signal emissions into C language callbackinvocations. It is merely an alias to GClosureMarshal since the GClosuremechanism takes over responsibility of actual function invocation for thesignal system.
typedef GVaClosureMarshal		 GSignalCVaMarshaller;	# This is the signature of va_list marshaller functions, an optionalmarshaller that can be used in some situations to avoidmarshalling the signal argument into GValues.
#define G_TYPE_FUNDAMENTAL(type) (g_type_fundamental (type))	# The fundamental type which is the ancestor of type.Fundamental types are types that serve as ultimate bases for the derived types, thus they are the roots of distinct inheritance hierarchies.
	type		# A GType value.
#define G_TYPE_MAKE_FUNDAMENTAL(x) ((GType) ((x) &lt;&lt; G_TYPE_FUNDAMENTAL_SHIFT))	# Get the type ID for the fundamental type number x.Use g_type_fundamental_next() instead of this macro to create new fundamental types.
	x		# the fundamental type number.
	return:		#  the GType 
#define G_TYPE_IS_ABSTRACT(type) (g_type_test_flags ((type), G_TYPE_FLAG_ABSTRACT))	# Checks if type is an abstract type. An abstract type cannot beinstantiated and is normally used as an abstract base class forderived classes.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_DERIVED(type) ((type) &gt; G_TYPE_FUNDAMENTAL_MAX)	# Checks if type is derived (or in object-oriented terminology:inherited) from another type (this holds true for all non-fundamentaltypes).
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_FUNDAMENTAL(type) ((type) &lt;= G_TYPE_FUNDAMENTAL_MAX)	# Checks if type is a fundamental type.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_VALUE_TYPE(type) (g_type_check_is_value_type (type))	# Checks if type is a value type and can be used with g_value_init().
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_HAS_VALUE_TABLE(type) (g_type_value_table_peek (type) != NULL)	# Checks if type has a GTypeValueTable.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_CLASSED(type) (g_type_test_flags ((type), G_TYPE_FLAG_CLASSED))	# Checks if type is a classed type.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_INSTANTIATABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_INSTANTIATABLE))	# Checks if type can be instantiated. Instantiation is theprocess of creating an instance (object) of this type.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_DERIVABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_DERIVABLE))	# Checks if type is a derivable type. A derivable type canbe used as the base class of a flat (single-level) class hierarchy.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_DEEP_DERIVABLE(type) (g_type_test_flags ((type), G_TYPE_FLAG_DEEP_DERIVABLE))	# Checks if type is a deep derivable type. A deep derivable typecan be used as the base class of a deep (multi-level) class hierarchy.
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_IS_INTERFACE(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_INTERFACE)	# Checks if type is an interface type.An interface type provides a pure API, the implementationof which is provided by another type (which is then said to conformto the interface). GLib interfaces are somewhat analogous to Javainterfaces and C++ classes containing only pure virtual functions, with the difference that GType interfaces are not derivable (but seeg_type_interface_add_prerequisite() for an alternative).
	type		# A GType value
	return:		#  TRUE on success 
#define G_TYPE_FROM_INSTANCE(instance) (G_TYPE_FROM_CLASS (((GTypeInstance*) (instance))-&gt;g_class))	# Get the type identifier from a given instance structure. 
	instance		# Location of a valid GTypeInstance structure
	return:		#  the GType 
#define G_TYPE_FROM_CLASS(g_class) (((GTypeClass*) (g_class))-&gt;g_type)	# Get the type identifier from a given class structure.
	g_class		# Location of a valid GTypeClass structure
	return:		#  the GType 
#define G_TYPE_FROM_INTERFACE(g_iface) (((GTypeInterface*) (g_iface))-&gt;g_type)	# Get the type identifier from a given interface structure.
	g_iface		# Location of a valid GTypeInterface structure
	return:		#  the GType 
#define G_TYPE_INSTANCE_GET_CLASS(instance, g_type, c_type) (_G_TYPE_IGC ((instance), (g_type), c_type))	# Get the class structure of a given instance, castedto a specified ancestor type g_type of the instance.
	instance		# Location of the GTypeInstance structure
	g_type		# The GType of the class to be returned
	c_type		# The C type of the class structure
	return:		#  a pointer to the class structure 
#define G_TYPE_INSTANCE_GET_INTERFACE(instance, g_type, c_type) (_G_TYPE_IGI ((instance), (g_type), c_type))	# Get the interface structure for interface g_type of a given instance.
	instance		# Location of the GTypeInstance structure
	g_type		# The GType of the interface to be returned
	c_type		# The C type of the interface structure
	return:		#  a pointer to the interface structure 
#define G_TYPE_INSTANCE_GET_PRIVATE(instance, g_type, c_type) ((c_type*) g_type_instance_get_private ((GTypeInstance*) (instance), (g_type)))	# Gets the private structure for a particular type.The private structure must have been registered in theclass_init function with g_type_class_add_private().
	instance		# the instance of a type deriving from private_type
	g_type		# the type identifying which private data to retrieve
	c_type		# The C type for the private structure
	return:		#  a pointer to the private data structure.  
#define G_TYPE_CLASS_GET_PRIVATE(klass, g_type, c_type) ((c_type*) g_type_class_get_private ((GTypeClass*) (klass), (g_type)))	# Gets the private class structure for a particular type.The private structure must have been registered in theget_type() function with g_type_add_class_private().
	klass		# the class of a type deriving from private_type
	g_type		# the type identifying which private data to retrieve
	c_type		# The C type for the private structure
	return:		#  a pointer to the private data structure.  
#define G_TYPE_CHECK_INSTANCE(instance)				(_G_TYPE_CHI ((GTypeInstance*) (instance)))	# Checks if instance is a valid GTypeInstance structure,otherwise issues a warning and returns FALSE. NULL is not a validGTypeInstance.
	instance		# Location of a GTypeInstance structure
	return:		#  TRUE on success 
#define G_TYPE_CHECK_INSTANCE_CAST(instance, g_type, c_type) (_G_TYPE_CIC ((instance), (g_type), c_type))	# Checks that instance is an instance of the type identified by g_typeand issues a warning if this is not the case. Returns instance casted to a pointer to c_type.
	instance		#  Location of a GTypeInstance structure. 
	g_type		# The type to be returned
	c_type		# The corresponding C type of g_type
#define G_TYPE_CHECK_INSTANCE_TYPE(instance, g_type) (_G_TYPE_CIT ((instance), (g_type)))	# Checks if instance is an instance of the type identified by g_type. Ifinstance is NULL, FALSE will be returned.
	instance		#  Location of a GTypeInstance structure. 
	return:		#  TRUE on success 
#define G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(instance, g_type) (_G_TYPE_CIFT ((instance), (g_type)))	# Checks if instance is an instance of the fundamental type identified by g_type.If instance is NULL, FALSE will be returned.
	instance		#  Location of a GTypeInstance structure. 
	return:		#  TRUE on success 
#define G_TYPE_CHECK_CLASS_CAST(g_class, g_type, c_type) (_G_TYPE_CCC ((g_class), (g_type), c_type))	# Checks that g_class is a class structure of the type identified by g_typeand issues a warning if this is not the case. Returns g_class casted to a pointer to c_type. NULL is not a valid class structure.
	g_class		# Location of a GTypeClass structure
	g_type		# The type to be returned
	c_type		# The corresponding C type of class structure of g_type
#define G_TYPE_CHECK_CLASS_TYPE(g_class, g_type) (_G_TYPE_CCT ((g_class), (g_type)))	# Checks if g_class is a class structure of the type identified by g_type. If g_class is NULL, FALSE will be returned.
	g_class		#  Location of a GTypeClass structure. 
	return:		#  TRUE on success 
#define G_TYPE_CHECK_VALUE(value)				(_G_TYPE_CHV ((value)))	# Checks if value has been initialized to hold valuesof a value type.
	value		# a GValue
	return:		#  TRUE on success 
#define G_TYPE_CHECK_VALUE_TYPE(value, g_type)			(_G_TYPE_CVH ((value), (g_type)))	# Checks if value has been initialized to hold valuesof type g_type. 
	value		# a GValue
	g_type		# The type to be checked
	return:		#  TRUE on success 
#define G_DECLARE_FINAL_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)	# A convenience macro for emitting the usual declarations in the header file for a type which is not (at thepresent time) intended to be subclassed.
	ModuleObjName		# The name of the new type, in camel case (like GtkWidget)
	module_obj_name		# The name of the new type in lowercase, with wordsseparated by '_' (like 'gtk_widget')
	MODULE		# The name of the module, in all caps (like 'GTK')
	OBJ_NAME		# The bare name of the type, in all caps (like 'WIDGET')
	ParentName		# the name of the parent type, in camel case (like GtkWidget)
#define G_DECLARE_DERIVABLE_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)	# A convenience macro for emitting the usual declarations in the header file for a type which will is intendedto be subclassed.
	ModuleObjName		# The name of the new type, in camel case (like GtkWidget)
	module_obj_name		# The name of the new type in lowercase, with wordsseparated by '_' (like 'gtk_widget')
	MODULE		# The name of the module, in all caps (like 'GTK')
	OBJ_NAME		# The bare name of the type, in all caps (like 'WIDGET')
	ParentName		# the name of the parent type, in camel case (like GtkWidget)
#define G_DECLARE_INTERFACE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, PrerequisiteName)	# A convenience macro for emitting the usual declarations in the header file for a GInterface type.
	ModuleObjName		# The name of the new type, in camel case (like GtkWidget)
	module_obj_name		# The name of the new type in lowercase, with wordsseparated by '_' (like 'gtk_widget')
	MODULE		# The name of the module, in all caps (like 'GTK')
	OBJ_NAME		# The bare name of the type, in all caps (like 'WIDGET')
	PrerequisiteName		# the name of the prerequisite type, in camel case (like GtkWidget)
#define G_DEFINE_TYPE(TN, t_n, T_P)			 G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, {})	# A convenience macro for type implementations, which declares a classinitialization function, an instance initialization function (see GTypeInfofor information about these) and a static variable named t_n_parent_classpointing to the parent class. Furthermore, it defines a *_get_type() function.See G_DEFINE_TYPE_EXTENDED() for an example.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
#define G_DEFINE_TYPE_WITH_PRIVATE(TN, t_n, T_P) G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, G_ADD_PRIVATE (TN))	# A convenience macro for type implementations, which declares a classinitialization function, an instance initialization function (see GTypeInfofor information about these), a static variable named t_n_parent_classpointing to the parent class, and adds private instance data to the type.Furthermore, it defines a *_get_type() function. See G_DEFINE_TYPE_EXTENDED()for an example.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
#define G_DEFINE_TYPE_WITH_CODE(TN, t_n, T_P, _C_)	 _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, 0) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()	# A convenience macro for type implementations. Similar to G_DEFINE_TYPE(), but allows you to insert custom code into the *_get_type() function, e.g. interface implementations via G_IMPLEMENT_INTERFACE().See G_DEFINE_TYPE_EXTENDED() for an example.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type in lowercase, with words separated by '_'.
	T_P		# The GType of the parent type.
	_C_		# Custom code that gets inserted in the *_get_type() function.
#define G_DEFINE_ABSTRACT_TYPE(TN, t_n, T_P)		 G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, {})	# A convenience macro for type implementations. Similar to G_DEFINE_TYPE(), but defines an abstract type. See G_DEFINE_TYPE_EXTENDED() for an example.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
#define G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE(TN, t_n, T_P) G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, G_ADD_PRIVATE (TN))	# Similar to G_DEFINE_TYPE_WITH_PRIVATE(), but defines an abstract type. See G_DEFINE_TYPE_EXTENDED() for an example.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
#define G_DEFINE_ABSTRACT_TYPE_WITH_CODE(TN, t_n, T_P, _C_) _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()	# A convenience macro for type implementations.Similar to G_DEFINE_TYPE_WITH_CODE(), but defines an abstract type andallows you to insert custom code into the *_get_type() function, e.g.interface implementations via G_IMPLEMENT_INTERFACE().See G_DEFINE_TYPE_EXTENDED() for an example.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
	_C_		# Custom code that gets inserted in the type_name_get_type()function.
#define G_ADD_PRIVATE(TypeName)	# A convenience macro to ease adding private data to instances of a new typein the _C_ section of G_DEFINE_TYPE_WITH_CODE() orG_DEFINE_ABSTRACT_TYPE_WITH_CODE().
	TypeName		# the name of the type in CamelCase
#define G_PRIVATE_OFFSET(TypeName, field)	# Evaluates to the offset of the field inside the instance private datastructure for TypeName.
	TypeName		# the name of the type in CamelCase
	field		# the name of the field in the private data structure
#define G_PRIVATE_FIELD(TypeName, inst, field_type, field_name)	# Evaluates to the field_name inside the inst private datastructure for TypeName.
	TypeName		# the name of the type in CamelCase
	inst		# the instance of TypeNameyou wish to access
	field_type		# the type of the field in the private data structure
	field_name		# the name of the field in the private data structure
#define G_PRIVATE_FIELD_P(TypeName, inst, field_name)	# Evaluates to a pointer to the field_name inside the inst private datastructure for TypeName.
	TypeName		# the name of the type in CamelCase
	inst		# the instance of TypeNameyou wish to access
	field_name		# the name of the field in the private data structure
#define G_DEFINE_INTERFACE(TN, t_n, T_P)		 G_DEFINE_INTERFACE_WITH_CODE(TN, t_n, T_P, ;)	# A convenience macro for GTypeInterface definitions, which declaresa default vtable initialization function and defines a *_get_type()function.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with words separated by '_'.
	T_P		# The GType of the prerequisite type for the interface, or 0(G_TYPE_INVALID) for no prerequisite type.
#define G_DEFINE_INTERFACE_WITH_CODE(TN, t_n, T_P, _C_) _G_DEFINE_INTERFACE_EXTENDED_BEGIN(TN, t_n, T_P) {_C_;} _G_DEFINE_INTERFACE_EXTENDED_END()	# A convenience macro for GTypeInterface definitions. Similar toG_DEFINE_INTERFACE(), but allows you to insert custom code into the*_get_type() function, e.g. additional interface implementationsvia G_IMPLEMENT_INTERFACE(), or additional prerequisite types. SeeG_DEFINE_TYPE_EXTENDED() for a similar example usingG_DEFINE_TYPE_WITH_CODE().
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with words separated by '_'.
	T_P		# The GType of the prerequisite type for the interface, or 0(G_TYPE_INVALID) for no prerequisite type.
	_C_		# Custom code that gets inserted in the *_get_type() function.
#define G_IMPLEMENT_INTERFACE(TYPE_IFACE, iface_init)	# A convenience macro to ease interface addition in the _C_ sectionof G_DEFINE_TYPE_WITH_CODE() or G_DEFINE_ABSTRACT_TYPE_WITH_CODE().See G_DEFINE_TYPE_EXTENDED() for an example.
	TYPE_IFACE		# The GType of the interface to add
	iface_init		# The interface init function
#define G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, _f_, _C_)	 _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, _f_) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()	# The most general convenience macro for type implementations, on whichG_DEFINE_TYPE(), etc are based.
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
	_f_		# GTypeFlags to pass to g_type_register_static()
	_C_		# Custom code that gets inserted in the *_get_type() function.
#define G_DEFINE_BOXED_TYPE(TypeName, type_name, copy_func, free_func) G_DEFINE_BOXED_TYPE_WITH_CODE (TypeName, type_name, copy_func, free_func, {})	# A convenience macro for boxed type implementations, which defines atype_name_get_type() function registering the boxed type.
	TypeName		# The name of the new type, in Camel case
	type_name		# The name of the new type, in lowercase, with wordsseparated by '_'
	copy_func		# the GBoxedCopyFunc for the new type
	free_func		# the GBoxedFreeFunc for the new type
#define G_DEFINE_BOXED_TYPE_WITH_CODE(TypeName, type_name, copy_func, free_func, _C_) _G_DEFINE_BOXED_TYPE_BEGIN (TypeName, type_name, copy_func, free_func) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()	# A convenience macro for boxed type implementations.Similar to G_DEFINE_BOXED_TYPE(), but allows to insert custom code into thetype_name_get_type() function, e.g. to register value transformations withg_value_register_transform_func(), for instance:
	TypeName		# The name of the new type, in Camel case
	type_name		# The name of the new type, in lowercase, with wordsseparated by '_'
	copy_func		# the GBoxedCopyFunc for the new type
	free_func		# the GBoxedFreeFunc for the new type
	_C_		# Custom code that gets inserted in the *_get_type() function
#define G_DEFINE_POINTER_TYPE(TypeName, type_name) G_DEFINE_POINTER_TYPE_WITH_CODE (TypeName, type_name, {})	# A convenience macro for pointer type implementations, which defines atype_name_get_type() function registering the pointer type.
	TypeName		# The name of the new type, in Camel case
	type_name		# The name of the new type, in lowercase, with wordsseparated by '_'
#define G_DEFINE_POINTER_TYPE_WITH_CODE(TypeName, type_name, _C_) _G_DEFINE_POINTER_TYPE_BEGIN (TypeName, type_name) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()	# A convenience macro for pointer type implementations.Similar to G_DEFINE_POINTER_TYPE(), but allows to insertcustom code into the type_name_get_type() function.
	TypeName		# The name of the new type, in Camel case
	type_name		# The name of the new type, in lowercase, with wordsseparated by '_'
	_C_		# Custom code that gets inserted in the *_get_type() function
#define G_TYPE_FUNDAMENTAL_MAX		(255 &lt;&lt; G_TYPE_FUNDAMENTAL_SHIFT)	# An integer constant that represents the number of identifiers reservedfor types that are assigned at compile-time.
#define G_TYPE_FLAG_RESERVED_ID_BIT ((GType) (1 &lt;&lt; 0))	# A bit in the type number that's supposed to be left untouched.
#define G_TYPE_INVALID			G_TYPE_MAKE_FUNDAMENTAL (0)	# An invalid GType used as error return value in some functions which returna GType.
#define G_TYPE_NONE			G_TYPE_MAKE_FUNDAMENTAL (1)	# A fundamental type which is used as a replacement for the Cvoid return type.
#define G_TYPE_INTERFACE		G_TYPE_MAKE_FUNDAMENTAL (2)	# The fundamental type from which all interfaces are derived.
#define G_TYPE_CHAR			G_TYPE_MAKE_FUNDAMENTAL (3)	# The fundamental type corresponding to gchar.The type designated by G_TYPE_CHAR is unconditionally an 8-bit signed integer.This may or may not be the same type a the C type "gchar".
#define G_TYPE_UCHAR			G_TYPE_MAKE_FUNDAMENTAL (4)	# The fundamental type corresponding to guchar.
#define G_TYPE_BOOLEAN			G_TYPE_MAKE_FUNDAMENTAL (5)	# The fundamental type corresponding to gboolean.
#define G_TYPE_INT			G_TYPE_MAKE_FUNDAMENTAL (6)	# The fundamental type corresponding to gint.
#define G_TYPE_UINT			G_TYPE_MAKE_FUNDAMENTAL (7)	# The fundamental type corresponding to guint.
#define G_TYPE_LONG			G_TYPE_MAKE_FUNDAMENTAL (8)	# The fundamental type corresponding to glong.
#define G_TYPE_ULONG			G_TYPE_MAKE_FUNDAMENTAL (9)	# The fundamental type corresponding to gulong.
#define G_TYPE_INT64			G_TYPE_MAKE_FUNDAMENTAL (10)	# The fundamental type corresponding to gint64.
#define G_TYPE_UINT64			G_TYPE_MAKE_FUNDAMENTAL (11)	# The fundamental type corresponding to guint64.
#define G_TYPE_ENUM			G_TYPE_MAKE_FUNDAMENTAL (12)	# The fundamental type from which all enumeration types are derived.
#define G_TYPE_FLAGS			G_TYPE_MAKE_FUNDAMENTAL (13)	# The fundamental type from which all flags types are derived.
#define G_TYPE_FLOAT			G_TYPE_MAKE_FUNDAMENTAL (14)	# The fundamental type corresponding to gfloat.
#define G_TYPE_DOUBLE			G_TYPE_MAKE_FUNDAMENTAL (15)	# The fundamental type corresponding to gdouble.
#define G_TYPE_STRING			G_TYPE_MAKE_FUNDAMENTAL (16)	# The fundamental type corresponding to nul-terminated C strings.
#define G_TYPE_POINTER			G_TYPE_MAKE_FUNDAMENTAL (17)	# The fundamental type corresponding to gpointer.
#define G_TYPE_BOXED			G_TYPE_MAKE_FUNDAMENTAL (18)	# The fundamental type from which all boxed types are derived.
#define G_TYPE_PARAM			G_TYPE_MAKE_FUNDAMENTAL (19)	# The fundamental type from which all GParamSpec types are derived.
#define G_TYPE_OBJECT			G_TYPE_MAKE_FUNDAMENTAL (20)	# The fundamental type for GObject.
#define G_TYPE_GTYPE			 (g_gtype_get_type())	# The type for GType.
#define G_TYPE_VARIANT G_TYPE_MAKE_FUNDAMENTAL (21)	# The fundamental type corresponding to GVariant.
#define G_TYPE_CHECKSUM (g_checksum_get_type ())	# The GType for a boxed type holding a GChecksum.
#define G_TYPE_RESERVED_GLIB_FIRST (22)	# First fundamental type number to create a new fundamental type id withG_TYPE_MAKE_FUNDAMENTAL() reserved for GLib.
#define G_TYPE_RESERVED_GLIB_LAST (31)	# Last fundamental type number reserved for GLib.
#define G_TYPE_RESERVED_BSE_FIRST (32)	# First fundamental type number to create a new fundamental type id withG_TYPE_MAKE_FUNDAMENTAL() reserved for BSE.
#define G_TYPE_RESERVED_BSE_LAST (48)	# Last fundamental type number reserved for BSE.
#define G_TYPE_RESERVED_USER_FIRST (49)	# First available fundamental type number to create new fundamental type id with G_TYPE_MAKE_FUNDAMENTAL().
#define G_DEFINE_DYNAMIC_TYPE(TN, t_n, T_P) G_DEFINE_DYNAMIC_TYPE_EXTENDED (TN, t_n, T_P, 0, {})	# A convenience macro for dynamic type implementations, which declares aclass initialization function, an instance initialization function (see GTypeInfo for information about these) and a static variable named t_n&lt;!-- --&gt;_parent_class pointing to the parent class. Furthermore, it defines a *_get_type() and a static *_register_type() functionsfor use in your module_init().
	TN		# The name of the new type, in Camel case.
	t_n		# The name of the new type, in lowercase, with wordsseparated by '_'.
	T_P		# The GType of the parent type.
#define G_DEFINE_DYNAMIC_TYPE_EXTENDED(TypeName, type_name, TYPE_PARENT, flags, CODE)	# A more general version of G_DEFINE_DYNAMIC_TYPE() whichallows to specify GTypeFlags and custom code.
	TypeName		# The name of the new type, in Camel case.
	type_name		# The name of the new type, in lowercase, with wordsseparated by '_'.
	TYPE_PARENT		# The GType of the parent type.
	flags		# GTypeFlags to pass to g_type_module_register_type()
	CODE		# Custom code that gets inserted in the *_get_type() function.
#define G_IMPLEMENT_INTERFACE_DYNAMIC(TYPE_IFACE, iface_init)	# A convenience macro to ease interface addition in the _C_ sectionof G_DEFINE_DYNAMIC_TYPE_EXTENDED(). See G_DEFINE_DYNAMIC_TYPE_EXTENDED()for an example.
	TYPE_IFACE		# The GType of the interface to add
	iface_init		# The interface init function
#define G_ADD_PRIVATE_DYNAMIC(TypeName)	# A convenience macro to ease adding private data to instances of a new dynamictype in the _C_ section of G_DEFINE_DYNAMIC_TYPE_EXTENDED(). SeeG_ADD_PRIVATE() for details, it is similar but for static types.
	TypeName		# the name of the type in CamelCase
#define G_TYPE_IS_OBJECT(type) (G_TYPE_FUNDAMENTAL (type) == G_TYPE_OBJECT)	# Check if the passed in type id is a G_TYPE_OBJECT or derived from it.
	type		# Type id to check
	return:		#  FALSE or TRUE, indicating whether typeis a G_TYPE_OBJECT. 
#define G_OBJECT(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), G_TYPE_OBJECT, GObject))	# Casts a GObject or derived pointer into a (GObject*) pointer.Depending on the current debugging level, this function may invokecertain runtime checks to identify invalid casts.
	object		# Object which is subject to casting.
#define G_IS_OBJECT(object) (G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE ((object), G_TYPE_OBJECT))	# Checks whether a valid GTypeInstance pointer is of type G_TYPE_OBJECT.
	object		# Instance to check for being a G_TYPE_OBJECT.
#define G_OBJECT_CLASS(class) (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_OBJECT, GObjectClass))	# Casts a derived GObjectClass structure into a GObjectClass structure.
	class		# a valid GObjectClass
#define G_IS_OBJECT_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_OBJECT))	# Checks whether class "is a" valid GObjectClass structure of typeG_TYPE_OBJECT or derived.
	class		# a GObjectClass
#define G_OBJECT_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS ((object), G_TYPE_OBJECT, GObjectClass))	# Get the class structure associated to a GObject instance.
	object		# a GObject instance.
	return:		#  pointer to object class structure. 
#define G_OBJECT_TYPE(object) (G_TYPE_FROM_INSTANCE (object))	# Get the type id of an object.
	object		# Object to return the type id for.
	return:		#  Type id of object. 
#define G_OBJECT_TYPE_NAME(object) (g_type_name (G_OBJECT_TYPE (object)))	# Get the name of an object's type.
	object		# Object to return the type name for.
	return:		#  Type name of object. The string is owned by the type system andshould not be freed. 
#define G_OBJECT_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class))	# Get the type id of a class structure.
	class		# a valid GObjectClass
	return:		#  Type id of class. 
#define G_OBJECT_CLASS_NAME(class) (g_type_name (G_OBJECT_CLASS_TYPE (class)))	# Return the name of a class structure's type.
	class		# a valid GObjectClass
	return:		#  Type name of class. The string is owned by the type system andshould not be freed. 
#define g_set_object(object_ptr, new_object)	# Updates a GObject pointer to refer to new_object. It increments thereference count of new_object (if non-NULL), decrements the referencecount of the current value of object_ptr (if non-NULL), and assignsnew_object to object_ptr. The assignment is not atomic.
	object_ptr		# a pointer to a GObject reference
	new_object		#  a pointer to the new GObject toassign to it, or NULL to clear the pointer. 
	return:		#  TRUE if the value of object_ptrchanged, FALSE otherwise 
#define G_OBJECT_WARN_INVALID_PROPERTY_ID(object, property_id, pspec)	# This macro should be used to emit a standard warning about unexpected properties in set_property() and get_property() implementations.
	object		# the GObject on which set_property() or get_property() was called
	property_id		# the numeric id of the property
	pspec		# the GParamSpec of the property
#define G_TYPE_INITIALLY_UNOWNED	 (g_initially_unowned_get_type())	# The type for GInitiallyUnowned.
#define G_ENUM_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class))	# Get the type identifier from a given GEnumClass structure.
	class		# a GEnumClass
	return:		#  the GType 
#define G_ENUM_CLASS_TYPE_NAME(class) (g_type_name (G_ENUM_CLASS_TYPE (class)))	# Get the static type name from a given GEnumClass structure.
	class		# a GEnumClass
	return:		#  the type name. 
#define G_TYPE_IS_ENUM(type)	 (G_TYPE_FUNDAMENTAL (type) == G_TYPE_ENUM)	# Checks whether type "is a" G_TYPE_ENUM.
	type		# a GType ID.
	return:		#  TRUE if type"is a" G_TYPE_ENUM. 
#define G_ENUM_CLASS(class)	 (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_ENUM, GEnumClass))	# Casts a derived GEnumClass structure into a GEnumClass structure.
	class		# a valid GEnumClass
#define G_IS_ENUM_CLASS(class)	 (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_ENUM))	# Checks whether class "is a" valid GEnumClass structure of type G_TYPE_ENUMor derived.
	class		# a GEnumClass
#define G_TYPE_IS_FLAGS(type)	 (G_TYPE_FUNDAMENTAL (type) == G_TYPE_FLAGS)	# Checks whether type "is a" G_TYPE_FLAGS.
	type		# a GType ID.
	return:		#  TRUE if type"is a" G_TYPE_FLAGS. 
#define G_FLAGS_CLASS(class)	 (G_TYPE_CHECK_CLASS_CAST ((class), G_TYPE_FLAGS, GFlagsClass))	# Casts a derived GFlagsClass structure into a GFlagsClass structure.
	class		# a valid GFlagsClass
#define G_IS_FLAGS_CLASS(class) (G_TYPE_CHECK_CLASS_TYPE ((class), G_TYPE_FLAGS))	# Checks whether class "is a" valid GFlagsClass structure of type G_TYPE_FLAGSor derived.
	class		# a GFlagsClass
#define G_FLAGS_CLASS_TYPE(class) (G_TYPE_FROM_CLASS (class))	# Get the type identifier from a given GFlagsClass structure.
	class		# a GFlagsClass
	return:		#  the GType 
#define G_FLAGS_CLASS_TYPE_NAME(class) (g_type_name (G_FLAGS_CLASS_TYPE (class)))	# Get the static type name from a given GFlagsClass structure.
	class		# a GFlagsClass
	return:		#  the type name. 
#define G_TYPE_HASH_TABLE (g_hash_table_get_type ())	# The GType for a boxed type holding a GHashTable reference.
#define G_TYPE_DATE (g_date_get_type ())	# The GType for GDate.
#define G_TYPE_GSTRING (g_gstring_get_type ())	# The GType for GString.
#define G_TYPE_STRV (g_strv_get_type ())	# The GType for a boxed type holding a NULL-terminated array of strings.
#define G_TYPE_REGEX (g_regex_get_type ())	# The GType for a boxed type holding a GRegex reference.
#define G_TYPE_MATCH_INFO (g_match_info_get_type ())	# The GType for a boxed type holding a GMatchInfo reference.
#define G_TYPE_ARRAY (g_array_get_type ())	# The GType for a boxed type holding a GArray reference.
#define G_TYPE_BYTE_ARRAY (g_byte_array_get_type ())	# The GType for a boxed type holding a GByteArray reference.
#define G_TYPE_PTR_ARRAY (g_ptr_array_get_type ())	# The GType for a boxed type holding a GPtrArray reference.
#define G_TYPE_BYTES (g_bytes_get_type ())	# The GType for GBytes.
#define G_TYPE_VARIANT_TYPE (g_variant_type_get_gtype ())	# The GType for a boxed type holding a GVariantType.
#define G_TYPE_ERROR (g_error_get_type ())	# The GType for a boxed type holding a GError.
#define G_TYPE_DATE_TIME (g_date_time_get_type ())	# The GType for a boxed type holding a GDateTime.
#define G_TYPE_TIME_ZONE (g_time_zone_get_type ())	# The GType for a boxed type holding a GTimeZone.
#define G_TYPE_IO_CHANNEL (g_io_channel_get_type ())	# The GType for GIOChannel.
#define G_TYPE_IO_CONDITION (g_io_condition_get_type ())	# The GType for GIOCondition.
#define G_TYPE_VARIANT_BUILDER (g_variant_builder_get_type ())	# The GType for a boxed type holding a GVariantBuilder.
#define G_TYPE_VARIANT_DICT (g_variant_dict_get_type ())	# The GType for a boxed type holding a GVariantDict.
#define G_TYPE_KEY_FILE (g_key_file_get_type ())	# The GType for a boxed type holding a GKeyFile.
#define G_TYPE_MAIN_CONTEXT (g_main_context_get_type ())	# The GType for a boxed type holding a GMainContext.
#define G_TYPE_MAIN_LOOP (g_main_loop_get_type ())	# The GType for a boxed type holding a GMainLoop.
#define G_TYPE_MAPPED_FILE (g_mapped_file_get_type ())	# The GType for a boxed type holding a GMappedFile.
#define G_TYPE_MARKUP_PARSE_CONTEXT (g_markup_parse_context_get_type ())	# The GType for a boxed type holding a GMarkupParseContext.
#define G_TYPE_SOURCE (g_source_get_type ())	# The GType for a boxed type holding a GSource.
#define G_TYPE_POLLFD (g_pollfd_get_type ())	# The GType for a boxed type holding a GPollFD.
#define G_TYPE_THREAD (g_thread_get_type ())	# The GType for a boxed type holding a GThread.
#define G_TYPE_OPTION_GROUP (g_option_group_get_type ())	# The GType for a boxed type holding a GOptionGroup.
#define G_VALUE_HOLDS(value,type) (G_TYPE_CHECK_VALUE_TYPE ((value), (type)))	# Checks if value holds (or contains) a value of type.This macro will also check for value != NULL and issue awarning if the check fails.
	value		# A GValue structure.
	type		# A GType value.
	return:		#  TRUE if valueholds the type. 
#define G_VALUE_TYPE(value)		(((GValue*) (value))-&gt;g_type)	# Get the type identifier of value.
	value		# A GValue structure.
	return:		#  the GType. 
#define G_VALUE_TYPE_NAME(value) (g_type_name (G_VALUE_TYPE (value)))	# Gets the type name of value.
	value		# A GValue structure.
	return:		#  the type name. 
#define G_TYPE_IS_VALUE(type)		(g_type_check_is_value_type (type))	# Checks whether the passed in type ID can be used for g_value_init().That is, this macro checks whether this type provides an implementationof the GTypeValueTable functions required for a type to create a GValue of.
	type		# A GType value.
	return:		#  Whether typeis suitable as a GValue type. 
#define G_TYPE_IS_VALUE_ABSTRACT(type) (g_type_test_flags ((type), G_TYPE_FLAG_VALUE_ABSTRACT))	# Checks if type is an abstract value type. An abstract value type introducesa value table, but can't be used for g_value_init() and is normally used asan abstract base type for derived value types.
	type		# A GType value
	return:		#  TRUE on success 
#define G_IS_VALUE(value)		(G_TYPE_CHECK_VALUE (value))	# Checks if value is a valid and initialized GValue structure.
	value		# A GValue structure.
	return:		#  TRUE on success. 
#define G_VALUE_INIT { 0, { { 0 } } }	# A GValue must be initialized before it can be used. This macro canbe used as initializer instead of an explicit { 0 } when declaringa variable, but it cannot be assigned to a variable.
#define G_TYPE_VALUE (g_value_get_type ())	# The type ID of the "GValue" type which is a boxed type,used to pass around pointers to GValues.
#define G_TYPE_VALUE_ARRAY (g_value_array_get_type ())	# G_TYPE_VALUE_ARRAY has been deprecated since version 2.32 and should not be used in newly-written code.
#define G_IS_PARAM_SPEC_BOOLEAN(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOOLEAN))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_BOOLEAN.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_BOOLEAN(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOOLEAN, GParamSpecBoolean))	# Cast a GParamSpec instance into a GParamSpecBoolean.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_BOOLEAN(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOOLEAN))	# Checks whether the given GValue can hold values of type G_TYPE_BOOLEAN.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_CHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_CHAR))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_CHAR.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_CHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_CHAR, GParamSpecChar))	# Cast a GParamSpec instance into a GParamSpecChar.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_CHAR(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_CHAR))	# Checks whether the given GValue can hold values of type G_TYPE_CHAR.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_UCHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UCHAR))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_UCHAR.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_UCHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UCHAR, GParamSpecUChar))	# Cast a GParamSpec instance into a GParamSpecUChar.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_UCHAR(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UCHAR))	# Checks whether the given GValue can hold values of type G_TYPE_UCHAR.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_INT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_INT))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_INT.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_INT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_INT, GParamSpecInt))	# Cast a GParamSpec instance into a GParamSpecInt.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_INT(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT))	# Checks whether the given GValue can hold values of type G_TYPE_INT.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_UINT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UINT))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_UINT.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_UINT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UINT, GParamSpecUInt))	# Cast a GParamSpec instance into a GParamSpecUInt.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_UINT(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT))	# Checks whether the given GValue can hold values of type G_TYPE_UINT.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_LONG(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_LONG))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_LONG.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_LONG(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_LONG, GParamSpecLong))	# Cast a GParamSpec instance into a GParamSpecLong.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_LONG(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_LONG))	# Checks whether the given GValue can hold values of type G_TYPE_LONG.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_ULONG(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_ULONG))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_ULONG.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_ULONG(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_ULONG, GParamSpecULong))	# Cast a GParamSpec instance into a GParamSpecULong.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_ULONG(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_ULONG))	# Checks whether the given GValue can hold values of type G_TYPE_ULONG.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_INT64(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_INT64))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_INT64.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_INT64(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_INT64, GParamSpecInt64))	# Cast a GParamSpec instance into a GParamSpecInt64.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_INT64(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_INT64))	# Checks whether the given GValue can hold values of type G_TYPE_INT64.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_UINT64(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UINT64))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_UINT64.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_UINT64(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UINT64, GParamSpecUInt64))	# Cast a GParamSpec instance into a GParamSpecUInt64.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_UINT64(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_UINT64))	# Checks whether the given GValue can hold values of type G_TYPE_UINT64.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_FLOAT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_FLOAT))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_FLOAT.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_FLOAT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_FLOAT, GParamSpecFloat))	# Cast a GParamSpec instance into a GParamSpecFloat.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_FLOAT(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_FLOAT))	# Checks whether the given GValue can hold values of type G_TYPE_FLOAT.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_DOUBLE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_DOUBLE))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_DOUBLE.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_DOUBLE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_DOUBLE, GParamSpecDouble))	# Cast a GParamSpec instance into a GParamSpecDouble.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_DOUBLE(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_DOUBLE))	# Checks whether the given GValue can hold values of type G_TYPE_DOUBLE.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_ENUM(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_ENUM))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_ENUM.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_ENUM(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_ENUM, GParamSpecEnum))	# Cast a GParamSpec instance into a GParamSpecEnum.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_ENUM(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_ENUM))	# Checks whether the given GValue can hold values derived from type G_TYPE_ENUM.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_FLAGS(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_FLAGS))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_FLAGS.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_FLAGS(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_FLAGS, GParamSpecFlags))	# Cast a GParamSpec instance into a GParamSpecFlags.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_FLAGS(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_FLAGS))	# Checks whether the given GValue can hold values derived from type G_TYPE_FLAGS.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_STRING(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_STRING))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_STRING.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_STRING(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_STRING, GParamSpecString))	# Casts a GParamSpec instance into a GParamSpecString.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_STRING(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_STRING))	# Checks whether the given GValue can hold values of type G_TYPE_STRING.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_PARAM(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_PARAM))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_PARAM.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_PARAM(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_PARAM, GParamSpecParam))	# Casts a GParamSpec instance into a GParamSpecParam.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_PARAM(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_PARAM))	# Checks whether the given GValue can hold values derived from type G_TYPE_PARAM.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_BOXED(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_BOXED))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_BOXED.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_BOXED(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_BOXED, GParamSpecBoxed))	# Cast a GParamSpec instance into a GParamSpecBoxed.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_BOXED(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_BOXED))	# Checks whether the given GValue can hold values derivedfrom type G_TYPE_BOXED.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_POINTER(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_POINTER))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_POINTER.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_POINTER(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_POINTER, GParamSpecPointer))	# Casts a GParamSpec instance into a GParamSpecPointer.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_POINTER(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_POINTER))	# Checks whether the given GValue can hold values of type G_TYPE_POINTER.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_OBJECT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_OBJECT))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_OBJECT.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_OBJECT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_OBJECT, GParamSpecObject))	# Casts a GParamSpec instance into a GParamSpecObject.
	pspec		# a valid GParamSpec instance
#define G_VALUE_HOLDS_OBJECT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_OBJECT))	# Checks whether the given GValue can hold values derived from type G_TYPE_OBJECT.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_UNICHAR(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_UNICHAR))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_UNICHAR.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_UNICHAR(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_UNICHAR, GParamSpecUnichar))	# Cast a GParamSpec instance into a GParamSpecUnichar.
	pspec		# a valid GParamSpec instance
#define G_IS_PARAM_SPEC_VALUE_ARRAY(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_VALUE_ARRAY))	# G_IS_PARAM_SPEC_VALUE_ARRAY has been deprecated since version 2.32 and should not be used in newly-written code.
	pspec		# a valid GParamSpec instance
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_VALUE_ARRAY(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_VALUE_ARRAY, GParamSpecValueArray))	# G_PARAM_SPEC_VALUE_ARRAY has been deprecated since version 2.32 and should not be used in newly-written code.
	pspec		# a valid GParamSpec instance
#define G_IS_PARAM_SPEC_OVERRIDE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_OVERRIDE))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_OVERRIDE.
	pspec		# a GParamSpec
	return:		#  TRUE on success. 
#define G_PARAM_SPEC_OVERRIDE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_OVERRIDE, GParamSpecOverride))	# Casts a GParamSpec into a GParamSpecOverride.
	pspec		# a GParamSpec
#define G_IS_PARAM_SPEC_GTYPE(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_GTYPE))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_GTYPE.
	pspec		# a GParamSpec
	return:		#  TRUE on success.  
#define G_PARAM_SPEC_GTYPE(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_GTYPE, GParamSpecGType))	# Casts a GParamSpec into a GParamSpecGType.
	pspec		# a GParamSpec
#define G_VALUE_HOLDS_GTYPE(value)	 (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_GTYPE))	# Checks whether the given GValue can hold values of type G_TYPE_GTYPE.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_IS_PARAM_SPEC_VARIANT(pspec) (G_TYPE_CHECK_INSTANCE_TYPE ((pspec), G_TYPE_PARAM_VARIANT))	# Checks whether the given GParamSpec is of type G_TYPE_PARAM_VARIANT.
	pspec		# a GParamSpec
	return:		#  TRUE on success 
#define G_PARAM_SPEC_VARIANT(pspec) (G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM_VARIANT, GParamSpecVariant))	# Casts a GParamSpec into a GParamSpecVariant.
	pspec		# a GParamSpec
#define G_VALUE_HOLDS_VARIANT(value) (G_TYPE_CHECK_VALUE_TYPE ((value), G_TYPE_VARIANT))	# Checks whether the given GValue can hold values of type G_TYPE_VARIANT.
	value		# a valid GValue structure
	return:		#  TRUE on success. 
#define G_TYPE_PARAM_BOOLEAN		 (g_param_spec_types[2])	# The GType of GParamSpecBoolean.
#define G_TYPE_PARAM_CHAR		 (g_param_spec_types[0])	# The GType of GParamSpecChar.
#define G_TYPE_PARAM_UCHAR		 (g_param_spec_types[1])	# The GType of GParamSpecUChar.
#define G_TYPE_PARAM_INT		 (g_param_spec_types[3])	# The GType of GParamSpecInt.
#define G_TYPE_PARAM_UINT		 (g_param_spec_types[4])	# The GType of GParamSpecUInt.
#define G_TYPE_PARAM_LONG		 (g_param_spec_types[5])	# The GType of GParamSpecLong.
#define G_TYPE_PARAM_ULONG		 (g_param_spec_types[6])	# The GType of GParamSpecULong.
#define G_TYPE_PARAM_INT64		 (g_param_spec_types[7])	# The GType of GParamSpecInt64.
#define G_TYPE_PARAM_UINT64		 (g_param_spec_types[8])	# The GType of GParamSpecUInt64.
#define G_TYPE_PARAM_FLOAT		 (g_param_spec_types[12])	# The GType of GParamSpecFloat.
#define G_TYPE_PARAM_DOUBLE		 (g_param_spec_types[13])	# The GType of GParamSpecDouble.
#define G_TYPE_PARAM_ENUM		 (g_param_spec_types[10])	# The GType of GParamSpecEnum.
#define G_TYPE_PARAM_FLAGS		 (g_param_spec_types[11])	# The GType of GParamSpecFlags.
#define G_TYPE_PARAM_STRING		 (g_param_spec_types[14])	# The GType of GParamSpecString.
#define G_TYPE_PARAM_PARAM		 (g_param_spec_types[15])	# The GType of GParamSpecParam.
#define G_TYPE_PARAM_BOXED		 (g_param_spec_types[16])	# The GType of GParamSpecBoxed.
#define G_TYPE_PARAM_POINTER		 (g_param_spec_types[17])	# The GType of GParamSpecPointer.
#define G_TYPE_PARAM_OBJECT		 (g_param_spec_types[19])	# The GType of GParamSpecObject.
#define G_TYPE_PARAM_UNICHAR		 (g_param_spec_types[9])	# The GType of GParamSpecUnichar.
#define G_TYPE_PARAM_VALUE_ARRAY	 (g_param_spec_types[18])	# G_TYPE_PARAM_VALUE_ARRAY has been deprecated since version 2.32 and should not be used in newly-written code.
#define G_TYPE_PARAM_OVERRIDE		 (g_param_spec_types[20])	# The GType of GParamSpecOverride.
#define G_TYPE_PARAM_GTYPE		 (g_param_spec_types[21])	# The GType of GParamSpecGType.
#define G_TYPE_PARAM_VARIANT (g_param_spec_types[22])	# The GType of GParamSpecVariant.
#define G_TYPE_IS_PARAM(type)		(G_TYPE_FUNDAMENTAL (type) == G_TYPE_PARAM)	# Checks whether type "is a" G_TYPE_PARAM.
	type		# a GType ID
#define G_PARAM_SPEC(pspec)		(G_TYPE_CHECK_INSTANCE_CAST ((pspec), G_TYPE_PARAM, GParamSpec))	# Casts a derived GParamSpec object (e.g. of type GParamSpecInt) intoa GParamSpec object.
	pspec		# a valid GParamSpec
#define G_IS_PARAM_SPEC(pspec)		(G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE ((pspec), G_TYPE_PARAM))	# Checks whether pspec "is a" valid GParamSpec structure of type G_TYPE_PARAMor derived.
	pspec		# a GParamSpec
#define G_PARAM_SPEC_CLASS(pclass) (G_TYPE_CHECK_CLASS_CAST ((pclass), G_TYPE_PARAM, GParamSpecClass))	# Casts a derived GParamSpecClass structure into a GParamSpecClass structure.
	pclass		# a valid GParamSpecClass
#define G_IS_PARAM_SPEC_CLASS(pclass) (G_TYPE_CHECK_CLASS_TYPE ((pclass), G_TYPE_PARAM))	# Checks whether pclass "is a" valid GParamSpecClass structure of type G_TYPE_PARAM or derived.
	pclass		# a GParamSpecClass
#define G_PARAM_SPEC_GET_CLASS(pspec) (G_TYPE_INSTANCE_GET_CLASS ((pspec), G_TYPE_PARAM, GParamSpecClass))	# Retrieves the GParamSpecClass of a GParamSpec.
	pspec		# a valid GParamSpec
#define G_PARAM_SPEC_TYPE(pspec) (G_TYPE_FROM_INSTANCE (pspec))	# Retrieves the GType of this pspec.
	pspec		# a valid GParamSpec
#define G_PARAM_SPEC_TYPE_NAME(pspec) (g_type_name (G_PARAM_SPEC_TYPE (pspec)))	# Retrieves the GType name of this pspec.
	pspec		# a valid GParamSpec
#define G_PARAM_SPEC_VALUE_TYPE(pspec) (G_PARAM_SPEC (pspec)-&gt;value_type)	# Retrieves the GType to initialize a GValue for this parameter.
	pspec		# a valid GParamSpec
#define G_PARAM_STATIC_STRINGS (G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB)	# GParamFlags value alias for G_PARAM_STATIC_NAME | G_PARAM_STATIC_NICK | G_PARAM_STATIC_BLURB.
#define G_PARAM_MASK		(0x000000ff)	# Mask containing the bits of GParamSpec.flags which are reserved for GLib.
#define G_PARAM_USER_SHIFT (8)	# Minimum shift count to be used for user defined flags, to be stored inGParamSpec.flags. The maximum allowed is 10.
#define G_VALUE_COLLECT_INIT(value, _value_type, var_args, flags, __error)	# Collects a variable argument value from a va_list. We have toimplement the varargs collection as a macro, because on some systemsva_list variables cannot be passed by reference.
	value		# a GValue return location. valuemust contain only 0 bytes.
	_value_type		# the GType to use for value.
	var_args		# the va_list variable; it may be evaluated multiple times
	flags		# flags which are passed on to the collect_value() function ofthe GTypeValueTable of value.
	__error		# a gchar** variable that will be modified to hold a g_new()allocated error messages if something fails
#define G_VALUE_COLLECT(value, var_args, flags, __error)	# Collects a variable argument value from a va_list. We have toimplement the varargs collection as a macro, because on some systemsva_list variables cannot be passed by reference.
	value		# a GValue return location. valueis supposed to be initializedaccording to the value type to be collected
	var_args		# the va_list variable; it may be evaluated multiple times
	flags		# flags which are passed on to the collect_value() function ofthe GTypeValueTable of value.
	__error		# a gchar** variable that will be modified to hold a g_new()allocated error messages if something fails
#define G_VALUE_COLLECT_SKIP(_value_type, var_args)	# Skip an argument of type _value_type from var_args.
	_value_type		# the GType of the value to skip
	var_args		# the va_list variable; it may be evaluated multiple times
#define G_VALUE_LCOPY(value, var_args, flags, __error)	# Collects a value's variable argument locations from a va_list. Usage isanalogous to G_VALUE_COLLECT().
	value		# a GValue return location. valueis supposed to be initializedaccording to the value type to be collected
	var_args		# the va_list variable; it may be evaluated multiple times
	flags		# flags which are passed on to the lcopy_value() function ofthe GTypeValueTable of value.
	__error		# a gchar** variable that will be modified to hold a g_new()allocated error messages if something fails
#define G_VALUE_COLLECT_FORMAT_MAX_LENGTH (8)	# The maximal number of GTypeCValues which can be collected for a single GValue.
#define g_signal_connect(instance, detailed_signal, c_handler, data)	# Connects a GCallback function to a signal for a particular object.
	instance		# the instance to connect to.
	detailed_signal		# a string of the form "signal-name::detail".
	c_handler		# the GCallback to connect.
	data		# data to pass to c_handlercalls.
	return:		#  the handler ID, of type gulong (always greater than 0 for successful connections) 
#define g_signal_connect_after(instance, detailed_signal, c_handler, data)	# Connects a GCallback function to a signal for a particular object.
	instance		# the instance to connect to.
	detailed_signal		# a string of the form "signal-name::detail".
	c_handler		# the GCallback to connect.
	data		# data to pass to c_handlercalls.
	return:		#  the handler ID, of type gulong (always greater than 0 for successful connections) 
#define g_signal_connect_swapped(instance, detailed_signal, c_handler, data)	# Connects a GCallback function to a signal for a particular object.
	instance		# the instance to connect to.
	detailed_signal		# a string of the form "signal-name::detail".
	c_handler		# the GCallback to connect.
	data		# data to pass to c_handlercalls.
	return:		#  the handler ID, of type gulong (always greater than 0 for successful connections) 
#define g_signal_handlers_block_by_func(instance, func, data)	# Blocks all handlers on an instance that match func and data.
	instance		# The instance to block handlers from.
	func		# The C closure callback of the handlers (useless for non-C closures).
	data		# The closure data of the handlers' closures.
	return:		#  The number of handlers that matched. 
#define g_signal_handlers_unblock_by_func(instance, func, data)	# Unblocks all handlers on an instance that match func and data.
	instance		# The instance to unblock handlers from.
	func		# The C closure callback of the handlers (useless for non-C closures).
	data		# The closure data of the handlers' closures.
	return:		#  The number of handlers that matched. 
#define g_signal_handlers_disconnect_by_func(instance, func, data)	# Disconnects all handlers on an instance that match func and data.
	instance		# The instance to remove handlers from.
	func		# The C closure callback of the handlers (useless for non-C closures).
	data		# The closure data of the handlers' closures.
	return:		#  The number of handlers that matched. 
#define g_signal_handlers_disconnect_by_data(instance, data)	# Disconnects all handlers on an instance that match data.
	instance		# The instance to remove handlers from
	data		# the closure data of the handlers' closures
	return:		#  The number of handlers that matched. 
#define G_SIGNAL_TYPE_STATIC_SCOPE (G_TYPE_FLAG_RESERVED_ID_BIT)	# This macro flags signal argument types for which the signal system may assume that instances thereof remain persistent across all signal emissionsthey are used in. This is only useful for non ref-counted, value-copy types.
#define G_SIGNAL_MATCH_MASK 0x3f	# A mask for all GSignalMatchType bits.
#define G_SIGNAL_FLAGS_MASK 0x1ff	# A mask for all GSignalFlags bits.
#define G_CLOSURE_NEEDS_MARSHAL(closure) (((GClosure*) (closure))-&gt;marshal == NULL)	# Check if the closure still needs a marshaller. See g_closure_set_marshal().
	closure		# a GClosure
	return:		#  TRUE if a GClosureMarshal marshaller has not yet been set onclosure. 
#define G_CLOSURE_N_NOTIFIERS(cl)	# Get the total number of notifiers connected with the closure cl. The count includes the meta marshaller, the finalize and invalidate notifiers and the marshal guards. Note that each guard counts as two notifiers. See g_closure_set_meta_marshal(), g_closure_add_finalize_notifier(),g_closure_add_invalidate_notifier() and g_closure_add_marshal_guards().
	cl		# a GClosure
	return:		#  number of notifiers 
#define G_CCLOSURE_SWAP_DATA(cclosure)	 (((GClosure*) (cclosure))-&gt;derivative_flag)	# Checks whether the user data of the GCClosure should be passed as thefirst parameter to the callback. See g_cclosure_new_swap().
	cclosure		# a GCClosure
	return:		#  TRUE if data has to be swapped. 
#define G_CALLBACK(f)			 ((GCallback) (f))	# Cast a function pointer to a GCallback.
	f		# a function pointer.
#define G_TYPE_CLOSURE (g_closure_get_type ())	# The GType for GClosure.
#define g_cclosure_marshal_BOOL__FLAGS	# An old alias for g_cclosure_marshal_BOOLEAN__FLAGS().
	closure		# A GClosure.
	return_value		# A GValue to store the return value. May be NULLif the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument tog_closure_invoke().
	marshal_data		# Additional data specified when registering themarshaller, see g_closure_set_marshal() andg_closure_set_meta_marshal()
#define g_cclosure_marshal_BOOL__BOXED_BOXED	# An old alias for g_cclosure_marshal_BOOLEAN__BOXED_BOXED().
	closure		# A GClosure.
	return_value		# A GValue to store the return value. May be NULLif the callback of closure doesn't return a value.
	n_param_values		# The length of the param_valuesarray.
	param_values		# An array of GValues holding the argumentson which to invoke the callback of closure.
	invocation_hint		# The invocation hint given as the last argument tog_closure_invoke().
	marshal_data		# Additional data specified when registering themarshaller, see g_closure_set_marshal() andg_closure_set_meta_marshal()
enum GTypeDebugFlags	# <code class="literal">GTypeDebugFlags has been deprecated since version 2.36 and should not be used in newly-written code.
	G_TYPE_DEBUG_NONE	# Print no messages
	G_TYPE_DEBUG_OBJECTS	# Print messages about object bookkeeping
	G_TYPE_DEBUG_SIGNALS	# Print messages about signal emissions
	G_TYPE_DEBUG_INSTANCE_COUNT	# Keep a count of instances of each type
	G_TYPE_DEBUG_MASK	# Mask covering all debug flags
enum GTypeFlags	# Bit masks used to check or determine characteristics of a type.
	G_TYPE_FLAG_ABSTRACT	# Indicates an abstract type. No instances can be created for an abstract type
	G_TYPE_FLAG_VALUE_ABSTRACT	# Indicates an abstract value type, i.e. a type that introduces a value table, but can't be used for g_value_init()
enum GTypeFundamentalFlags	# Bit masks used to check or determine specific characteristics of afundamental type.
	G_TYPE_FLAG_CLASSED	# Indicates a classed type
	G_TYPE_FLAG_INSTANTIATABLE	# Indicates an instantiable type (implies classed)
	G_TYPE_FLAG_DERIVABLE	# Indicates a flat derivable type
	G_TYPE_FLAG_DEEP_DERIVABLE	# Indicates a deep derivable type (implies derivable)
enum GParamFlags	# Through the <span class="type">GParamFlags</span></a> flag values, certain aspects of parameterscan be configured. See also <span class="type">G_PARAM_STATIC_STRINGS</span></a>.
	G_PARAM_READABLE	# the parameter is readable
	G_PARAM_WRITABLE	# the parameter is writable
	G_PARAM_READWRITE	# G_PARAM_READABLE | <code class="literal">G_PARAM_WRITABLE
	G_PARAM_CONSTRUCT	# the parameter will be set upon object construction
	G_PARAM_CONSTRUCT_ONLY	# the parameter can only be set upon object construction
	G_PARAM_LAX_VALIDATION	# upon parameter conversion (see g_param_value_convert()) strict validation is not required
	G_PARAM_STATIC_NAME	# the string used as name when constructing the  parameter is guaranteed to remain valid and unmodified for the lifetime of the parameter.  Since 2.8
	G_PARAM_PRIVATE	# internal
	G_PARAM_STATIC_NICK	# the string used as nick when constructing the parameter is guaranteed to remain valid and unmmodified for the lifetime of the parameter. Since 2.8
	G_PARAM_STATIC_BLURB	# the string used as blurb when constructing the  parameter is guaranteed to remain valid and  unmodified for the lifetime of the parameter.  Since 2.8
	G_PARAM_EXPLICIT_NOTIFY	# calls to g_object_set_property() for this  property will not automatically result in a "notify" signal being  emitted: the implementation must call g_object_notify() themselves  in case the property actually changes.  Since: 2.42.
	G_PARAM_DEPRECATED	# the parameter is deprecated and will be removed in a future version. A warning will be generated if it is used while running with G_ENABLE_DIAGNOSTIC=1. Since 2.26
enum GSignalFlags	# The signal flags are used to specify a signal's behaviour, the overallsignal description outlines how especially the RUN flags control thestages of a signal emission.
	G_SIGNAL_RUN_FIRST	# Invoke the object method handler in the first emission stage.
	G_SIGNAL_RUN_LAST	# Invoke the object method handler in the third emission stage.
	G_SIGNAL_RUN_CLEANUP	# Invoke the object method handler in the last emission stage.
	G_SIGNAL_NO_RECURSE	# Signals being emitted for an object while currently being in emission for this very object will not be emitted recursively, but instead cause the first emission to be restarted.
	G_SIGNAL_DETAILED	# This signal supports "::detail" appendices to the signal name upon handler connections and emissions.
	G_SIGNAL_ACTION	# Action signals are signals that may freely be emitted on alive objects from user code via g_signal_emit() and friends, without the need of being embedded into extra code that performs pre or post emission adjustments on the object. They can also be thought of as object methods which can be called generically by  third-party code.
	G_SIGNAL_NO_HOOKS	# No emissions hooks are supported for this signal.
	G_SIGNAL_MUST_COLLECT	# Varargs signal emission will always collect the  arguments, even if there are no signal handlers connected.  Since 2.30.
	G_SIGNAL_DEPRECATED	# The signal is deprecated and will be removed  in a future version. A warning will be generated if it is connected while  running with G_ENABLE_DIAGNOSTIC=1.  Since 2.32.
enum GSignalMatchType	# The match types specify what g_signal_handlers_block_matched()</a>,g_signal_handlers_unblock_matched()</a> and g_signal_handlers_disconnect_matched()</a>match signals by.
	G_SIGNAL_MATCH_ID	# The signal id must be equal.
	G_SIGNAL_MATCH_DETAIL	# The signal detail be equal.
	G_SIGNAL_MATCH_CLOSURE	# The closure must be the same.
	G_SIGNAL_MATCH_FUNC	# The C closure callback must be the same.
	G_SIGNAL_MATCH_DATA	# The closure data must be the same.
	G_SIGNAL_MATCH_UNBLOCKED	# Only unblocked signals may matched.
enum GConnectFlags	# The connection flags are used to specify the behaviour of a signal's connection.
	G_CONNECT_AFTER	# whether the handler should be called before or after the  default handler of the signal.
	G_CONNECT_SWAPPED	# whether the instance and data should be swapped when calling the handler; see g_signal_connect_swapped() for an example.
enum GBindingFlags	# Flags to be passed to g_object_bind_property()</a> org_object_bind_property_full()</a>.
	G_BINDING_DEFAULT	# The default binding; if the source property  changes, the target property is updated with its value.
	G_BINDING_BIDIRECTIONAL	# Bidirectional binding; if either the  property of the source or the property of the target changes,  the other is updated.
	G_BINDING_SYNC_CREATE	# Synchronize the values of the source and  target properties when creating the binding; the direction of  the synchronization is always from the source to the target.
	G_BINDING_INVERT_BOOLEAN	# TRUE will result in the other being  set to <code class="literal">FALSE and vice versa. This flag will only work for  boolean properties, and cannot be used when passing custom  transformation functions to g_object_bind_property_full().
